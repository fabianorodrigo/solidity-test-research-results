,{
  "2020-11-12T11:54:07.551ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[69,164,234,191,214,9,217,85,112,83,185,67,110,115,213,143,130,222,245,55,19,236,117,93,60,33,218,106,125,14,169,187]",
              "sol": "stringToBytes32(\"69,164,234,191,214,9,217,85,112,83,185,67,110,115,213,143,130,222,245,55,19,236,117,93,60,33,218,106,125,14,169,187\")"
            },
            {
              "js": "[24,235,122,121,137,117,32,72,97,179,191,122,123,172,226,250,84,27,214,41,235,5,32,114,60,2,245,108,84,223,48,139,77,163,176,201,25,102,95,84,116,71,123,80,70,78,44,242,81,38,47,169,46,140,185,251,98,141,31,153,198,25,17,158,79,24]",
              "sol": "abi.encode(\"24,235,122,121,137,117,32,72,97,179,191,122,123,172,226,250,84,27,214,41,235,5,32,114,60,2,245,108,84,223,48,139,77,163,176,201,25,102,95,84,116,71,123,80,70,78,44,242,81,38,47,169,46,140,185,251,98,141,31,153,198,25,17,158,79,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[129,63,197,114,241,104,116,179,60,71,138,88,81,19,78,220,129,238,144,130,18,4,167,152,106,88,143,179,189,66,158,143]",
              "sol": "stringToBytes32(\"129,63,197,114,241,104,116,179,60,71,138,88,81,19,78,220,129,238,144,130,18,4,167,152,106,88,143,179,189,66,158,143\")"
            },
            {
              "js": "[207,94,68,31,9,4,10,21,171,246,27,21,19,79,129,240,151,98,243,30,145,192,194,72,133,222,3,251,192,95,175,183,179,24,119,101,203,91,114,62,223,255,85,24,81,101,149,184,82,242,131,179,191,165,145,206,255,64,119,14,104,250,128,97,255]",
              "sol": "abi.encode(\"207,94,68,31,9,4,10,21,171,246,27,21,19,79,129,240,151,98,243,30,145,192,194,72,133,222,3,251,192,95,175,183,179,24,119,101,203,91,114,62,223,255,85,24,81,101,149,184,82,242,131,179,191,165,145,206,255,64,119,14,104,250,128,97,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.552ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[42,206,114,211,109,156,180,168,29,178,245,52,81,119,219,41,191,49,199,44,101,187,105,250,227,81,74,40,18,128,230,112]",
              "sol": "stringToBytes32(\"42,206,114,211,109,156,180,168,29,178,245,52,81,119,219,41,191,49,199,44,101,187,105,250,227,81,74,40,18,128,230,112\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.552ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[61,111,227,245,101,223,230,66,153,168,115,28,92,197,204,237,161,102,40,2,62,231,6,176,183,6,222,35,11,158,152,139]",
              "sol": "stringToBytes32(\"61,111,227,245,101,223,230,66,153,168,115,28,92,197,204,237,161,102,40,2,62,231,6,176,183,6,222,35,11,158,152,139\")"
            },
            {
              "js": "[65,194,199,185,130,72,156,19,117,190,176,233,149,246,249,130,147,115,88,60,138,89,216,94,79,73,190,193,220,166,123,171]",
              "sol": "abi.encode(\"65,194,199,185,130,72,156,19,117,190,176,233,149,246,249,130,147,115,88,60,138,89,216,94,79,73,190,193,220,166,123,171\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.553ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 101,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(101,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.554ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.554ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 66,\"wallet\": accounts[2]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[58,49,246,76,96,244,64,235,254,191,249,111,226,249,248,242,196,73,173,29,96,250,97,79,226,203,196,23,186,99,1,46]",
              "sol": "abi.encode(\"58,49,246,76,96,244,64,235,254,191,249,111,226,249,248,242,196,73,173,29,96,250,97,79,226,203,196,23,186,99,1,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T11:54:07.554ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 99,\"bidder\": {\"userId\": 65,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(99,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[2,205,236,252,195,91,231,165,79,2,252,75,82,94,198,211,198,109,127,41,13,214,95,208,152,64,30,232,155,42,178,131]",
              "sol": "abi.encode(\"2,205,236,252,195,91,231,165,79,2,252,75,82,94,198,211,198,109,127,41,13,214,95,208,152,64,30,232,155,42,178,131\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}