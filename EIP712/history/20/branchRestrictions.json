,{
  "2020-11-12T04:42:09.852ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[182,210,52,169,251,155,227,51,245,162,98,23,213,42,12,122,81,240,225,30,166,142,76,164,62,227,54,120,163,121,61,73]",
              "sol": "stringToBytes32(\"182,210,52,169,251,155,227,51,245,162,98,23,213,42,12,122,81,240,225,30,166,142,76,164,62,227,54,120,163,121,61,73\")"
            },
            {
              "js": "[114,191]",
              "sol": "abi.encode(\"114,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[255,184,228,179,228,63,128,166,163,209,250,229,224,229,206,204,129,13,251,149,206,157,48,224,23,157,34,101,148,146,243,192]",
              "sol": "stringToBytes32(\"255,184,228,179,228,63,128,166,163,209,250,229,224,229,206,204,129,13,251,149,206,157,48,224,23,157,34,101,148,146,243,192\")"
            },
            {
              "js": "[57,64,182,42,109,242,42,8,232,147,228,105,252,208,194,65,183,120,138,154,41,246,2,96,63,229,94,112,60,221,233,237,161,151,138,110,116,155,38,148,200,139,12,105,205,177,45,94,10,57,182,152,235,144,25,228,66,98,157,191,128,139,50,127,116]",
              "sol": "abi.encode(\"57,64,182,42,109,242,42,8,232,147,228,105,252,208,194,65,183,120,138,154,41,246,2,96,63,229,94,112,60,221,233,237,161,151,138,110,116,155,38,148,200,139,12,105,205,177,45,94,10,57,182,152,235,144,25,228,66,98,157,191,128,139,50,127,116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.854ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[47,114,255,121,72,71,95,122,3,68,116,99,136,7,45,187,90,175,107,71,106,209,144,218,159,233,116,216,27,172,215,104]",
              "sol": "stringToBytes32(\"47,114,255,121,72,71,95,122,3,68,116,99,136,7,45,187,90,175,107,71,106,209,144,218,159,233,116,216,27,172,215,104\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.854ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[246,38,69,104,38,225,18,56,48,229,197,242,68,213,32,58,42,132,40,170,12,67,169,152,203,2,75,119,101,40,114,197]",
              "sol": "stringToBytes32(\"246,38,69,104,38,225,18,56,48,229,197,242,68,213,32,58,42,132,40,170,12,67,169,152,203,2,75,119,101,40,114,197\")"
            },
            {
              "js": "[193,250,204,206,242,181,210,249,54,113,126,107,92,0,221,230,48,101,161,78,27,188,18,11,97,199,129,104,237,182,230,146]",
              "sol": "abi.encode(\"193,250,204,206,242,181,210,249,54,113,126,107,92,0,221,230,48,101,161,78,27,188,18,11,97,199,129,104,237,182,230,146\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.856ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 323,\"bidder\": {\"userId\": 99,\"wallet\": accounts[4]}}",
              "sol": "SignatureVerifier.Bid(323,SignatureVerifier.Identity(99,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.857ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.857ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 28,\"bidder\": {\"userId\": 64,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(28,SignatureVerifier.Identity(64,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[252,61,232,254,153,84,63,35,85,103,25,94,134,112,203,108,94,237,176,119,197,119,226,33,151,172,191,0,238,110,41,206]",
              "sol": "abi.encode(\"252,61,232,254,153,84,63,35,85,103,25,94,134,112,203,108,94,237,176,119,197,119,226,33,151,172,191,0,238,110,41,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:42:09.858ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 26,\"bidder\": {\"userId\": 26,\"wallet\": accounts[0]}}",
              "sol": "SignatureVerifier.Bid(26,SignatureVerifier.Identity(26,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[217,166,251,234,53,94,113,67,41,214,208,227,225,98,90,154,249,3,247,234,211,63,39,39,163,207,176,45,125,45,207,79]",
              "sol": "abi.encode(\"217,166,251,234,53,94,113,67,41,214,208,227,225,98,90,154,249,3,247,234,211,63,39,39,163,207,176,45,125,45,207,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}