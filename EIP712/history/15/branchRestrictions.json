,{
  "2020-11-11T15:41:24.508ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[107,143,94,75,18,82,129,143,34,230,136,185,88,1,253,130,199,243,243,37,147,14,236,253,104,14,191,68,179,52,241,93]",
              "sol": "stringToBytes32(\"107,143,94,75,18,82,129,143,34,230,136,185,88,1,253,130,199,243,243,37,147,14,236,253,104,14,191,68,179,52,241,93\")"
            },
            {
              "js": "[39,188,143,31,137,56,72,164,248,83,24,170,2,127,199,196,54,178,17,11,62,14,47,104,226,106,32,202]",
              "sol": "abi.encode(\"39,188,143,31,137,56,72,164,248,83,24,170,2,127,199,196,54,178,17,11,62,14,47,104,226,106,32,202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[104,105,17,69,106,207,181,14,71,122,64,117,105,179,190,207,200,107,9,48,37,231,236,202,35,162,146,244,58,204,173,218]",
              "sol": "stringToBytes32(\"104,105,17,69,106,207,181,14,71,122,64,117,105,179,190,207,200,107,9,48,37,231,236,202,35,162,146,244,58,204,173,218\")"
            },
            {
              "js": "[9,100,124,215,203,231,13,89,41,137,24,167,207,0,20,220,102,195,255,166,139,254,180,68,5,22,49,63,55,136,212,131,180,38,88,145,179,75,237,67,4,18,162,91,158,96,166,0,164,83,122,213,35,87,189,164,178,193,26,147,153,140,118,73,139]",
              "sol": "abi.encode(\"9,100,124,215,203,231,13,89,41,137,24,167,207,0,20,220,102,195,255,166,139,254,180,68,5,22,49,63,55,136,212,131,180,38,88,145,179,75,237,67,4,18,162,91,158,96,166,0,164,83,122,213,35,87,189,164,178,193,26,147,153,140,118,73,139\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.510ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[14,81,233,86,212,186,68,39,102,85,237,229,180,72,67,112,95,58,181,242,240,56,34,105,146,83,134,24,126,87,235,135]",
              "sol": "stringToBytes32(\"14,81,233,86,212,186,68,39,102,85,237,229,180,72,67,112,95,58,181,242,240,56,34,105,146,83,134,24,126,87,235,135\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.510ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[110,108,250,76,158,6,213,230,137,254,140,248,140,226,98,142,74,71,11,86,15,215,249,159,90,160,139,16,160,165,95,57]",
              "sol": "stringToBytes32(\"110,108,250,76,158,6,213,230,137,254,140,248,140,226,98,142,74,71,11,86,15,215,249,159,90,160,139,16,160,165,95,57\")"
            },
            {
              "js": "[215,30,203,5,79,237,188,232,209,10,2,125,39,219,166,164,58,137,228,182,241,175,162,57,88,195,168,172,229,249,217,90]",
              "sol": "abi.encode(\"215,30,203,5,79,237,188,232,209,10,2,125,39,219,166,164,58,137,228,182,241,175,162,57,88,195,168,172,229,249,217,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.511ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 28,\"wallet\": accounts[0]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(28,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.512ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.512ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 0,\"bidder\": {\"userId\": 101,\"wallet\": accounts[6]}}",
              "sol": "SignatureVerifier.Bid(0,SignatureVerifier.Identity(101,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[46,41,10,215,241,12,169,228,49,210,114,14,45,191,97,123,9,109,36,216,225,25,191,173,190,246,203,217,3,250,138,236]",
              "sol": "abi.encode(\"46,41,10,215,241,12,169,228,49,210,114,14,45,191,97,123,9,109,36,216,225,25,191,173,190,246,203,217,3,250,138,236\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:41:24.513ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 65,\"bidder\": {\"userId\": 100,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(65,SignatureVerifier.Identity(100,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[152,239,227,116,17,59,241,231,184,97,23,57,232,141,130,172,210,101,70,138,223,167,85,24,63,192,170,133,3,175,177,114]",
              "sol": "abi.encode(\"152,239,227,116,17,59,241,231,184,97,23,57,232,141,130,172,210,101,70,138,223,167,85,24,63,192,170,133,3,175,177,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}