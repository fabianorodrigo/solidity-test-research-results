,{
  "2020-11-12T08:43:31.632ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[201,55,159,167,153,43,10,230,63,199,178,226,248,165,211,224,114,155,252,178,115,76,90,133,139,250,4,24,159,237,195,65]",
              "sol": "stringToBytes32(\"201,55,159,167,153,43,10,230,63,199,178,226,248,165,211,224,114,155,252,178,115,76,90,133,139,250,4,24,159,237,195,65\")"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[252,45,21,17,192,68,253,92,152,221,225,137,213,100,42,30,90,40,225,7,237,63,165,117,96,99,57,25,201,0,217,67]",
              "sol": "stringToBytes32(\"252,45,21,17,192,68,253,92,152,221,225,137,213,100,42,30,90,40,225,7,237,63,165,117,96,99,57,25,201,0,217,67\")"
            },
            {
              "js": "[244,55,169,62,61,45,137,249,38,95,137,8,66,68,137,234,41,54,73,86,202,113,28,17,158,37,143,28,142,221,144,79,24,110,151,154,54,19,203,7,169,97,138,60,23,206,165,99,149,19,34,223,61,33,68,214,179,211,141,234,238,139,59,226,247]",
              "sol": "abi.encode(\"244,55,169,62,61,45,137,249,38,95,137,8,66,68,137,234,41,54,73,86,202,113,28,17,158,37,143,28,142,221,144,79,24,110,151,154,54,19,203,7,169,97,138,60,23,206,165,99,149,19,34,223,61,33,68,214,179,211,141,234,238,139,59,226,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.634ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[184,77,103,88,142,184,172,192,182,90,248,193,132,43,28,65,252,98,135,169,128,186,106,41,68,127,222,123,216,22,100,133]",
              "sol": "stringToBytes32(\"184,77,103,88,142,184,172,192,182,90,248,193,132,43,28,65,252,98,135,169,128,186,106,41,68,127,222,123,216,22,100,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.634ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[107,220,236,178,100,71,81,249,112,182,94,25,132,146,91,50,125,184,48,13,108,86,150,200,57,227,208,216,248,239,223,50]",
              "sol": "stringToBytes32(\"107,220,236,178,100,71,81,249,112,182,94,25,132,146,91,50,125,184,48,13,108,86,150,200,57,227,208,216,248,239,223,50\")"
            },
            {
              "js": "[172,192,211,1,72,231,46,238,6,53,172,8,129,148,11,255,231,196,7,87,30,116,243,124,128,236,58,140,214,80,196,54]",
              "sol": "abi.encode(\"172,192,211,1,72,231,46,238,6,53,172,8,129,148,11,255,231,196,7,87,30,116,243,124,128,236,58,140,214,80,196,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.635ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 101,\"bidder\": {\"userId\": 66,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(101,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.635ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.636ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 27,\"bidder\": {\"userId\": 66,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(27,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[50,36,59,76,103,94,238,118,75,211,183,4,94,98,202,61,200,33,106,38,63,112,66,243,251,190,185,211,239,197,251,94]",
              "sol": "abi.encode(\"50,36,59,76,103,94,238,118,75,211,183,4,94,98,202,61,200,33,106,38,63,112,66,243,251,190,185,211,239,197,251,94\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T08:43:31.636ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 2,\"bidder\": {\"userId\": 66,\"wallet\": accounts[7]}}",
              "sol": "SignatureVerifier.Bid(2,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[158,35,25,29,53,233,236,59,14,225,186,143,11,183,192,45,88,158,123,131,131,106,20,175,96,3,247,145,36,85,71,73]",
              "sol": "abi.encode(\"158,35,25,29,53,233,236,59,14,225,186,143,11,183,192,45,88,158,123,131,131,106,20,175,96,3,247,145,36,85,71,73\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}