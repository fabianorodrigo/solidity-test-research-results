,{
  "2020-11-11T19:43:44.786ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[57,81,191,9,190,138,97,203,229,126,123,130,15,101,144,2,175,161,86,16,85,165,234,165,137,100,158,223,243,116,103,176]",
              "sol": "stringToBytes32(\"57,81,191,9,190,138,97,203,229,126,123,130,15,101,144,2,175,161,86,16,85,165,234,165,137,100,158,223,243,116,103,176\")"
            },
            {
              "js": "[243,198,244,47,14,201,41,56,156,192,218,125,116,81,104,208,64,100,122,105,200,149,148,158,60,54,37]",
              "sol": "abi.encode(\"243,198,244,47,14,201,41,56,156,192,218,125,116,81,104,208,64,100,122,105,200,149,148,158,60,54,37\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[31,206,87,216,48,181,23,117,132,202,97,91,1,138,100,175,62,49,199,77,232,197,134,227,58,210,125,190,22,229,43,45]",
              "sol": "stringToBytes32(\"31,206,87,216,48,181,23,117,132,202,97,91,1,138,100,175,62,49,199,77,232,197,134,227,58,210,125,190,22,229,43,45\")"
            },
            {
              "js": "[164,231,249,244,211,189,171,96,150,160,110,91,50,211,199,88,28,12,236,169,173,78,154,145,83,2,168,70,254,226,36,191,28,124,156,29,111,193,204,143,137,118,182,125,39,179,103,152,191,82,117,104,99,6,144,149,41,16,27,248,128,212,169,202,237]",
              "sol": "abi.encode(\"164,231,249,244,211,189,171,96,150,160,110,91,50,211,199,88,28,12,236,169,173,78,154,145,83,2,168,70,254,226,36,191,28,124,156,29,111,193,204,143,137,118,182,125,39,179,103,152,191,82,117,104,99,6,144,149,41,16,27,248,128,212,169,202,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.787ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[250,176,79,205,132,202,103,236,134,125,104,176,56,45,55,141,231,194,213,187,72,46,55,132,228,22,126,160,19,22,132,231]",
              "sol": "stringToBytes32(\"250,176,79,205,132,202,103,236,134,125,104,176,56,45,55,141,231,194,213,187,72,46,55,132,228,22,126,160,19,22,132,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.787ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[173,205,128,161,90,212,40,167,62,229,31,19,106,94,202,183,199,90,141,85,120,250,217,137,251,164,248,181,85,50,157,53]",
              "sol": "stringToBytes32(\"173,205,128,161,90,212,40,167,62,229,31,19,106,94,202,183,199,90,141,85,120,250,217,137,251,164,248,181,85,50,157,53\")"
            },
            {
              "js": "[157,51,244,39,222,103,181,139,12,75,165,216,16,235,20,141,83,97,181,156,21,186,52,87,162,131,79,180,235,108,134,123]",
              "sol": "abi.encode(\"157,51,244,39,222,103,181,139,12,75,165,216,16,235,20,141,83,97,181,156,21,186,52,87,162,131,79,180,235,108,134,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.788ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 1,\"bidder\": {\"userId\": 66,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(1,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.789ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.789ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 26,\"bidder\": {\"userId\": 1,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(26,SignatureVerifier.Identity(1,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[166,129,110,207,12,40,178,16,207,72,73,99,68,171,64,206,167,237,109,128,62,63,92,92,191,83,223,13,24,230,89,196]",
              "sol": "abi.encode(\"166,129,110,207,12,40,178,16,207,72,73,99,68,171,64,206,167,237,109,128,62,63,92,92,191,83,223,13,24,230,89,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:43:44.790ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 99,\"bidder\": {\"userId\": 1,\"wallet\": accounts[4]}}",
              "sol": "SignatureVerifier.Bid(99,SignatureVerifier.Identity(1,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[179,130,92,156,62,32,89,203,197,249,4,208,67,144,144,2,165,63,197,64,162,197,231,180,122,206,74,234,78,226,215,21]",
              "sol": "abi.encode(\"179,130,92,156,62,32,89,203,197,249,4,208,67,144,144,2,165,63,197,64,162,197,231,180,122,206,74,234,78,226,215,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}