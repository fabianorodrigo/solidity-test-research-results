,{
  "2020-11-10T04:17:34.475ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[132,208,190,233,134,93,247,37,46,59,252,154,171,188,113,131,93,210,213,23,191,73,57,164,136,139,86,153,17,42,200,54]",
              "sol": "stringToBytes32(\"132,208,190,233,134,93,247,37,46,59,252,154,171,188,113,131,93,210,213,23,191,73,57,164,136,139,86,153,17,42,200,54\")"
            },
            {
              "js": "[134,167,17,77,25,39,0,20,63,108,5,171,21,205,84,244,68,84,137,215,55,147,21,79,246,113,160,135,184,11,238,204,58,220,207,113,7,215,116,67,203,21,63,238,37,153,114,125,95,141,167,54,88,102,184,223,32,239,182,111,155,136,97,100,200,151,90,194,4,42,9,170,171,47,74,6,46,45,153,210,126,144,205,234,230,161,15,20,220,37,147,212,236,3,14,22,127,141,34,216]",
              "sol": "abi.encode(\"134,167,17,77,25,39,0,20,63,108,5,171,21,205,84,244,68,84,137,215,55,147,21,79,246,113,160,135,184,11,238,204,58,220,207,113,7,215,116,67,203,21,63,238,37,153,114,125,95,141,167,54,88,102,184,223,32,239,182,111,155,136,97,100,200,151,90,194,4,42,9,170,171,47,74,6,46,45,153,210,126,144,205,234,230,161,15,20,220,37,147,212,236,3,14,22,127,141,34,216\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[231,16,217,54,91,99,28,39,98,43,218,25,74,175,184,245,65,82,171,228,157,190,161,135,117,14,105,14,144,57,21,191]",
              "sol": "stringToBytes32(\"231,16,217,54,91,99,28,39,98,43,218,25,74,175,184,245,65,82,171,228,157,190,161,135,117,14,105,14,144,57,21,191\")"
            },
            {
              "js": "[110,7,54,201,8,195,40,219,70,97,224,168,75,200,131,222,219,144,208,22,104,176,150,139,18,247,220,50,156,172,105,225,63,173,156,4,83,216,65,69,139,40,187,200,99,121,72,130,169,183,116,126,147,72,47,176,31,16,35,20,3,251,74,212,231]",
              "sol": "abi.encode(\"110,7,54,201,8,195,40,219,70,97,224,168,75,200,131,222,219,144,208,22,104,176,150,139,18,247,220,50,156,172,105,225,63,173,156,4,83,216,65,69,139,40,187,200,99,121,72,130,169,183,116,126,147,72,47,176,31,16,35,20,3,251,74,212,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.476ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[20,156,214,191,184,156,137,241,98,32,51,85,195,24,76,183,153,129,168,50,43,191,72,21,115,251,157,175,124,167,161,68]",
              "sol": "stringToBytes32(\"20,156,214,191,184,156,137,241,98,32,51,85,195,24,76,183,153,129,168,50,43,191,72,21,115,251,157,175,124,167,161,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.476ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[81,82,120,249,23,111,41,43,126,253,199,4,49,17,72,212,179,67,22,104,184,112,224,25,19,243,216,79,133,133,81,163]",
              "sol": "stringToBytes32(\"81,82,120,249,23,111,41,43,126,253,199,4,49,17,72,212,179,67,22,104,184,112,224,25,19,243,216,79,133,133,81,163\")"
            },
            {
              "js": "[238,118,130,192,184,34,181,229,215,12,192,32,10,146,159,34,192,95,245,101,220,89,246,179,15,20,213,143,185,72,249,17]",
              "sol": "abi.encode(\"238,118,130,192,184,34,181,229,215,12,192,32,10,146,159,34,192,95,245,101,220,89,246,179,15,20,213,143,185,72,249,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.477ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 324,\"bidder\": {\"userId\": 99,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(324,SignatureVerifier.Identity(99,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.478ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.478ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 1,\"bidder\": {\"userId\": 28,\"wallet\": accounts[2]}}",
              "sol": "SignatureVerifier.Bid(1,SignatureVerifier.Identity(28,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[186,236,61,70,144,244,186,55,20,185,32,61,75,2,72,160,135,223,208,153,164,110,38,48,95,54,209,115,82,166,241,196]",
              "sol": "abi.encode(\"186,236,61,70,144,244,186,55,20,185,32,61,75,2,72,160,135,223,208,153,164,110,38,48,95,54,209,115,82,166,241,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:17:34.478ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 26,\"bidder\": {\"userId\": 2,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(26,SignatureVerifier.Identity(2,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[254,46,133,220,47,217,182,223,33,61,49,165,136,133,166,236,46,229,28,66,64,171,102,234,69,164,242,130,61,95,7,13]",
              "sol": "abi.encode(\"254,46,133,220,47,217,182,223,33,61,49,165,136,133,166,236,46,229,28,66,64,171,102,234,69,164,242,130,61,95,7,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}