,{
  "2020-11-10T06:34:15.559ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[171,224,34,13,105,120,77,37,54,68,175,127,228,119,243,65,128,101,35,182,234,90,21,239,211,226,108,198,118,44,92,70]",
              "sol": "stringToBytes32(\"171,224,34,13,105,120,77,37,54,68,175,127,228,119,243,65,128,101,35,182,234,90,21,239,211,226,108,198,118,44,92,70\")"
            },
            {
              "js": "[6,116]",
              "sol": "abi.encode(\"6,116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[193,84,142,39,110,160,85,109,141,117,250,222,147,54,110,229,184,148,56,207,50,105,202,159,224,218,245,233,224,105,214,84]",
              "sol": "stringToBytes32(\"193,84,142,39,110,160,85,109,141,117,250,222,147,54,110,229,184,148,56,207,50,105,202,159,224,218,245,233,224,105,214,84\")"
            },
            {
              "js": "[101,231,71,76,115,30,20,161,221,202,136,128,68,8,45,57,251,248,32,234,96,183,4,117,25,156,59,127,231,7,135,233,219,128,203,147,161,145,61,208,97,93,79,230,36,13,195,163,248,160,131,182,214,213,128,248,192,101,87,118,220,241,13,149,18]",
              "sol": "abi.encode(\"101,231,71,76,115,30,20,161,221,202,136,128,68,8,45,57,251,248,32,234,96,183,4,117,25,156,59,127,231,7,135,233,219,128,203,147,161,145,61,208,97,93,79,230,36,13,195,163,248,160,131,182,214,213,128,248,192,101,87,118,220,241,13,149,18\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.561ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[30,32,92,200,11,211,167,118,253,168,193,22,136,19,98,29,253,33,170,134,138,243,180,48,110,218,185,85,175,32,70,17]",
              "sol": "stringToBytes32(\"30,32,92,200,11,211,167,118,253,168,193,22,136,19,98,29,253,33,170,134,138,243,180,48,110,218,185,85,175,32,70,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.561ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[181,32,251,183,97,236,70,27,61,85,238,101,101,44,48,244,254,224,107,196,187,22,185,70,94,97,134,147,134,21,123,75]",
              "sol": "stringToBytes32(\"181,32,251,183,97,236,70,27,61,85,238,101,101,44,48,244,254,224,107,196,187,22,185,70,94,97,134,147,134,21,123,75\")"
            },
            {
              "js": "[114,71,19,243,58,177,150,76,76,193,173,210,27,15,170,114,58,160,64,195,206,93,32,213,26,109,2,23,157,171,241,203]",
              "sol": "abi.encode(\"114,71,19,243,58,177,150,76,76,193,173,210,27,15,170,114,58,160,64,195,206,93,32,213,26,109,2,23,157,171,241,203\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.562ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 1,\"bidder\": {\"userId\": 29,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(1,SignatureVerifier.Identity(29,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.563ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.564ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 99,\"bidder\": {\"userId\": 101,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(99,SignatureVerifier.Identity(101,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[89,4,167,113,89,134,1,250,30,80,174,221,10,47,138,178,191,199,193,14,252,194,190,45,28,165,111,210,163,186,234,154]",
              "sol": "abi.encode(\"89,4,167,113,89,134,1,250,30,80,174,221,10,47,138,178,191,199,193,14,252,194,190,45,28,165,111,210,163,186,234,154\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T06:34:15.565ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 100,\"bidder\": {\"userId\": 66,\"wallet\": accounts[0]}}",
              "sol": "SignatureVerifier.Bid(100,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[254,232,190,157,113,46,142,159,185,180,191,80,254,99,110,239,235,194,198,57,78,184,219,73,153,72,4,127,220,223,180,28]",
              "sol": "abi.encode(\"254,232,190,157,113,46,142,159,185,180,191,80,254,99,110,239,235,194,198,57,78,184,219,73,153,72,4,127,220,223,180,28\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}