,{
  "2020-11-11T07:10:25.226ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[97,122,181,194,201,69,119,179,213,251,101,63,121,109,243,222,146,136,222,159,109,179,83,143,53,11,31,200,61,93,215,222]",
              "sol": "stringToBytes32(\"97,122,181,194,201,69,119,179,213,251,101,63,121,109,243,222,146,136,222,159,109,179,83,143,53,11,31,200,61,93,215,222\")"
            },
            {
              "js": "[183,120,173,117,10,73,70,231,219,234,170,46,97,187,94,59,162,184,23,24,34,24,45,56,14,147,217,196,80,252,162,217,250,212,240,101,184,242,222,246,24,4,186,24,141,224,166,167,65,103,186,218,208,3,107,250,80,115,74,241,206,170,240,86,137,183,110,173,135,180,7,155,205,33,34,143,71,169,147,85,70,18,3,147,235,135,208,6,108,157,37,28,23,173,226,26,46,124,234,78]",
              "sol": "abi.encode(\"183,120,173,117,10,73,70,231,219,234,170,46,97,187,94,59,162,184,23,24,34,24,45,56,14,147,217,196,80,252,162,217,250,212,240,101,184,242,222,246,24,4,186,24,141,224,166,167,65,103,186,218,208,3,107,250,80,115,74,241,206,170,240,86,137,183,110,173,135,180,7,155,205,33,34,143,71,169,147,85,70,18,3,147,235,135,208,6,108,157,37,28,23,173,226,26,46,124,234,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[52,20,146,149,23,83,102,87,114,106,145,67,100,181,143,213,140,15,75,102,153,49,62,245,231,178,194,116,219,96,245,231]",
              "sol": "stringToBytes32(\"52,20,146,149,23,83,102,87,114,106,145,67,100,181,143,213,140,15,75,102,153,49,62,245,231,178,194,116,219,96,245,231\")"
            },
            {
              "js": "[43,166,23,30,127,170,126,106,110,19,180,205,45,105,29,231,254,4,14,8,33,131,254,176,98,14,240,88,162,167,42,69,48,188,9,55,176,159,32,49,36,86,241,17,246,146,232,6,151,146,216,17,214,225,216,224,65,18,4,158,135,165,107,89,7]",
              "sol": "abi.encode(\"43,166,23,30,127,170,126,106,110,19,180,205,45,105,29,231,254,4,14,8,33,131,254,176,98,14,240,88,162,167,42,69,48,188,9,55,176,159,32,49,36,86,241,17,246,146,232,6,151,146,216,17,214,225,216,224,65,18,4,158,135,165,107,89,7\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.227ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[39,231,61,195,152,103,55,111,87,37,171,230,55,221,128,28,144,136,50,224,158,154,116,38,148,153,127,130,249,128,136,31]",
              "sol": "stringToBytes32(\"39,231,61,195,152,103,55,111,87,37,171,230,55,221,128,28,144,136,50,224,158,154,116,38,148,153,127,130,249,128,136,31\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.227ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[48,196,189,44,199,110,49,157,220,237,6,165,182,43,113,118,98,216,144,151,91,147,117,108,31,86,6,58,10,76,33,216]",
              "sol": "stringToBytes32(\"48,196,189,44,199,110,49,157,220,237,6,165,182,43,113,118,98,216,144,151,91,147,117,108,31,86,6,58,10,76,33,216\")"
            },
            {
              "js": "[103,167,141,70,60,61,25,2,48,72,160,211,224,28,51,245,0,180,32,226,236,74,56,119,128,254,234,254,125,212,213,65]",
              "sol": "abi.encode(\"103,167,141,70,60,61,25,2,48,72,160,211,224,28,51,245,0,180,32,226,236,74,56,119,128,254,234,254,125,212,213,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.228ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 66,\"bidder\": {\"userId\": 65,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(66,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.229ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.230ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 29,\"bidder\": {\"userId\": 322,\"wallet\": accounts[8]}}",
              "sol": "SignatureVerifier.Bid(29,SignatureVerifier.Identity(322,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[22,254,116,161,237,137,159,146,241,200,134,94,69,179,48,238,212,55,63,142,162,59,157,232,57,94,185,67,192,207,178,196]",
              "sol": "abi.encode(\"22,254,116,161,237,137,159,146,241,200,134,94,69,179,48,238,212,55,63,142,162,59,157,232,57,94,185,67,192,207,178,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:10:25.230ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 65,\"bidder\": {\"userId\": 65,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(65,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[251,212,102,74,217,20,134,210,107,71,202,216,17,39,20,113,133,85,234,75,171,60,129,202,209,21,186,250,249,133,169,124]",
              "sol": "abi.encode(\"251,212,102,74,217,20,134,210,107,71,202,216,17,39,20,113,133,85,234,75,171,60,129,202,209,21,186,250,249,133,169,124\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}