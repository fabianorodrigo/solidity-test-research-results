,{
  "2020-11-10T15:26:39.365ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[237,5,92,172,165,230,150,243,9,123,18,25,68,96,162,124,186,227,34,161,85,78,241,232,211,23,93,141,205,103,230,135]",
              "sol": "stringToBytes32(\"237,5,92,172,165,230,150,243,9,123,18,25,68,96,162,124,186,227,34,161,85,78,241,232,211,23,93,141,205,103,230,135\")"
            },
            {
              "js": "[123,183,230,175,0,241,117,66,102,135,144,87,71,191,142,163,208,194,109,184,150,153,49,18,248,21]",
              "sol": "abi.encode(\"123,183,230,175,0,241,117,66,102,135,144,87,71,191,142,163,208,194,109,184,150,153,49,18,248,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[153,55,77,220,253,116,104,92,95,173,51,99,15,131,11,9,236,173,127,80,66,212,101,65,72,54,44,160,255,123,202,31]",
              "sol": "stringToBytes32(\"153,55,77,220,253,116,104,92,95,173,51,99,15,131,11,9,236,173,127,80,66,212,101,65,72,54,44,160,255,123,202,31\")"
            },
            {
              "js": "[206,119,130,21,58,156,0,119,13,54,99,89,58,174,27,247,64,112,17,217,81,146,113,52,100,22,144,105,165,243,139,140,148,104,4,125,215,30,244,234,27,24,131,222,39,180,112,21,2,213,58,137,13,162,95,117,54,74,236,124,39,11,25,111,206]",
              "sol": "abi.encode(\"206,119,130,21,58,156,0,119,13,54,99,89,58,174,27,247,64,112,17,217,81,146,113,52,100,22,144,105,165,243,139,140,148,104,4,125,215,30,244,234,27,24,131,222,39,180,112,21,2,213,58,137,13,162,95,117,54,74,236,124,39,11,25,111,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.366ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[35,70,41,182,53,19,17,103,136,16,166,111,95,233,49,85,126,125,112,148,197,7,188,110,193,14,149,52,88,247,225,142]",
              "sol": "stringToBytes32(\"35,70,41,182,53,19,17,103,136,16,166,111,95,233,49,85,126,125,112,148,197,7,188,110,193,14,149,52,88,247,225,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.367ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[79,119,182,12,40,115,46,192,40,208,146,171,231,12,141,196,187,155,160,119,107,93,0,184,47,113,221,223,116,190,246,167]",
              "sol": "stringToBytes32(\"79,119,182,12,40,115,46,192,40,208,146,171,231,12,141,196,187,155,160,119,107,93,0,184,47,113,221,223,116,190,246,167\")"
            },
            {
              "js": "[16,218,180,26,234,216,201,123,205,113,250,177,20,1,159,202,35,97,253,185,96,148,1,165,16,46,2,83,231,81,100,72]",
              "sol": "abi.encode(\"16,218,180,26,234,216,201,123,205,113,250,177,20,1,159,202,35,97,253,185,96,148,1,165,16,46,2,83,231,81,100,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.367ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 324,\"bidder\": {\"userId\": 65,\"wallet\": accounts[6]}}",
              "sol": "SignatureVerifier.Bid(324,SignatureVerifier.Identity(65,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.368ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.368ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 100,\"bidder\": {\"userId\": 100,\"wallet\": accounts[9]}}",
              "sol": "SignatureVerifier.Bid(100,SignatureVerifier.Identity(100,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[175,175,123,53,0,184,95,214,9,108,224,82,210,130,35,252,216,4,218,59,165,132,252,188,10,143,97,55,240,235,147,121]",
              "sol": "abi.encode(\"175,175,123,53,0,184,95,214,9,108,224,82,210,130,35,252,216,4,218,59,165,132,252,188,10,143,97,55,240,235,147,121\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T15:26:39.369ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 99,\"bidder\": {\"userId\": 0,\"wallet\": accounts[2]}}",
              "sol": "SignatureVerifier.Bid(99,SignatureVerifier.Identity(0,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[157,31,204,77,210,195,26,17,86,0,40,20,21,148,214,241,191,132,58,135,75,45,162,217,226,136,149,103,47,83,215,180]",
              "sol": "abi.encode(\"157,31,204,77,210,195,26,17,86,0,40,20,21,148,214,241,191,132,58,135,75,45,162,217,226,136,149,103,47,83,215,180\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}