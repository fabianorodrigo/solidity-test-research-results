,{
  "2020-11-12T21:16:28.509ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[57,91,233,215,156,46,218,153,253,57,186,226,240,196,252,34,22,137,148,226,145,109,102,249,129,101,80,47,221,171,22,175]",
              "sol": "stringToBytes32(\"57,91,233,215,156,46,218,153,253,57,186,226,240,196,252,34,22,137,148,226,145,109,102,249,129,101,80,47,221,171,22,175\")"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[148,26,239,171,255,114,10,7,148,79,54,4,15,158,255,156,1,202,132,16,194,166,133,175,146,122,92,55,83,127,64,38]",
              "sol": "stringToBytes32(\"148,26,239,171,255,114,10,7,148,79,54,4,15,158,255,156,1,202,132,16,194,166,133,175,146,122,92,55,83,127,64,38\")"
            },
            {
              "js": "[204,118,160,115,199,121,104,139,41,128,235,224,85,138,100,31,23,38,158,47,37,212,228,190,1,201,171,228,135,161,250,110,215,206,94,159,238,78,211,203,39,9,99,168,73,125,233,67,134,60,33,104,139,72,192,158,151,143,20,4,163,110,144,113,118]",
              "sol": "abi.encode(\"204,118,160,115,199,121,104,139,41,128,235,224,85,138,100,31,23,38,158,47,37,212,228,190,1,201,171,228,135,161,250,110,215,206,94,159,238,78,211,203,39,9,99,168,73,125,233,67,134,60,33,104,139,72,192,158,151,143,20,4,163,110,144,113,118\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.510ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[41,96,215,70,9,76,47,231,83,6,100,185,211,202,155,163,57,198,254,191,104,202,152,80,139,66,249,69,196,100,115,117]",
              "sol": "stringToBytes32(\"41,96,215,70,9,76,47,231,83,6,100,185,211,202,155,163,57,198,254,191,104,202,152,80,139,66,249,69,196,100,115,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.511ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[192,51,151,54,116,147,236,251,191,216,249,170,178,2,174,227,153,83,152,88,7,59,21,77,8,251,187,195,96,47,67,161]",
              "sol": "stringToBytes32(\"192,51,151,54,116,147,236,251,191,216,249,170,178,2,174,227,153,83,152,88,7,59,21,77,8,251,187,195,96,47,67,161\")"
            },
            {
              "js": "[166,4,75,126,76,185,122,123,152,27,51,171,6,205,63,70,33,106,57,184,240,62,130,183,53,130,217,173,31,232,174,188]",
              "sol": "abi.encode(\"166,4,75,126,76,185,122,123,152,27,51,171,6,205,63,70,33,106,57,184,240,62,130,183,53,130,217,173,31,232,174,188\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.511ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 28,\"bidder\": {\"userId\": 1,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(28,SignatureVerifier.Identity(1,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.512ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.512ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 0,\"bidder\": {\"userId\": 101,\"wallet\": accounts[6]}}",
              "sol": "SignatureVerifier.Bid(0,SignatureVerifier.Identity(101,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[142,93,57,227,14,252,189,203,39,106,215,76,34,103,24,161,138,134,57,102,190,172,234,101,136,114,85,90,153,153,37,57]",
              "sol": "abi.encode(\"142,93,57,227,14,252,189,203,39,106,215,76,34,103,24,161,138,134,57,102,190,172,234,101,136,114,85,90,153,153,37,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:16:28.513ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 64,\"bidder\": {\"userId\": 322,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(64,SignatureVerifier.Identity(322,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[181,108,60,97,133,203,115,165,179,24,246,48,254,183,118,223,183,89,110,244,71,6,182,22,137,66,208,49,70,11,147,14]",
              "sol": "abi.encode(\"181,108,60,97,133,203,115,165,179,24,246,48,254,183,118,223,183,89,110,244,71,6,182,22,137,66,208,49,70,11,147,14\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}