{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712',
  contracts:
   { EcTools:
      { projectGraph: [Circular],
        name: 'EcTools',
        kind: 'library',
        isAbstract: false,
        functions:
         { recover:
            [ { name: 'recover',
                signature: 'recover(bytes32,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: {} } ],
           toEthereumSignedMessage:
            [ { name: 'toEthereumSignedMessage',
                signature: 'toEthereumSignedMessage(bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           prefixedRecover:
            [ { name: 'prefixedRecover',
                signature: 'prefixedRecover(bytes32,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EcTools',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'recover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthereumSignedMessage',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'prefixedRecover',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 49, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' },
     SignatureVerifier:
      { projectGraph: [Circular],
        name: 'SignatureVerifier',
        kind: 'contract',
        isAbstract: false,
        functions:
         { hashIdentity:
            [ { name: 'hashIdentity',
                signature: 'hashIdentity(SignatureVerifier.Identity)',
                isPayable: false,
                visibility: 'private',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           hashBid:
            [ { name: 'hashBid',
                signature: 'hashBid(SignatureVerifier.Bid)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           verifyHardCoded:
            [ { name: 'verifyHardCoded',
                signature: 'verifyHardCoded()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           verifySpecificWithPrefix:
            [ { name: 'verifySpecificWithPrefix',
                signature: 'verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           verifySpecificWithoutPrefix:
            [ { name: 'verifySpecificWithoutPrefix',
                signature: 'verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { chainId:
            { functionsWrite: {},
              contract: [Circular],
              name: 'chainId',
              isArray: false,
              initialValue: 1,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           verifyingContract:
            { functionsWrite: {},
              contract: [Circular],
              name: 'verifyingContract',
              isArray: false,
              initialValue: 161774172539488124409029051691695345682981322752n,
              type: 'address',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           salt:
            { functionsWrite: {},
              contract: [Circular],
              name: 'salt',
              isArray: false,
              initialValue:
               109841955370565475639945010436510886454890538232827929402961050150771112280064n,
              type: 'bytes32',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           EIP712_DOMAIN:
            { functionsWrite: {},
              contract: [Circular],
              name: 'EIP712_DOMAIN',
              isArray: false,
              initialValue:
               'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           IDENTITY_TYPE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'IDENTITY_TYPE',
              isArray: false,
              initialValue: 'Identity(uint256 userId,address wallet)',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           BID_TYPE:
            { functionsWrite: {},
              contract: [Circular],
              name: 'BID_TYPE',
              isArray: false,
              initialValue:
               'Bid(uint256 amount,Identity bidder)Identity(uint256 userId,address wallet)',
              type: 'string',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           EIP712_DOMAIN_TYPEHASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'EIP712_DOMAIN_TYPEHASH',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           IDENTITY_TYPEHASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'IDENTITY_TYPEHASH',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           BID_TYPEHASH:
            { functionsWrite: {},
              contract: [Circular],
              name: 'BID_TYPEHASH',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           DOMAIN_SEPARATOR:
            { functionsWrite: {},
              contract: [Circular],
              name: 'DOMAIN_SEPARATOR',
              isArray: false,
              initialValue: undefined,
              type: 'bytes32',
              visibility: 'private',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false } },
        dependencies:
         { EcTools:
            { projectGraph: [Circular],
              name: 'EcTools',
              kind: 'library',
              isAbstract: false,
              functions:
               { recover: [Array],
                 toEthereumSignedMessage: [Array],
                 prefixedRecover: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: false,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EcTools',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: true,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' } },
        inheritsFrom: {},
        structs:
         { Identity:
            { name: 'Identity',
              contract: [Circular],
              parameters: [ [Object], [Object] ] },
           Bid:
            { name: 'Bid',
              contract: [Circular],
              parameters: [ [Object], [Object] ] } },
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureVerifier',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StructDefinition',
                name: 'Identity',
                members: [Array],
                loc: [Object],
                parentName: 'SignatureVerifier' },
              { type: 'StructDefinition',
                name: 'Bid',
                members: [Array],
                loc: [Object],
                parentName: 'SignatureVerifier' },
              { type: 'FunctionDefinition',
                name: 'hashIdentity',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'private',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hashBid',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyHardCoded',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifySpecificWithPrefix',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifySpecificWithoutPrefix',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 88, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/SignatureVerifier.sol' } },
  structs:
   { Identity:
      { name: 'Identity',
        contract:
         { projectGraph: [Circular],
           name: 'SignatureVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { hashIdentity: [ [Object] ],
              hashBid: [ [Object] ],
              verifyHardCoded: [ [Object] ],
              verifySpecificWithPrefix: [ [Object] ],
              verifySpecificWithoutPrefix: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { chainId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'chainId',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              verifyingContract:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'verifyingContract',
                 isArray: false,
                 initialValue: 161774172539488124409029051691695345682981322752n,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              salt:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'salt',
                 isArray: false,
                 initialValue:
                  109841955370565475639945010436510886454890538232827929402961050150771112280064n,
                 type: 'bytes32',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN',
                 isArray: false,
                 initialValue:
                  'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPE',
                 isArray: false,
                 initialValue: 'Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPE',
                 isArray: false,
                 initialValue:
                  'Bid(uint256 amount,Identity bidder)Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOMAIN_SEPARATOR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOMAIN_SEPARATOR',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies:
            { EcTools:
               { projectGraph: [Circular],
                 name: 'EcTools',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' } },
           inheritsFrom: {},
           structs:
            { Identity: [Circular],
              Bid: { name: 'Bid', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SignatureVerifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/SignatureVerifier.sol' },
        parameters:
         [ { name: 'userId',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'wallet',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     'SignatureVerifier.Identity':
      { name: 'Identity',
        contract:
         { projectGraph: [Circular],
           name: 'SignatureVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { hashIdentity: [ [Object] ],
              hashBid: [ [Object] ],
              verifyHardCoded: [ [Object] ],
              verifySpecificWithPrefix: [ [Object] ],
              verifySpecificWithoutPrefix: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { chainId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'chainId',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              verifyingContract:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'verifyingContract',
                 isArray: false,
                 initialValue: 161774172539488124409029051691695345682981322752n,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              salt:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'salt',
                 isArray: false,
                 initialValue:
                  109841955370565475639945010436510886454890538232827929402961050150771112280064n,
                 type: 'bytes32',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN',
                 isArray: false,
                 initialValue:
                  'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPE',
                 isArray: false,
                 initialValue: 'Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPE',
                 isArray: false,
                 initialValue:
                  'Bid(uint256 amount,Identity bidder)Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOMAIN_SEPARATOR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOMAIN_SEPARATOR',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies:
            { EcTools:
               { projectGraph: [Circular],
                 name: 'EcTools',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' } },
           inheritsFrom: {},
           structs:
            { Identity: [Circular],
              Bid: { name: 'Bid', contract: [Circular], parameters: [Array] } },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SignatureVerifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/SignatureVerifier.sol' },
        parameters:
         [ { name: 'userId',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'wallet',
             isUserDefinedType: false,
             type: 'address',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false } ] },
     Bid:
      { name: 'Bid',
        contract:
         { projectGraph: [Circular],
           name: 'SignatureVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { hashIdentity: [ [Object] ],
              hashBid: [ [Object] ],
              verifyHardCoded: [ [Object] ],
              verifySpecificWithPrefix: [ [Object] ],
              verifySpecificWithoutPrefix: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { chainId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'chainId',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              verifyingContract:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'verifyingContract',
                 isArray: false,
                 initialValue: 161774172539488124409029051691695345682981322752n,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              salt:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'salt',
                 isArray: false,
                 initialValue:
                  109841955370565475639945010436510886454890538232827929402961050150771112280064n,
                 type: 'bytes32',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN',
                 isArray: false,
                 initialValue:
                  'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPE',
                 isArray: false,
                 initialValue: 'Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPE',
                 isArray: false,
                 initialValue:
                  'Bid(uint256 amount,Identity bidder)Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOMAIN_SEPARATOR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOMAIN_SEPARATOR',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies:
            { EcTools:
               { projectGraph: [Circular],
                 name: 'EcTools',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' } },
           inheritsFrom: {},
           structs:
            { Identity:
               { name: 'Identity', contract: [Circular], parameters: [Array] },
              Bid: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SignatureVerifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/SignatureVerifier.sol' },
        parameters:
         [ { name: 'amount',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'bidder',
             isUserDefinedType: true,
             type: 'SignatureVerifier.Identity',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false } ] },
     'SignatureVerifier.Bid':
      { name: 'Bid',
        contract:
         { projectGraph: [Circular],
           name: 'SignatureVerifier',
           kind: 'contract',
           isAbstract: false,
           functions:
            { hashIdentity: [ [Object] ],
              hashBid: [ [Object] ],
              verifyHardCoded: [ [Object] ],
              verifySpecificWithPrefix: [ [Object] ],
              verifySpecificWithoutPrefix: [ [Object] ] },
           modifiers: {},
           stateVariables:
            { chainId:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'chainId',
                 isArray: false,
                 initialValue: 1,
                 type: 'uint256',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              verifyingContract:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'verifyingContract',
                 isArray: false,
                 initialValue: 161774172539488124409029051691695345682981322752n,
                 type: 'address',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              salt:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'salt',
                 isArray: false,
                 initialValue:
                  109841955370565475639945010436510886454890538232827929402961050150771112280064n,
                 type: 'bytes32',
                 visibility: 'default',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN',
                 isArray: false,
                 initialValue:
                  'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPE',
                 isArray: false,
                 initialValue: 'Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPE:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPE',
                 isArray: false,
                 initialValue:
                  'Bid(uint256 amount,Identity bidder)Identity(uint256 userId,address wallet)',
                 type: 'string',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              EIP712_DOMAIN_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'EIP712_DOMAIN_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              IDENTITY_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'IDENTITY_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              BID_TYPEHASH:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'BID_TYPEHASH',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false },
              DOMAIN_SEPARATOR:
               { functionsWrite: {},
                 contract: [Circular],
                 name: 'DOMAIN_SEPARATOR',
                 isArray: false,
                 initialValue: undefined,
                 type: 'bytes32',
                 visibility: 'private',
                 storageLocation: undefined,
                 isConstant: true,
                 isAddressContract: false } },
           dependencies:
            { EcTools:
               { projectGraph: [Circular],
                 name: 'EcTools',
                 kind: 'library',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: false,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: true,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/EcTools.sol' } },
           inheritsFrom: {},
           structs:
            { Identity:
               { name: 'Identity', contract: [Circular], parameters: [Array] },
              Bid: [Circular] },
           enums: {},
           isThirdPartyLib: false,
           isOnlyForTest: false,
           contractDefinition:
            { type: 'ContractDefinition',
              name: 'SignatureVerifier',
              baseContracts: [],
              subNodes:
               [ [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object],
                 [Object] ],
              kind: 'contract',
              loc: { start: [Object], end: [Object] } },
           instanceNeeded: true,
           solFilePath:
            '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/EIP712/contracts/SignatureVerifier.sol' },
        parameters:
         [ { name: 'amount',
             isUserDefinedType: false,
             type: 'uint256',
             isArray: false,
             isStruct: false,
             isEnum: false,
             isAddressContract: false },
           { name: 'bidder',
             isUserDefinedType: true,
             type: 'SignatureVerifier.Identity',
             isArray: false,
             isStruct: true,
             isEnum: false,
             isAddressContract: false } ] } },
  enums: {} }