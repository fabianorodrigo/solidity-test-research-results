,{
  "2020-11-10T19:43:19.911ZProxyEcTools.testrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "16-18",
          "restrictions": [
            "signedMessage.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length!=65",
          "parameters": [
            {
              "js": "[97,69,160,158,171,117,216,23,245,93,62,51,49,25,15,182,159,17,253,121,228,60,70,209,19,130,204,40,160,215,152,242]",
              "sol": "stringToBytes32(\"97,69,160,158,171,117,216,23,245,93,62,51,49,25,15,182,159,17,253,121,228,60,70,209,19,130,204,40,160,215,152,242\")"
            },
            {
              "js": "[]",
              "sol": "abi.encode(\"\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "signedMessage.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrecover(bytes32,bytes) WHEN signedMessage.length==65",
          "parameters": [
            {
              "js": "[167,36,19,1,208,0,150,228,238,108,105,97,212,111,13,203,36,153,159,123,167,138,75,64,161,199,116,220,3,68,235,230]",
              "sol": "stringToBytes32(\"167,36,19,1,208,0,150,228,238,108,105,97,212,111,13,203,36,153,159,123,167,138,75,64,161,199,116,220,3,68,235,230\")"
            },
            {
              "js": "[171,200,104,167,93,117,174,86,86,134,101,245,62,198,238,23,39,120,113,85,128,116,157,161,13,117,190,164,254,121,37,139,231,141,157,237,68,116,147,255,146,111,188,106,201,241,86,8,55,167,41,27,83,75,91,170,217,22,219,38,54,103,165,232,251]",
              "sol": "abi.encode(\"171,200,104,167,93,117,174,86,86,134,101,245,62,198,238,23,39,120,113,85,128,116,157,161,13,117,190,164,254,121,37,139,231,141,157,237,68,116,147,255,146,111,188,106,201,241,86,8,55,167,41,27,83,75,91,170,217,22,219,38,54,103,165,232,251\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.912ZProxyEcTools.testtoEthereumSignedMessage": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoEthereumSignedMessage(bytes32)",
          "parameters": [
            {
              "js": "[104,32,95,130,168,61,150,97,213,252,255,145,57,252,150,55,140,197,11,61,62,216,3,105,27,76,226,46,227,116,187,114]",
              "sol": "stringToBytes32(\"104,32,95,130,168,61,150,97,213,252,255,145,57,252,150,55,140,197,11,61,62,216,3,105,27,76,226,46,227,116,187,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.913ZProxyEcTools.testprefixedRecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testprefixedRecover(bytes32,bytes)",
          "parameters": [
            {
              "js": "[31,144,83,130,110,9,82,192,195,240,251,166,103,187,223,248,243,179,44,156,42,196,2,203,26,13,57,86,155,222,247,77]",
              "sol": "stringToBytes32(\"31,144,83,130,110,9,82,192,195,240,251,166,103,187,223,248,243,179,44,156,42,196,2,203,26,13,57,86,155,222,247,77\")"
            },
            {
              "js": "[229,45,251,7,214,181,160,233,56,1,222,6,163,101,23,150,221,67,147,196,113,77,36,118,207,143,59,138,16,222,102,77]",
              "sol": "abi.encode(\"229,45,251,7,214,181,160,233,56,1,222,6,163,101,23,150,221,67,147,196,113,77,36,118,207,143,59,138,16,222,102,77\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.913ZSignatureVerifier.hashBid": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute hashBid(SignatureVerifier.Bid)",
          "parameters": [
            {
              "js": "{\"amount\": 64,\"bidder\": {\"userId\": 28,\"wallet\": accounts[3]}}",
              "sol": "SignatureVerifier.Bid(64,SignatureVerifier.Identity(28,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.914ZSignatureVerifier.verifyHardCoded": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyHardCoded()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.914ZSignatureVerifier.verifySpecificWithPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 65,\"bidder\": {\"userId\": 66,\"wallet\": accounts[5]}}",
              "sol": "SignatureVerifier.Bid(65,SignatureVerifier.Identity(66,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[132,176,26,53,101,91,25,245,73,33,224,202,104,153,177,39,35,59,116,242,211,62,126,231,105,213,96,37,49,255,85,157]",
              "sol": "abi.encode(\"132,176,26,53,101,91,25,245,73,33,224,202,104,153,177,39,35,59,116,242,211,62,126,231,105,213,96,37,49,255,85,157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T19:43:19.915ZSignatureVerifier.verifySpecificWithoutPrefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifySpecificWithoutPrefix(SignatureVerifier.Bid,bytes)",
          "parameters": [
            {
              "js": "{\"amount\": 28,\"bidder\": {\"userId\": 27,\"wallet\": accounts[1]}}",
              "sol": "SignatureVerifier.Bid(28,SignatureVerifier.Identity(27,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))))"
            },
            {
              "js": "[90,193,229,16,71,79,14,232,152,16,132,163,177,175,10,70,213,42,186,106,72,64,197,184,171,24,160,116,197,156,71,177]",
              "sol": "abi.encode(\"90,193,229,16,71,79,14,232,152,16,132,163,177,175,10,70,213,42,186,106,72,64,197,184,171,24,160,116,197,156,71,177\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}