,{
  "2020-11-10T14:18:34.347ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:18:49.371ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:19:04.397ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:19:19.492ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:19:34.586ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:19:49.712ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.819ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [180,112,66,95,65,195,210,34,218,201,185,97,175,29,101,117,118,27,40,212,216,163,190,90,153,190,38,155,206,244,123,76],\"capacity\": 31}",
              "sol": "Buffer.buffer(abi.encode(\"180,112,66,95,65,195,210,34,218,201,185,97,175,29,101,117,118,27,40,212,216,163,190,90,153,190,38,155,206,244,123,76\"),31)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.821ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [95,127,101,11,89,16,27,125,148,230,244,156,254,206,15,148,169,160,60,172,44,122,173,67,26,239,221,147,35,234,167,26],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"95,127,101,11,89,16,27,125,148,230,244,156,254,206,15,148,169,160,60,172,44,122,173,67,26,239,221,147,35,234,167,26\"),66)"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [121,178,4,168,201,219,178,166,106,50,194,70,103,214,120,1,16,206,203,138,77,202,44,137,78,225,194,188,159,186,26,233],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"121,178,4,168,201,219,178,166,106,50,194,70,103,214,120,1,16,206,203,138,77,202,44,137,78,225,194,188,159,186,26,233\"),2014223716)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.822ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [162,24,237,95,36,69,135,188,124,208,93,94,173,159,91,105,88,105,87,69,168,4,128,123,104,131,214,38,30,113,119,125],\"capacity\": 45}",
              "sol": "Buffer.buffer(abi.encode(\"162,24,237,95,36,69,135,188,124,208,93,94,173,159,91,105,88,105,87,69,168,4,128,123,104,131,214,38,30,113,119,125\"),45)"
            },
            {
              "js": "[250,146,236,252,104,140,223,201,37,33,252,224,53,89,160,62,33,113,163,41,100,213,165,172,238,95,205,46,14,181,99,175]",
              "sol": "abi.encode(\"250,146,236,252,104,140,223,201,37,33,252,224,53,89,160,62,33,113,163,41,100,213,165,172,238,95,205,46,14,181,99,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.822ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [87,201,236,122,124,158,69,27,20,136,150,63,201,166,41,189,29,162,153,93,220,58,237,228,203,18,15,120,255,88,102,60],\"capacity\": 11}",
              "sol": "Buffer.buffer(abi.encode(\"87,201,236,122,124,158,69,27,20,136,150,63,201,166,41,189,29,162,153,93,220,58,237,228,203,18,15,120,255,88,102,60\"),11)"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.822ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [189,222,199,178,207,41,254,98,253,121,21,45,172,123,204,148,227,133,10,194,41,73,254,205,195,198,233,144,162,176,8,81],\"capacity\": 30}",
              "sol": "Buffer.buffer(abi.encode(\"189,222,199,178,207,41,254,98,253,121,21,45,172,123,204,148,227,133,10,194,41,73,254,205,195,198,233,144,162,176,8,81\"),30)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.823ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [55,51,170,86,214,35,100,75,243,125,103,199,75,28,248,18,190,88,57,107,226,164,206,248,146,76,222,230,127,193,125,127],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"55,51,170,86,214,35,100,75,243,125,103,199,75,28,248,18,190,88,57,107,226,164,206,248,146,76,222,230,127,193,125,127\"),27)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.825ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [219,20,128,146,178,177,245,149,118,81,237,107,159,61,84,212,45,63,38,171,255,48,172,168,25,63,79,103,73,112,254,245],\"capacity\": 87}",
              "sol": "Buffer.buffer(abi.encode(\"219,20,128,146,178,177,245,149,118,81,237,107,159,61,84,212,45,63,38,171,255,48,172,168,25,63,79,103,73,112,254,245\"),87)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.828ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.829ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.829ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 127,\"Y\": 22}",
              "sol": "Pairing.G1Point(127,22)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.830ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 58,\"Y\": 33}",
              "sol": "Pairing.G1Point(58,33)"
            },
            {
              "js": "{\"X\": 2014223716,\"Y\": 3}",
              "sol": "Pairing.G1Point(2014223716,3)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.831ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [162,47],\"Y\": [88,21]}",
              "sol": "Pairing.G2Point([uint(162),uint(47)],[uint(88),uint(21)])"
            },
            {
              "js": "{\"X\": [29,71],\"Y\": [32,1532892062]}",
              "sol": "Pairing.G2Point([uint(29),uint(71)],[uint(32),uint(1532892062)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.832ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 11,\"Y\": 18}",
              "sol": "Pairing.G1Point(11,18)"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.832ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 59,\"Y\": 59},{\"X\": 32,\"Y\": 64}]",
              "sol": "[Pairing.G1Point(59,59),Pairing.G1Point(32,64)]"
            },
            {
              "js": "[{\"X\": [57,49],\"Y\": [97,1024]},{\"X\": [200000,160],\"Y\": [10,23]}]",
              "sol": "[Pairing.G2Point([uint(57),uint(49)],[uint(97),uint(1024)]),Pairing.G2Point([uint(200000),uint(160)],[uint(10),uint(23)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 1532892063,\"Y\": 96},{\"X\": 1532892062,\"Y\": 57},{\"X\": 55,\"Y\": 63}]",
                "sol": "[Pairing.G1Point(5,5),Pairing.G1Point(71,19),Pairing.G1Point(25,29)]"
              },
              {
                "js": "[{\"X\": [57,49],\"Y\": [97,1024]},{\"X\": [200000,160],\"Y\": [10,23]}]",
                "sol": "[Pairing.G2Point([uint(57),uint(49)],[uint(97),uint(1024)]),Pairing.G2Point([uint(200000),uint(160)],[uint(10),uint(23)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.836ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 86,\"Y\": 47}",
              "sol": "Pairing.G1Point(86,47)"
            },
            {
              "js": "{\"X\": [32,33],\"Y\": [22,64]}",
              "sol": "Pairing.G2Point([uint(32),uint(33)],[uint(22),uint(64)])"
            },
            {
              "js": "{\"X\": 20,\"Y\": 57}",
              "sol": "Pairing.G1Point(20,57)"
            },
            {
              "js": "{\"X\": [47,46],\"Y\": [102,57]}",
              "sol": "Pairing.G2Point([uint(47),uint(46)],[uint(102),uint(57)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.837ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 161,\"Y\": 257}",
              "sol": "Pairing.G1Point(161,257)"
            },
            {
              "js": "{\"X\": [86,22],\"Y\": [59,255]}",
              "sol": "Pairing.G2Point([uint(86),uint(22)],[uint(59),uint(255)])"
            },
            {
              "js": "{\"X\": 3,\"Y\": 33}",
              "sol": "Pairing.G1Point(3,33)"
            },
            {
              "js": "{\"X\": [21,103],\"Y\": [200001,1023]}",
              "sol": "Pairing.G2Point([uint(21),uint(103)],[uint(200001),uint(1023)])"
            },
            {
              "js": "{\"X\": 70,\"Y\": 24}",
              "sol": "Pairing.G1Point(70,24)"
            },
            {
              "js": "{\"X\": [23,128],\"Y\": [0,24]}",
              "sol": "Pairing.G2Point([uint(23),uint(128)],[uint(0),uint(24)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.843ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.843ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.844ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.845ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.845ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.846ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.847ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.847ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.848ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.848ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.850ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.853ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [239,189,116,148,253,141,49,85,117,142,113,5,253,158,71,165,152,178,4,247,177,41,19,204,186,33,208,154,128,159,80,162],\"capacity\": 27}",
              "sol": "Buffer.buffer(abi.encode(\"239,189,116,148,253,141,49,85,117,142,113,5,253,158,71,165,152,178,4,247,177,41,19,204,186,33,208,154,128,159,80,162\"),27)"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.854ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [234,249,86,241,58,14,22,12,164,189,204,105,52,118,217,109,2,71,226,122,95,193,51,222,17,223,20,76,157,82,14,29],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"234,249,86,241,58,14,22,12,164,189,204,105,52,118,217,109,2,71,226,122,95,193,51,222,17,223,20,76,157,82,14,29\"),7)"
            },
            {
              "js": "[16,79,42,8,56,132,101,62,98,215,147,40,114,101,177,245,31,160,120,255,205,209,131,244,116,183,181,127,249,190,197,22]",
              "sol": "abi.encode(\"16,79,42,8,56,132,101,62,98,215,147,40,114,101,177,245,31,160,120,255,205,209,131,244,116,183,181,127,249,190,197,22\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.854ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [109,217,210,126,8,21,226,136,114,186,133,87,47,184,43,187,9,107,50,125,136,14,177,232,249,7,148,108,192,135,203,222],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"109,217,210,126,8,21,226,136,114,186,133,87,47,184,43,187,9,107,50,125,136,14,177,232,249,7,148,108,192,135,203,222\"),129)"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.855ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [81,191,133,175,24,37,42,36,38,109,234,9,9,146,253,100,235,81,71,116,208,107,219,65,198,44,60,177,166,192,104,188],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"81,191,133,175,24,37,42,36,38,109,234,9,9,146,253,100,235,81,71,116,208,107,219,65,198,44,60,177,166,192,104,188\"),161)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.856ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[96,73,56,164,51,22,204,189,209,141,31,255,4,154,221,83,176,173,17,120,223,138,29,7,247,3,132,240,121,190,53,129]",
              "sol": "stringToBytes32(\"96,73,56,164,51,22,204,189,209,141,31,255,4,154,221,83,176,173,17,120,223,138,29,7,247,3,132,240,121,190,53,129\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.856ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[231,154,70,237,102,218,43,109,239,34,228,119,10,87,103,57,17,221,183,192,245,121,167,28,24,171,94,214,83,133,153,12]",
              "sol": "stringToBytes32(\"231,154,70,237,102,218,43,109,239,34,228,119,10,87,103,57,17,221,183,192,245,121,167,28,24,171,94,214,83,133,153,12\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[234,13,244,35,247,182,110,184,47,73,167,217,160,17,14,206,158,75,219,192,51,159,75,14,227,146,47,56,82,75,64,71]",
              "sol": "abi.encode(\"234,13,244,35,247,182,110,184,47,73,167,217,160,17,14,206,158,75,219,192,51,159,75,14,227,146,47,56,82,75,64,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.909ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.910ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.910ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.911ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.912ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.913ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.913ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.914ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.914ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.914ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.915ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.915ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.916ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.916ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.917ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"oqvsz\",\"P\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"0\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"oqvsz\"),string(\"P\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.917ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.918ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"oqvsz\",\"0\",\"oqvsz\",\"Capstones\",\"L\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"oqvsz\"),string(\"0\"),string(\"oqvsz\"),string(\"Capstones\"),string(\"L\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.918ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "[\"L\",\"P\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"oqvsz\",\"[\",\"L\",\"oqvsz\",\"oqvsz\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"L\"),string(\"P\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"oqvsz\"),string(\"[\"),string(\"L\"),string(\"oqvsz\"),string(\"oqvsz\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.919ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.919ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.920ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.920ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"egtlv9\"]",
              "sol": "[string(\"egtlv9\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.921ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"d5tvi\"",
              "sol": "\"d5tvi\""
            },
            {
              "js": "[\"0\",\"[\"]",
              "sol": "[string(\"0\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.921ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Capstones\",\"egtlv9\"]",
              "sol": "[string(\"Capstones\"),string(\"egtlv9\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.922ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"Capstones\",\"x068fn\"]",
              "sol": "[string(\"Capstones\"),string(\"x068fn\")]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.922ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"P\",\"Capstones\"]",
              "sol": "[string(\"P\"),string(\"Capstones\")]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.923ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"x068fn\"",
              "sol": "\"x068fn\""
            },
            {
              "js": "[\"[\",\"ERC1820_ACCEPT_MAGIC\",\"L\"]",
              "sol": "[string(\"[\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.923ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"d5tvi\"]",
              "sol": "[string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"d5tvi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.924ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"egtlv9\",\"d5tvi\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"egtlv9\"),string(\"d5tvi\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.924ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"oqvsz\",\"ERC1820_ACCEPT_MAGIC\",\"[\"]",
              "sol": "[string(\"oqvsz\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"[\")]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.925ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"egtlv9\"]",
              "sol": "[string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"egtlv9\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.925ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"x068fn\"",
              "sol": "\"x068fn\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"d5tvi\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"d5tvi\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.926ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"L\",\"Capstones\",\"ERC1820_ACCEPT_MAGIC\",\"d5tvi\"]",
              "sol": "[string(\"L\"),string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"d5tvi\")]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.926ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"oqvsz\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ibl9i\",\"z2u68\"]",
              "sol": "[string(\"oqvsz\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ibl9i\"),string(\"z2u68\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.927ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"z2u68\",\"[\",\"z2u68\",\"z2u68\",\"d5tvi\"]",
              "sol": "[string(\"z2u68\"),string(\"[\"),string(\"z2u68\"),string(\"z2u68\"),string(\"d5tvi\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.927ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"0\",\"Capstones\",\"[\",\"L\",\"L\"]",
              "sol": "[string(\"0\"),string(\"Capstones\"),string(\"[\"),string(\"L\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.929ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"osk6s\",\"x068fn\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"osk6s\"),string(\"x068fn\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.929ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "[\"ibl9i\",\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"d5tvi\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"ibl9i\"),string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"d5tvi\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.930ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "[[97,199,216,163,22,151,36,73,102,88,143,10,80,76,76,65,49,0,252,16,115,6,255,136,228,122,255,127,175,49,193,126],[64,234,28,213,209,195,82,108,244,2,2,201,1,160,79,89,202,149,20,85,245,28,181,128,221,23,170,240,37,198,231,96],[52,215,114,69,54,62,214,176,221,43,240,82,233,95,103,186,207,69,221,167,224,91,166,3,190,166,138,240,66,41,10,223]]",
              "sol": "[bytes(abi.encode(\"97,199,216,163,22,151,36,73,102,88,143,10,80,76,76,65,49,0,252,16,115,6,255,136,228,122,255,127,175,49,193,126\")),bytes(abi.encode(\"64,234,28,213,209,195,82,108,244,2,2,201,1,160,79,89,202,149,20,85,245,28,181,128,221,23,170,240,37,198,231,96\")),bytes(abi.encode(\"52,215,114,69,54,62,214,176,221,43,240,82,233,95,103,186,207,69,221,167,224,91,166,3,190,166,138,240,66,41,10,223\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.930ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[48,87,193,209,215,73,40,120,169,103,244,151,4,10,24,210,209,66,173,109,214,213,226,149,77,86,119,246,26,160,50,212]]",
              "sol": "[bytes(abi.encode(\"48,87,193,209,215,73,40,120,169,103,244,151,4,10,24,210,209,66,173,109,214,213,226,149,77,86,119,246,26,160,50,212\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.931ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[241,1,143,35,84,37,123,26,93,190,134,87,56,195,158,58,115,184,97,186,236,35,118,232,32,106,172,183,248,172,7,177],[67,18,47,27,151,106,56,40,90,139,38,159,177,1,155,30,137,127,175,248,17,163,202,199,202,55,225,129,90,10,148,72],[159,178,84,164,161,76,111,172,229,94,218,223,249,215,128,27,68,18,242,76,189,91,189,132,208,127,116,230,46,59,130,6],[228,33,65,182,209,10,207,44,249,241,10,114,236,35,97,100,130,254,11,130,195,19,144,63,118,71,17,132,72,99,209,237]]",
              "sol": "[bytes(abi.encode(\"241,1,143,35,84,37,123,26,93,190,134,87,56,195,158,58,115,184,97,186,236,35,118,232,32,106,172,183,248,172,7,177\")),bytes(abi.encode(\"67,18,47,27,151,106,56,40,90,139,38,159,177,1,155,30,137,127,175,248,17,163,202,199,202,55,225,129,90,10,148,72\")),bytes(abi.encode(\"159,178,84,164,161,76,111,172,229,94,218,223,249,215,128,27,68,18,242,76,189,91,189,132,208,127,116,230,46,59,130,6\")),bytes(abi.encode(\"228,33,65,182,209,10,207,44,249,241,10,114,236,35,97,100,130,254,11,130,195,19,144,63,118,71,17,132,72,99,209,237\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.931ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[63,66,131,214,178,223,187,78,187,139,254,130,237,5,202,187,159,70,43,183,73,63,8,182,153,124,185,180,100,44,84,166],[235,213,208,116,97,82,3,205,25,16,205,77,56,233,71,22,247,136,169,64,159,190,128,135,148,125,108,56,120,123,45,102],[19,212,39,219,57,140,83,47,20,225,122,159,70,38,90,37,223,146,251,114,19,172,190,47,81,161,113,128,161,146,216,153],[107,184,28,29,105,5,32,207,181,64,226,133,239,74,99,161,158,103,22,185,171,9,233,165,251,201,205,57,70,132,42,119],[130,128,32,125,94,120,181,117,19,18,140,72,236,45,119,191,167,29,149,221,224,93,210,52,140,89,32,11,62,140,98,21],[59,75,228,171,78,46,56,248,35,166,116,37,128,236,247,65,49,170,103,147,255,81,95,254,148,116,10,143,40,151,37,180],[140,166,43,27,31,209,237,147,152,187,115,216,242,210,59,215,28,20,216,82,85,89,31,126,26,212,21,150,103,95,169,147],[18,63,194,65,46,13,140,244,24,70,195,90,13,51,88,194,167,230,220,30,200,153,71,210,185,9,51,203,184,103,154,15]]",
              "sol": "[bytes(abi.encode(\"63,66,131,214,178,223,187,78,187,139,254,130,237,5,202,187,159,70,43,183,73,63,8,182,153,124,185,180,100,44,84,166\")),bytes(abi.encode(\"235,213,208,116,97,82,3,205,25,16,205,77,56,233,71,22,247,136,169,64,159,190,128,135,148,125,108,56,120,123,45,102\")),bytes(abi.encode(\"19,212,39,219,57,140,83,47,20,225,122,159,70,38,90,37,223,146,251,114,19,172,190,47,81,161,113,128,161,146,216,153\")),bytes(abi.encode(\"107,184,28,29,105,5,32,207,181,64,226,133,239,74,99,161,158,103,22,185,171,9,233,165,251,201,205,57,70,132,42,119\")),bytes(abi.encode(\"130,128,32,125,94,120,181,117,19,18,140,72,236,45,119,191,167,29,149,221,224,93,210,52,140,89,32,11,62,140,98,21\")),bytes(abi.encode(\"59,75,228,171,78,46,56,248,35,166,116,37,128,236,247,65,49,170,103,147,255,81,95,254,148,116,10,143,40,151,37,180\")),bytes(abi.encode(\"140,166,43,27,31,209,237,147,152,187,115,216,242,210,59,215,28,20,216,82,85,89,31,126,26,212,21,150,103,95,169,147\")),bytes(abi.encode(\"18,63,194,65,46,13,140,244,24,70,195,90,13,51,88,194,167,230,220,30,200,153,71,210,185,9,51,203,184,103,154,15\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.932ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"egtlv9\"",
              "sol": "\"egtlv9\""
            },
            {
              "js": "[[192,91,71,40,93,74,44,1,61,57,146,216,34,21,150,119,6,80,60,122,19,149,2,21,124,184,146,204,205,25,123,37]]",
              "sol": "[bytes(abi.encode(\"192,91,71,40,93,74,44,1,61,57,146,216,34,21,150,119,6,80,60,122,19,149,2,21,124,184,146,204,205,25,123,37\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.933ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[120,167,228,142,214,66,184,183,10,20,93,205,210,107,89,64,186,210,152,154,18,231,26,196,49,43,178,205,228,207,111,161]]",
              "sol": "[bytes(abi.encode(\"120,167,228,142,214,66,184,183,10,20,93,205,210,107,89,64,186,210,152,154,18,231,26,196,49,43,178,205,228,207,111,161\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.933ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[45,33,2,61,199,61,89,116,143,232,154,241,251,220,113,160,48,105,171,102,108,212,162,232,59,110,111,17,253,3,143,238]]",
              "sol": "[bytes(abi.encode(\"45,33,2,61,199,61,89,116,143,232,154,241,251,220,113,160,48,105,171,102,108,212,162,232,59,110,111,17,253,3,143,238\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.934ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[177,100,189,110,4,142,173,226,85,99,169,83,56,101,87,69,35,110,213,177,218,155,37,31,157,246,91,229,4,95,246,210]]",
              "sol": "[bytes(abi.encode(\"177,100,189,110,4,142,173,226,85,99,169,83,56,101,87,69,35,110,213,177,218,155,37,31,157,246,91,229,4,95,246,210\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.934ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"d5tvi\"",
              "sol": "\"d5tvi\""
            },
            {
              "js": "[[26,49,45,110,254,31,169,184,50,212,161,130,221,150,184,140,30,92,175,107,97,201,85,15,98,73,142,75,46,20,23,193],[7,10,161,46,159,76,222,100,28,227,33,183,119,95,129,231,116,230,29,102,236,62,216,143,59,5,206,144,248,121,162,125]]",
              "sol": "[bytes(abi.encode(\"26,49,45,110,254,31,169,184,50,212,161,130,221,150,184,140,30,92,175,107,97,201,85,15,98,73,142,75,46,20,23,193\")),bytes(abi.encode(\"7,10,161,46,159,76,222,100,28,227,33,183,119,95,129,231,116,230,29,102,236,62,216,143,59,5,206,144,248,121,162,125\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.935ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[181,7,51,18,245,171,234,152,64,142,186,40,10,136,188,148,33,68,189,102,121,71,110,35,130,169,62,222,78,231,217,239],[134,92,0,86,199,178,195,125,224,134,175,188,217,69,187,167,43,85,158,7,93,139,188,225,159,105,162,147,93,119,224,133]]",
              "sol": "[bytes(abi.encode(\"181,7,51,18,245,171,234,152,64,142,186,40,10,136,188,148,33,68,189,102,121,71,110,35,130,169,62,222,78,231,217,239\")),bytes(abi.encode(\"134,92,0,86,199,178,195,125,224,134,175,188,217,69,187,167,43,85,158,7,93,139,188,225,159,105,162,147,93,119,224,133\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.935ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "[[115,62,210,67,94,23,192,31,166,184,99,232,170,82,65,62,93,23,108,191,165,17,235,213,213,72,42,142,106,243,190,18],[174,24,28,116,191,64,160,68,44,120,31,8,63,22,158,202,215,251,145,238,125,45,115,233,135,107,33,253,181,251,192,233]]",
              "sol": "[bytes(abi.encode(\"115,62,210,67,94,23,192,31,166,184,99,232,170,82,65,62,93,23,108,191,165,17,235,213,213,72,42,142,106,243,190,18\")),bytes(abi.encode(\"174,24,28,116,191,64,160,68,44,120,31,8,63,22,158,202,215,251,145,238,125,45,115,233,135,107,33,253,181,251,192,233\"))]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.937ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[148,143,104,253,47,55,30,175,65,61,193,155,153,218,229,223,80,13,224,136,210,101,90,66,196,132,144,72,113,116,182,61],[75,69,108,14,87,142,151,62,188,240,250,166,141,232,173,160,195,26,171,111,219,18,144,41,136,93,62,173,79,6,82,71]]",
              "sol": "[bytes(abi.encode(\"148,143,104,253,47,55,30,175,65,61,193,155,153,218,229,223,80,13,224,136,210,101,90,66,196,132,144,72,113,116,182,61\")),bytes(abi.encode(\"75,69,108,14,87,142,151,62,188,240,250,166,141,232,173,160,195,26,171,111,219,18,144,41,136,93,62,173,79,6,82,71\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.938ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[69,115,20,147,244,214,3,52,116,71,12,72,237,117,161,83,233,217,44,5,109,208,1,85,147,106,6,151,72,70,157,28],[65,199,22,59,17,183,202,0,177,142,228,244,97,240,180,31,30,43,247,27,14,81,127,103,12,163,5,133,216,193,88,243],[205,247,28,117,228,16,180,18,38,245,50,225,205,255,49,45,186,227,61,62,176,78,195,70,152,55,205,137,212,255,71,10]]",
              "sol": "[bytes(abi.encode(\"69,115,20,147,244,214,3,52,116,71,12,72,237,117,161,83,233,217,44,5,109,208,1,85,147,106,6,151,72,70,157,28\")),bytes(abi.encode(\"65,199,22,59,17,183,202,0,177,142,228,244,97,240,180,31,30,43,247,27,14,81,127,103,12,163,5,133,216,193,88,243\")),bytes(abi.encode(\"205,247,28,117,228,16,180,18,38,245,50,225,205,255,49,45,186,227,61,62,176,78,195,70,152,55,205,137,212,255,71,10\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.938ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[250,220,13,233,237,187,58,238,101,62,60,69,127,177,221,63,249,218,28,83,162,40,123,212,205,195,31,159,102,153,223,137],[15,179,117,255,30,78,188,222,87,251,177,145,215,46,32,72,127,76,54,50,94,75,204,5,90,18,5,223,66,177,13,95],[140,145,249,61,203,130,85,12,235,235,20,17,161,55,138,199,9,176,163,34,91,3,35,189,88,9,184,66,164,152,137,225]]",
              "sol": "[bytes(abi.encode(\"250,220,13,233,237,187,58,238,101,62,60,69,127,177,221,63,249,218,28,83,162,40,123,212,205,195,31,159,102,153,223,137\")),bytes(abi.encode(\"15,179,117,255,30,78,188,222,87,251,177,145,215,46,32,72,127,76,54,50,94,75,204,5,90,18,5,223,66,177,13,95\")),bytes(abi.encode(\"140,145,249,61,203,130,85,12,235,235,20,17,161,55,138,199,9,176,163,34,91,3,35,189,88,9,184,66,164,152,137,225\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.939ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[101,153,230,181,200,28,164,32,212,158,186,139,112,133,96,47,232,142,248,46,250,1,82,62,21,150,185,206,201,9,108,100],[236,119,150,226,109,213,246,38,228,177,165,27,230,108,237,15,50,39,58,238,88,36,244,192,246,158,178,62,238,95,140,55],[175,40,69,198,202,221,88,218,30,112,151,70,13,55,194,108,205,179,143,202,134,209,194,224,230,122,235,192,237,30,158,201]]",
              "sol": "[bytes(abi.encode(\"101,153,230,181,200,28,164,32,212,158,186,139,112,133,96,47,232,142,248,46,250,1,82,62,21,150,185,206,201,9,108,100\")),bytes(abi.encode(\"236,119,150,226,109,213,246,38,228,177,165,27,230,108,237,15,50,39,58,238,88,36,244,192,246,158,178,62,238,95,140,55\")),bytes(abi.encode(\"175,40,69,198,202,221,88,218,30,112,151,70,13,55,194,108,205,179,143,202,134,209,194,224,230,122,235,192,237,30,158,201\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.940ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[172,212,189,160,119,84,65,201,124,249,99,201,71,252,6,62,225,119,65,14,180,141,185,30,75,45,59,115,102,132,0,235],[79,156,54,167,1,130,219,228,237,224,207,44,195,180,112,54,154,92,48,117,185,124,32,150,162,12,172,172,14,137,237,22],[94,158,2,116,187,94,76,209,225,20,56,218,185,54,8,153,184,162,43,149,212,147,106,230,14,160,196,32,227,241,112,204]]",
              "sol": "[bytes(abi.encode(\"172,212,189,160,119,84,65,201,124,249,99,201,71,252,6,62,225,119,65,14,180,141,185,30,75,45,59,115,102,132,0,235\")),bytes(abi.encode(\"79,156,54,167,1,130,219,228,237,224,207,44,195,180,112,54,154,92,48,117,185,124,32,150,162,12,172,172,14,137,237,22\")),bytes(abi.encode(\"94,158,2,116,187,94,76,209,225,20,56,218,185,54,8,153,184,162,43,149,212,147,106,230,14,160,196,32,227,241,112,204\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.940ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[205,248,12,122,137,42,233,203,58,51,126,155,217,134,42,95,122,3,4,59,129,127,94,116,224,42,191,127,176,19,85,100],[44,204,60,38,19,207,121,54,50,183,211,17,207,195,112,146,37,56,147,251,19,238,138,87,86,99,44,170,185,138,83,73],[59,221,105,34,146,197,126,54,247,19,29,211,234,239,30,93,207,199,123,99,90,219,133,91,208,223,49,56,83,212,7,48],[138,35,76,64,136,130,223,182,84,66,63,241,222,139,156,110,103,171,104,180,113,163,207,163,70,187,219,119,150,148,68,211]]",
              "sol": "[bytes(abi.encode(\"205,248,12,122,137,42,233,203,58,51,126,155,217,134,42,95,122,3,4,59,129,127,94,116,224,42,191,127,176,19,85,100\")),bytes(abi.encode(\"44,204,60,38,19,207,121,54,50,183,211,17,207,195,112,146,37,56,147,251,19,238,138,87,86,99,44,170,185,138,83,73\")),bytes(abi.encode(\"59,221,105,34,146,197,126,54,247,19,29,211,234,239,30,93,207,199,123,99,90,219,133,91,208,223,49,56,83,212,7,48\")),bytes(abi.encode(\"138,35,76,64,136,130,223,182,84,66,63,241,222,139,156,110,103,171,104,180,113,163,207,163,70,187,219,119,150,148,68,211\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.941ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"ibl9i\"",
              "sol": "\"ibl9i\""
            },
            {
              "js": "[[8,241,83,98,196,137,208,78,57,184,188,175,184,238,159,220,236,60,134,141,209,10,250,15,113,209,70,55,88,84,167,168],[26,53,94,163,232,31,248,238,18,88,182,149,71,128,156,56,209,8,26,164,42,88,47,7,228,207,192,62,132,111,122,91],[83,47,123,49,255,201,193,118,176,198,212,59,63,158,60,57,192,28,32,151,223,247,27,88,221,231,98,177,174,176,74,87],[23,107,193,250,92,35,245,121,176,132,123,188,116,160,87,251,29,139,242,162,93,209,225,144,61,139,189,151,56,130,27,70]]",
              "sol": "[bytes(abi.encode(\"8,241,83,98,196,137,208,78,57,184,188,175,184,238,159,220,236,60,134,141,209,10,250,15,113,209,70,55,88,84,167,168\")),bytes(abi.encode(\"26,53,94,163,232,31,248,238,18,88,182,149,71,128,156,56,209,8,26,164,42,88,47,7,228,207,192,62,132,111,122,91\")),bytes(abi.encode(\"83,47,123,49,255,201,193,118,176,198,212,59,63,158,60,57,192,28,32,151,223,247,27,88,221,231,98,177,174,176,74,87\")),bytes(abi.encode(\"23,107,193,250,92,35,245,121,176,132,123,188,116,160,87,251,29,139,242,162,93,209,225,144,61,139,189,151,56,130,27,70\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.942ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[37,131,180,22,2,48,76,31,188,21,165,171,164,220,101,193,31,236,202,66,78,147,1,39,188,253,120,219,65,225,255,93],[94,186,106,247,212,50,121,79,127,138,20,85,233,185,193,38,31,29,222,66,225,83,3,78,214,63,84,51,66,6,236,105],[129,167,91,96,51,251,172,226,217,52,68,120,56,50,109,196,195,52,183,88,61,75,96,223,173,255,236,50,127,162,87,73],[81,166,255,190,169,134,246,195,30,13,65,0,228,133,152,76,184,72,92,222,250,170,177,70,144,203,61,154,209,106,104,240]]",
              "sol": "[bytes(abi.encode(\"37,131,180,22,2,48,76,31,188,21,165,171,164,220,101,193,31,236,202,66,78,147,1,39,188,253,120,219,65,225,255,93\")),bytes(abi.encode(\"94,186,106,247,212,50,121,79,127,138,20,85,233,185,193,38,31,29,222,66,225,83,3,78,214,63,84,51,66,6,236,105\")),bytes(abi.encode(\"129,167,91,96,51,251,172,226,217,52,68,120,56,50,109,196,195,52,183,88,61,75,96,223,173,255,236,50,127,162,87,73\")),bytes(abi.encode(\"81,166,255,190,169,134,246,195,30,13,65,0,228,133,152,76,184,72,92,222,250,170,177,70,144,203,61,154,209,106,104,240\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.942ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "[[159,177,95,23,148,146,133,124,119,200,49,111,87,216,30,43,44,61,125,111,27,232,39,70,89,212,12,189,246,8,158,9],[83,227,64,64,209,111,13,101,88,57,161,233,206,153,27,22,192,167,96,19,251,135,201,125,125,173,19,16,208,17,27,215],[33,124,160,37,17,68,89,106,57,213,173,196,253,148,24,151,192,232,140,104,145,179,164,40,158,108,49,49,94,30,224,122],[187,69,78,227,254,20,149,135,66,213,243,246,22,16,162,22,138,118,147,87,131,131,185,105,95,1,214,167,47,168,28,120]]",
              "sol": "[bytes(abi.encode(\"159,177,95,23,148,146,133,124,119,200,49,111,87,216,30,43,44,61,125,111,27,232,39,70,89,212,12,189,246,8,158,9\")),bytes(abi.encode(\"83,227,64,64,209,111,13,101,88,57,161,233,206,153,27,22,192,167,96,19,251,135,201,125,125,173,19,16,208,17,27,215\")),bytes(abi.encode(\"33,124,160,37,17,68,89,106,57,213,173,196,253,148,24,151,192,232,140,104,145,179,164,40,158,108,49,49,94,30,224,122\")),bytes(abi.encode(\"187,69,78,227,254,20,149,135,66,213,243,246,22,16,162,22,138,118,147,87,131,131,185,105,95,1,214,167,47,168,28,120\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.943ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[32,44,187,34,146,211,45,239,115,184,238,56,153,200,185,68,201,197,239,226,72,60,130,41,113,22,201,250,128,172,128,41],[70,24,236,198,228,87,33,112,66,19,65,162,183,195,38,63,228,166,68,35,39,178,210,47,82,64,148,124,44,37,185,223],[192,245,137,104,107,221,54,23,102,52,112,148,77,136,227,61,210,241,215,245,212,160,84,223,101,132,143,211,200,11,72,187],[156,43,110,155,155,102,92,69,100,206,132,87,188,157,230,140,152,50,19,246,188,137,112,229,142,233,61,47,127,8,87,234],[32,36,150,127,254,214,116,126,174,87,249,97,29,234,246,44,186,107,67,147,14,109,169,49,135,253,55,25,238,125,191,17]]",
              "sol": "[bytes(abi.encode(\"32,44,187,34,146,211,45,239,115,184,238,56,153,200,185,68,201,197,239,226,72,60,130,41,113,22,201,250,128,172,128,41\")),bytes(abi.encode(\"70,24,236,198,228,87,33,112,66,19,65,162,183,195,38,63,228,166,68,35,39,178,210,47,82,64,148,124,44,37,185,223\")),bytes(abi.encode(\"192,245,137,104,107,221,54,23,102,52,112,148,77,136,227,61,210,241,215,245,212,160,84,223,101,132,143,211,200,11,72,187\")),bytes(abi.encode(\"156,43,110,155,155,102,92,69,100,206,132,87,188,157,230,140,152,50,19,246,188,137,112,229,142,233,61,47,127,8,87,234\")),bytes(abi.encode(\"32,36,150,127,254,214,116,126,174,87,249,97,29,234,246,44,186,107,67,147,14,109,169,49,135,253,55,25,238,125,191,17\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.943ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[41,194,239,212,125,243,31,147,18,96,106,199,208,125,119,183,36,116,247,91,220,162,61,137,232,215,130,83,200,182,32,42],[230,222,207,9,31,26,34,13,162,25,196,243,45,36,242,191,13,35,241,163,186,176,229,201,94,20,114,74,6,102,221,2],[247,66,124,60,141,211,143,227,84,46,105,118,240,145,244,181,177,76,66,14,42,238,57,229,185,41,143,52,224,124,63,84],[126,84,143,25,29,241,119,11,118,155,247,11,63,137,201,83,250,82,126,50,124,224,31,150,195,138,209,243,47,237,141,150],[186,77,69,149,169,245,215,30,77,244,62,165,40,3,126,180,39,203,100,62,92,68,141,9,2,87,140,249,145,73,66,212]]",
              "sol": "[bytes(abi.encode(\"41,194,239,212,125,243,31,147,18,96,106,199,208,125,119,183,36,116,247,91,220,162,61,137,232,215,130,83,200,182,32,42\")),bytes(abi.encode(\"230,222,207,9,31,26,34,13,162,25,196,243,45,36,242,191,13,35,241,163,186,176,229,201,94,20,114,74,6,102,221,2\")),bytes(abi.encode(\"247,66,124,60,141,211,143,227,84,46,105,118,240,145,244,181,177,76,66,14,42,238,57,229,185,41,143,52,224,124,63,84\")),bytes(abi.encode(\"126,84,143,25,29,241,119,11,118,155,247,11,63,137,201,83,250,82,126,50,124,224,31,150,195,138,209,243,47,237,141,150\")),bytes(abi.encode(\"186,77,69,149,169,245,215,30,77,244,62,165,40,3,126,180,39,203,100,62,92,68,141,9,2,87,140,249,145,73,66,212\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.944ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"d5tvi\"",
              "sol": "\"d5tvi\""
            },
            {
              "js": "[[112,153,150,38,19,39,252,78,128,144,50,78,254,12,192,141,68,215,245,239,133,62,136,154,44,65,230,59,111,252,214,226],[61,230,99,152,130,216,103,54,216,165,164,90,9,137,171,170,128,49,230,98,186,103,108,140,84,229,67,251,194,60,80,43],[176,138,145,165,174,21,253,111,224,22,108,238,92,254,252,94,107,3,96,88,127,254,132,110,181,184,189,73,100,16,40,247],[169,182,150,33,226,65,150,28,145,157,120,3,57,74,7,166,199,100,122,18,146,155,13,231,176,27,0,194,124,2,222,60],[69,53,182,247,59,85,59,29,224,234,66,166,147,246,87,199,191,0,73,57,218,105,49,234,216,221,139,211,161,128,166,89]]",
              "sol": "[bytes(abi.encode(\"112,153,150,38,19,39,252,78,128,144,50,78,254,12,192,141,68,215,245,239,133,62,136,154,44,65,230,59,111,252,214,226\")),bytes(abi.encode(\"61,230,99,152,130,216,103,54,216,165,164,90,9,137,171,170,128,49,230,98,186,103,108,140,84,229,67,251,194,60,80,43\")),bytes(abi.encode(\"176,138,145,165,174,21,253,111,224,22,108,238,92,254,252,94,107,3,96,88,127,254,132,110,181,184,189,73,100,16,40,247\")),bytes(abi.encode(\"169,182,150,33,226,65,150,28,145,157,120,3,57,74,7,166,199,100,122,18,146,155,13,231,176,27,0,194,124,2,222,60\")),bytes(abi.encode(\"69,53,182,247,59,85,59,29,224,234,66,166,147,246,87,199,191,0,73,57,218,105,49,234,216,221,139,211,161,128,166,89\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.945ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"x068fn\"",
              "sol": "\"x068fn\""
            },
            {
              "js": "[[15,2,19,171,203,227,254,78,247,43,222,159,116,206,244,128,70,176,103,147,225,190,90,172,247,136,13,251,139,27,107,17],[69,197,200,193,154,72,113,28,55,59,119,208,201,223,243,202,158,88,168,229,138,180,35,63,25,101,131,226,184,21,15,199],[12,176,254,31,172,194,180,42,156,63,116,2,217,127,139,215,212,29,219,159,49,121,31,245,68,116,55,192,116,225,235,254],[78,53,139,154,153,25,16,196,252,34,49,227,18,218,151,58,108,38,178,98,10,200,225,181,151,202,249,31,56,72,139,56],[255,233,39,150,168,83,206,43,176,58,2,159,17,83,5,245,231,135,245,242,38,129,141,25,122,28,68,73,21,227,22,2]]",
              "sol": "[bytes(abi.encode(\"15,2,19,171,203,227,254,78,247,43,222,159,116,206,244,128,70,176,103,147,225,190,90,172,247,136,13,251,139,27,107,17\")),bytes(abi.encode(\"69,197,200,193,154,72,113,28,55,59,119,208,201,223,243,202,158,88,168,229,138,180,35,63,25,101,131,226,184,21,15,199\")),bytes(abi.encode(\"12,176,254,31,172,194,180,42,156,63,116,2,217,127,139,215,212,29,219,159,49,121,31,245,68,116,55,192,116,225,235,254\")),bytes(abi.encode(\"78,53,139,154,153,25,16,196,252,34,49,227,18,218,151,58,108,38,178,98,10,200,225,181,151,202,249,31,56,72,139,56\")),bytes(abi.encode(\"255,233,39,150,168,83,206,43,176,58,2,159,17,83,5,245,231,135,245,242,38,129,141,25,122,28,68,73,21,227,22,2\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.946ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[177]",
              "sol": "bytes1(\"177\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.947ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.947ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.947ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.948ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.948ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"ibl9i\"",
              "sol": "\"ibl9i\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.948ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.948ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"egtlv9\"",
              "sol": "\"egtlv9\""
            },
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.949ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.949ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"x068fn\"",
              "sol": "\"x068fn\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.949ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"d5tvi\"",
              "sol": "\"d5tvi\""
            },
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.950ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"osk6s\"",
              "sol": "\"osk6s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.950ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.950ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"z2u68\"",
              "sol": "\"z2u68\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.951ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.951ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"oqvsz\"",
              "sol": "\"oqvsz\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.952ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.953ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"egtlv9\",\"L\",\"x068fn\",\"oqvsz\"]",
              "sol": "[string(\"egtlv9\"),string(\"L\"),string(\"x068fn\"),string(\"oqvsz\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.953ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[134,180,171,197,27,169,54,72,202,110,209,96,172,20,212,136,61,132,64,149,85,75,208,98,156,201,77,33,30,46,14,100],[135,163,6,130,233,228,62,119,101,112,51,88,71,97,154,234,244,164,157,101,149,20,228,213,110,177,225,201,169,135,103,71],[13,57,100,231,108,35,199,52,109,51,49,197,147,200,60,3,251,123,119,159,32,240,84,84,246,192,75,225,104,1,138,193],[72,171,168,157,96,87,215,47,38,120,41,160,153,36,32,101,249,101,32,7,172,117,183,6,53,112,92,207,52,141,130,198],[224,134,105,173,41,136,163,234,176,142,84,97,114,203,66,61,232,205,89,21,69,145,114,179,229,6,131,245,50,16,124,218],[254,255,90,42,176,245,6,150,66,102,229,181,50,127,79,106,0,251,118,42,159,243,94,5,105,230,233,127,214,72,168,142],[205,157,194,229,59,220,22,212,164,72,109,103,8,40,225,74,105,184,170,118,56,163,120,147,69,218,160,134,70,245,169,64],[178,217,163,86,199,136,232,131,36,46,112,118,78,223,136,47,11,12,212,186,210,226,235,242,226,125,22,39,161,184,126,183],[192,200,22,180,151,211,250,216,65,149,95,206,207,76,176,49,4,207,65,189,160,50,60,164,145,240,238,67,243,21,172,85]]",
              "sol": "[bytes(abi.encode(\"134,180,171,197,27,169,54,72,202,110,209,96,172,20,212,136,61,132,64,149,85,75,208,98,156,201,77,33,30,46,14,100\")),bytes(abi.encode(\"135,163,6,130,233,228,62,119,101,112,51,88,71,97,154,234,244,164,157,101,149,20,228,213,110,177,225,201,169,135,103,71\")),bytes(abi.encode(\"13,57,100,231,108,35,199,52,109,51,49,197,147,200,60,3,251,123,119,159,32,240,84,84,246,192,75,225,104,1,138,193\")),bytes(abi.encode(\"72,171,168,157,96,87,215,47,38,120,41,160,153,36,32,101,249,101,32,7,172,117,183,6,53,112,92,207,52,141,130,198\")),bytes(abi.encode(\"224,134,105,173,41,136,163,234,176,142,84,97,114,203,66,61,232,205,89,21,69,145,114,179,229,6,131,245,50,16,124,218\")),bytes(abi.encode(\"254,255,90,42,176,245,6,150,66,102,229,181,50,127,79,106,0,251,118,42,159,243,94,5,105,230,233,127,214,72,168,142\")),bytes(abi.encode(\"205,157,194,229,59,220,22,212,164,72,109,103,8,40,225,74,105,184,170,118,56,163,120,147,69,218,160,134,70,245,169,64\")),bytes(abi.encode(\"178,217,163,86,199,136,232,131,36,46,112,118,78,223,136,47,11,12,212,186,210,226,235,242,226,125,22,39,161,184,126,183\")),bytes(abi.encode(\"192,200,22,180,151,211,250,216,65,149,95,206,207,76,176,49,4,207,65,189,160,50,60,164,145,240,238,67,243,21,172,85\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.954ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.954ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[183,108,100,39,15,200,192,106,6,30,114,110,154,127,77,223,81,74,28,162,185,136,32,76,9,188,20,154,155,168,203,152]",
              "sol": "stringToBytes32(\"183,108,100,39,15,200,192,106,6,30,114,110,154,127,77,223,81,74,28,162,185,136,32,76,9,188,20,154,155,168,203,152\")"
            },
            {
              "js": "[196,205,173,121,17,146,138,215,251,124,58,134,121,153,219,10,108,161,43,63,89,187,146,119,143,76,77,230,105,238,67,244]",
              "sol": "stringToBytes32(\"196,205,173,121,17,146,138,215,251,124,58,134,121,153,219,10,108,161,43,63,89,187,146,119,143,76,77,230,105,238,67,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.955ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[149,153,227,231,217,202,205,226,22,111,42,211,206,122,193,18,204,154,171,65,10,52,126,140,13,108,193,180,170,151,52,207]",
              "sol": "stringToBytes32(\"149,153,227,231,217,202,205,226,22,111,42,211,206,122,193,18,204,154,171,65,10,52,126,140,13,108,193,180,170,151,52,207\")"
            },
            {
              "js": "[142,216,178,151,113,180,249,153,56,163,124,159,28,155,92,197,65,114,23,104,155,232,99,45,30,150,233,64,225,171,80,66]",
              "sol": "abi.encode(\"142,216,178,151,113,180,249,153,56,163,124,159,28,155,92,197,65,114,23,104,155,232,99,45,30,150,233,64,225,171,80,66\")"
            },
            {
              "js": "[230,228,210,48,210,211,182,18,105,125,180,64,18,225,131,235,141,235,133,70,49,77,22,104,60,112,76,18,208,214,103,54]",
              "sol": "abi.encode(\"230,228,210,48,210,211,182,18,105,125,180,64,18,225,131,235,141,235,133,70,49,77,22,104,60,112,76,18,208,214,103,54\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.955ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[107,110,15,79,74,6,118,95,165,236,53,18,197,46,25,216,248,153,96,174,132,43,168,174,95,127,21,137,95,69,16,253]",
              "sol": "abi.encode(\"107,110,15,79,74,6,118,95,165,236,53,18,197,46,25,216,248,153,96,174,132,43,168,174,95,127,21,137,95,69,16,253\")"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[23,112,99,233,169,221,154,96,27,251,36,75,225,64,115,82,237,15,145,38,166,56,153,26,147,169,191,111,164,136,62,154]",
              "sol": "abi.encode(\"23,112,99,233,169,221,154,96,27,251,36,75,225,64,115,82,237,15,145,38,166,56,153,26,147,169,191,111,164,136,62,154\")"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.956ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[144,100,39,131,195,224,94,202,77,209,51,199,54,120,88,37,177,134,77,163,98,254,155,133,56,93,89,0,170,85,85,168]",
              "sol": "stringToBytes32(\"144,100,39,131,195,224,94,202,77,209,51,199,54,120,88,37,177,134,77,163,98,254,155,133,56,93,89,0,170,85,85,168\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[39,148,2,70,99,6,111,112,202,254,232,65,191,40,178,255,192,2,9,243,46,192,126,92,56,100,61,62,10,236,9,109]",
              "sol": "abi.encode(\"39,148,2,70,99,6,111,112,202,254,232,65,191,40,178,255,192,2,9,243,46,192,126,92,56,100,61,62,10,236,9,109\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[189,11,244,28,156,40,42,113,35,110,219,175,34,18,95,215,206,102,206,64,96,126,89,227,227,60,161,223,108,230,60,230]",
              "sol": "stringToBytes32(\"189,11,244,28,156,40,42,113,35,110,219,175,34,18,95,215,206,102,206,64,96,126,89,227,227,60,161,223,108,230,60,230\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[30,236,209,110,162,59,250,234,37,132,9,83,125,218,119,112,38,172,208,42,136,212,79,73,209,27,234,25,164,179,105,49]",
              "sol": "abi.encode(\"30,236,209,110,162,59,250,234,37,132,9,83,125,218,119,112,38,172,208,42,136,212,79,73,209,27,234,25,164,179,105,49\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.957ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[15,164,63,151,232,211,232,185,165,39,30,109,86,92,215,228,205,94,104,144,107,60,102,235,167,64,154,247,104,203,170,93]",
              "sol": "stringToBytes32(\"15,164,63,151,232,211,232,185,165,39,30,109,86,92,215,228,205,94,104,144,107,60,102,235,167,64,154,247,104,203,170,93\")"
            },
            {
              "js": "[24,239,142,253,186,158,118,176,61,115,251,75,221,223,32,174,22,162,61,102,126,78,197,201,13,154,142,213,177,54,208,218]",
              "sol": "abi.encode(\"24,239,142,253,186,158,118,176,61,115,251,75,221,223,32,174,22,162,61,102,126,78,197,201,13,154,142,213,177,54,208,218\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[15,164,63,151,232,211,232,185,165,39,30,109,86,92,215,228,205,94,104,144,107,60,102,235,167,64,154,247,104,203,170,93]",
                "sol": "stringToBytes32(\"15,164,63,151,232,211,232,185,165,39,30,109,86,92,215,228,205,94,104,144,107,60,102,235,167,64,154,247,104,203,170,93\")"
              },
              {
                "js": "[123,243,107,73,39,93,249,168,194,206,118,81,172,254,223,112,235,176,59,181,124,66,233,159,77,197,10,77,185,146,211,193,66]",
                "sol": "bytes33(\"123,243,107,73,39,93,249,168,194,206,118,81,172,254,223,112,235,176,59,181,124,66,233,159,77,197,10,77,185,146,211,193,66\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.958ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[98,158,192,206,210,251,108,151,31,102,64,146,170,73,180,229,124,228,79,180,6,141,114,31,81,122,239,40,17,222,238,9]",
              "sol": "abi.encode(\"98,158,192,206,210,251,108,151,31,102,64,146,170,73,180,229,124,228,79,180,6,141,114,31,81,122,239,40,17,222,238,9\")"
            },
            {
              "js": "[182,236,21,110,140,216,30,142,60,91,111,158,20,21,140,204,63,170,77,103,79,197,199,126,221,65,187,48,157,128,196,237]",
              "sol": "stringToBytes32(\"182,236,21,110,140,216,30,142,60,91,111,158,20,21,140,204,63,170,77,103,79,197,199,126,221,65,187,48,157,128,196,237\")"
            },
            {
              "js": "[9,194,157,239,90,78,240,180,51,93,138,180,1,228,32,100,140,213,177,96,3,1,122,240,132,10,84,58,23,51,195,6]",
              "sol": "abi.encode(\"9,194,157,239,90,78,240,180,51,93,138,180,1,228,32,100,140,213,177,96,3,1,122,240,132,10,84,58,23,51,195,6\")"
            },
            {
              "js": "\"rqtlrl\"",
              "sol": "\"rqtlrl\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[94,86,156,141,117,24,119,234,120,126,7,61,255,140,119,160,34,133,163,20,98,32,111,249,24,137,226,150,159,168,8,215]",
              "sol": "abi.encode(\"94,86,156,141,117,24,119,234,120,126,7,61,255,140,119,160,34,133,163,20,98,32,111,249,24,137,226,150,159,168,8,215\")"
            },
            {
              "js": "[141,118,212,235,110,32,54,47,18,45,164,11,49,31,7,179,200,138,91,70,44,143,150,212,254,164,248,3,23,229,161,12]",
              "sol": "stringToBytes32(\"141,118,212,235,110,32,54,47,18,45,164,11,49,31,7,179,200,138,91,70,44,143,150,212,254,164,248,3,23,229,161,12\")"
            },
            {
              "js": "[128,55,1,2,184,68,22,40,72,250,20,60,99,150,119,247,0,91,176,198,245,122,110,182,174,131,204,63,80,251,101,185]",
              "sol": "abi.encode(\"128,55,1,2,184,68,22,40,72,250,20,60,99,150,119,247,0,91,176,198,245,122,110,182,174,131,204,63,80,251,101,185\")"
            },
            {
              "js": "\"d5tvi\"",
              "sol": "\"d5tvi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[252,60,223,131,94,101,232,148,197,5,69,137,181,52,97,219,220,245,215,197,7,2,9,79,235,234,70,21,157,2,98,226]",
              "sol": "abi.encode(\"252,60,223,131,94,101,232,148,197,5,69,137,181,52,97,219,220,245,215,197,7,2,9,79,235,234,70,21,157,2,98,226\")"
            },
            {
              "js": "[123,90,161,173,114,94,189,9,188,170,252,242,23,61,167,194,58,235,120,93,206,158,20,122,252,90,37,131,15,14,41,78]",
              "sol": "stringToBytes32(\"123,90,161,173,114,94,189,9,188,170,252,242,23,61,167,194,58,235,120,93,206,158,20,122,252,90,37,131,15,14,41,78\")"
            },
            {
              "js": "[141,203,36,46,53,39,226,157,237,43,230,101,125,135,181,111,74,49,39,232,55,216,198,248,124,178,158,63,43,101,110,65]",
              "sol": "abi.encode(\"141,203,36,46,53,39,226,157,237,43,230,101,125,135,181,111,74,49,39,232,55,216,198,248,124,178,158,63,43,101,110,65\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[71,16,8,0,53,53,90,212,220,10,136,243,70,137,169,72,65,44,126,110,22,201,26,210,131,134,89,102,201,102,1,39]",
              "sol": "abi.encode(\"71,16,8,0,53,53,90,212,220,10,136,243,70,137,169,72,65,44,126,110,22,201,26,210,131,134,89,102,201,102,1,39\")"
            },
            {
              "js": "[62,132,4,187,155,74,86,175,116,163,70,84,124,119,59,148,55,103,177,124,55,185,222,113,181,95,51,135,16,128,79,43]",
              "sol": "stringToBytes32(\"62,132,4,187,155,74,86,175,116,163,70,84,124,119,59,148,55,103,177,124,55,185,222,113,181,95,51,135,16,128,79,43\")"
            },
            {
              "js": "[38,61,89,33,100,144,207,33,77,55,176,5,74,31,197,192,153,134,187,122,28,146,45,31,201,38,17,62,72,221,214,197]",
              "sol": "abi.encode(\"38,61,89,33,100,144,207,33,77,55,176,5,74,31,197,192,153,134,187,122,28,146,45,31,201,38,17,62,72,221,214,197\")"
            },
            {
              "js": "\"ibl9i\"",
              "sol": "\"ibl9i\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[100,145,0,187,239,218,255,214,121,233,222,76,151,113,157,70,107,69,158,254,184,75,185,208,111,14,15,182,100,243,66,220]",
              "sol": "abi.encode(\"100,145,0,187,239,218,255,214,121,233,222,76,151,113,157,70,107,69,158,254,184,75,185,208,111,14,15,182,100,243,66,220\")"
            },
            {
              "js": "[91,16,83,98,110,40,45,43,159,38,29,193,37,236,210,162,131,213,39,183,152,193,74,89,129,201,48,177,153,163,140,113]",
              "sol": "stringToBytes32(\"91,16,83,98,110,40,45,43,159,38,29,193,37,236,210,162,131,213,39,183,152,193,74,89,129,201,48,177,153,163,140,113\")"
            },
            {
              "js": "[71,61,124,140,95,30,130,90,109,149,157,114,25,78,175,46,44,111,171,144,121,140,255,189,231,43,16,130,100,41,126,8]",
              "sol": "abi.encode(\"71,61,124,140,95,30,130,90,109,149,157,114,25,78,175,46,44,111,171,144,121,140,255,189,231,43,16,130,100,41,126,8\")"
            },
            {
              "js": "\"h83e2s\"",
              "sol": "\"h83e2s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[12,138,221,157,26,36,255,255,106,245,189,82,225,204,182,114,136,202,160,158,145,158,155,22,225,88,30,80,199,47,218,8]",
              "sol": "abi.encode(\"12,138,221,157,26,36,255,255,106,245,189,82,225,204,182,114,136,202,160,158,145,158,155,22,225,88,30,80,199,47,218,8\")"
            },
            {
              "js": "[86,193,28,34,38,52,236,136,42,9,114,101,218,252,93,160,208,83,120,19,181,187,67,119,57,72,74,240,148,138,161,235]",
              "sol": "stringToBytes32(\"86,193,28,34,38,52,236,136,42,9,114,101,218,252,93,160,208,83,120,19,181,187,67,119,57,72,74,240,148,138,161,235\")"
            },
            {
              "js": "[46,160,148,177,62,208,103,102,48,7,11,74,7,49,215,31,180,136,187,143,14,45,72,41,154,152,190,67,38,75,49,190]",
              "sol": "abi.encode(\"46,160,148,177,62,208,103,102,48,7,11,74,7,49,215,31,180,136,187,143,14,45,72,41,154,152,190,67,38,75,49,190\")"
            },
            {
              "js": "\"h83e2s\"",
              "sol": "\"h83e2s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[230,7,3,151,88,161,252,213,135,190,88,55,179,93,232,125,72,99,46,19,168,241,45,242,176,216,244,92,82,101,154,220]",
              "sol": "abi.encode(\"230,7,3,151,88,161,252,213,135,190,88,55,179,93,232,125,72,99,46,19,168,241,45,242,176,216,244,92,82,101,154,220\")"
            },
            {
              "js": "[218,44,162,168,10,162,112,238,243,233,60,64,157,46,77,91,97,185,98,94,72,174,184,19,63,218,115,185,170,183,254,67]",
              "sol": "stringToBytes32(\"218,44,162,168,10,162,112,238,243,233,60,64,157,46,77,91,97,185,98,94,72,174,184,19,63,218,115,185,170,183,254,67\")"
            },
            {
              "js": "[147,82,175,96,2,3,49,94,217,244,121,95,91,177,38,163,106,205,253,197,248,58,158,194,230,202,18,104,180,35,61,46]",
              "sol": "abi.encode(\"147,82,175,96,2,3,49,94,217,244,121,95,91,177,38,163,106,205,253,197,248,58,158,194,230,202,18,104,180,35,61,46\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[227,221,148,158,127,175,126,161,21,21,75,156,6,253,49,242,48,240,92,77,38,68,31,208,63,94,247,199,141,197,167,12]",
              "sol": "abi.encode(\"227,221,148,158,127,175,126,161,21,21,75,156,6,253,49,242,48,240,92,77,38,68,31,208,63,94,247,199,141,197,167,12\")"
            },
            {
              "js": "[225,171,118,195,117,226,142,95,171,208,86,97,234,74,76,61,227,240,209,45,206,139,178,250,174,251,169,227,115,48,140,114]",
              "sol": "stringToBytes32(\"225,171,118,195,117,226,142,95,171,208,86,97,234,74,76,61,227,240,209,45,206,139,178,250,174,251,169,227,115,48,140,114\")"
            },
            {
              "js": "[42,53,243,205,220,12,115,202,81,23,132,137,225,204,221,126,77,44,33,193,59,206,100,220,118,67,233,103,84,83,71,29]",
              "sol": "abi.encode(\"42,53,243,205,220,12,115,202,81,23,132,137,225,204,221,126,77,44,33,193,59,206,100,220,118,67,233,103,84,83,71,29\")"
            },
            {
              "js": "\"h83e2s\"",
              "sol": "\"h83e2s\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.968ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[115,130,27,107,147,181,175,163,183,78,172,92,183,39,177,198,121,204,38,123,57,104,248,172,144,234,76,105,21,67,223,172]",
              "sol": "abi.encode(\"115,130,27,107,147,181,175,163,183,78,172,92,183,39,177,198,121,204,38,123,57,104,248,172,144,234,76,105,21,67,223,172\")"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "[149,140,126,94,50,168,108,25,125,212,87,133,177,106,60,24,230,51,231,3,94,3,48,131,86,182,76,158,41,240,111,66]",
              "sol": "abi.encode(\"149,140,126,94,50,168,108,25,125,212,87,133,177,106,60,24,230,51,231,3,94,3,48,131,86,182,76,158,41,240,111,66\")"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.968ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[16,108,112,96,129,59,26,218,192,178,127,120,120,142,138,179,123,199,20,193,47,38,164,24,240,225,103,111,59,102,83,152]",
              "sol": "stringToBytes32(\"16,108,112,96,129,59,26,218,192,178,127,120,120,142,138,179,123,199,20,193,47,38,164,24,240,225,103,111,59,102,83,152\")"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "[188,28,64,157,104,246,197,165,137,122,189,15,5,131,29,66,178,68,113,212,175,21,52,151,203,60,249,70,226,20,196,208]",
              "sol": "stringToBytes32(\"188,28,64,157,104,246,197,165,137,122,189,15,5,131,29,66,178,68,113,212,175,21,52,151,203,60,249,70,226,20,196,208\")"
            },
            {
              "js": "[44,31,210,157,5,177,141,220,83,54,190,71,75,131,102,19,94,16,193,179,219,234,122,105,185,38,34,96,26,116,190,193]",
              "sol": "stringToBytes32(\"44,31,210,157,5,177,141,220,83,54,190,71,75,131,102,19,94,16,193,179,219,234,122,105,185,38,34,96,26,116,190,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.969ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[126,79,5,198,9,184,170,151,129,203,212,55,50,115,219,210,247,217,76,48,245,217,191,154,192,82,124,246,248,244,241,6]",
              "sol": "stringToBytes32(\"126,79,5,198,9,184,170,151,129,203,212,55,50,115,219,210,247,217,76,48,245,217,191,154,192,82,124,246,248,244,241,6\")"
            },
            {
              "js": "[40,239,23,183,221,6,3,220,126,166,216,116,81,51,16,67,141,214,24,148,233,196,155,241,38,242]",
              "sol": "abi.encode(\"40,239,23,183,221,6,3,220,126,166,216,116,81,51,16,67,141,214,24,148,233,196,155,241,38,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[22,76,143,178,235,231,114,67,19,52,64,102,248,195,142,155,103,202,33,240,244,87,196,40,180,8,66,82,0,226,240,251]",
              "sol": "stringToBytes32(\"22,76,143,178,235,231,114,67,19,52,64,102,248,195,142,155,103,202,33,240,244,87,196,40,180,8,66,82,0,226,240,251\")"
            },
            {
              "js": "[182,236,11,78,205,23,123,25,168,106,219,118,17,212,115,7,135,202,163,219,18,105,181,233,199,47,107,109,132,219,240,119,164,159,179,120,40,56,97,5,55,147,130,186,7,124,239,89,139,43,251,137,46,188,243,28,76,226,35,33,110,161,242,244,241]",
              "sol": "abi.encode(\"182,236,11,78,205,23,123,25,168,106,219,118,17,212,115,7,135,202,163,219,18,105,181,233,199,47,107,109,132,219,240,119,164,159,179,120,40,56,97,5,55,147,130,186,7,124,239,89,139,43,251,137,46,188,243,28,76,226,35,33,110,161,242,244,241\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.970ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.972ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[59,33]",
              "sol": "[uint(59),uint(33)]"
            },
            {
              "js": "[[24,48],[95,24]]",
              "sol": "[[uint(24),uint(48)],[uint(95),uint(24)]]"
            },
            {
              "js": "[161,32]",
              "sol": "[uint(161),uint(32)]"
            },
            {
              "js": "[2014223716,8]",
              "sol": "[uint(2014223716),uint(8)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.974ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.974ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[103,58,65]",
              "sol": "[uint(103),uint(58),uint(65)]"
            },
            {
              "js": "{\"A\": {\"X\": 161,\"Y\": 162},\"B\": {\"X\": [11,7],\"Y\": [103,22]},\"C\": {\"X\": 69,\"Y\": 17}}",
              "sol": "Verifier.Proof(Pairing.G1Point(161,162),Pairing.G2Point([uint(11),uint(7)],[uint(103),uint(22)]),Pairing.G1Point(69,17))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[1532892062,11,2014223714,30]",
              "sol": "[uint(1532892062),uint(11),uint(2014223714),uint(30)]"
            },
            {
              "js": "{\"A\": {\"X\": 6,\"Y\": 2014223714},\"B\": {\"X\": [256,69],\"Y\": [31,27]},\"C\": {\"X\": 97,\"Y\": 55}}",
              "sol": "Verifier.Proof(Pairing.G1Point(6,2014223714),Pairing.G2Point([uint(256),uint(69)],[uint(31),uint(27)]),Pairing.G1Point(97,55))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.977ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.977ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.977ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"accounts[3]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.980ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.981ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.981ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.982ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.983ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.985ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "[160,156,53,202,13,246,143,59,193,118,211,55,83,214,10,157,208,204,33,254,128,219,24,110,96,245,1,27,24,133,125,247]",
              "sol": "abi.encode(\"160,156,53,202,13,246,143,59,193,118,211,55,83,214,10,157,208,204,33,254,128,219,24,110,96,245,1,27,24,133,125,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "[160,156,53,202,13,246,143,59,193,118,211,55,83,214,10,157,208,204,33,254,128,219,24,110,96,245,1,27,24,133,125,247]",
                "sol": "abi.encode(\"160,156,53,202,13,246,143,59,193,118,211,55,83,214,10,157,208,204,33,254,128,219,24,110,96,245,1,27,24,133,125,247\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.986ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.987ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[94,158,56,137]",
              "sol": "bytes4(\"94,158,56,137\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.989ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.989ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.989ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.990ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.991ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[103,223,219,249,140,50,29,44,247,142,115,152,175,216,4,248,64,18,118,204,44,78,83,164,252,71,146,207,186,12,23,168]",
              "sol": "abi.encode(\"103,223,219,249,140,50,29,44,247,142,115,152,175,216,4,248,64,18,118,204,44,78,83,164,252,71,146,207,186,12,23,168\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "[23,211,160,51,5,87,206,243,15,80,218,88,20,198,63,162,243,57,179,146,241,208,174,147,244,238,103,111,29,191,25,181]",
              "sol": "abi.encode(\"23,211,160,51,5,87,206,243,15,80,218,88,20,198,63,162,243,57,179,146,241,208,174,147,244,238,103,111,29,191,25,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.992ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:04.994ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[10,47]",
              "sol": "[uint(10),uint(47)]"
            },
            {
              "js": "[[24,22],[45,98]]",
              "sol": "[[uint(24),uint(22)],[uint(45),uint(98)]]"
            },
            {
              "js": "[102,45]",
              "sol": "[uint(102),uint(45)]"
            },
            {
              "js": "[59,45]",
              "sol": "[uint(59),uint(45)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.997ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.998ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:04.999ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.000ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.000ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.002ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.004ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.005ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.005ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.006ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:05.007ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T14:20:05.007ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.009ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T14:20:05.009ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}