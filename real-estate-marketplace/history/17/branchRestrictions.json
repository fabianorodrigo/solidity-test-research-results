,{
  "2020-11-11T22:37:10.069ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:37:25.007ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:37:40.114ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:37:55.224ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:10.401ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:25.999ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.462ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [91,251,122,42,228,249,95,204,114,150,28,254,131,171,24,161,21,117,93,229,37,152,201,231,14,111,54,111,215,164,91,170],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"91,251,122,42,228,249,95,204,114,150,28,254,131,171,24,161,21,117,93,229,37,152,201,231,14,111,54,111,215,164,91,170\"),1532892063)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.463ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [50,87,132,131,173,116,222,224,121,182,230,67,110,74,231,31,213,17,224,61,103,197,253,6,114,146,131,40,9,230,62,247],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"50,87,132,131,173,116,222,224,121,182,230,67,110,74,231,31,213,17,224,61,103,197,253,6,114,146,131,40,9,230,62,247\"),9)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [92,41,247,98,150,183,143,122,161,177,103,55,106,3,191,64,11,255,83,149,235,0,116,56,28,68,149,25,89,66,132,8],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"92,41,247,98,150,183,143,122,161,177,103,55,106,3,191,64,11,255,83,149,235,0,116,56,28,68,149,25,89,66,132,8\"),5)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.464ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [154,89,129,209,63,24,196,184,243,240,91,30,211,210,120,184,134,209,221,0,67,111,143,86,117,60,148,34,86,199,246,229],\"capacity\": 25}",
              "sol": "Buffer.buffer(abi.encode(\"154,89,129,209,63,24,196,184,243,240,91,30,211,210,120,184,134,209,221,0,67,111,143,86,117,60,148,34,86,199,246,229\"),25)"
            },
            {
              "js": "[232,224,60,175,91,173,172,139,169,65,150,153,5,251,91,176,41,101,90,147,109,14,58,131,217,134,102,82,243,103,87,24]",
              "sol": "abi.encode(\"232,224,60,175,91,173,172,139,169,65,150,153,5,251,91,176,41,101,90,147,109,14,58,131,217,134,102,82,243,103,87,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.465ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [201,111,138,25,101,121,205,169,158,210,134,165,201,143,186,188,228,58,194,119,194,87,147,96,35,4,47,221,44,24,141,61],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"201,111,138,25,101,121,205,169,158,210,134,165,201,143,186,188,228,58,194,119,194,87,147,96,35,4,47,221,44,24,141,61\"),16)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.465ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [69,84,112,158,250,204,214,12,20,134,246,124,109,251,236,154,235,39,208,61,99,51,209,208,19,189,67,252,248,230,20,133],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"69,84,112,158,250,204,214,12,20,134,246,124,109,251,236,154,235,39,208,61,99,51,209,208,19,189,67,252,248,230,20,133\"),4)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.466ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [24,229,241,119,9,78,212,125,85,152,156,234,146,83,187,207,125,183,254,71,77,198,254,252,142,73,100,172,216,10,147,114],\"capacity\": 29}",
              "sol": "Buffer.buffer(abi.encode(\"24,229,241,119,9,78,212,125,85,152,156,234,146,83,187,207,125,183,254,71,77,198,254,252,142,73,100,172,216,10,147,114\"),29)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.466ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [169,233,126,104,99,135,27,17,123,169,190,0,139,175,32,15,147,56,40,118,134,86,177,100,20,20,246,99,212,113,245,65],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"169,233,126,104,99,135,27,17,123,169,190,0,139,175,32,15,147,56,40,118,134,86,177,100,20,20,246,99,212,113,245,65\"),9)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.473ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.474ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.474ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 31,\"Y\": 32}",
              "sol": "Pairing.G1Point(31,32)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.475ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 129,\"Y\": 199999}",
              "sol": "Pairing.G1Point(129,199999)"
            },
            {
              "js": "{\"X\": 55,\"Y\": 70}",
              "sol": "Pairing.G1Point(55,70)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.475ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [98,26],\"Y\": [103,64]}",
              "sol": "Pairing.G2Point([uint(98),uint(26)],[uint(103),uint(64)])"
            },
            {
              "js": "{\"X\": [1532892064,46],\"Y\": [54,63]}",
              "sol": "Pairing.G2Point([uint(1532892064),uint(46)],[uint(54),uint(63)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.476ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 97,\"Y\": 7}",
              "sol": "Pairing.G1Point(97,7)"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.477ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 59,\"Y\": 27},{\"X\": 33,\"Y\": 55},{\"X\": 70,\"Y\": 1023},{\"X\": 88,\"Y\": 61},{\"X\": 96,\"Y\": 4},{\"X\": 57,\"Y\": 3},{\"X\": 1023,\"Y\": 88},{\"X\": 98,\"Y\": 2014223716}]",
              "sol": "[Pairing.G1Point(59,27),Pairing.G1Point(33,55),Pairing.G1Point(70,1023),Pairing.G1Point(88,61),Pairing.G1Point(96,4),Pairing.G1Point(57,3),Pairing.G1Point(1023,88),Pairing.G1Point(98,2014223716)]"
            },
            {
              "js": "[{\"X\": [162,23],\"Y\": [11,64]},{\"X\": [24,3],\"Y\": [71,26]},{\"X\": [47,20],\"Y\": [162,86]},{\"X\": [1532892062,24],\"Y\": [127,97]},{\"X\": [2014223714,3],\"Y\": [27,3]},{\"X\": [3,48],\"Y\": [102,128]},{\"X\": [49,2014223715],\"Y\": [54,256]},{\"X\": [200001,64],\"Y\": [29,22]}]",
              "sol": "[Pairing.G2Point([uint(162),uint(23)],[uint(11),uint(64)]),Pairing.G2Point([uint(24),uint(3)],[uint(71),uint(26)]),Pairing.G2Point([uint(47),uint(20)],[uint(162),uint(86)]),Pairing.G2Point([uint(1532892062),uint(24)],[uint(127),uint(97)]),Pairing.G2Point([uint(2014223714),uint(3)],[uint(27),uint(3)]),Pairing.G2Point([uint(3),uint(48)],[uint(102),uint(128)]),Pairing.G2Point([uint(49),uint(2014223715)],[uint(54),uint(256)]),Pairing.G2Point([uint(200001),uint(64)],[uint(29),uint(22)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 97,\"Y\": 87},{\"X\": 199999,\"Y\": 17},{\"X\": 63,\"Y\": 64},{\"X\": 55,\"Y\": 64},{\"X\": 96,\"Y\": 33},{\"X\": 10,\"Y\": 199999},{\"X\": 19,\"Y\": 200001},{\"X\": 31,\"Y\": 254},{\"X\": 1532892064,\"Y\": 21}]",
                "sol": "[Pairing.G1Point(70,54),Pairing.G1Point(1023,64),Pairing.G1Point(129,71),Pairing.G1Point(0,10),Pairing.G1Point(1532892062,1025),Pairing.G1Point(5,45),Pairing.G1Point(96,86),Pairing.G1Point(29,95),Pairing.G1Point(200000,11)]"
              },
              {
                "js": "[{\"X\": [162,23],\"Y\": [11,64]},{\"X\": [24,3],\"Y\": [71,26]},{\"X\": [47,20],\"Y\": [162,86]},{\"X\": [1532892062,24],\"Y\": [127,97]},{\"X\": [2014223714,3],\"Y\": [27,3]},{\"X\": [3,48],\"Y\": [102,128]},{\"X\": [49,2014223715],\"Y\": [54,256]},{\"X\": [200001,64],\"Y\": [29,22]}]",
                "sol": "[Pairing.G2Point([uint(162),uint(23)],[uint(11),uint(64)]),Pairing.G2Point([uint(24),uint(3)],[uint(71),uint(26)]),Pairing.G2Point([uint(47),uint(20)],[uint(162),uint(86)]),Pairing.G2Point([uint(1532892062),uint(24)],[uint(127),uint(97)]),Pairing.G2Point([uint(2014223714),uint(3)],[uint(27),uint(3)]),Pairing.G2Point([uint(3),uint(48)],[uint(102),uint(128)]),Pairing.G2Point([uint(49),uint(2014223715)],[uint(54),uint(256)]),Pairing.G2Point([uint(200001),uint(64)],[uint(29),uint(22)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.484ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 60,\"Y\": 56}",
              "sol": "Pairing.G1Point(60,56)"
            },
            {
              "js": "{\"X\": [2014223715,56],\"Y\": [22,101]}",
              "sol": "Pairing.G2Point([uint(2014223715),uint(56)],[uint(22),uint(101)])"
            },
            {
              "js": "{\"X\": 17,\"Y\": 63}",
              "sol": "Pairing.G1Point(17,63)"
            },
            {
              "js": "{\"X\": [256,49],\"Y\": [87,101]}",
              "sol": "Pairing.G2Point([uint(256),uint(49)],[uint(87),uint(101)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.486ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 46,\"Y\": 7}",
              "sol": "Pairing.G1Point(46,7)"
            },
            {
              "js": "{\"X\": [128,1532892062],\"Y\": [128,98]}",
              "sol": "Pairing.G2Point([uint(128),uint(1532892062)],[uint(128),uint(98)])"
            },
            {
              "js": "{\"X\": 29,\"Y\": 27}",
              "sol": "Pairing.G1Point(29,27)"
            },
            {
              "js": "{\"X\": [256,4],\"Y\": [87,64]}",
              "sol": "Pairing.G2Point([uint(256),uint(4)],[uint(87),uint(64)])"
            },
            {
              "js": "{\"X\": 23,\"Y\": 96}",
              "sol": "Pairing.G1Point(23,96)"
            },
            {
              "js": "{\"X\": [65,1532892064],\"Y\": [47,1024]}",
              "sol": "Pairing.G2Point([uint(65),uint(1532892064)],[uint(47),uint(1024)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.491ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.491ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.492ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.493ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.493ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.495ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.496ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.496ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.497ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.498ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.498ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.501ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [130,252,83,192,184,184,69,125,33,62,190,21,191,98,102,43,139,205,99,43,107,161,172,140,204,154,169,148,34,75,241,238],\"capacity\": 20}",
              "sol": "Buffer.buffer(abi.encode(\"130,252,83,192,184,184,69,125,33,62,190,21,191,98,102,43,139,205,99,43,107,161,172,140,204,154,169,148,34,75,241,238\"),20)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.502ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [42,240,99,161,64,63,30,80,92,83,156,13,40,123,88,43,225,86,130,122,81,217,42,136,78,110,244,204,20,165,148,34],\"capacity\": 97}",
              "sol": "Buffer.buffer(abi.encode(\"42,240,99,161,64,63,30,80,92,83,156,13,40,123,88,43,225,86,130,122,81,217,42,136,78,110,244,204,20,165,148,34\"),97)"
            },
            {
              "js": "[142,127,73,175,179,159,83,46,40,79,85,132,221,4,149,27,248,235,76,244,41,86,162,52,134,114,153,71,203,187,59,154]",
              "sol": "abi.encode(\"142,127,73,175,179,159,83,46,40,79,85,132,221,4,149,27,248,235,76,244,41,86,162,52,134,114,153,71,203,187,59,154\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.504ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [53,8,232,255,251,165,240,208,158,42,103,247,42,111,60,246,172,15,6,225,223,63,163,107,230,187,89,210,242,107,2,255],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"53,8,232,255,251,165,240,208,158,42,103,247,42,111,60,246,172,15,6,225,223,63,163,107,230,187,89,210,242,107,2,255\"),61)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.504ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [110,89,47,161,234,250,254,49,202,228,67,227,97,191,66,26,236,120,83,194,231,42,252,25,170,82,94,182,129,97,108,169],\"capacity\": 46}",
              "sol": "Buffer.buffer(abi.encode(\"110,89,47,161,234,250,254,49,202,228,67,227,97,191,66,26,236,120,83,194,231,42,252,25,170,82,94,182,129,97,108,169\"),46)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.505ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[236,108,44,72,161,37,145,85,226,2,240,91,39,96,128,88,149,47,155,170,92,152,68,125,227,212,164,185,130,217,110,143]",
              "sol": "stringToBytes32(\"236,108,44,72,161,37,145,85,226,2,240,91,39,96,128,88,149,47,155,170,92,152,68,125,227,212,164,185,130,217,110,143\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.506ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[163,7,240,43,183,170,67,125,80,138,211,175,90,210,51,18,76,12,90,29,1,91,198,248,175,178,26,177,149,14,196,59]",
              "sol": "stringToBytes32(\"163,7,240,43,183,170,67,125,80,138,211,175,90,210,51,18,76,12,90,29,1,91,198,248,175,178,26,177,149,14,196,59\")"
            },
            {
              "js": "\"6rrpb\"",
              "sol": "\"6rrpb\""
            },
            {
              "js": "[249,138,105,245,98,248,135,202,37,31,10,121,206,173,60,151,233,85,12,254,226,185,171,36,88,233,233,49,213,97,236,219]",
              "sol": "abi.encode(\"249,138,105,245,98,248,135,202,37,31,10,121,206,173,60,151,233,85,12,254,226,185,171,36,88,233,233,49,213,97,236,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.547ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.547ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.548ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.548ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.548ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"7sxjze\"",
              "sol": "\"7sxjze\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.549ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.549ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.549ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.550ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.550ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.551ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"7sxjze\"",
              "sol": "\"7sxjze\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.551ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"6rrpb\"",
              "sol": "\"6rrpb\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.551ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.552ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.552ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.553ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"0\",\"P\",\"9nny7d\"]",
              "sol": "[string(\"0\"),string(\"P\"),string(\"9nny7d\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.553ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"7w0zsk\",\"Transaction successfully verified.\",\"0\",\"Transaction successfully verified.\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"7w0zsk\"),string(\"Transaction successfully verified.\"),string(\"0\"),string(\"Transaction successfully verified.\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.554ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"6rrpb\",\"0\",\"Transaction successfully verified.\",\"ERC1820_ACCEPT_MAGIC\",\"0\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"6rrpb\"),string(\"0\"),string(\"Transaction successfully verified.\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.554ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.555ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.555ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.556ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"6rrpb\"]",
              "sol": "[string(\"6rrpb\")]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.556ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"bwof3\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"bwof3\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.557ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"9nny7d\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"9nny7d\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.557ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"P\"]",
              "sol": "[string(\"P\"),string(\"P\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.558ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"9nny7d\",\"9nny7d\"]",
              "sol": "[string(\"9nny7d\"),string(\"9nny7d\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.558ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"745oxe\",\"6rrpb\",\"9nny7d\"]",
              "sol": "[string(\"745oxe\"),string(\"6rrpb\"),string(\"9nny7d\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.559ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"9nny7d\",\"affby12\",\"Capstones\"]",
              "sol": "[string(\"9nny7d\"),string(\"affby12\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.559ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"bwof3\",\"9nny7d\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"bwof3\"),string(\"9nny7d\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.560ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.561ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"[\",\"Capstones\",\"bwof3\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"[\"),string(\"Capstones\"),string(\"bwof3\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.562ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"24n2\"",
              "sol": "\"24n2\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"0\",\"ERC1820_ACCEPT_MAGIC\",\"7w0zsk\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"0\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"7w0zsk\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.563ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "[\"[\",\"[\",\"0\",\"Capstones\"]",
              "sol": "[string(\"[\"),string(\"[\"),string(\"0\"),string(\"Capstones\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.563ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"affby12\",\"L\",\"Capstones\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"affby12\"),string(\"L\"),string(\"Capstones\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.564ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"\\x19Ethereum Signed Message:\\n32\",\"24n2\",\"\\x19Ethereum Signed Message:\\n32\",\"L\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"24n2\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.564ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"7w0zsk\",\"[\",\"745oxe\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"7w0zsk\"),string(\"[\"),string(\"745oxe\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.565ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"7sxjze\"",
              "sol": "\"7sxjze\""
            },
            {
              "js": "[\"7sxjze\",\"bwof3\",\"9nny7d\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"7sxjze\"]",
              "sol": "[string(\"7sxjze\"),string(\"bwof3\"),string(\"9nny7d\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"7sxjze\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.565ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"L\",\"P\",\"[\",\"affby12\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"L\"),string(\"P\"),string(\"[\"),string(\"affby12\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.566ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[35,221,53,11,95,220,66,251,94,248,92,25,182,219,72,222,186,85,40,107,184,222,122,139,159,198,104,32,231,74,228,10]]",
              "sol": "[bytes(abi.encode(\"35,221,53,11,95,220,66,251,94,248,92,25,182,219,72,222,186,85,40,107,184,222,122,139,159,198,104,32,231,74,228,10\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.566ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[188,130,7,43,75,39,130,35,207,1,212,180,210,65,142,96,230,130,218,244,12,163,219,179,131,23,243,42,2,73,26,37],[103,122,82,15,228,176,29,218,181,183,51,196,183,35,32,232,171,0,121,44,133,129,165,47,213,75,163,140,31,75,135,35],[51,203,223,122,237,108,53,116,210,172,186,55,184,252,247,217,101,206,229,188,139,17,74,42,132,170,140,77,82,124,196,178]]",
              "sol": "[bytes(abi.encode(\"188,130,7,43,75,39,130,35,207,1,212,180,210,65,142,96,230,130,218,244,12,163,219,179,131,23,243,42,2,73,26,37\")),bytes(abi.encode(\"103,122,82,15,228,176,29,218,181,183,51,196,183,35,32,232,171,0,121,44,133,129,165,47,213,75,163,140,31,75,135,35\")),bytes(abi.encode(\"51,203,223,122,237,108,53,116,210,172,186,55,184,252,247,217,101,206,229,188,139,17,74,42,132,170,140,77,82,124,196,178\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.567ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "[[155,110,249,186,1,176,223,182,111,32,146,214,11,255,206,130,12,160,216,198,80,29,40,16,26,137,223,109,162,9,164,106],[61,53,132,80,35,96,168,32,43,116,157,46,234,222,254,46,243,97,100,26,27,56,72,199,228,186,57,198,252,113,46,54],[6,230,249,110,186,82,108,20,127,190,30,70,86,217,160,156,123,59,98,219,251,160,64,107,89,13,79,67,179,84,139,161],[25,13,191,182,65,156,83,23,83,81,9,205,146,116,69,63,47,199,50,45,180,135,189,85,60,6,30,83,159,86,78,213],[193,191,48,242,67,109,20,10,137,146,103,66,219,109,4,195,13,194,179,150,129,153,168,177,64,1,75,48,13,40,236,222],[5,133,158,210,169,184,73,188,89,29,34,226,93,0,240,107,150,254,181,84,149,229,237,79,240,3,203,141,93,248,32,157],[98,217,120,4,120,76,0,189,225,116,13,132,3,151,172,45,50,103,10,47,92,111,80,10,234,134,66,81,207,150,62,30]]",
              "sol": "[bytes(abi.encode(\"155,110,249,186,1,176,223,182,111,32,146,214,11,255,206,130,12,160,216,198,80,29,40,16,26,137,223,109,162,9,164,106\")),bytes(abi.encode(\"61,53,132,80,35,96,168,32,43,116,157,46,234,222,254,46,243,97,100,26,27,56,72,199,228,186,57,198,252,113,46,54\")),bytes(abi.encode(\"6,230,249,110,186,82,108,20,127,190,30,70,86,217,160,156,123,59,98,219,251,160,64,107,89,13,79,67,179,84,139,161\")),bytes(abi.encode(\"25,13,191,182,65,156,83,23,83,81,9,205,146,116,69,63,47,199,50,45,180,135,189,85,60,6,30,83,159,86,78,213\")),bytes(abi.encode(\"193,191,48,242,67,109,20,10,137,146,103,66,219,109,4,195,13,194,179,150,129,153,168,177,64,1,75,48,13,40,236,222\")),bytes(abi.encode(\"5,133,158,210,169,184,73,188,89,29,34,226,93,0,240,107,150,254,181,84,149,229,237,79,240,3,203,141,93,248,32,157\")),bytes(abi.encode(\"98,217,120,4,120,76,0,189,225,116,13,132,3,151,172,45,50,103,10,47,92,111,80,10,234,134,66,81,207,150,62,30\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.568ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[155,39,147,246,29,11,84,7,218,65,227,141,147,208,38,73,3,145,242,96,149,78,173,7,240,64,170,133,71,164,139,246],[16,58,239,39,160,4,66,224,222,240,236,174,61,115,253,236,16,158,56,152,131,205,196,10,152,202,235,239,225,93,35,207]]",
              "sol": "[bytes(abi.encode(\"155,39,147,246,29,11,84,7,218,65,227,141,147,208,38,73,3,145,242,96,149,78,173,7,240,64,170,133,71,164,139,246\")),bytes(abi.encode(\"16,58,239,39,160,4,66,224,222,240,236,174,61,115,253,236,16,158,56,152,131,205,196,10,152,202,235,239,225,93,35,207\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.568ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "[[66,57,66,135,130,97,223,238,38,166,21,245,189,69,160,38,250,205,55,62,23,53,184,126,123,42,250,234,239,47,92,86]]",
              "sol": "[bytes(abi.encode(\"66,57,66,135,130,97,223,238,38,166,21,245,189,69,160,38,250,205,55,62,23,53,184,126,123,42,250,234,239,47,92,86\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.569ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[151,162,247,206,218,32,59,187,7,122,12,191,157,109,4,243,129,236,49,214,169,62,60,33,227,106,206,248,9,159,96,44]]",
              "sol": "[bytes(abi.encode(\"151,162,247,206,218,32,59,187,7,122,12,191,157,109,4,243,129,236,49,214,169,62,60,33,227,106,206,248,9,159,96,44\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.569ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[157,98,5,196,142,210,186,246,98,205,183,111,138,252,250,11,215,21,8,97,213,118,82,125,159,19,192,143,138,177,219,199]]",
              "sol": "[bytes(abi.encode(\"157,98,5,196,142,210,186,246,98,205,183,111,138,252,250,11,215,21,8,97,213,118,82,125,159,19,192,143,138,177,219,199\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.570ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "[[163,136,178,38,142,165,233,55,246,237,160,176,232,9,146,111,88,6,125,151,163,126,181,173,74,40,236,186,34,7,4,36]]",
              "sol": "[bytes(abi.encode(\"163,136,178,38,142,165,233,55,246,237,160,176,232,9,146,111,88,6,125,151,163,126,181,173,74,40,236,186,34,7,4,36\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.570ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "[[117,253,203,195,147,83,145,9,223,250,173,185,179,241,223,60,31,228,90,99,23,157,46,104,15,250,176,58,69,238,52,113],[117,254,62,40,90,206,140,32,218,250,193,31,21,68,197,232,71,144,158,155,127,92,155,204,231,1,183,166,222,238,246,40]]",
              "sol": "[bytes(abi.encode(\"117,253,203,195,147,83,145,9,223,250,173,185,179,241,223,60,31,228,90,99,23,157,46,104,15,250,176,58,69,238,52,113\")),bytes(abi.encode(\"117,254,62,40,90,206,140,32,218,250,193,31,21,68,197,232,71,144,158,155,127,92,155,204,231,1,183,166,222,238,246,40\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.571ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "[[33,216,60,85,191,210,189,114,50,151,31,116,35,95,125,2,18,23,213,51,43,198,88,205,231,77,22,161,172,153,74,239],[184,201,252,215,62,248,115,4,222,122,2,250,178,9,2,113,140,3,212,150,114,248,66,53,225,45,30,233,62,151,143,109]]",
              "sol": "[bytes(abi.encode(\"33,216,60,85,191,210,189,114,50,151,31,116,35,95,125,2,18,23,213,51,43,198,88,205,231,77,22,161,172,153,74,239\")),bytes(abi.encode(\"184,201,252,215,62,248,115,4,222,122,2,250,178,9,2,113,140,3,212,150,114,248,66,53,225,45,30,233,62,151,143,109\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.572ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[220,151,174,164,81,77,68,141,127,202,49,184,133,154,9,40,188,224,174,108,202,115,201,170,68,46,81,120,25,127,60,76],[121,136,50,239,195,162,97,168,22,107,62,185,119,81,144,106,30,226,188,226,208,17,197,40,198,255,141,36,154,206,129,137]]",
              "sol": "[bytes(abi.encode(\"220,151,174,164,81,77,68,141,127,202,49,184,133,154,9,40,188,224,174,108,202,115,201,170,68,46,81,120,25,127,60,76\")),bytes(abi.encode(\"121,136,50,239,195,162,97,168,22,107,62,185,119,81,144,106,30,226,188,226,208,17,197,40,198,255,141,36,154,206,129,137\"))]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.573ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"6rrpb\"",
              "sol": "\"6rrpb\""
            },
            {
              "js": "[[19,152,122,115,208,134,213,174,92,127,39,166,191,100,53,93,24,102,208,171,121,150,230,227,124,73,144,89,107,35,123,138],[67,109,108,230,161,222,226,198,172,187,93,188,234,15,231,219,221,64,186,94,35,63,98,65,241,122,36,55,86,201,142,91]]",
              "sol": "[bytes(abi.encode(\"19,152,122,115,208,134,213,174,92,127,39,166,191,100,53,93,24,102,208,171,121,150,230,227,124,73,144,89,107,35,123,138\")),bytes(abi.encode(\"67,109,108,230,161,222,226,198,172,187,93,188,234,15,231,219,221,64,186,94,35,63,98,65,241,122,36,55,86,201,142,91\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.574ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[251,199,64,149,57,228,53,230,35,122,29,94,182,145,167,254,61,219,140,211,36,117,116,202,245,220,166,154,2,21,48,61],[193,28,72,43,192,27,149,127,224,206,68,212,182,134,23,150,180,122,140,248,30,41,139,95,150,45,39,86,147,71,153,155],[201,149,108,228,8,81,216,86,164,126,82,223,13,50,147,106,223,201,43,150,190,50,144,177,71,128,235,32,54,64,158,128]]",
              "sol": "[bytes(abi.encode(\"251,199,64,149,57,228,53,230,35,122,29,94,182,145,167,254,61,219,140,211,36,117,116,202,245,220,166,154,2,21,48,61\")),bytes(abi.encode(\"193,28,72,43,192,27,149,127,224,206,68,212,182,134,23,150,180,122,140,248,30,41,139,95,150,45,39,86,147,71,153,155\")),bytes(abi.encode(\"201,149,108,228,8,81,216,86,164,126,82,223,13,50,147,106,223,201,43,150,190,50,144,177,71,128,235,32,54,64,158,128\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.574ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"affby12\"",
              "sol": "\"affby12\""
            },
            {
              "js": "[[149,168,231,95,204,194,156,229,44,231,83,39,212,76,191,121,222,174,182,200,50,250,5,240,170,40,209,21,137,132,118,204],[249,194,174,82,169,122,67,103,86,222,131,11,156,178,193,211,104,100,195,133,238,46,229,141,160,64,171,154,137,203,155,112],[227,224,143,240,76,5,236,235,116,218,76,252,8,35,233,114,128,151,21,202,97,192,197,45,21,213,178,40,158,97,156,171]]",
              "sol": "[bytes(abi.encode(\"149,168,231,95,204,194,156,229,44,231,83,39,212,76,191,121,222,174,182,200,50,250,5,240,170,40,209,21,137,132,118,204\")),bytes(abi.encode(\"249,194,174,82,169,122,67,103,86,222,131,11,156,178,193,211,104,100,195,133,238,46,229,141,160,64,171,154,137,203,155,112\")),bytes(abi.encode(\"227,224,143,240,76,5,236,235,116,218,76,252,8,35,233,114,128,151,21,202,97,192,197,45,21,213,178,40,158,97,156,171\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.575ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[214,120,104,191,165,116,220,66,26,1,200,127,217,229,124,96,232,132,136,103,117,17,189,33,142,104,206,116,139,15,166,242],[199,47,155,42,252,185,146,244,21,56,50,185,166,209,66,125,173,89,227,41,110,246,120,123,31,139,228,59,26,250,179,25],[9,242,127,248,157,80,163,191,132,203,156,70,36,121,165,157,115,39,221,103,87,149,208,173,73,197,29,146,33,97,68,100]]",
              "sol": "[bytes(abi.encode(\"214,120,104,191,165,116,220,66,26,1,200,127,217,229,124,96,232,132,136,103,117,17,189,33,142,104,206,116,139,15,166,242\")),bytes(abi.encode(\"199,47,155,42,252,185,146,244,21,56,50,185,166,209,66,125,173,89,227,41,110,246,120,123,31,139,228,59,26,250,179,25\")),bytes(abi.encode(\"9,242,127,248,157,80,163,191,132,203,156,70,36,121,165,157,115,39,221,103,87,149,208,173,73,197,29,146,33,97,68,100\"))]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.576ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[22,68,199,136,191,56,183,19,38,237,20,247,171,178,178,25,149,219,230,103,119,87,228,228,249,67,102,232,37,245,2,164],[179,36,36,87,246,210,98,157,70,233,240,13,122,229,114,232,159,12,108,66,155,44,34,151,167,192,187,119,255,223,155,191],[238,124,225,0,235,199,201,150,179,215,56,57,187,47,58,84,38,60,217,209,255,106,196,90,8,169,190,143,138,74,234,117]]",
              "sol": "[bytes(abi.encode(\"22,68,199,136,191,56,183,19,38,237,20,247,171,178,178,25,149,219,230,103,119,87,228,228,249,67,102,232,37,245,2,164\")),bytes(abi.encode(\"179,36,36,87,246,210,98,157,70,233,240,13,122,229,114,232,159,12,108,66,155,44,34,151,167,192,187,119,255,223,155,191\")),bytes(abi.encode(\"238,124,225,0,235,199,201,150,179,215,56,57,187,47,58,84,38,60,217,209,255,106,196,90,8,169,190,143,138,74,234,117\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.577ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"c48ra5\"",
              "sol": "\"c48ra5\""
            },
            {
              "js": "[[77,22,99,221,248,57,70,161,169,35,46,163,135,117,54,171,249,129,127,136,53,102,108,137,11,107,142,22,226,51,3,43],[97,249,100,92,105,190,40,226,82,109,222,160,45,166,134,134,43,61,176,121,73,161,62,208,202,141,218,199,232,193,188,34],[47,253,105,157,239,205,40,44,233,187,175,187,162,173,76,231,97,141,242,34,67,112,64,93,212,135,111,231,15,37,0,46],[78,157,30,213,103,151,228,14,174,108,240,232,34,174,230,166,207,160,212,148,150,67,63,181,226,44,51,109,112,123,252,167]]",
              "sol": "[bytes(abi.encode(\"77,22,99,221,248,57,70,161,169,35,46,163,135,117,54,171,249,129,127,136,53,102,108,137,11,107,142,22,226,51,3,43\")),bytes(abi.encode(\"97,249,100,92,105,190,40,226,82,109,222,160,45,166,134,134,43,61,176,121,73,161,62,208,202,141,218,199,232,193,188,34\")),bytes(abi.encode(\"47,253,105,157,239,205,40,44,233,187,175,187,162,173,76,231,97,141,242,34,67,112,64,93,212,135,111,231,15,37,0,46\")),bytes(abi.encode(\"78,157,30,213,103,151,228,14,174,108,240,232,34,174,230,166,207,160,212,148,150,67,63,181,226,44,51,109,112,123,252,167\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.577ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[66,238,183,71,107,200,13,102,234,57,163,178,163,56,119,101,11,116,138,240,153,29,3,132,212,246,152,128,125,240,217,24],[254,13,41,110,189,192,18,103,209,88,182,8,242,141,205,186,181,107,197,68,186,215,22,83,92,242,162,90,247,10,100,100],[147,194,35,6,114,150,82,220,121,92,18,19,137,32,33,144,102,229,199,115,169,175,114,215,194,195,60,58,233,151,192,249],[29,42,47,25,161,126,203,183,255,38,33,216,241,51,44,180,254,155,100,31,158,124,50,10,137,163,70,179,119,218,65,10]]",
              "sol": "[bytes(abi.encode(\"66,238,183,71,107,200,13,102,234,57,163,178,163,56,119,101,11,116,138,240,153,29,3,132,212,246,152,128,125,240,217,24\")),bytes(abi.encode(\"254,13,41,110,189,192,18,103,209,88,182,8,242,141,205,186,181,107,197,68,186,215,22,83,92,242,162,90,247,10,100,100\")),bytes(abi.encode(\"147,194,35,6,114,150,82,220,121,92,18,19,137,32,33,144,102,229,199,115,169,175,114,215,194,195,60,58,233,151,192,249\")),bytes(abi.encode(\"29,42,47,25,161,126,203,183,255,38,33,216,241,51,44,180,254,155,100,31,158,124,50,10,137,163,70,179,119,218,65,10\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.578ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[246,226,160,203,180,254,208,29,130,109,87,74,64,241,112,159,117,89,93,74,18,28,0,148,225,94,32,0,10,138,71,80],[9,198,104,235,29,34,138,184,165,192,36,92,53,48,9,253,133,176,7,55,110,131,85,134,22,56,59,87,18,250,185,195],[171,31,161,13,19,183,38,218,233,73,233,39,93,80,57,211,246,58,170,199,21,87,225,118,146,106,236,76,7,125,60,41],[123,73,227,239,193,245,160,119,183,175,109,175,195,15,125,242,209,200,161,231,189,125,33,36,250,236,239,41,106,119,43,86]]",
              "sol": "[bytes(abi.encode(\"246,226,160,203,180,254,208,29,130,109,87,74,64,241,112,159,117,89,93,74,18,28,0,148,225,94,32,0,10,138,71,80\")),bytes(abi.encode(\"9,198,104,235,29,34,138,184,165,192,36,92,53,48,9,253,133,176,7,55,110,131,85,134,22,56,59,87,18,250,185,195\")),bytes(abi.encode(\"171,31,161,13,19,183,38,218,233,73,233,39,93,80,57,211,246,58,170,199,21,87,225,118,146,106,236,76,7,125,60,41\")),bytes(abi.encode(\"123,73,227,239,193,245,160,119,183,175,109,175,195,15,125,242,209,200,161,231,189,125,33,36,250,236,239,41,106,119,43,86\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.579ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"24n2\"",
              "sol": "\"24n2\""
            },
            {
              "js": "[[212,52,11,113,170,58,97,157,242,181,125,138,215,120,156,192,163,243,134,124,18,211,164,176,28,129,34,124,246,246,223,221],[45,144,145,154,13,97,236,48,7,46,38,74,183,214,234,133,255,65,124,244,49,231,232,115,174,6,157,148,143,39,186,57],[120,34,161,62,248,204,162,5,168,240,32,124,53,189,35,8,2,85,8,124,168,157,48,143,114,167,120,157,45,201,48,68],[55,26,163,111,59,42,73,226,144,103,4,104,251,46,69,126,22,28,29,109,172,67,68,181,71,11,119,223,34,39,194,122]]",
              "sol": "[bytes(abi.encode(\"212,52,11,113,170,58,97,157,242,181,125,138,215,120,156,192,163,243,134,124,18,211,164,176,28,129,34,124,246,246,223,221\")),bytes(abi.encode(\"45,144,145,154,13,97,236,48,7,46,38,74,183,214,234,133,255,65,124,244,49,231,232,115,174,6,157,148,143,39,186,57\")),bytes(abi.encode(\"120,34,161,62,248,204,162,5,168,240,32,124,53,189,35,8,2,85,8,124,168,157,48,143,114,167,120,157,45,201,48,68\")),bytes(abi.encode(\"55,26,163,111,59,42,73,226,144,103,4,104,251,46,69,126,22,28,29,109,172,67,68,181,71,11,119,223,34,39,194,122\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.581ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[204,58,230,250,244,26,23,90,221,123,234,116,231,63,56,10,218,239,103,238,136,242,154,236,190,117,52,0,171,127,200,143],[101,159,117,141,81,65,3,142,220,94,78,151,61,44,130,102,89,23,70,19,185,67,230,21,197,113,199,85,215,205,229,81],[196,88,168,8,16,129,168,248,96,147,6,152,204,90,20,116,36,170,228,143,89,72,125,96,171,180,44,28,200,131,56,212],[59,64,15,59,29,86,19,33,238,207,166,108,53,243,184,248,63,96,79,141,231,188,118,105,139,84,50,154,4,218,2,43],[174,83,120,40,133,22,19,149,182,30,78,55,155,61,106,165,174,75,206,127,242,98,111,186,181,54,159,230,100,18,193,122]]",
              "sol": "[bytes(abi.encode(\"204,58,230,250,244,26,23,90,221,123,234,116,231,63,56,10,218,239,103,238,136,242,154,236,190,117,52,0,171,127,200,143\")),bytes(abi.encode(\"101,159,117,141,81,65,3,142,220,94,78,151,61,44,130,102,89,23,70,19,185,67,230,21,197,113,199,85,215,205,229,81\")),bytes(abi.encode(\"196,88,168,8,16,129,168,248,96,147,6,152,204,90,20,116,36,170,228,143,89,72,125,96,171,180,44,28,200,131,56,212\")),bytes(abi.encode(\"59,64,15,59,29,86,19,33,238,207,166,108,53,243,184,248,63,96,79,141,231,188,118,105,139,84,50,154,4,218,2,43\")),bytes(abi.encode(\"174,83,120,40,133,22,19,149,182,30,78,55,155,61,106,165,174,75,206,127,242,98,111,186,181,54,159,230,100,18,193,122\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.582ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[203,198,92,244,128,213,170,199,4,87,117,151,170,121,241,206,87,45,13,152,154,18,87,210,95,99,228,95,215,192,194,189],[102,11,180,41,25,137,116,24,53,245,108,73,173,84,240,132,203,114,63,71,156,198,129,37,53,36,51,133,39,46,36,79],[28,72,76,121,247,74,126,208,243,135,45,148,129,190,202,238,23,167,160,134,70,45,61,114,73,130,85,172,211,188,236,77],[141,100,120,39,195,86,147,61,166,90,95,177,75,210,205,41,43,83,172,210,136,2,249,56,27,100,250,39,238,9,121,153],[4,128,150,74,119,201,226,246,11,71,111,1,176,254,124,204,38,185,188,4,93,82,25,171,66,197,213,103,215,161,62,246]]",
              "sol": "[bytes(abi.encode(\"203,198,92,244,128,213,170,199,4,87,117,151,170,121,241,206,87,45,13,152,154,18,87,210,95,99,228,95,215,192,194,189\")),bytes(abi.encode(\"102,11,180,41,25,137,116,24,53,245,108,73,173,84,240,132,203,114,63,71,156,198,129,37,53,36,51,133,39,46,36,79\")),bytes(abi.encode(\"28,72,76,121,247,74,126,208,243,135,45,148,129,190,202,238,23,167,160,134,70,45,61,114,73,130,85,172,211,188,236,77\")),bytes(abi.encode(\"141,100,120,39,195,86,147,61,166,90,95,177,75,210,205,41,43,83,172,210,136,2,249,56,27,100,250,39,238,9,121,153\")),bytes(abi.encode(\"4,128,150,74,119,201,226,246,11,71,111,1,176,254,124,204,38,185,188,4,93,82,25,171,66,197,213,103,215,161,62,246\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.582ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"6rrpb\"",
              "sol": "\"6rrpb\""
            },
            {
              "js": "[[81,186,141,195,179,233,23,44,46,200,30,97,224,150,171,129,65,29,206,128,183,12,88,7,231,35,203,196,104,9,0,207],[90,143,28,105,143,44,147,219,199,15,136,58,87,147,30,155,159,121,236,174,51,195,140,157,249,49,168,223,49,216,146,217],[49,238,91,74,45,218,135,207,3,168,87,60,251,83,91,58,249,221,1,221,73,195,102,177,107,30,147,152,87,201,242,212],[151,212,232,126,144,129,54,137,66,73,19,141,1,217,1,131,60,162,118,74,58,19,149,32,101,139,235,236,213,135,173,235],[223,242,183,220,196,76,19,118,14,226,120,190,203,79,227,14,249,155,30,47,207,144,205,109,36,170,18,226,226,65,177,85]]",
              "sol": "[bytes(abi.encode(\"81,186,141,195,179,233,23,44,46,200,30,97,224,150,171,129,65,29,206,128,183,12,88,7,231,35,203,196,104,9,0,207\")),bytes(abi.encode(\"90,143,28,105,143,44,147,219,199,15,136,58,87,147,30,155,159,121,236,174,51,195,140,157,249,49,168,223,49,216,146,217\")),bytes(abi.encode(\"49,238,91,74,45,218,135,207,3,168,87,60,251,83,91,58,249,221,1,221,73,195,102,177,107,30,147,152,87,201,242,212\")),bytes(abi.encode(\"151,212,232,126,144,129,54,137,66,73,19,141,1,217,1,131,60,162,118,74,58,19,149,32,101,139,235,236,213,135,173,235\")),bytes(abi.encode(\"223,242,183,220,196,76,19,118,14,226,120,190,203,79,227,14,249,155,30,47,207,144,205,109,36,170,18,226,226,65,177,85\"))]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.583ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[177,202,176,230,155,91,99,184,140,166,36,41,87,54,98,232,122,13,32,79,47,158,218,35,58,146,187,246,249,76,67,180],[152,192,137,15,199,218,146,185,140,130,27,224,255,120,248,69,0,174,140,131,247,255,190,135,171,126,8,89,24,250,253,158],[232,40,4,252,108,138,71,126,232,170,236,123,50,53,146,42,243,81,220,63,174,218,83,214,1,50,134,73,104,3,56,200],[198,83,225,115,104,20,89,255,64,194,137,116,96,239,122,201,221,181,19,47,246,62,226,248,182,80,239,74,44,7,78,125],[48,131,177,141,120,174,9,17,109,167,174,57,94,176,12,207,34,93,154,15,166,33,3,167,243,81,122,72,56,183,246,65]]",
              "sol": "[bytes(abi.encode(\"177,202,176,230,155,91,99,184,140,166,36,41,87,54,98,232,122,13,32,79,47,158,218,35,58,146,187,246,249,76,67,180\")),bytes(abi.encode(\"152,192,137,15,199,218,146,185,140,130,27,224,255,120,248,69,0,174,140,131,247,255,190,135,171,126,8,89,24,250,253,158\")),bytes(abi.encode(\"232,40,4,252,108,138,71,126,232,170,236,123,50,53,146,42,243,81,220,63,174,218,83,214,1,50,134,73,104,3,56,200\")),bytes(abi.encode(\"198,83,225,115,104,20,89,255,64,194,137,116,96,239,122,201,221,181,19,47,246,62,226,248,182,80,239,74,44,7,78,125\")),bytes(abi.encode(\"48,131,177,141,120,174,9,17,109,167,174,57,94,176,12,207,34,93,154,15,166,33,3,167,243,81,122,72,56,183,246,65\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.584ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[26]",
              "sol": "bytes1(\"26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.584ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.584ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.585ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.585ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.585ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.586ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"9nny7d\"",
              "sol": "\"9nny7d\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.586ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"c48ra5\"",
              "sol": "\"c48ra5\""
            },
            {
              "js": "\"6rrpb\"",
              "sol": "\"6rrpb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.586ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.587ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"9nny7d\"",
              "sol": "\"9nny7d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.587ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"745oxe\"",
              "sol": "\"745oxe\""
            },
            {
              "js": "\"c48ra5\"",
              "sol": "\"c48ra5\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.587ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"9nny7d\"",
              "sol": "\"9nny7d\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"24n2\"",
              "sol": "\"24n2\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.588ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.588ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.589ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.589ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.590ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.590ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"7w0zsk\",\"745oxe\",\"[\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"7w0zsk\"),string(\"745oxe\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.591ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[199,42,93,56,152,239,63,201,232,213,62,72,110,105,46,146,140,247,54,217,235,149,230,49,25,155,138,6,163,242,32,164],[160,221,231,104,4,23,2,214,123,108,88,246,101,161,16,106,147,108,5,127,34,93,198,147,70,145,158,125,42,149,10,77],[76,88,244,96,20,127,121,161,212,247,121,233,226,27,223,134,79,203,156,90,83,43,87,161,127,120,255,162,68,167,34,15],[197,122,2,175,97,229,244,185,139,47,51,232,175,149,252,0,21,96,12,228,213,192,229,54,186,145,64,221,113,91,239,18]]",
              "sol": "[bytes(abi.encode(\"199,42,93,56,152,239,63,201,232,213,62,72,110,105,46,146,140,247,54,217,235,149,230,49,25,155,138,6,163,242,32,164\")),bytes(abi.encode(\"160,221,231,104,4,23,2,214,123,108,88,246,101,161,16,106,147,108,5,127,34,93,198,147,70,145,158,125,42,149,10,77\")),bytes(abi.encode(\"76,88,244,96,20,127,121,161,212,247,121,233,226,27,223,134,79,203,156,90,83,43,87,161,127,120,255,162,68,167,34,15\")),bytes(abi.encode(\"197,122,2,175,97,229,244,185,139,47,51,232,175,149,252,0,21,96,12,228,213,192,229,54,186,145,64,221,113,91,239,18\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.591ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.592ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[244,64,158,193,140,72,10,161,35,225,155,211,70,206,176,232,198,202,246,94,137,5,9,226,230,186,235,253,31,114,162,218]",
              "sol": "stringToBytes32(\"244,64,158,193,140,72,10,161,35,225,155,211,70,206,176,232,198,202,246,94,137,5,9,226,230,186,235,253,31,114,162,218\")"
            },
            {
              "js": "[218,207,202,169,170,75,119,65,228,207,156,88,60,249,33,26,201,187,77,86,50,166,151,118,250,230,84,131,236,75,25,116]",
              "sol": "stringToBytes32(\"218,207,202,169,170,75,119,65,228,207,156,88,60,249,33,26,201,187,77,86,50,166,151,118,250,230,84,131,236,75,25,116\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.592ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[23,22,231,35,124,34,242,165,178,119,213,35,90,87,130,204,28,246,58,144,243,1,59,139,198,99,240,72,183,61,120,234]",
              "sol": "stringToBytes32(\"23,22,231,35,124,34,242,165,178,119,213,35,90,87,130,204,28,246,58,144,243,1,59,139,198,99,240,72,183,61,120,234\")"
            },
            {
              "js": "[71,227,236,174,101,51,28,3,191,209,144,154,203,250,85,194,177,91,147,119,163,171,158,111,168,137,193,221,58,11,206,204]",
              "sol": "abi.encode(\"71,227,236,174,101,51,28,3,191,209,144,154,203,250,85,194,177,91,147,119,163,171,158,111,168,137,193,221,58,11,206,204\")"
            },
            {
              "js": "[21,20,76,39,18,20,35,93,246,231,221,168,81,204,216,61,72,114,241,52,27,15,196,145,192,85,58,122,90,222,11,170]",
              "sol": "abi.encode(\"21,20,76,39,18,20,35,93,246,231,221,168,81,204,216,61,72,114,241,52,27,15,196,145,192,85,58,122,90,222,11,170\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.593ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[212,119,231,134,20,200,13,172,108,223,173,74,112,122,212,110,145,56,206,234,78,229,142,169,189,79,16,219,206,210,145,199]",
              "sol": "abi.encode(\"212,119,231,134,20,200,13,172,108,223,173,74,112,122,212,110,145,56,206,234,78,229,142,169,189,79,16,219,206,210,145,199\")"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[144,64,42,156,232,211,10,248,253,254,8,118,24,21,87,53,123,138,223,143,60,69,179,222,8,216,113,179,243,226,95,88]",
              "sol": "abi.encode(\"144,64,42,156,232,211,10,248,253,254,8,118,24,21,87,53,123,138,223,143,60,69,179,222,8,216,113,179,243,226,95,88\")"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.594ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[210,223,230,90,77,129,79,219,46,107,91,191,233,199,232,87,206,8,116,36,70,130,131,79,88,170,87,40,205,26,227,211]",
              "sol": "stringToBytes32(\"210,223,230,90,77,129,79,219,46,107,91,191,233,199,232,87,206,8,116,36,70,130,131,79,88,170,87,40,205,26,227,211\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[247,107,73,102,141,109,212,50,155,187,14,158,173,127,133,244,58,162,53,63,36,84,37,32,126,211,234,69,128,50,182,170]",
              "sol": "abi.encode(\"247,107,73,102,141,109,212,50,155,187,14,158,173,127,133,244,58,162,53,63,36,84,37,32,126,211,234,69,128,50,182,170\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[34,6,227,249,172,109,87,27,249,164,149,176,71,196,182,186,90,125,128,224,241,167,7,11,192,17,4,58,94,56,236,133]",
              "sol": "stringToBytes32(\"34,6,227,249,172,109,87,27,249,164,149,176,71,196,182,186,90,125,128,224,241,167,7,11,192,17,4,58,94,56,236,133\")"
            },
            {
              "js": "\"c48ra5\"",
              "sol": "\"c48ra5\""
            },
            {
              "js": "[211,4,174,219,228,245,58,212,136,211,171,93,187,28,88,101,124,209,247,52,214,19,118,26,195,118,134,41,6,3,230,215]",
              "sol": "abi.encode(\"211,4,174,219,228,245,58,212,136,211,171,93,187,28,88,101,124,209,247,52,214,19,118,26,195,118,134,41,6,3,230,215\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.596ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[20,184,107,76,38,209,102,131,138,126,240,64,126,146,253,155,167,105,60,41,122,220,49,101,193,63,224,227,30,5,97,1]",
              "sol": "stringToBytes32(\"20,184,107,76,38,209,102,131,138,126,240,64,126,146,253,155,167,105,60,41,122,220,49,101,193,63,224,227,30,5,97,1\")"
            },
            {
              "js": "[166,163,192,170,28,171,203,195,57,95,231,171,221,83,174,145,200,44,58,177,72,225,24,21,85,87,4,242,6,154,123,37]",
              "sol": "abi.encode(\"166,163,192,170,28,171,203,195,57,95,231,171,221,83,174,145,200,44,58,177,72,225,24,21,85,87,4,242,6,154,123,37\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[20,184,107,76,38,209,102,131,138,126,240,64,126,146,253,155,167,105,60,41,122,220,49,101,193,63,224,227,30,5,97,1]",
                "sol": "stringToBytes32(\"20,184,107,76,38,209,102,131,138,126,240,64,126,146,253,155,167,105,60,41,122,220,49,101,193,63,224,227,30,5,97,1\")"
              },
              {
                "js": "[75,231,21,194,195,89,21,123,211,142,175,223,92,127,200,4,231,137,127,188,119,76,192,99,116,249,136,51,164,57,241,54,84]",
                "sol": "bytes33(\"75,231,21,194,195,89,21,123,211,142,175,223,92,127,200,4,231,137,127,188,119,76,192,99,116,249,136,51,164,57,241,54,84\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.597ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[179,43,136,237,163,90,212,126,109,109,195,253,15,40,9,249,147,63,28,64,87,71,51,89,40,182,107,101,217,148,65,175]",
              "sol": "abi.encode(\"179,43,136,237,163,90,212,126,109,109,195,253,15,40,9,249,147,63,28,64,87,71,51,89,40,182,107,101,217,148,65,175\")"
            },
            {
              "js": "[144,0,27,168,21,100,183,188,163,172,92,164,32,108,169,181,65,125,19,39,38,163,164,36,167,214,140,153,239,65,101,146]",
              "sol": "stringToBytes32(\"144,0,27,168,21,100,183,188,163,172,92,164,32,108,169,181,65,125,19,39,38,163,164,36,167,214,140,153,239,65,101,146\")"
            },
            {
              "js": "[65,241,207,130,156,118,237,181,0,100,74,3,229,8,236,19,161,241,135,42,98,90,137,225,25,69,191,112,167,223,22,161]",
              "sol": "abi.encode(\"65,241,207,130,156,118,237,181,0,100,74,3,229,8,236,19,161,241,135,42,98,90,137,225,25,69,191,112,167,223,22,161\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[47,147,222,189,16,148,162,222,22,80,160,158,213,103,71,176,118,66,36,124,26,5,216,140,116,215,57,63,89,191,62,131]",
              "sol": "abi.encode(\"47,147,222,189,16,148,162,222,22,80,160,158,213,103,71,176,118,66,36,124,26,5,216,140,116,215,57,63,89,191,62,131\")"
            },
            {
              "js": "[101,103,207,94,154,180,90,115,57,214,24,29,217,180,76,25,95,59,42,102,236,136,223,31,229,175,25,156,218,102,213,235]",
              "sol": "stringToBytes32(\"101,103,207,94,154,180,90,115,57,214,24,29,217,180,76,25,95,59,42,102,236,136,223,31,229,175,25,156,218,102,213,235\")"
            },
            {
              "js": "[95,147,185,96,13,14,149,153,191,131,219,24,63,193,187,171,93,218,220,165,237,237,100,19,238,118,79,98,72,229,78,11]",
              "sol": "abi.encode(\"95,147,185,96,13,14,149,153,191,131,219,24,63,193,187,171,93,218,220,165,237,237,100,19,238,118,79,98,72,229,78,11\")"
            },
            {
              "js": "\"bwof3\"",
              "sol": "\"bwof3\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[175,241,23,43,187,218,232,194,59,181,145,79,187,87,57,152,4,157,99,189,4,21,172,48,204,121,53,151,60,242,178,105]",
              "sol": "abi.encode(\"175,241,23,43,187,218,232,194,59,181,145,79,187,87,57,152,4,157,99,189,4,21,172,48,204,121,53,151,60,242,178,105\")"
            },
            {
              "js": "[246,185,95,224,194,185,2,35,83,192,36,85,212,64,174,79,206,171,71,92,125,6,47,34,54,156,202,1,21,154,52,11]",
              "sol": "stringToBytes32(\"246,185,95,224,194,185,2,35,83,192,36,85,212,64,174,79,206,171,71,92,125,6,47,34,54,156,202,1,21,154,52,11\")"
            },
            {
              "js": "[162,238,111,115,217,18,79,34,10,124,85,230,46,244,13,100,158,237,117,214,149,104,8,231,229,253,62,143,224,183,238,34]",
              "sol": "abi.encode(\"162,238,111,115,217,18,79,34,10,124,85,230,46,244,13,100,158,237,117,214,149,104,8,231,229,253,62,143,224,183,238,34\")"
            },
            {
              "js": "\"7w0zsk\"",
              "sol": "\"7w0zsk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[197,26,85,5,154,214,161,149,43,163,172,72,185,150,127,226,206,60,98,125,144,87,251,134,46,26,188,174,130,171,17,139]",
              "sol": "abi.encode(\"197,26,85,5,154,214,161,149,43,163,172,72,185,150,127,226,206,60,98,125,144,87,251,134,46,26,188,174,130,171,17,139\")"
            },
            {
              "js": "[211,112,97,48,204,18,171,155,59,29,181,88,179,169,157,20,107,66,82,213,241,239,215,246,83,29,239,3,186,231,74,244]",
              "sol": "stringToBytes32(\"211,112,97,48,204,18,171,155,59,29,181,88,179,169,157,20,107,66,82,213,241,239,215,246,83,29,239,3,186,231,74,244\")"
            },
            {
              "js": "[10,230,45,189,16,50,239,113,233,122,86,70,16,53,146,146,223,247,169,234,200,114,28,103,206,238,50,93,184,124,197,215]",
              "sol": "abi.encode(\"10,230,45,189,16,50,239,113,233,122,86,70,16,53,146,146,223,247,169,234,200,114,28,103,206,238,50,93,184,124,197,215\")"
            },
            {
              "js": "\"24n2\"",
              "sol": "\"24n2\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[81,197,92,132,73,202,174,157,182,33,164,254,201,107,112,36,61,245,49,33,58,240,159,14,146,35,188,175,149,169,108,163]",
              "sol": "abi.encode(\"81,197,92,132,73,202,174,157,182,33,164,254,201,107,112,36,61,245,49,33,58,240,159,14,146,35,188,175,149,169,108,163\")"
            },
            {
              "js": "[72,252,151,88,204,100,21,90,188,166,125,88,235,209,202,89,146,219,82,100,177,177,29,118,201,240,179,247,220,65,18,121]",
              "sol": "stringToBytes32(\"72,252,151,88,204,100,21,90,188,166,125,88,235,209,202,89,146,219,82,100,177,177,29,118,201,240,179,247,220,65,18,121\")"
            },
            {
              "js": "[106,236,148,140,42,145,201,196,179,190,255,45,208,200,39,131,160,86,154,147,192,99,224,49,226,36,76,98,196,77,52,62]",
              "sol": "abi.encode(\"106,236,148,140,42,145,201,196,179,190,255,45,208,200,39,131,160,86,154,147,192,99,224,49,226,36,76,98,196,77,52,62\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[116,61,119,71,249,58,7,104,32,146,65,77,15,9,127,203,254,34,140,255,112,232,62,176,149,48,199,91,36,44,114,58]",
              "sol": "abi.encode(\"116,61,119,71,249,58,7,104,32,146,65,77,15,9,127,203,254,34,140,255,112,232,62,176,149,48,199,91,36,44,114,58\")"
            },
            {
              "js": "[99,117,184,84,206,96,6,43,207,120,39,92,121,198,99,142,26,44,202,26,75,42,66,106,226,160,12,197,150,63,209,137]",
              "sol": "stringToBytes32(\"99,117,184,84,206,96,6,43,207,120,39,92,121,198,99,142,26,44,202,26,75,42,66,106,226,160,12,197,150,63,209,137\")"
            },
            {
              "js": "[89,98,224,117,219,61,52,219,77,122,10,245,148,7,119,50,55,236,247,76,248,98,131,171,19,30,94,124,180,4,188,85]",
              "sol": "abi.encode(\"89,98,224,117,219,61,52,219,77,122,10,245,148,7,119,50,55,236,247,76,248,98,131,171,19,30,94,124,180,4,188,85\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[70,117,152,181,108,152,209,43,3,66,9,183,122,224,29,100,171,30,153,32,26,117,225,168,195,182,150,92,8,226,94,175]",
              "sol": "abi.encode(\"70,117,152,181,108,152,209,43,3,66,9,183,122,224,29,100,171,30,153,32,26,117,225,168,195,182,150,92,8,226,94,175\")"
            },
            {
              "js": "[145,101,72,190,172,120,55,250,122,201,172,203,253,124,211,6,19,128,129,159,246,117,6,136,196,145,134,36,137,213,186,237]",
              "sol": "stringToBytes32(\"145,101,72,190,172,120,55,250,122,201,172,203,253,124,211,6,19,128,129,159,246,117,6,136,196,145,134,36,137,213,186,237\")"
            },
            {
              "js": "[121,40,85,4,216,181,235,239,5,134,71,20,155,28,150,113,95,195,243,179,127,92,151,73,45,218,166,253,220,153,88,73]",
              "sol": "abi.encode(\"121,40,85,4,216,181,235,239,5,134,71,20,155,28,150,113,95,195,243,179,127,92,151,73,45,218,166,253,220,153,88,73\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[245,30,25,72,167,251,19,62,93,209,219,175,104,102,132,106,226,182,11,215,190,214,63,90,117,61,219,18,253,255,130,72]",
              "sol": "abi.encode(\"245,30,25,72,167,251,19,62,93,209,219,175,104,102,132,106,226,182,11,215,190,214,63,90,117,61,219,18,253,255,130,72\")"
            },
            {
              "js": "[61,197,58,10,71,12,148,59,251,151,14,22,61,115,97,233,77,115,232,246,244,105,93,20,111,229,127,238,38,190,152,241]",
              "sol": "stringToBytes32(\"61,197,58,10,71,12,148,59,251,151,14,22,61,115,97,233,77,115,232,246,244,105,93,20,111,229,127,238,38,190,152,241\")"
            },
            {
              "js": "[226,90,122,189,226,229,74,68,53,2,42,243,11,130,230,241,225,230,52,78,117,5,203,84,97,19,69,141,115,214,81,2]",
              "sol": "abi.encode(\"226,90,122,189,226,229,74,68,53,2,42,243,11,130,230,241,225,230,52,78,117,5,203,84,97,19,69,141,115,214,81,2\")"
            },
            {
              "js": "\"affby12\"",
              "sol": "\"affby12\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.602ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[65,231,201,189,34,187,93,146,188,32,194,53,202,162,40,215,34,38,154,38,10,49,210,183,232,177,201,223,155,59,44,51]",
              "sol": "abi.encode(\"65,231,201,189,34,187,93,146,188,32,194,53,202,162,40,215,34,38,154,38,10,49,210,183,232,177,201,223,155,59,44,51\")"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[189,208,165,197,238,18,37,64,124,225,35,183,52,140,100,21,178,191,48,228,175,30,64,175,208,75,104,173,220,12,204,38]",
              "sol": "abi.encode(\"189,208,165,197,238,18,37,64,124,225,35,183,52,140,100,21,178,191,48,228,175,30,64,175,208,75,104,173,220,12,204,38\")"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.603ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[28,5,195,14,60,5,76,111,43,46,252,224,248,195,219,98,102,67,89,190,110,102,123,65,202,5,19,61,194,177,235,112]",
              "sol": "stringToBytes32(\"28,5,195,14,60,5,76,111,43,46,252,224,248,195,219,98,102,67,89,190,110,102,123,65,202,5,19,61,194,177,235,112\")"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "[195,119,238,253,15,255,130,254,122,195,99,195,252,153,97,181,53,183,243,138,0,124,39,2,174,251,96,11,33,238,104,207]",
              "sol": "stringToBytes32(\"195,119,238,253,15,255,130,254,122,195,99,195,252,153,97,181,53,183,243,138,0,124,39,2,174,251,96,11,33,238,104,207\")"
            },
            {
              "js": "[58,187,135,238,52,104,133,63,16,50,103,232,94,168,204,75,181,152,227,249,175,240,184,63,109,3,135,243,117,238,75,249]",
              "sol": "stringToBytes32(\"58,187,135,238,52,104,133,63,16,50,103,232,94,168,204,75,181,152,227,249,175,240,184,63,109,3,135,243,117,238,75,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.604ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[243,23,248,71,28,206,225,100,143,45,104,156,201,179,184,104,89,40,84,199,191,63,195,237,159,178,214,78,253,244,3,101]",
              "sol": "stringToBytes32(\"243,23,248,71,28,206,225,100,143,45,104,156,201,179,184,104,89,40,84,199,191,63,195,237,159,178,214,78,253,244,3,101\")"
            },
            {
              "js": "[1,44,176,75,122,182,68,146,36,31,35,20,65,53,168]",
              "sol": "abi.encode(\"1,44,176,75,122,182,68,146,36,31,35,20,65,53,168\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[70,207,5,10,225,210,223,245,109,142,93,20,181,69,163,27,116,29,208,221,66,136,60,35,206,176,12,220,41,152,11,72]",
              "sol": "stringToBytes32(\"70,207,5,10,225,210,223,245,109,142,93,20,181,69,163,27,116,29,208,221,66,136,60,35,206,176,12,220,41,152,11,72\")"
            },
            {
              "js": "[87,32,200,139,129,154,216,20,25,71,203,8,242,56,35,162,212,2,89,234,227,80,163,200,34,212,131,87,214,55,99,208,52,85,228,116,109,87,213,85,93,251,145,103,69,119,146,141,214,120,34,142,77,21,150,245,235,0,96,172,188,37,61,88,62]",
              "sol": "abi.encode(\"87,32,200,139,129,154,216,20,25,71,203,8,242,56,35,162,212,2,89,234,227,80,163,200,34,212,131,87,214,55,99,208,52,85,228,116,109,87,213,85,93,251,145,103,69,119,146,141,214,120,34,142,77,21,150,245,235,0,96,172,188,37,61,88,62\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.605ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.606ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[69,128]",
              "sol": "[uint(69),uint(128)]"
            },
            {
              "js": "[[1024,56],[1023,3]]",
              "sol": "[[uint(1024),uint(56)],[uint(1023),uint(3)]]"
            },
            {
              "js": "[87,2014223715]",
              "sol": "[uint(87),uint(2014223715)]"
            },
            {
              "js": "[102,11]",
              "sol": "[uint(102),uint(11)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.608ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.608ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[1532892064,64,87,45,27,7,98]",
              "sol": "[uint(1532892064),uint(64),uint(87),uint(45),uint(27),uint(7),uint(98)]"
            },
            {
              "js": "{\"A\": {\"X\": 97,\"Y\": 3},\"B\": {\"X\": [65,1532892063],\"Y\": [5,2]},\"C\": {\"X\": 17,\"Y\": 255}}",
              "sol": "Verifier.Proof(Pairing.G1Point(97,3),Pairing.G2Point([uint(65),uint(1532892063)],[uint(5),uint(2)]),Pairing.G1Point(17,255))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[60,1025,55,257,70,63]",
              "sol": "[uint(60),uint(1025),uint(55),uint(257),uint(70),uint(63)]"
            },
            {
              "js": "{\"A\": {\"X\": 1025,\"Y\": 31},\"B\": {\"X\": [11,129],\"Y\": [2,49]},\"C\": {\"X\": 98,\"Y\": 20}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1025,31),Pairing.G2Point([uint(11),uint(129)],[uint(2),uint(49)]),Pairing.G1Point(98,20))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.612ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.612ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.612ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"accounts[2]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.614ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.614ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.615ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.615ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.621ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "55",
                "sol": "55"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.622ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "[60,69,48,65,211,205,30,44,213,145,230,227,143,134,60,204,148,95,58,204,57,224,22,113,130,29,58,236,48,251,40,157]",
              "sol": "abi.encode(\"60,69,48,65,211,205,30,44,213,145,230,227,143,134,60,204,148,95,58,204,57,224,22,113,130,29,58,236,48,251,40,157\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": "[60,69,48,65,211,205,30,44,213,145,230,227,143,134,60,204,148,95,58,204,57,224,22,113,130,29,58,236,48,251,40,157]",
                "sol": "abi.encode(\"60,69,48,65,211,205,30,44,213,145,230,227,143,134,60,204,148,95,58,204,57,224,22,113,130,29,58,236,48,251,40,157\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.624ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.625ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[203,196,224,26]",
              "sol": "bytes4(\"203,196,224,26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.626ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.627ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.627ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "33",
                "sol": "33"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.628ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.629ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[63,224,224,233,57,146,253,113,157,85,0,13,36,99,68,197,194,14,106,33,218,126,190,250,115,108,199,184,28,236,5,182]",
              "sol": "abi.encode(\"63,224,224,233,57,146,253,113,157,85,0,13,36,99,68,197,194,14,106,33,218,126,190,250,115,108,199,184,28,236,5,182\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "[188,225,88,140,20,236,37,8,84,203,220,229,25,12,171,211,198,178,132,33,31,119,47,113,38,177,21,103,245,161,224,114]",
              "sol": "abi.encode(\"188,225,88,140,20,236,37,8,84,203,220,229,25,12,171,211,198,178,132,33,31,119,47,113,38,177,21,103,245,161,224,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.630ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.633ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[48,10]",
              "sol": "[uint(48),uint(10)]"
            },
            {
              "js": "[[33,1025],[47,21]]",
              "sol": "[[uint(33),uint(1025)],[uint(47),uint(21)]]"
            },
            {
              "js": "[45,88]",
              "sol": "[uint(45),uint(88)]"
            },
            {
              "js": "[1,2014223714]",
              "sol": "[uint(1),uint(2014223714)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.636ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.637ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.638ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.639ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.639ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.640ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.642ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.643ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.643ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.645ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.646ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T22:38:41.647ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.648ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T22:38:41.648ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}