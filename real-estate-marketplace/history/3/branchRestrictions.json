,{
  "2020-11-10T09:52:53.819ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:53:08.604ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:53:23.605ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:53:39.307ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"lnr2ym\"",
              "sol": "\"lnr2ym\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:53:54.813ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:10.361ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.878ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [104,166,26,79,92,90,43,59,152,97,217,191,211,46,148,238,96,253,152,243,42,202,114,84,152,176,85,19,216,240,29,4],\"capacity\": 86}",
              "sol": "Buffer.buffer(abi.encode(\"104,166,26,79,92,90,43,59,152,97,217,191,211,46,148,238,96,253,152,243,42,202,114,84,152,176,85,19,216,240,29,4\"),86)"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.880ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [194,27,124,52,75,36,87,220,140,65,172,114,31,103,62,75,84,8,69,153,73,35,96,62,72,160,232,22,6,230,17,99],\"capacity\": 47}",
              "sol": "Buffer.buffer(abi.encode(\"194,27,124,52,75,36,87,220,140,65,172,114,31,103,62,75,84,8,69,153,73,35,96,62,72,160,232,22,6,230,17,99\"),47)"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [147,107,152,149,42,233,162,174,22,201,226,240,164,8,72,36,98,112,212,229,17,132,105,74,60,65,199,226,207,91,91,154],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"147,107,152,149,42,233,162,174,22,201,226,240,164,8,72,36,98,112,212,229,17,132,105,74,60,65,199,226,207,91,91,154\"),70)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.881ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [69,108,188,245,152,80,227,121,220,234,46,108,23,18,146,234,237,128,184,181,243,69,12,231,70,185,144,243,200,97,196,192],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"69,108,188,245,152,80,227,121,220,234,46,108,23,18,146,234,237,128,184,181,243,69,12,231,70,185,144,243,200,97,196,192\"),5)"
            },
            {
              "js": "[176,148,10,155,141,208,41,72,191,177,111,13,106,194,211,93,139,204,68,188,189,175,156,8,61,149,229,182,86,210,6,118]",
              "sol": "abi.encode(\"176,148,10,155,141,208,41,72,191,177,111,13,106,194,211,93,139,204,68,188,189,175,156,8,61,149,229,182,86,210,6,118\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.881ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [71,91,37,243,144,89,12,47,245,128,194,116,132,63,163,57,80,123,59,69,158,110,94,19,44,187,140,167,41,33,120,219],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"71,91,37,243,144,89,12,47,245,128,194,116,132,63,163,57,80,123,59,69,158,110,94,19,44,187,140,167,41,33,120,219\"),256)"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.882ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [17,3,221,22,12,92,64,141,39,37,78,161,25,182,229,19,9,197,183,160,97,248,248,80,207,154,161,189,51,142,62,182],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"17,3,221,22,12,92,64,141,39,37,78,161,25,182,229,19,9,197,183,160,97,248,248,80,207,154,161,189,51,142,62,182\"),101)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.882ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [182,243,206,248,174,250,239,241,22,29,83,8,226,64,74,152,207,60,217,133,213,218,31,45,131,63,137,175,141,253,158,153],\"capacity\": 162}",
              "sol": "Buffer.buffer(abi.encode(\"182,243,206,248,174,250,239,241,22,29,83,8,226,64,74,152,207,60,217,133,213,218,31,45,131,63,137,175,141,253,158,153\"),162)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.882ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [0,36,33,10,250,192,16,60,225,179,155,156,139,238,218,91,170,83,43,31,110,237,109,5,217,251,133,125,169,1,99,165],\"capacity\": 8}",
              "sol": "Buffer.buffer(abi.encode(\"0,36,33,10,250,192,16,60,225,179,155,156,139,238,218,91,170,83,43,31,110,237,109,5,217,251,133,125,169,1,99,165\"),8)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.886ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.886ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.887ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 32,\"Y\": 56}",
              "sol": "Pairing.G1Point(32,56)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.887ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 200000,\"Y\": 31}",
              "sol": "Pairing.G1Point(200000,31)"
            },
            {
              "js": "{\"X\": 55,\"Y\": 97}",
              "sol": "Pairing.G1Point(55,97)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.888ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [4,1532892063],\"Y\": [28,102]}",
              "sol": "Pairing.G2Point([uint(4),uint(1532892063)],[uint(28),uint(102)])"
            },
            {
              "js": "{\"X\": [56,56],\"Y\": [103,128]}",
              "sol": "Pairing.G2Point([uint(56),uint(56)],[uint(103),uint(128)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.889ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 129,\"Y\": 54}",
              "sol": "Pairing.G1Point(129,54)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.889ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 69,\"Y\": 1023},{\"X\": 18,\"Y\": 9},{\"X\": 26,\"Y\": 1025},{\"X\": 46,\"Y\": 46},{\"X\": 57,\"Y\": 65},{\"X\": 30,\"Y\": 49}]",
              "sol": "[Pairing.G1Point(69,1023),Pairing.G1Point(18,9),Pairing.G1Point(26,1025),Pairing.G1Point(46,46),Pairing.G1Point(57,65),Pairing.G1Point(30,49)]"
            },
            {
              "js": "[{\"X\": [95,200000],\"Y\": [28,2014223715]},{\"X\": [31,66],\"Y\": [29,254]},{\"X\": [88,32],\"Y\": [54,60]},{\"X\": [17,58],\"Y\": [15,30]},{\"X\": [60,128],\"Y\": [8,15]},{\"X\": [98,98],\"Y\": [48,59]}]",
              "sol": "[Pairing.G2Point([uint(95),uint(200000)],[uint(28),uint(2014223715)]),Pairing.G2Point([uint(31),uint(66)],[uint(29),uint(254)]),Pairing.G2Point([uint(88),uint(32)],[uint(54),uint(60)]),Pairing.G2Point([uint(17),uint(58)],[uint(15),uint(30)]),Pairing.G2Point([uint(60),uint(128)],[uint(8),uint(15)]),Pairing.G2Point([uint(98),uint(98)],[uint(48),uint(59)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 1025,\"Y\": 10},{\"X\": 20,\"Y\": 87},{\"X\": 49,\"Y\": 161},{\"X\": 2,\"Y\": 0},{\"X\": 6,\"Y\": 98},{\"X\": 9,\"Y\": 95},{\"X\": 10,\"Y\": 1}]",
                "sol": "[Pairing.G1Point(257,1023),Pairing.G1Point(22,6),Pairing.G1Point(1532892063,1023),Pairing.G1Point(1023,102),Pairing.G1Point(63,48),Pairing.G1Point(21,129),Pairing.G1Point(257,16)]"
              },
              {
                "js": "[{\"X\": [95,200000],\"Y\": [28,2014223715]},{\"X\": [31,66],\"Y\": [29,254]},{\"X\": [88,32],\"Y\": [54,60]},{\"X\": [17,58],\"Y\": [15,30]},{\"X\": [60,128],\"Y\": [8,15]},{\"X\": [98,98],\"Y\": [48,59]}]",
                "sol": "[Pairing.G2Point([uint(95),uint(200000)],[uint(28),uint(2014223715)]),Pairing.G2Point([uint(31),uint(66)],[uint(29),uint(254)]),Pairing.G2Point([uint(88),uint(32)],[uint(54),uint(60)]),Pairing.G2Point([uint(17),uint(58)],[uint(15),uint(30)]),Pairing.G2Point([uint(60),uint(128)],[uint(8),uint(15)]),Pairing.G2Point([uint(98),uint(98)],[uint(48),uint(59)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:25.894ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 255,\"Y\": 61}",
              "sol": "Pairing.G1Point(255,61)"
            },
            {
              "js": "{\"X\": [33,161],\"Y\": [256,88]}",
              "sol": "Pairing.G2Point([uint(33),uint(161)],[uint(256),uint(88)])"
            },
            {
              "js": "{\"X\": 19,\"Y\": 15}",
              "sol": "Pairing.G1Point(19,15)"
            },
            {
              "js": "{\"X\": [254,55],\"Y\": [57,61]}",
              "sol": "Pairing.G2Point([uint(254),uint(55)],[uint(57),uint(61)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.895ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 3,\"Y\": 45}",
              "sol": "Pairing.G1Point(3,45)"
            },
            {
              "js": "{\"X\": [161,1532892063],\"Y\": [86,162]}",
              "sol": "Pairing.G2Point([uint(161),uint(1532892063)],[uint(86),uint(162)])"
            },
            {
              "js": "{\"X\": 56,\"Y\": 49}",
              "sol": "Pairing.G1Point(56,49)"
            },
            {
              "js": "{\"X\": [96,10],\"Y\": [98,1]}",
              "sol": "Pairing.G2Point([uint(96),uint(10)],[uint(98),uint(1)])"
            },
            {
              "js": "{\"X\": 10,\"Y\": 47}",
              "sol": "Pairing.G1Point(10,47)"
            },
            {
              "js": "{\"X\": [57,1],\"Y\": [2014223715,25]}",
              "sol": "Pairing.G2Point([uint(57),uint(1)],[uint(2014223715),uint(25)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.900ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.900ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.901ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.901ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.902ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.902ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.903ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.903ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.904ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.904ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.905ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.908ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [175,52,118,35,29,124,124,32,91,162,218,78,75,101,39,33,71,68,108,197,114,30,144,166,50,233,105,249,200,72,90,170],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"175,52,118,35,29,124,124,32,91,162,218,78,75,101,39,33,71,68,108,197,114,30,144,166,50,233,105,249,200,72,90,170\"),103)"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.908ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [187,153,11,173,115,132,188,38,192,64,156,155,203,92,167,111,201,9,35,159,117,27,165,77,52,184,11,205,131,248,121,115],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"187,153,11,173,115,132,188,38,192,64,156,155,203,92,167,111,201,9,35,159,117,27,165,77,52,184,11,205,131,248,121,115\"),59)"
            },
            {
              "js": "[210,230,173,130,194,184,150,242,243,46,216,165,57,33,14,87,44,172,102,99,133,172,210,186,241,26,66,178,222,61,184,193]",
              "sol": "abi.encode(\"210,230,173,130,194,184,150,242,243,46,216,165,57,33,14,87,44,172,102,99,133,172,210,186,241,26,66,178,222,61,184,193\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.909ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [113,237,135,184,179,88,175,85,45,117,108,168,174,107,221,183,211,224,28,212,205,123,14,158,101,155,71,33,127,66,163,232],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"113,237,135,184,179,88,175,85,45,117,108,168,174,107,221,183,211,224,28,212,205,123,14,158,101,155,71,33,127,66,163,232\"),3)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.909ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [99,70,175,240,64,247,234,61,15,128,42,108,136,248,152,140,197,22,40,9,36,58,145,151,50,159,169,36,139,6,120,71],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"99,70,175,240,64,247,234,61,15,128,42,108,136,248,152,140,197,22,40,9,36,58,145,151,50,159,169,36,139,6,120,71\"),161)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.910ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[118,0,159,67,195,234,245,11,57,65,107,91,159,185,206,153,90,20,20,92,202,59,117,17,61,216,86,246,10,207,240,28]",
              "sol": "stringToBytes32(\"118,0,159,67,195,234,245,11,57,65,107,91,159,185,206,153,90,20,20,92,202,59,117,17,61,216,86,246,10,207,240,28\")"
            },
            {
              "js": "\"lnr2ym\"",
              "sol": "\"lnr2ym\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.911ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[121,111,209,184,35,34,192,159,114,184,212,43,81,88,137,46,29,156,126,79,130,82,168,180,70,47,165,242,91,217,106,155]",
              "sol": "stringToBytes32(\"121,111,209,184,35,34,192,159,114,184,212,43,81,88,137,46,29,156,126,79,130,82,168,180,70,47,165,242,91,217,106,155\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[134,93,26,116,254,26,181,188,101,18,176,115,128,153,54,88,157,92,115,11,104,34,55,6,236,102,86,110,176,14,58,24]",
              "sol": "abi.encode(\"134,93,26,116,254,26,181,188,101,18,176,115,128,153,54,88,157,92,115,11,104,34,55,6,236,102,86,110,176,14,58,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.943ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.943ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.944ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.944ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.944ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.945ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.945ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.946ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.946ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"lnr2ym\"",
              "sol": "\"lnr2ym\""
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.947ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.947ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.952ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.953ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.954ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.954ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"0\",\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"g7ncsh\",\"Capstones\",\"0\"]",
              "sol": "[string(\"0\"),string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"g7ncsh\"),string(\"Capstones\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.955ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"P\",\"lnr2ym\",\"Transaction successfully verified.\",\"0\"]",
              "sol": "[string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\"),string(\"lnr2ym\"),string(\"Transaction successfully verified.\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.955ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"mz612n\",\"86uz3t\",\"L\",\"Transaction successfully verified.\",\"0\",\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\",\"P\"]",
              "sol": "[string(\"mz612n\"),string(\"86uz3t\"),string(\"L\"),string(\"Transaction successfully verified.\"),string(\"0\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\"),string(\"P\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.956ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"86uz3t\",\"ERC1820_ACCEPT_MAGIC\",\"P\",\"mz612n\",\"mz612n\",\"mz612n\",\"86uz3t\",\"jndwnq\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"86uz3t\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"P\"),string(\"mz612n\"),string(\"mz612n\"),string(\"mz612n\"),string(\"86uz3t\"),string(\"jndwnq\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.957ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "[\"lnr2ym\"]",
              "sol": "[string(\"lnr2ym\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.957ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.958ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.958ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.959ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"g7ncsh\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"g7ncsh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.959ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"v7ru4n\",\"mz612n\"]",
              "sol": "[string(\"v7ru4n\"),string(\"mz612n\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.960ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"og27p3\"",
              "sol": "\"og27p3\""
            },
            {
              "js": "[\"jndwnq\",\"bplqeq\"]",
              "sol": "[string(\"jndwnq\"),string(\"bplqeq\")]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.960ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"7lq0b1\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"7lq0b1\")]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.961ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"fu35bh\"",
              "sol": "\"fu35bh\""
            },
            {
              "js": "[\"g7ncsh\",\"og27p3\",\"Capstones\"]",
              "sol": "[string(\"g7ncsh\"),string(\"og27p3\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.961ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "[\"L\",\"bplqeq\",\"mz612n\"]",
              "sol": "[string(\"L\"),string(\"bplqeq\"),string(\"mz612n\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.962ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[\"[\",\"fu35bh\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"[\"),string(\"fu35bh\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.963ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\",\"7lq0b1\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"7lq0b1\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.963ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "[\"v7ru4n\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"0\",\"og27p3\"]",
              "sol": "[string(\"v7ru4n\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"0\"),string(\"og27p3\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.964ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "[\"28pq3b\",\"Capstones\",\"28pq3b\",\"L\"]",
              "sol": "[string(\"28pq3b\"),string(\"Capstones\"),string(\"28pq3b\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.964ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"0\",\"g7ncsh\",\"28pq3b\",\"og27p3\"]",
              "sol": "[string(\"0\"),string(\"g7ncsh\"),string(\"28pq3b\"),string(\"og27p3\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.965ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\",\"86uz3t\",\"86uz3t\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\"),string(\"86uz3t\"),string(\"86uz3t\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.965ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"og27p3\",\"lnr2ym\",\"0\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"og27p3\"),string(\"lnr2ym\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.966ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"og27p3\",\"L\",\"og27p3\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"og27p3\"),string(\"L\"),string(\"og27p3\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.966ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"jndwnq\",\"[\",\"28pq3b\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"v7ru4n\"]",
              "sol": "[string(\"jndwnq\"),string(\"[\"),string(\"28pq3b\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"v7ru4n\")]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.967ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"v7ru4n\",\"fu35bh\",\"7lq0b1\",\"fu35bh\",\"v7ru4n\"]",
              "sol": "[string(\"v7ru4n\"),string(\"fu35bh\"),string(\"7lq0b1\"),string(\"fu35bh\"),string(\"v7ru4n\")]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.967ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[175,255,135,192,34,158,29,195,77,155,8,129,233,114,35,248,72,14,248,245,233,171,230,227,86,143,176,195,127,21,68,161],[230,32,199,200,187,161,110,230,250,136,64,197,39,192,171,142,42,132,245,147,114,193,203,73,131,223,62,226,104,102,104,5],[59,50,226,118,145,55,0,201,200,189,194,59,129,57,37,243,165,92,225,160,242,17,35,3,245,42,69,102,110,204,249,211],[203,250,164,215,234,170,56,34,72,245,50,220,220,5,19,1,50,203,101,2,224,143,51,46,95,5,114,76,212,86,111,86],[133,151,74,105,51,82,176,77,66,113,8,246,128,117,170,12,46,22,212,82,252,138,112,233,240,255,165,140,39,97,186,208]]",
              "sol": "[bytes(abi.encode(\"175,255,135,192,34,158,29,195,77,155,8,129,233,114,35,248,72,14,248,245,233,171,230,227,86,143,176,195,127,21,68,161\")),bytes(abi.encode(\"230,32,199,200,187,161,110,230,250,136,64,197,39,192,171,142,42,132,245,147,114,193,203,73,131,223,62,226,104,102,104,5\")),bytes(abi.encode(\"59,50,226,118,145,55,0,201,200,189,194,59,129,57,37,243,165,92,225,160,242,17,35,3,245,42,69,102,110,204,249,211\")),bytes(abi.encode(\"203,250,164,215,234,170,56,34,72,245,50,220,220,5,19,1,50,203,101,2,224,143,51,46,95,5,114,76,212,86,111,86\")),bytes(abi.encode(\"133,151,74,105,51,82,176,77,66,113,8,246,128,117,170,12,46,22,212,82,252,138,112,233,240,255,165,140,39,97,186,208\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.968ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[221,43,108,108,48,147,44,84,208,226,65,53,115,54,123,172,23,54,124,162,234,156,189,90,251,83,65,110,190,140,98,29],[164,22,155,198,234,17,55,163,65,12,15,216,91,162,180,40,96,154,79,124,11,98,23,237,90,34,87,62,182,228,166,229],[62,219,60,41,221,63,111,122,124,211,249,4,249,50,188,100,219,69,117,193,173,176,139,238,10,117,82,25,127,156,243,36],[55,31,198,165,37,82,221,1,228,244,45,22,193,181,4,30,203,1,172,35,57,134,90,209,181,93,89,35,216,58,120,225],[107,5,203,76,151,169,14,128,51,229,123,126,19,58,79,212,73,224,136,233,108,94,218,92,229,103,118,164,249,236,202,203],[43,75,155,243,105,48,12,44,231,56,160,44,237,161,46,174,208,251,0,100,38,4,64,163,230,177,254,52,220,155,207,182],[146,205,240,70,220,146,164,145,151,211,163,58,227,78,228,76,195,5,71,31,197,216,24,76,110,109,19,112,230,30,88,212],[238,175,68,143,156,206,86,177,130,20,143,5,3,71,76,4,16,237,19,64,87,230,2,107,111,61,217,213,136,136,74,224]]",
              "sol": "[bytes(abi.encode(\"221,43,108,108,48,147,44,84,208,226,65,53,115,54,123,172,23,54,124,162,234,156,189,90,251,83,65,110,190,140,98,29\")),bytes(abi.encode(\"164,22,155,198,234,17,55,163,65,12,15,216,91,162,180,40,96,154,79,124,11,98,23,237,90,34,87,62,182,228,166,229\")),bytes(abi.encode(\"62,219,60,41,221,63,111,122,124,211,249,4,249,50,188,100,219,69,117,193,173,176,139,238,10,117,82,25,127,156,243,36\")),bytes(abi.encode(\"55,31,198,165,37,82,221,1,228,244,45,22,193,181,4,30,203,1,172,35,57,134,90,209,181,93,89,35,216,58,120,225\")),bytes(abi.encode(\"107,5,203,76,151,169,14,128,51,229,123,126,19,58,79,212,73,224,136,233,108,94,218,92,229,103,118,164,249,236,202,203\")),bytes(abi.encode(\"43,75,155,243,105,48,12,44,231,56,160,44,237,161,46,174,208,251,0,100,38,4,64,163,230,177,254,52,220,155,207,182\")),bytes(abi.encode(\"146,205,240,70,220,146,164,145,151,211,163,58,227,78,228,76,195,5,71,31,197,216,24,76,110,109,19,112,230,30,88,212\")),bytes(abi.encode(\"238,175,68,143,156,206,86,177,130,20,143,5,3,71,76,4,16,237,19,64,87,230,2,107,111,61,217,213,136,136,74,224\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.969ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[170,186,209,16,131,94,252,43,99,92,145,168,255,22,60,195,231,17,135,13,187,3,170,9,89,69,125,60,225,237,172,231],[72,180,230,73,130,106,159,221,85,38,2,167,48,184,121,173,151,116,190,216,246,184,198,17,253,65,117,41,218,50,229,93]]",
              "sol": "[bytes(abi.encode(\"170,186,209,16,131,94,252,43,99,92,145,168,255,22,60,195,231,17,135,13,187,3,170,9,89,69,125,60,225,237,172,231\")),bytes(abi.encode(\"72,180,230,73,130,106,159,221,85,38,2,167,48,184,121,173,151,116,190,216,246,184,198,17,253,65,117,41,218,50,229,93\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.969ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[146,29,139,103,255,171,193,233,39,225,70,63,248,137,247,122,241,176,32,110,173,14,79,213,206,5,0,62,85,76,122,5],[144,142,79,31,183,206,163,159,218,145,133,23,21,72,232,34,179,94,121,160,91,255,73,86,175,226,246,154,130,2,76,167],[99,132,216,134,133,92,0,146,112,75,199,103,55,88,251,161,41,39,248,172,28,99,96,200,246,254,122,117,169,192,104,88]]",
              "sol": "[bytes(abi.encode(\"146,29,139,103,255,171,193,233,39,225,70,63,248,137,247,122,241,176,32,110,173,14,79,213,206,5,0,62,85,76,122,5\")),bytes(abi.encode(\"144,142,79,31,183,206,163,159,218,145,133,23,21,72,232,34,179,94,121,160,91,255,73,86,175,226,246,154,130,2,76,167\")),bytes(abi.encode(\"99,132,216,134,133,92,0,146,112,75,199,103,55,88,251,161,41,39,248,172,28,99,96,200,246,254,122,117,169,192,104,88\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.970ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[103,72,230,75,172,174,92,51,226,248,182,204,65,87,153,2,22,96,143,47,49,190,191,115,72,132,194,2,117,129,172,64]]",
              "sol": "[bytes(abi.encode(\"103,72,230,75,172,174,92,51,226,248,182,204,65,87,153,2,22,96,143,47,49,190,191,115,72,132,194,2,117,129,172,64\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.970ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"3def7ns\"",
              "sol": "\"3def7ns\""
            },
            {
              "js": "[[179,250,123,159,202,189,182,48,124,77,209,123,108,180,97,27,239,128,185,183,221,240,195,243,134,239,167,24,4,91,21,86]]",
              "sol": "[bytes(abi.encode(\"179,250,123,159,202,189,182,48,124,77,209,123,108,180,97,27,239,128,185,183,221,240,195,243,134,239,167,24,4,91,21,86\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.971ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[236,32,238,177,217,15,173,52,200,65,230,16,0,121,130,22,242,158,148,19,14,141,226,228,250,220,247,72,61,84,250,131]]",
              "sol": "[bytes(abi.encode(\"236,32,238,177,217,15,173,52,200,65,230,16,0,121,130,22,242,158,148,19,14,141,226,228,250,220,247,72,61,84,250,131\"))]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.972ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[[89,48,224,12,176,162,250,229,126,250,81,79,184,166,231,90,22,10,53,205,70,10,228,131,91,141,6,212,46,227,72,80]]",
              "sol": "[bytes(abi.encode(\"89,48,224,12,176,162,250,229,126,250,81,79,184,166,231,90,22,10,53,205,70,10,228,131,91,141,6,212,46,227,72,80\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.973ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[[123,230,139,104,183,246,191,201,154,27,87,37,254,82,60,72,170,31,211,240,13,199,136,202,85,101,132,32,158,92,28,49],[100,201,78,220,136,138,141,6,98,179,172,183,148,221,232,240,50,41,13,97,54,220,158,188,121,29,77,48,23,28,45,125]]",
              "sol": "[bytes(abi.encode(\"123,230,139,104,183,246,191,201,154,27,87,37,254,82,60,72,170,31,211,240,13,199,136,202,85,101,132,32,158,92,28,49\")),bytes(abi.encode(\"100,201,78,220,136,138,141,6,98,179,172,183,148,221,232,240,50,41,13,97,54,220,158,188,121,29,77,48,23,28,45,125\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.974ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"fhq9ha\"",
              "sol": "\"fhq9ha\""
            },
            {
              "js": "[[25,40,221,17,153,200,153,196,53,152,93,64,58,238,97,21,156,212,34,124,2,216,77,10,38,238,32,242,246,119,123,148],[71,93,2,147,72,188,31,202,218,228,32,225,7,180,22,232,179,146,250,238,249,61,227,15,223,246,86,78,47,144,42,137]]",
              "sol": "[bytes(abi.encode(\"25,40,221,17,153,200,153,196,53,152,93,64,58,238,97,21,156,212,34,124,2,216,77,10,38,238,32,242,246,119,123,148\")),bytes(abi.encode(\"71,93,2,147,72,188,31,202,218,228,32,225,7,180,22,232,179,146,250,238,249,61,227,15,223,246,86,78,47,144,42,137\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.978ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"og27p3\"",
              "sol": "\"og27p3\""
            },
            {
              "js": "[[116,113,224,169,42,91,90,79,100,130,187,202,67,111,102,138,72,119,121,115,125,106,155,34,64,170,112,211,129,69,241,3],[195,101,30,164,82,162,147,98,215,203,60,172,176,95,185,71,163,151,136,198,11,250,96,220,70,112,49,102,152,42,235,28]]",
              "sol": "[bytes(abi.encode(\"116,113,224,169,42,91,90,79,100,130,187,202,67,111,102,138,72,119,121,115,125,106,155,34,64,170,112,211,129,69,241,3\")),bytes(abi.encode(\"195,101,30,164,82,162,147,98,215,203,60,172,176,95,185,71,163,151,136,198,11,250,96,220,70,112,49,102,152,42,235,28\"))]"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.979ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[8,35,114,131,233,28,247,179,87,200,246,179,172,97,244,86,175,200,130,44,165,39,50,174,88,78,42,81,83,205,155,213],[106,167,156,114,202,4,56,94,65,145,36,128,87,150,204,210,62,214,100,164,163,151,181,240,111,121,237,180,220,34,199,188]]",
              "sol": "[bytes(abi.encode(\"8,35,114,131,233,28,247,179,87,200,246,179,172,97,244,86,175,200,130,44,165,39,50,174,88,78,42,81,83,205,155,213\")),bytes(abi.encode(\"106,167,156,114,202,4,56,94,65,145,36,128,87,150,204,210,62,214,100,164,163,151,181,240,111,121,237,180,220,34,199,188\"))]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.980ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[230,41,81,39,141,89,13,50,47,133,24,154,111,191,166,161,122,109,101,86,45,232,101,128,151,129,41,158,1,118,113,65],[143,242,179,9,173,159,118,148,106,137,7,166,113,225,19,4,243,111,65,118,167,157,240,157,13,78,190,229,101,101,212,244],[241,82,148,183,196,39,173,158,32,187,88,201,203,219,235,63,78,137,241,92,81,150,189,64,201,204,90,38,124,167,93,169]]",
              "sol": "[bytes(abi.encode(\"230,41,81,39,141,89,13,50,47,133,24,154,111,191,166,161,122,109,101,86,45,232,101,128,151,129,41,158,1,118,113,65\")),bytes(abi.encode(\"143,242,179,9,173,159,118,148,106,137,7,166,113,225,19,4,243,111,65,118,167,157,240,157,13,78,190,229,101,101,212,244\")),bytes(abi.encode(\"241,82,148,183,196,39,173,158,32,187,88,201,203,219,235,63,78,137,241,92,81,150,189,64,201,204,90,38,124,167,93,169\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.980ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[37,240,114,142,109,189,84,145,254,43,16,174,163,152,69,201,13,187,1,228,222,182,9,2,8,99,122,161,146,233,39,63],[214,59,12,163,161,86,159,143,61,239,14,72,144,10,139,195,17,146,218,63,251,55,248,5,7,188,67,100,9,141,220,69],[72,64,155,79,126,246,175,141,255,219,77,111,4,215,16,218,51,8,234,201,22,139,145,36,231,176,183,45,216,65,169,92]]",
              "sol": "[bytes(abi.encode(\"37,240,114,142,109,189,84,145,254,43,16,174,163,152,69,201,13,187,1,228,222,182,9,2,8,99,122,161,146,233,39,63\")),bytes(abi.encode(\"214,59,12,163,161,86,159,143,61,239,14,72,144,10,139,195,17,146,218,63,251,55,248,5,7,188,67,100,9,141,220,69\")),bytes(abi.encode(\"72,64,155,79,126,246,175,141,255,219,77,111,4,215,16,218,51,8,234,201,22,139,145,36,231,176,183,45,216,65,169,92\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.981ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[[42,5,245,103,206,174,241,240,113,127,42,213,195,123,196,205,206,74,23,212,125,180,105,106,138,169,119,15,252,166,196,111],[148,37,177,188,81,11,83,27,176,74,136,78,253,232,237,217,181,22,78,157,22,176,121,136,159,178,56,172,228,68,165,27],[44,9,69,207,221,249,201,57,181,165,245,171,28,62,134,177,193,233,39,172,198,192,122,181,182,218,142,211,99,117,91,76]]",
              "sol": "[bytes(abi.encode(\"42,5,245,103,206,174,241,240,113,127,42,213,195,123,196,205,206,74,23,212,125,180,105,106,138,169,119,15,252,166,196,111\")),bytes(abi.encode(\"148,37,177,188,81,11,83,27,176,74,136,78,253,232,237,217,181,22,78,157,22,176,121,136,159,178,56,172,228,68,165,27\")),bytes(abi.encode(\"44,9,69,207,221,249,201,57,181,165,245,171,28,62,134,177,193,233,39,172,198,192,122,181,182,218,142,211,99,117,91,76\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.982ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[42,55,31,209,126,205,235,85,135,94,220,71,76,140,134,32,38,218,139,10,57,253,16,43,174,225,91,242,196,15,55,253],[189,71,83,212,226,200,6,211,62,172,196,114,7,66,196,119,204,90,79,184,185,163,184,193,71,84,116,245,172,85,93,234],[91,195,140,45,249,5,70,211,130,58,246,62,211,87,24,9,156,94,211,44,181,87,185,2,92,215,75,149,87,189,210,70]]",
              "sol": "[bytes(abi.encode(\"42,55,31,209,126,205,235,85,135,94,220,71,76,140,134,32,38,218,139,10,57,253,16,43,174,225,91,242,196,15,55,253\")),bytes(abi.encode(\"189,71,83,212,226,200,6,211,62,172,196,114,7,66,196,119,204,90,79,184,185,163,184,193,71,84,116,245,172,85,93,234\")),bytes(abi.encode(\"91,195,140,45,249,5,70,211,130,58,246,62,211,87,24,9,156,94,211,44,181,87,185,2,92,215,75,149,87,189,210,70\"))]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.982ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"28pq3b\"",
              "sol": "\"28pq3b\""
            },
            {
              "js": "[[114,53,216,238,51,57,107,14,45,44,238,217,202,221,180,184,127,76,159,161,140,26,255,72,106,177,78,54,156,251,251,237],[66,162,155,23,151,195,116,19,89,108,7,169,38,51,49,230,191,34,208,52,112,179,239,124,22,177,128,10,192,46,156,75],[180,243,214,200,220,136,254,94,143,98,31,19,190,53,208,206,76,107,142,94,121,71,29,6,84,252,56,146,104,61,141,172],[61,223,7,15,210,244,199,175,165,90,196,182,230,19,234,208,106,251,41,106,227,108,181,19,9,117,146,49,4,122,13,252]]",
              "sol": "[bytes(abi.encode(\"114,53,216,238,51,57,107,14,45,44,238,217,202,221,180,184,127,76,159,161,140,26,255,72,106,177,78,54,156,251,251,237\")),bytes(abi.encode(\"66,162,155,23,151,195,116,19,89,108,7,169,38,51,49,230,191,34,208,52,112,179,239,124,22,177,128,10,192,46,156,75\")),bytes(abi.encode(\"180,243,214,200,220,136,254,94,143,98,31,19,190,53,208,206,76,107,142,94,121,71,29,6,84,252,56,146,104,61,141,172\")),bytes(abi.encode(\"61,223,7,15,210,244,199,175,165,90,196,182,230,19,234,208,106,251,41,106,227,108,181,19,9,117,146,49,4,122,13,252\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.983ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[141,6,89,56,128,42,115,233,60,84,159,193,0,30,14,218,51,15,34,89,22,210,3,223,220,22,159,233,121,98,207,57],[4,56,66,60,234,185,34,182,35,141,69,168,37,138,31,94,79,118,103,192,194,207,23,255,169,9,107,222,196,184,151,135],[27,239,130,194,66,84,182,226,69,218,204,204,61,137,69,42,68,200,97,70,206,155,228,175,157,177,17,198,101,96,83,170],[27,244,61,227,42,45,86,27,59,210,13,18,4,147,11,64,33,75,201,22,243,28,202,22,53,229,161,192,116,232,186,211]]",
              "sol": "[bytes(abi.encode(\"141,6,89,56,128,42,115,233,60,84,159,193,0,30,14,218,51,15,34,89,22,210,3,223,220,22,159,233,121,98,207,57\")),bytes(abi.encode(\"4,56,66,60,234,185,34,182,35,141,69,168,37,138,31,94,79,118,103,192,194,207,23,255,169,9,107,222,196,184,151,135\")),bytes(abi.encode(\"27,239,130,194,66,84,182,226,69,218,204,204,61,137,69,42,68,200,97,70,206,155,228,175,157,177,17,198,101,96,83,170\")),bytes(abi.encode(\"27,244,61,227,42,45,86,27,59,210,13,18,4,147,11,64,33,75,201,22,243,28,202,22,53,229,161,192,116,232,186,211\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.983ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[172,164,33,212,137,34,56,82,64,76,234,184,75,10,213,103,79,18,79,94,28,159,93,222,247,226,183,176,120,70,79,236],[155,209,142,20,217,218,176,156,74,19,188,105,73,118,87,75,71,129,162,39,210,60,241,210,0,211,144,104,205,48,59,19],[152,82,215,77,135,27,109,243,99,143,223,202,98,12,244,169,116,68,197,105,55,114,204,25,108,82,172,52,78,190,163,149],[186,211,21,32,99,37,19,161,22,245,192,42,232,76,90,177,163,142,237,118,8,224,106,240,241,163,186,36,227,47,7,51]]",
              "sol": "[bytes(abi.encode(\"172,164,33,212,137,34,56,82,64,76,234,184,75,10,213,103,79,18,79,94,28,159,93,222,247,226,183,176,120,70,79,236\")),bytes(abi.encode(\"155,209,142,20,217,218,176,156,74,19,188,105,73,118,87,75,71,129,162,39,210,60,241,210,0,211,144,104,205,48,59,19\")),bytes(abi.encode(\"152,82,215,77,135,27,109,243,99,143,223,202,98,12,244,169,116,68,197,105,55,114,204,25,108,82,172,52,78,190,163,149\")),bytes(abi.encode(\"186,211,21,32,99,37,19,161,22,245,192,42,232,76,90,177,163,142,237,118,8,224,106,240,241,163,186,36,227,47,7,51\"))]"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.984ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[89,194,177,119,246,48,139,78,74,131,131,231,65,169,220,6,109,17,160,47,214,14,82,7,38,81,107,103,6,4,190,122],[41,25,204,67,123,5,150,98,43,249,1,244,147,199,133,3,167,175,147,214,224,189,127,145,0,128,142,231,176,113,209,34],[132,208,235,107,133,225,15,13,67,218,176,190,114,53,64,86,60,208,77,156,193,39,177,90,127,194,75,1,101,190,210,11],[122,54,9,234,45,139,14,112,236,205,193,59,132,89,238,19,53,177,42,113,7,149,23,26,23,238,182,71,180,69,146,66]]",
              "sol": "[bytes(abi.encode(\"89,194,177,119,246,48,139,78,74,131,131,231,65,169,220,6,109,17,160,47,214,14,82,7,38,81,107,103,6,4,190,122\")),bytes(abi.encode(\"41,25,204,67,123,5,150,98,43,249,1,244,147,199,133,3,167,175,147,214,224,189,127,145,0,128,142,231,176,113,209,34\")),bytes(abi.encode(\"132,208,235,107,133,225,15,13,67,218,176,190,114,53,64,86,60,208,77,156,193,39,177,90,127,194,75,1,101,190,210,11\")),bytes(abi.encode(\"122,54,9,234,45,139,14,112,236,205,193,59,132,89,238,19,53,177,42,113,7,149,23,26,23,238,182,71,180,69,146,66\"))]"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.986ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[24,192,158,69,37,127,173,183,95,203,137,123,228,230,201,192,118,238,111,104,2,77,57,167,167,87,43,75,243,92,50,188],[219,150,59,2,72,129,113,208,51,252,253,111,78,228,156,111,137,43,121,243,221,49,215,186,199,200,30,231,52,22,62,66],[33,0,165,165,128,151,42,39,36,215,15,128,177,170,121,90,58,176,221,233,189,155,238,42,17,62,216,240,64,252,146,83],[155,174,92,19,96,83,95,31,29,137,223,69,253,136,245,16,56,55,129,194,23,106,254,212,29,166,131,53,217,45,162,80],[119,197,58,120,187,127,39,200,148,63,179,186,29,193,55,146,109,255,129,180,220,213,197,129,175,181,176,111,5,246,122,226]]",
              "sol": "[bytes(abi.encode(\"24,192,158,69,37,127,173,183,95,203,137,123,228,230,201,192,118,238,111,104,2,77,57,167,167,87,43,75,243,92,50,188\")),bytes(abi.encode(\"219,150,59,2,72,129,113,208,51,252,253,111,78,228,156,111,137,43,121,243,221,49,215,186,199,200,30,231,52,22,62,66\")),bytes(abi.encode(\"33,0,165,165,128,151,42,39,36,215,15,128,177,170,121,90,58,176,221,233,189,155,238,42,17,62,216,240,64,252,146,83\")),bytes(abi.encode(\"155,174,92,19,96,83,95,31,29,137,223,69,253,136,245,16,56,55,129,194,23,106,254,212,29,166,131,53,217,45,162,80\")),bytes(abi.encode(\"119,197,58,120,187,127,39,200,148,63,179,186,29,193,55,146,109,255,129,180,220,213,197,129,175,181,176,111,5,246,122,226\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.986ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[179,249,80,143,124,73,64,163,93,41,132,223,44,146,81,199,49,7,75,176,183,17,173,240,247,163,69,253,148,73,150,120],[92,125,8,22,64,52,8,177,95,52,243,90,250,27,71,93,64,71,92,112,117,238,67,190,235,14,163,146,210,245,53,214],[230,21,115,115,176,29,58,158,168,32,204,190,229,112,247,132,37,168,112,38,25,227,124,198,201,36,82,60,31,203,200,225],[105,200,103,128,149,58,117,107,86,108,174,220,244,138,223,20,230,101,186,118,90,202,188,88,52,178,57,175,137,131,167,198],[33,122,57,232,234,212,250,98,31,113,14,239,75,85,97,237,53,108,47,166,124,31,204,157,165,3,162,23,49,66,125,155]]",
              "sol": "[bytes(abi.encode(\"179,249,80,143,124,73,64,163,93,41,132,223,44,146,81,199,49,7,75,176,183,17,173,240,247,163,69,253,148,73,150,120\")),bytes(abi.encode(\"92,125,8,22,64,52,8,177,95,52,243,90,250,27,71,93,64,71,92,112,117,238,67,190,235,14,163,146,210,245,53,214\")),bytes(abi.encode(\"230,21,115,115,176,29,58,158,168,32,204,190,229,112,247,132,37,168,112,38,25,227,124,198,201,36,82,60,31,203,200,225\")),bytes(abi.encode(\"105,200,103,128,149,58,117,107,86,108,174,220,244,138,223,20,230,101,186,118,90,202,188,88,52,178,57,175,137,131,167,198\")),bytes(abi.encode(\"33,122,57,232,234,212,250,98,31,113,14,239,75,85,97,237,53,108,47,166,124,31,204,157,165,3,162,23,49,66,125,155\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.987ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "[[200,137,42,252,149,233,125,19,161,17,71,36,14,207,48,187,16,125,112,120,254,59,217,77,108,229,254,192,187,253,129,110],[71,203,98,63,209,184,16,173,38,90,224,251,137,3,79,105,82,49,99,95,178,158,181,41,91,84,67,19,117,195,235,241],[69,124,168,96,55,24,30,166,243,168,15,170,179,176,189,232,219,49,174,90,153,68,102,85,56,173,50,230,232,205,211,102],[49,110,40,129,129,153,43,251,125,80,111,64,240,92,104,56,28,239,174,177,148,45,58,89,187,222,180,114,136,5,170,19],[33,66,169,200,208,133,246,57,57,197,208,103,133,145,63,52,55,178,18,74,65,225,86,71,22,148,228,4,154,104,206,95]]",
              "sol": "[bytes(abi.encode(\"200,137,42,252,149,233,125,19,161,17,71,36,14,207,48,187,16,125,112,120,254,59,217,77,108,229,254,192,187,253,129,110\")),bytes(abi.encode(\"71,203,98,63,209,184,16,173,38,90,224,251,137,3,79,105,82,49,99,95,178,158,181,41,91,84,67,19,117,195,235,241\")),bytes(abi.encode(\"69,124,168,96,55,24,30,166,243,168,15,170,179,176,189,232,219,49,174,90,153,68,102,85,56,173,50,230,232,205,211,102\")),bytes(abi.encode(\"49,110,40,129,129,153,43,251,125,80,111,64,240,92,104,56,28,239,174,177,148,45,58,89,187,222,180,114,136,5,170,19\")),bytes(abi.encode(\"33,66,169,200,208,133,246,57,57,197,208,103,133,145,63,52,55,178,18,74,65,225,86,71,22,148,228,4,154,104,206,95\"))]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.988ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[156,19,12,153,2,24,42,224,30,52,71,113,242,186,121,154,99,217,83,102,224,186,23,119,182,104,163,18,211,222,157,101],[39,190,78,62,151,168,246,11,52,76,233,122,147,177,172,104,241,123,63,254,105,213,84,152,115,96,224,16,223,71,246,21],[6,5,128,171,86,70,137,120,113,113,24,191,150,127,202,60,7,13,49,124,212,150,68,124,62,223,83,24,199,0,236,215],[12,245,133,232,231,95,53,136,45,10,48,20,51,50,7,209,29,49,119,172,156,134,246,176,192,180,177,21,200,15,158,93],[65,13,41,168,163,141,231,18,161,5,147,150,244,66,184,196,38,146,55,17,113,212,41,105,41,240,221,4,150,175,16,166]]",
              "sol": "[bytes(abi.encode(\"156,19,12,153,2,24,42,224,30,52,71,113,242,186,121,154,99,217,83,102,224,186,23,119,182,104,163,18,211,222,157,101\")),bytes(abi.encode(\"39,190,78,62,151,168,246,11,52,76,233,122,147,177,172,104,241,123,63,254,105,213,84,152,115,96,224,16,223,71,246,21\")),bytes(abi.encode(\"6,5,128,171,86,70,137,120,113,113,24,191,150,127,202,60,7,13,49,124,212,150,68,124,62,223,83,24,199,0,236,215\")),bytes(abi.encode(\"12,245,133,232,231,95,53,136,45,10,48,20,51,50,7,209,29,49,119,172,156,134,246,176,192,180,177,21,200,15,158,93\")),bytes(abi.encode(\"65,13,41,168,163,141,231,18,161,5,147,150,244,66,184,196,38,146,55,17,113,212,41,105,41,240,221,4,150,175,16,166\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.988ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[174]",
              "sol": "bytes1(\"174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.989ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.990ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.990ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.990ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.991ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"fhq9ha\"",
              "sol": "\"fhq9ha\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.991ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"lnr2ym\"",
              "sol": "\"lnr2ym\""
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.992ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.992ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"fhq9ha\"",
              "sol": "\"fhq9ha\""
            },
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.992ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"3def7ns\"",
              "sol": "\"3def7ns\""
            },
            {
              "js": "\"fu35bh\"",
              "sol": "\"fu35bh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.992ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"bplqeq\"",
              "sol": "\"bplqeq\""
            },
            {
              "js": "\"bplqeq\"",
              "sol": "\"bplqeq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.993ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"v7ru4n\"",
              "sol": "\"v7ru4n\""
            },
            {
              "js": "\"v7ru4n\"",
              "sol": "\"v7ru4n\""
            },
            {
              "js": "\"fhq9ha\"",
              "sol": "\"fhq9ha\""
            },
            {
              "js": "\"86uz3t\"",
              "sol": "\"86uz3t\""
            },
            {
              "js": "\"6k3f8e\"",
              "sol": "\"6k3f8e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.993ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"6k3f8e\"",
              "sol": "\"6k3f8e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.994ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"fu35bh\"",
              "sol": "\"fu35bh\""
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"g7ncsh\"",
              "sol": "\"g7ncsh\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.995ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"3def7ns\"",
              "sol": "\"3def7ns\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.996ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"86uz3t\"",
              "sol": "\"86uz3t\""
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"bplqeq\"",
              "sol": "\"bplqeq\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.997ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.998ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"28pq3b\",\"P\",\"[\"]",
              "sol": "[string(\"28pq3b\"),string(\"P\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.998ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[14,16,214,20,108,30,189,209,177,28,88,248,41,164,36,64,69,94,26,120,214,126,181,52,230,203,222,189,38,187,179,177]]",
              "sol": "[bytes(abi.encode(\"14,16,214,20,108,30,189,209,177,28,88,248,41,164,36,64,69,94,26,120,214,126,181,52,230,203,222,189,38,187,179,177\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.999ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:25.999ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[27,89,195,117,171,41,217,140,40,115,16,45,254,243,63,98,118,6,63,123,129,2,98,224,151,109,8,205,204,251,181,235]",
              "sol": "stringToBytes32(\"27,89,195,117,171,41,217,140,40,115,16,45,254,243,63,98,118,6,63,123,129,2,98,224,151,109,8,205,204,251,181,235\")"
            },
            {
              "js": "[161,126,243,229,223,242,169,200,203,91,39,122,129,165,182,213,153,72,51,176,125,15,232,150,46,63,198,141,132,209,249,237]",
              "sol": "stringToBytes32(\"161,126,243,229,223,242,169,200,203,91,39,122,129,165,182,213,153,72,51,176,125,15,232,150,46,63,198,141,132,209,249,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.000ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[10,248,243,58,71,50,107,17,39,87,66,42,12,225,192,96,10,235,71,227,34,12,230,110,114,227,231,174,226,2,27,12]",
              "sol": "stringToBytes32(\"10,248,243,58,71,50,107,17,39,87,66,42,12,225,192,96,10,235,71,227,34,12,230,110,114,227,231,174,226,2,27,12\")"
            },
            {
              "js": "[145,198,41,20,240,117,229,194,41,84,159,228,236,182,247,109,100,84,135,15,23,204,242,247,229,165,150,3,159,248,150,39]",
              "sol": "abi.encode(\"145,198,41,20,240,117,229,194,41,84,159,228,236,182,247,109,100,84,135,15,23,204,242,247,229,165,150,3,159,248,150,39\")"
            },
            {
              "js": "[17,160,232,161,206,42,2,128,235,189,150,228,47,220,89,113,123,171,101,243,238,20,211,186,78,152,180,253,48,84,118,21]",
              "sol": "abi.encode(\"17,160,232,161,206,42,2,128,235,189,150,228,47,220,89,113,123,171,101,243,238,20,211,186,78,152,180,253,48,84,118,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.000ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[25,102,132,79,136,65,36,46,50,109,202,135,93,2,100,72,63,181,25,22,207,154,142,65,106,105,16,99,215,146,172,173]",
              "sol": "abi.encode(\"25,102,132,79,136,65,36,46,50,109,202,135,93,2,100,72,63,181,25,22,207,154,142,65,106,105,16,99,215,146,172,173\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[251,188,242,113,219,57,53,92,57,77,174,153,198,137,249,0,13,99,91,9,3,215,155,124,4,158,233,225,137,222,138,105]",
              "sol": "abi.encode(\"251,188,242,113,219,57,53,92,57,77,174,153,198,137,249,0,13,99,91,9,3,215,155,124,4,158,233,225,137,222,138,105\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.002ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[74,179,140,67,22,210,238,185,172,147,202,188,185,162,249,250,124,238,226,143,13,143,191,246,210,114,27,85,255,43,18,45]",
              "sol": "stringToBytes32(\"74,179,140,67,22,210,238,185,172,147,202,188,185,162,249,250,124,238,226,143,13,143,191,246,210,114,27,85,255,43,18,45\")"
            },
            {
              "js": "\"fu35bh\"",
              "sol": "\"fu35bh\""
            },
            {
              "js": "[249,176,48,21,239,217,52,21,81,78,80,86,152,223,56,119,197,25,56,108,28,173,249,99,252,216,111,130,125,226,151,227]",
              "sol": "abi.encode(\"249,176,48,21,239,217,52,21,81,78,80,86,152,223,56,119,197,25,56,108,28,173,249,99,252,216,111,130,125,226,151,227\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[76,247,198,39,217,134,193,145,113,30,253,70,110,80,151,158,172,100,170,18,185,199,215,28,171,245,208,224,182,87,50,76]",
              "sol": "stringToBytes32(\"76,247,198,39,217,134,193,145,113,30,253,70,110,80,151,158,172,100,170,18,185,199,215,28,171,245,208,224,182,87,50,76\")"
            },
            {
              "js": "\"7lq0b1\"",
              "sol": "\"7lq0b1\""
            },
            {
              "js": "[218,28,222,4,193,99,147,162,25,79,60,106,14,245,25,159,209,116,105,27,82,48,236,17,55,208,51,48,101,138,143,69]",
              "sol": "abi.encode(\"218,28,222,4,193,99,147,162,25,79,60,106,14,245,25,159,209,116,105,27,82,48,236,17,55,208,51,48,101,138,143,69\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.002ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[48,104,151,188,194,104,123,169,8,5,94,123,69,113,101,250,120,198,216,85,143,72,40,239,25,246,205,0,91,86,114,56]",
              "sol": "stringToBytes32(\"48,104,151,188,194,104,123,169,8,5,94,123,69,113,101,250,120,198,216,85,143,72,40,239,25,246,205,0,91,86,114,56\")"
            },
            {
              "js": "[253,158,247,2,94,19,93,226,243,75,173,55,167,4,211,139,60,98,17,84,106,12,71,57,162,136,230,249,248,202,226,191]",
              "sol": "abi.encode(\"253,158,247,2,94,19,93,226,243,75,173,55,167,4,211,139,60,98,17,84,106,12,71,57,162,136,230,249,248,202,226,191\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[48,104,151,188,194,104,123,169,8,5,94,123,69,113,101,250,120,198,216,85,143,72,40,239,25,246,205,0,91,86,114,56]",
                "sol": "stringToBytes32(\"48,104,151,188,194,104,123,169,8,5,94,123,69,113,101,250,120,198,216,85,143,72,40,239,25,246,205,0,91,86,114,56\")"
              },
              {
                "js": "[26,236,171,68,92,37,150,88,50,239,51,219,154,217,21,241,211,225,134,174,170,226,24,116,113,160,134,88,176,190,88,180,220]",
                "sol": "bytes33(\"26,236,171,68,92,37,150,88,50,239,51,219,154,217,21,241,211,225,134,174,170,226,24,116,113,160,134,88,176,190,88,180,220\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.004ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[89,167,47,72,97,4,195,124,229,157,112,21,9,56,103,252,177,213,14,177,42,235,201,78,79,19,74,111,196,30,53,49]",
              "sol": "abi.encode(\"89,167,47,72,97,4,195,124,229,157,112,21,9,56,103,252,177,213,14,177,42,235,201,78,79,19,74,111,196,30,53,49\")"
            },
            {
              "js": "[125,211,102,223,135,212,106,153,108,33,48,92,115,58,196,80,27,155,14,26,246,208,213,156,250,217,133,254,29,70,43,205]",
              "sol": "stringToBytes32(\"125,211,102,223,135,212,106,153,108,33,48,92,115,58,196,80,27,155,14,26,246,208,213,156,250,217,133,254,29,70,43,205\")"
            },
            {
              "js": "[132,105,192,149,235,138,107,76,49,96,59,91,178,218,254,246,242,153,88,122,113,66,43,150,129,249,239,241,236,134,230,103]",
              "sol": "abi.encode(\"132,105,192,149,235,138,107,76,49,96,59,91,178,218,254,246,242,153,88,122,113,66,43,150,129,249,239,241,236,134,230,103\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[173,217,166,45,153,196,186,181,199,40,0,91,151,18,75,201,95,78,136,180,136,46,147,15,214,22,19,215,70,188,169,243]",
              "sol": "abi.encode(\"173,217,166,45,153,196,186,181,199,40,0,91,151,18,75,201,95,78,136,180,136,46,147,15,214,22,19,215,70,188,169,243\")"
            },
            {
              "js": "[1,67,215,179,64,173,142,195,107,243,83,135,170,197,40,217,124,59,66,233,114,164,231,141,91,84,36,21,89,21,19,94]",
              "sol": "stringToBytes32(\"1,67,215,179,64,173,142,195,107,243,83,135,170,197,40,217,124,59,66,233,114,164,231,141,91,84,36,21,89,21,19,94\")"
            },
            {
              "js": "[207,44,94,231,100,59,62,110,109,49,217,240,96,38,207,36,220,123,93,187,90,119,142,116,88,160,187,190,239,95,77,253]",
              "sol": "abi.encode(\"207,44,94,231,100,59,62,110,109,49,217,240,96,38,207,36,220,123,93,187,90,119,142,116,88,160,187,190,239,95,77,253\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[250,158,169,224,252,212,70,47,219,203,141,151,197,78,160,3,79,194,254,91,25,148,189,92,48,96,156,178,73,81,147,81]",
              "sol": "abi.encode(\"250,158,169,224,252,212,70,47,219,203,141,151,197,78,160,3,79,194,254,91,25,148,189,92,48,96,156,178,73,81,147,81\")"
            },
            {
              "js": "[67,53,159,199,113,42,2,228,237,212,133,8,37,206,115,143,21,132,173,128,65,59,227,61,124,99,104,7,219,11,125,32]",
              "sol": "stringToBytes32(\"67,53,159,199,113,42,2,228,237,212,133,8,37,206,115,143,21,132,173,128,65,59,227,61,124,99,104,7,219,11,125,32\")"
            },
            {
              "js": "[6,216,184,151,17,45,63,207,107,101,29,190,59,138,203,36,226,209,14,108,7,27,50,206,37,45,45,218,17,244,226,238]",
              "sol": "abi.encode(\"6,216,184,151,17,45,63,207,107,101,29,190,59,138,203,36,226,209,14,108,7,27,50,206,37,45,45,218,17,244,226,238\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[110,30,195,96,212,175,13,245,13,183,192,172,19,7,5,159,92,157,149,240,87,139,138,107,230,220,152,192,189,231,51,249]",
              "sol": "abi.encode(\"110,30,195,96,212,175,13,245,13,183,192,172,19,7,5,159,92,157,149,240,87,139,138,107,230,220,152,192,189,231,51,249\")"
            },
            {
              "js": "[208,207,213,90,237,163,237,64,194,204,87,245,198,96,13,105,196,240,110,151,226,124,254,207,196,48,244,198,73,46,10,16]",
              "sol": "stringToBytes32(\"208,207,213,90,237,163,237,64,194,204,87,245,198,96,13,105,196,240,110,151,226,124,254,207,196,48,244,198,73,46,10,16\")"
            },
            {
              "js": "[70,25,245,132,158,51,59,53,148,9,92,36,70,224,174,40,123,26,79,49,87,54,196,2,43,255,41,199,95,57,119,237]",
              "sol": "abi.encode(\"70,25,245,132,158,51,59,53,148,9,92,36,70,224,174,40,123,26,79,49,87,54,196,2,43,255,41,199,95,57,119,237\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[13,39,113,69,57,17,249,120,75,230,126,200,172,8,34,94,246,157,162,91,114,59,65,106,181,35,158,24,115,255,42,177]",
              "sol": "abi.encode(\"13,39,113,69,57,17,249,120,75,230,126,200,172,8,34,94,246,157,162,91,114,59,65,106,181,35,158,24,115,255,42,177\")"
            },
            {
              "js": "[162,152,198,67,241,17,243,31,39,153,102,36,116,239,245,224,10,255,124,237,216,90,141,150,125,183,160,201,84,134,130,66]",
              "sol": "stringToBytes32(\"162,152,198,67,241,17,243,31,39,153,102,36,116,239,245,224,10,255,124,237,216,90,141,150,125,183,160,201,84,134,130,66\")"
            },
            {
              "js": "[35,195,188,241,20,87,165,116,133,25,44,200,109,139,43,75,13,232,212,192,37,141,102,39,208,231,223,139,199,174,215,93]",
              "sol": "abi.encode(\"35,195,188,241,20,87,165,116,133,25,44,200,109,139,43,75,13,232,212,192,37,141,102,39,208,231,223,139,199,174,215,93\")"
            },
            {
              "js": "\"mz612n\"",
              "sol": "\"mz612n\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[48,225,77,34,22,5,226,162,96,20,126,47,15,49,18,29,223,27,14,222,98,0,223,181,237,67,123,62,128,21,185,137]",
              "sol": "abi.encode(\"48,225,77,34,22,5,226,162,96,20,126,47,15,49,18,29,223,27,14,222,98,0,223,181,237,67,123,62,128,21,185,137\")"
            },
            {
              "js": "[8,226,199,147,68,211,61,222,21,111,156,11,187,82,50,53,109,207,94,126,29,55,38,174,175,125,153,234,167,49,213,171]",
              "sol": "stringToBytes32(\"8,226,199,147,68,211,61,222,21,111,156,11,187,82,50,53,109,207,94,126,29,55,38,174,175,125,153,234,167,49,213,171\")"
            },
            {
              "js": "[192,97,80,163,53,45,105,56,105,203,51,118,96,243,126,63,238,69,9,249,185,144,218,127,14,158,97,109,115,185,66,138]",
              "sol": "abi.encode(\"192,97,80,163,53,45,105,56,105,203,51,118,96,243,126,63,238,69,9,249,185,144,218,127,14,158,97,109,115,185,66,138\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[115,167,56,227,41,44,134,148,29,55,159,192,183,105,189,17,42,219,198,104,93,63,26,1,121,225,87,139,1,144,66,194]",
              "sol": "abi.encode(\"115,167,56,227,41,44,134,148,29,55,159,192,183,105,189,17,42,219,198,104,93,63,26,1,121,225,87,139,1,144,66,194\")"
            },
            {
              "js": "[74,66,163,8,192,152,15,179,163,69,222,41,251,28,84,152,239,27,146,227,34,208,47,217,113,204,69,214,225,25,247,50]",
              "sol": "stringToBytes32(\"74,66,163,8,192,152,15,179,163,69,222,41,251,28,84,152,239,27,146,227,34,208,47,217,113,204,69,214,225,25,247,50\")"
            },
            {
              "js": "[88,78,88,199,122,238,18,182,166,35,132,216,144,230,113,198,197,33,71,126,141,130,40,14,166,91,46,74,168,21,171,36]",
              "sol": "abi.encode(\"88,78,88,199,122,238,18,182,166,35,132,216,144,230,113,198,197,33,71,126,141,130,40,14,166,91,46,74,168,21,171,36\")"
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[194,7,163,84,147,222,177,155,20,83,175,197,120,135,91,32,86,131,182,132,161,217,5,22,125,57,164,233,182,23,200,110]",
              "sol": "abi.encode(\"194,7,163,84,147,222,177,155,20,83,175,197,120,135,91,32,86,131,182,132,161,217,5,22,125,57,164,233,182,23,200,110\")"
            },
            {
              "js": "[144,184,227,181,31,61,96,152,114,28,183,120,86,192,144,176,236,255,42,231,86,35,166,48,41,95,93,161,140,218,7,106]",
              "sol": "stringToBytes32(\"144,184,227,181,31,61,96,152,114,28,183,120,86,192,144,176,236,255,42,231,86,35,166,48,41,95,93,161,140,218,7,106\")"
            },
            {
              "js": "[14,99,188,254,150,2,83,134,233,84,79,163,200,112,246,237,14,59,59,31,128,150,243,177,37,48,111,141,93,48,102,253]",
              "sol": "abi.encode(\"14,99,188,254,150,2,83,134,233,84,79,163,200,112,246,237,14,59,59,31,128,150,243,177,37,48,111,141,93,48,102,253\")"
            },
            {
              "js": "\"jndwnq\"",
              "sol": "\"jndwnq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.017ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[155,66,51,131,40,26,133,72,52,147,209,136,153,222,65,215,60,239,154,144,125,74,141,118,104,206,84,186,152,48,61,47]",
              "sol": "abi.encode(\"155,66,51,131,40,26,133,72,52,147,209,136,153,222,65,215,60,239,154,144,125,74,141,118,104,206,84,186,152,48,61,47\")"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[88,88,172,191,198,176,75,128,136,101,127,245,120,30,239,152,124,134,107,56,86,169,221,162,41,14,29,252,122,229,209,146]",
              "sol": "abi.encode(\"88,88,172,191,198,176,75,128,136,101,127,245,120,30,239,152,124,134,107,56,86,169,221,162,41,14,29,252,122,229,209,146\")"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.018ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[103,168,48,27,106,72,251,143,96,76,153,111,16,220,96,177,151,17,16,159,108,155,112,207,134,76,37,189,240,183,203,132]",
              "sol": "stringToBytes32(\"103,168,48,27,106,72,251,143,96,76,153,111,16,220,96,177,151,17,16,159,108,155,112,207,134,76,37,189,240,183,203,132\")"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "[102,111,46,147,80,39,107,233,94,71,194,202,161,68,132,254,131,136,170,123,215,63,1,173,20,238,244,74,104,98,37,185]",
              "sol": "stringToBytes32(\"102,111,46,147,80,39,107,233,94,71,194,202,161,68,132,254,131,136,170,123,215,63,1,173,20,238,244,74,104,98,37,185\")"
            },
            {
              "js": "[26,17,195,230,84,187,100,118,55,73,76,124,105,123,20,7,13,250,26,13,137,148,156,106,7,177,240,10,163,221,123,144]",
              "sol": "stringToBytes32(\"26,17,195,230,84,187,100,118,55,73,76,124,105,123,20,7,13,250,26,13,137,148,156,106,7,177,240,10,163,221,123,144\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.020ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[87,214,206,5,45,122,35,127,18,5,46,92,213,2,43,6,253,116,215,9,149,89,28,162,20,220,58,143,118,26,201,215]",
              "sol": "stringToBytes32(\"87,214,206,5,45,122,35,127,18,5,46,92,213,2,43,6,253,116,215,9,149,89,28,162,20,220,58,143,118,26,201,215\")"
            },
            {
              "js": "[207,18,255,225,174,253,169,121,1,177,43,24,119,230,194,219,99,228,64,138,220,59,20,88,184,71,94,43,176,119,169,248,125,154,81,112,234,160,158,241,22,211,74,194,91,200,216,52,95,192,104,55,140,25,221,101,103,115,154,180,118,25,50,182,163,153,245,231,86,109,23,113,179,237,243,178,99,48,133,199,214,128,217,105,9,188,248,181,86,221,251,254,30,203,83,44,161,184,69,221,103,213,183,147,224,92,135,82,225,172,63,248,78,63,122,254,80,60,224,202,208,80,37,151,15,184,59,62,120,138,46,255,27,109,118,113,123,3,84,149,23,66,211,205,113,142,20,86,104,36,60,191,96,188,71,103,9,152,52,149,156,215,100,239,216,187,246,129,109,19,204,217,223,252,63,7,68,40,77,45,72,16,120,114,38,61,152,0,92,77,106,169,52,149,108,133,133,240,115,125,31,191,86,119,69,174,34,110,152,79,219,207,170,227,150,184,152,235,97,172,151,88,213,149,33,24,151,74,149,222,167,123,114,161,175,27,245,133,51,0,101,39,41,2,117,217,41,55,226,151,70,41,10,167]",
              "sol": "abi.encode(\"207,18,255,225,174,253,169,121,1,177,43,24,119,230,194,219,99,228,64,138,220,59,20,88,184,71,94,43,176,119,169,248,125,154,81,112,234,160,158,241,22,211,74,194,91,200,216,52,95,192,104,55,140,25,221,101,103,115,154,180,118,25,50,182,163,153,245,231,86,109,23,113,179,237,243,178,99,48,133,199,214,128,217,105,9,188,248,181,86,221,251,254,30,203,83,44,161,184,69,221,103,213,183,147,224,92,135,82,225,172,63,248,78,63,122,254,80,60,224,202,208,80,37,151,15,184,59,62,120,138,46,255,27,109,118,113,123,3,84,149,23,66,211,205,113,142,20,86,104,36,60,191,96,188,71,103,9,152,52,149,156,215,100,239,216,187,246,129,109,19,204,217,223,252,63,7,68,40,77,45,72,16,120,114,38,61,152,0,92,77,106,169,52,149,108,133,133,240,115,125,31,191,86,119,69,174,34,110,152,79,219,207,170,227,150,184,152,235,97,172,151,88,213,149,33,24,151,74,149,222,167,123,114,161,175,27,245,133,51,0,101,39,41,2,117,217,41,55,226,151,70,41,10,167\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[120,185,68,196,248,210,4,236,57,81,183,179,211,66,81,9,240,194,178,48,19,106,231,223,113,25,121,216,235,233,202,45]",
              "sol": "stringToBytes32(\"120,185,68,196,248,210,4,236,57,81,183,179,211,66,81,9,240,194,178,48,19,106,231,223,113,25,121,216,235,233,202,45\")"
            },
            {
              "js": "[34,80,173,180,141,228,66,72,173,38,118,197,198,206,29,182,111,92,227,157,172,32,86,230,185,235,176,71,127,86,135,132,224,2,173,8,152,190,171,198,240,177,197,59,146,55,140,151,240,81,191,177,174,111,194,71,97,4,3,123,117,108,247,193,17]",
              "sol": "abi.encode(\"34,80,173,180,141,228,66,72,173,38,118,197,198,206,29,182,111,92,227,157,172,32,86,230,185,235,176,71,127,86,135,132,224,2,173,8,152,190,171,198,240,177,197,59,146,55,140,151,240,81,191,177,174,111,194,71,97,4,3,123,117,108,247,193,17\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.022ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.023ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[87,103]",
              "sol": "[uint(87),uint(103)]"
            },
            {
              "js": "[[71,57],[17,7]]",
              "sol": "[[uint(71),uint(57)],[uint(17),uint(7)]]"
            },
            {
              "js": "[60,101]",
              "sol": "[uint(60),uint(101)]"
            },
            {
              "js": "[59,70]",
              "sol": "[uint(59),uint(70)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.028ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.028ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[15,2014223715,6,47,32,20]",
              "sol": "[uint(15),uint(2014223715),uint(6),uint(47),uint(32),uint(20)]"
            },
            {
              "js": "{\"A\": {\"X\": 22,\"Y\": 2014223716},\"B\": {\"X\": [9,55],\"Y\": [27,256]},\"C\": {\"X\": 103,\"Y\": 1023}}",
              "sol": "Verifier.Proof(Pairing.G1Point(22,2014223716),Pairing.G2Point([uint(9),uint(55)],[uint(27),uint(256)]),Pairing.G1Point(103,1023))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[30,71,0,30,101,162,33,162,256]",
              "sol": "[uint(30),uint(71),uint(0),uint(30),uint(101),uint(162),uint(33),uint(162),uint(256)]"
            },
            {
              "js": "{\"A\": {\"X\": 30,\"Y\": 46},\"B\": {\"X\": [20,32],\"Y\": [7,98]},\"C\": {\"X\": 63,\"Y\": 98}}",
              "sol": "Verifier.Proof(Pairing.G1Point(30,46),Pairing.G2Point([uint(20),uint(32)],[uint(7),uint(98)]),Pairing.G1Point(63,98))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.035ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.035ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.036ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"accounts[3]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.038ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.039ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.040ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.040ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.042ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.043ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "[141,207,73,6,168,199,177,120,85,11,123,239,76,57,7,59,12,43,149,8,46,233,43,190,228,214,189,232,208,46,133,34]",
              "sol": "abi.encode(\"141,207,73,6,168,199,177,120,85,11,123,239,76,57,7,59,12,43,149,8,46,233,43,190,228,214,189,232,208,46,133,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "[141,207,73,6,168,199,177,120,85,11,123,239,76,57,7,59,12,43,149,8,46,233,43,190,228,214,189,232,208,46,133,34]",
                "sol": "abi.encode(\"141,207,73,6,168,199,177,120,85,11,123,239,76,57,7,59,12,43,149,8,46,233,43,190,228,214,189,232,208,46,133,34\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.047ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.049ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[242,68,86,207]",
              "sol": "bytes4(\"242,68,86,207\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.052ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.052ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.053ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.054ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.055ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "[222,143,79,178,158,126,70,199,228,30,25,26,216,139,120,171,119,33,29,230,129,201,189,251,13,30,64,202,16,235,106,245]",
              "sol": "abi.encode(\"222,143,79,178,158,126,70,199,228,30,25,26,216,139,120,171,119,33,29,230,129,201,189,251,13,30,64,202,16,235,106,245\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "[226,69,51,252,220,157,214,98,230,241,51,76,148,203,226,12,52,227,119,168,4,201,224,155,225,103,117,167,198,243,110,165]",
              "sol": "abi.encode(\"226,69,51,252,220,157,214,98,230,241,51,76,148,203,226,12,52,227,119,168,4,201,224,155,225,103,117,167,198,243,110,165\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.058ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "200001",
                "sol": "200001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "200001",
                "sol": "200001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.062ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1532892062,98]",
              "sol": "[uint(1532892062),uint(98)]"
            },
            {
              "js": "[[255,98],[16,254]]",
              "sol": "[[uint(255),uint(98)],[uint(16),uint(254)]]"
            },
            {
              "js": "[5,17]",
              "sol": "[uint(5),uint(17)]"
            },
            {
              "js": "[128,66]",
              "sol": "[uint(128),uint(66)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.065ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.066ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.067ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.067ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.068ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.070ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.071ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.071ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.072ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.073ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.074ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T09:54:26.074ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.075ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T09:54:26.076ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}