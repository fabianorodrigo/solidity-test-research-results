{"code":"  let trace = false;\n  let contractAddress = null;\n  let contractSafeMath = null;\n  let contractCounters = null;\n  let contractBuffer = null;\n  let contractCBOR = null;\n  let contractPairing = null;\n  let contractBN256G2 = null;\n  let contractusingOraclize = null;\n  let contractVerifier = null;\n  let contractSolnSquareVerifier = null;\n  let contractERC721 = null;\n  let contractERC721MintableComplete = null;\n  let contractERC721Metadata = null;\n  let contractERC721Enumerable = null;\n  let contractOwnable = null;\n  beforeEach(async () => {\n    contractAddress = await Address.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Address.new({from: accounts[0]}');\n    contractSafeMath = await SafeMath.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');\n    contractCounters = await Counters.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Counters.new({from: accounts[0]}');\n    contractBuffer = await Buffer.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Buffer.new({from: accounts[0]}');\n    contractCBOR = await CBOR.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: CBOR.new({from: accounts[0]}');\n    contractPairing = await Pairing.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Pairing.new({from: accounts[0]}');\n    contractBN256G2 = await BN256G2.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: BN256G2.new({from: accounts[0]}');\n    contractusingOraclize = await usingOraclize.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: usingOraclize.new({from: accounts[0]}');\n    contractVerifier = await Verifier.new({from: accounts[0]});\n    if(trace) console.log('SUCESSO: Verifier.new({from: accounts[0]}');\n    SolnSquareVerifier.link(\"BN256G2\",contractBN256G2.address);\n     SolnSquareVerifier.link(\"Pairing\",contractPairing.address);\n    contractSolnSquareVerifier = await SolnSquareVerifier.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: SolnSquareVerifier.new({from:accounts[0]}');\n    ERC721.link(\"Address\",contractAddress.address);\n     ERC721.link(\"Counters\",contractCounters.address);\n     ERC721.link(\"SafeMath\",contractSafeMath.address);\n     ERC721.link(\"Buffer\",contractBuffer.address);\n     ERC721.link(\"CBOR\",contractCBOR.address);\n    contractERC721 = await ERC721.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: ERC721.new({from:accounts[0]}');\n    ERC721MintableComplete.link(\"Address\",contractAddress.address);\n     ERC721MintableComplete.link(\"Counters\",contractCounters.address);\n     ERC721MintableComplete.link(\"SafeMath\",contractSafeMath.address);\n     ERC721MintableComplete.link(\"Buffer\",contractBuffer.address);\n     ERC721MintableComplete.link(\"CBOR\",contractCBOR.address);\n    contractERC721MintableComplete = await ERC721MintableComplete.new(\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",{from:accounts[0]});\n    if(trace) console.log('SUCESSO: ERC721MintableComplete.new(\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",{from:accounts[0]}');\n    ERC721Metadata.link(\"Address\",contractAddress.address);\n     ERC721Metadata.link(\"Counters\",contractCounters.address);\n     ERC721Metadata.link(\"SafeMath\",contractSafeMath.address);\n     ERC721Metadata.link(\"Buffer\",contractBuffer.address);\n     ERC721Metadata.link(\"CBOR\",contractCBOR.address);\n    contractERC721Metadata = await ERC721Metadata.new(\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\",\"lnr2ym\",{from:accounts[0]});\n    if(trace) console.log('SUCESSO: ERC721Metadata.new(\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\",\"lnr2ym\",{from:accounts[0]}');\n    ERC721Enumerable.link(\"Address\",contractAddress.address);\n     ERC721Enumerable.link(\"Counters\",contractCounters.address);\n     ERC721Enumerable.link(\"SafeMath\",contractSafeMath.address);\n     ERC721Enumerable.link(\"Buffer\",contractBuffer.address);\n     ERC721Enumerable.link(\"CBOR\",contractCBOR.address);\n    contractERC721Enumerable = await ERC721Enumerable.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: ERC721Enumerable.new({from:accounts[0]}');\n    Ownable.link(\"Address\",contractAddress.address);\n     Ownable.link(\"Counters\",contractCounters.address);\n     Ownable.link(\"SafeMath\",contractSafeMath.address);\n     Ownable.link(\"Buffer\",contractBuffer.address);\n     Ownable.link(\"CBOR\",contractCBOR.address);\n    contractOwnable = await Ownable.new({from:accounts[0]});\n    if(trace) console.log('SUCESSO: Ownable.new({from:accounts[0]}');\n  });\n","contractsDeployed":[{"contractName":"Address","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"SafeMath","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Counters","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Buffer","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"CBOR","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Pairing","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"BN256G2","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"usingOraclize","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"Verifier","stringfieldParams":["{from: accounts[0]}"]},{"contractName":"SolnSquareVerifier","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"ERC721","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"ERC721MintableComplete","stringfieldParams":["\"Transaction successfully verified.\"","\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"","{from:accounts[0]}"]},{"contractName":"ERC721Metadata","stringfieldParams":["\"\\x19Ethereum Signed Message:\\n32\"","\"Transaction successfully verified.\"","\"lnr2ym\"","{from:accounts[0]}"]},{"contractName":"ERC721Enumerable","stringfieldParams":["{from:accounts[0]}"]},{"contractName":"Ownable","stringfieldParams":["{from:accounts[0]}"]}]}