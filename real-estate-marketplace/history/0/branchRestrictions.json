,{
  "2020-11-10T03:09:19.666ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:09:34.673ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:09:49.649ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:05.130ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:21.347ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:36.603ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.022ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [226,194,66,80,71,175,102,41,42,58,123,38,36,133,8,110,180,246,16,247,5,69,146,38,56,177,217,125,255,239,215,238],\"capacity\": 54}",
              "sol": "Buffer.buffer(abi.encode(\"226,194,66,80,71,175,102,41,42,58,123,38,36,133,8,110,180,246,16,247,5,69,146,38,56,177,217,125,255,239,215,238\"),54)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.025ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [163,103,225,115,23,200,194,70,108,238,20,249,2,149,16,186,251,252,214,109,166,206,8,100,47,241,156,247,255,100,184,224],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"163,103,225,115,23,200,194,70,108,238,20,249,2,149,16,186,251,252,214,109,166,206,8,100,47,241,156,247,255,100,184,224\"),161)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [126,255,34,78,0,147,87,54,56,254,191,223,222,22,138,212,15,40,204,142,133,252,246,79,112,79,188,97,252,60,77,239],\"capacity\": 128}",
              "sol": "Buffer.buffer(abi.encode(\"126,255,34,78,0,147,87,54,56,254,191,223,222,22,138,212,15,40,204,142,133,252,246,79,112,79,188,97,252,60,77,239\"),128)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.026ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [26,255,217,2,189,2,195,31,12,34,98,3,43,123,35,180,27,145,140,215,70,81,182,128,247,104,255,104,76,214,13,240],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"26,255,217,2,189,2,195,31,12,34,98,3,43,123,35,180,27,145,140,215,70,81,182,128,247,104,255,104,76,214,13,240\"),49)"
            },
            {
              "js": "[198,185,122,242,50,128,31,132,239,114,213,146,236,79,141,197,72,114,33,233,236,234,247,171,20,1,97,213,26,204,170,161]",
              "sol": "abi.encode(\"198,185,122,242,50,128,31,132,239,114,213,146,236,79,141,197,72,114,33,233,236,234,247,171,20,1,97,213,26,204,170,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.026ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [110,234,215,53,21,105,102,16,124,77,236,41,120,126,103,70,252,10,105,45,114,226,138,62,161,132,31,215,106,218,122,252],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"110,234,215,53,21,105,102,16,124,77,236,41,120,126,103,70,252,10,105,45,114,226,138,62,161,132,31,215,106,218,122,252\"),4)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.027ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [154,183,84,198,200,18,2,76,250,110,109,171,204,45,214,39,63,221,64,241,38,120,84,5,78,30,54,0,1,73,22,191],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"154,183,84,198,200,18,2,76,250,110,109,171,204,45,214,39,63,221,64,241,38,120,84,5,78,30,54,0,1,73,22,191\"),101)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.027ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [14,102,65,142,220,125,7,147,212,247,230,76,129,50,115,235,88,109,167,214,121,26,102,224,163,172,80,170,227,59,107,196],\"capacity\": 31}",
              "sol": "Buffer.buffer(abi.encode(\"14,102,65,142,220,125,7,147,212,247,230,76,129,50,115,235,88,109,167,214,121,26,102,224,163,172,80,170,227,59,107,196\"),31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.028ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [190,242,216,138,111,171,191,111,41,88,214,77,180,110,117,201,143,61,26,201,224,28,83,154,161,84,138,54,238,102,246,62],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"190,242,216,138,111,171,191,111,41,88,214,77,180,110,117,201,143,61,26,201,224,28,83,154,161,84,138,54,238,102,246,62\"),98)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.033ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.034ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.034ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 59,\"Y\": 7}",
              "sol": "Pairing.G1Point(59,7)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.035ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 69,\"Y\": 56}",
              "sol": "Pairing.G1Point(69,56)"
            },
            {
              "js": "{\"X\": 49,\"Y\": 127}",
              "sol": "Pairing.G1Point(49,127)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.035ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [88,19],\"Y\": [162,20]}",
              "sol": "Pairing.G2Point([uint(88),uint(19)],[uint(162),uint(20)])"
            },
            {
              "js": "{\"X\": [88,103],\"Y\": [1025,63]}",
              "sol": "Pairing.G2Point([uint(88),uint(103)],[uint(1025),uint(63)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.036ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 98,\"Y\": 56}",
              "sol": "Pairing.G1Point(98,56)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.037ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 255,\"Y\": 1532892064},{\"X\": 49,\"Y\": 5},{\"X\": 63,\"Y\": 98},{\"X\": 21,\"Y\": 46},{\"X\": 19,\"Y\": 1532892063},{\"X\": 255,\"Y\": 56},{\"X\": 199999,\"Y\": 2014223715},{\"X\": 33,\"Y\": 22},{\"X\": 66,\"Y\": 69},{\"X\": 86,\"Y\": 128}]",
              "sol": "[Pairing.G1Point(255,1532892064),Pairing.G1Point(49,5),Pairing.G1Point(63,98),Pairing.G1Point(21,46),Pairing.G1Point(19,1532892063),Pairing.G1Point(255,56),Pairing.G1Point(199999,2014223715),Pairing.G1Point(33,22),Pairing.G1Point(66,69),Pairing.G1Point(86,128)]"
            },
            {
              "js": "[{\"X\": [63,2],\"Y\": [1024,160]},{\"X\": [47,17],\"Y\": [65,48]},{\"X\": [127,255],\"Y\": [45,66]},{\"X\": [3,31],\"Y\": [25,59]},{\"X\": [26,61],\"Y\": [17,64]},{\"X\": [32,66],\"Y\": [1,19]},{\"X\": [87,160],\"Y\": [9,23]},{\"X\": [1532892064,57],\"Y\": [31,9]},{\"X\": [71,2],\"Y\": [54,48]},{\"X\": [97,56],\"Y\": [160,2014223714]}]",
              "sol": "[Pairing.G2Point([uint(63),uint(2)],[uint(1024),uint(160)]),Pairing.G2Point([uint(47),uint(17)],[uint(65),uint(48)]),Pairing.G2Point([uint(127),uint(255)],[uint(45),uint(66)]),Pairing.G2Point([uint(3),uint(31)],[uint(25),uint(59)]),Pairing.G2Point([uint(26),uint(61)],[uint(17),uint(64)]),Pairing.G2Point([uint(32),uint(66)],[uint(1),uint(19)]),Pairing.G2Point([uint(87),uint(160)],[uint(9),uint(23)]),Pairing.G2Point([uint(1532892064),uint(57)],[uint(31),uint(9)]),Pairing.G2Point([uint(71),uint(2)],[uint(54),uint(48)]),Pairing.G2Point([uint(97),uint(56)],[uint(160),uint(2014223714)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 200000,\"Y\": 20},{\"X\": 1532892062,\"Y\": 128},{\"X\": 59,\"Y\": 200001},{\"X\": 88,\"Y\": 29},{\"X\": 70,\"Y\": 0},{\"X\": 46,\"Y\": 49},{\"X\": 86,\"Y\": 57},{\"X\": 98,\"Y\": 98},{\"X\": 162,\"Y\": 95},{\"X\": 2,\"Y\": 254},{\"X\": 161,\"Y\": 97}]",
                "sol": "[Pairing.G1Point(4,23),Pairing.G1Point(49,21),Pairing.G1Point(257,29),Pairing.G1Point(1025,65),Pairing.G1Point(22,28),Pairing.G1Point(4,0),Pairing.G1Point(30,98),Pairing.G1Point(5,22),Pairing.G1Point(2014223715,15),Pairing.G1Point(161,70),Pairing.G1Point(1532892062,59)]"
              },
              {
                "js": "[{\"X\": [63,2],\"Y\": [1024,160]},{\"X\": [47,17],\"Y\": [65,48]},{\"X\": [127,255],\"Y\": [45,66]},{\"X\": [3,31],\"Y\": [25,59]},{\"X\": [26,61],\"Y\": [17,64]},{\"X\": [32,66],\"Y\": [1,19]},{\"X\": [87,160],\"Y\": [9,23]},{\"X\": [1532892064,57],\"Y\": [31,9]},{\"X\": [71,2],\"Y\": [54,48]},{\"X\": [97,56],\"Y\": [160,2014223714]}]",
                "sol": "[Pairing.G2Point([uint(63),uint(2)],[uint(1024),uint(160)]),Pairing.G2Point([uint(47),uint(17)],[uint(65),uint(48)]),Pairing.G2Point([uint(127),uint(255)],[uint(45),uint(66)]),Pairing.G2Point([uint(3),uint(31)],[uint(25),uint(59)]),Pairing.G2Point([uint(26),uint(61)],[uint(17),uint(64)]),Pairing.G2Point([uint(32),uint(66)],[uint(1),uint(19)]),Pairing.G2Point([uint(87),uint(160)],[uint(9),uint(23)]),Pairing.G2Point([uint(1532892064),uint(57)],[uint(31),uint(9)]),Pairing.G2Point([uint(71),uint(2)],[uint(54),uint(48)]),Pairing.G2Point([uint(97),uint(56)],[uint(160),uint(2014223714)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.046ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 254,\"Y\": 88}",
              "sol": "Pairing.G1Point(254,88)"
            },
            {
              "js": "{\"X\": [160,21],\"Y\": [20,26]}",
              "sol": "Pairing.G2Point([uint(160),uint(21)],[uint(20),uint(26)])"
            },
            {
              "js": "{\"X\": 17,\"Y\": 95}",
              "sol": "Pairing.G1Point(17,95)"
            },
            {
              "js": "{\"X\": [128,63],\"Y\": [129,3]}",
              "sol": "Pairing.G2Point([uint(128),uint(63)],[uint(129),uint(3)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.048ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 1025,\"Y\": 257}",
              "sol": "Pairing.G1Point(1025,257)"
            },
            {
              "js": "{\"X\": [2014223714,65],\"Y\": [59,1532892064]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(65)],[uint(59),uint(1532892064)])"
            },
            {
              "js": "{\"X\": 2014223715,\"Y\": 4}",
              "sol": "Pairing.G1Point(2014223715,4)"
            },
            {
              "js": "{\"X\": [25,15],\"Y\": [96,0]}",
              "sol": "Pairing.G2Point([uint(25),uint(15)],[uint(96),uint(0)])"
            },
            {
              "js": "{\"X\": 199999,\"Y\": 86}",
              "sol": "Pairing.G1Point(199999,86)"
            },
            {
              "js": "{\"X\": [58,6],\"Y\": [24,15]}",
              "sol": "Pairing.G2Point([uint(58),uint(6)],[uint(24),uint(15)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.053ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.053ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.054ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.056ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.056ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.057ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.057ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.058ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.058ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.059ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.059ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.063ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [52,14,89,55,67,26,182,237,18,227,227,119,159,78,76,134,219,134,107,106,107,5,122,22,162,76,174,57,245,40,132,150],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"52,14,89,55,67,26,182,237,18,227,227,119,159,78,76,134,219,134,107,106,107,5,122,22,162,76,174,57,245,40,132,150\"),59)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.063ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [29,189,13,134,224,226,180,131,245,124,116,188,36,119,60,218,176,35,160,41,21,174,69,72,108,21,164,105,233,23,10,160],\"capacity\": 1532892064}",
              "sol": "Buffer.buffer(abi.encode(\"29,189,13,134,224,226,180,131,245,124,116,188,36,119,60,218,176,35,160,41,21,174,69,72,108,21,164,105,233,23,10,160\"),1532892064)"
            },
            {
              "js": "[13,149,25,98,175,56,99,169,238,169,116,133,176,178,67,66,85,160,69,60,246,245,102,181,52,117,231,44,62,92,17,5]",
              "sol": "abi.encode(\"13,149,25,98,175,56,99,169,238,169,116,133,176,178,67,66,85,160,69,60,246,245,102,181,52,117,231,44,62,92,17,5\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.064ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [34,48,154,212,240,85,14,62,63,178,112,117,18,163,24,177,27,176,77,134,131,246,190,30,8,134,111,195,3,229,194,243],\"capacity\": 58}",
              "sol": "Buffer.buffer(abi.encode(\"34,48,154,212,240,85,14,62,63,178,112,117,18,163,24,177,27,176,77,134,131,246,190,30,8,134,111,195,3,229,194,243\"),58)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.064ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [167,235,205,214,62,111,122,145,176,30,107,7,6,14,165,43,120,128,88,52,26,80,142,68,79,61,96,233,39,6,85,142],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"167,235,205,214,62,111,122,145,176,30,107,7,6,14,165,43,120,128,88,52,26,80,142,68,79,61,96,233,39,6,85,142\"),161)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.065ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[179,112,217,104,127,112,213,166,12,165,171,86,39,226,226,93,162,119,86,139,213,163,229,242,100,242,59,82,24,244,241,83]",
              "sol": "stringToBytes32(\"179,112,217,104,127,112,213,166,12,165,171,86,39,226,226,93,162,119,86,139,213,163,229,242,100,242,59,82,24,244,241,83\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.066ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[59,19,12,113,211,108,70,223,140,133,213,169,173,100,243,40,71,218,175,3,235,65,187,222,228,19,125,151,100,70,236,61]",
              "sol": "stringToBytes32(\"59,19,12,113,211,108,70,223,140,133,213,169,173,100,243,40,71,218,175,3,235,65,187,222,228,19,125,151,100,70,236,61\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[81,9,25,168,30,132,127,64,33,165,199,65,188,186,41,147,24,32,128,168,10,80,56,120,188,77,65,210,66,242,11,183]",
              "sol": "abi.encode(\"81,9,25,168,30,132,127,64,33,165,199,65,188,186,41,147,24,32,128,168,10,80,56,120,188,77,65,210,66,242,11,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.111ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.112ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.112ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.112ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.113ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.113ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.113ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.114ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.114ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.114ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.116ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.116ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.117ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.117ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.118ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"2sm0r6\",\"0\",\"P\",\"ERC1820_ACCEPT_MAGIC\",\"scn4e\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\",\"[\",\"7kxci\"]",
              "sol": "[string(\"2sm0r6\"),string(\"0\"),string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"scn4e\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"[\"),string(\"7kxci\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.118ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Capstones\",\"[\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"scn4e\",\"ERC1820_ACCEPT_MAGIC\",\"2sm0r6\"]",
              "sol": "[string(\"Capstones\"),string(\"[\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"scn4e\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"2sm0r6\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.119ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"scn4e\"",
              "sol": "\"scn4e\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"7kxci\",\"0\",\"[\",\"0\",\"pcmevm\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"7kxci\"),string(\"0\"),string(\"[\"),string(\"0\"),string(\"pcmevm\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.119ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"2sm0r6\",\"pcmevm\",\"Transaction successfully verified.\",\"9y1ahr\",\"f4eoa7q\",\"Capstones\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"2sm0r6\"),string(\"pcmevm\"),string(\"Transaction successfully verified.\"),string(\"9y1ahr\"),string(\"f4eoa7q\"),string(\"Capstones\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.120ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"pcmevm\"]",
              "sol": "[string(\"pcmevm\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.120ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"pcmevm\"]",
              "sol": "[string(\"pcmevm\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.121ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "[\"2sm0r6\"]",
              "sol": "[string(\"2sm0r6\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.121ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"scn4e\"",
              "sol": "\"scn4e\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.122ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"t4t6aa\"",
              "sol": "\"t4t6aa\""
            },
            {
              "js": "[\"pcmevm\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"pcmevm\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.122ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"scn4e\",\"scn4e\"]",
              "sol": "[string(\"scn4e\"),string(\"scn4e\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.122ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"t4t6aa\"",
              "sol": "\"t4t6aa\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"sq8lh\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"sq8lh\")]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.123ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"scn4e\"",
              "sol": "\"scn4e\""
            },
            {
              "js": "[\"scn4e\",\"mxu3g\"]",
              "sol": "[string(\"scn4e\"),string(\"mxu3g\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.124ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"mxu3g\"",
              "sol": "\"mxu3g\""
            },
            {
              "js": "[\"2sm0r6\",\"sq8lh\",\"2sm0r6\"]",
              "sol": "[string(\"2sm0r6\"),string(\"sq8lh\"),string(\"2sm0r6\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.124ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"P\",\"t4t6aa\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\"),string(\"t4t6aa\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.124ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"d7f2q\",\"[\",\"Capstones\"]",
              "sol": "[string(\"d7f2q\"),string(\"[\"),string(\"Capstones\")]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.125ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "[\"9y1ahr\",\"2sm0r6\",\"P\"]",
              "sol": "[string(\"9y1ahr\"),string(\"2sm0r6\"),string(\"P\")]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.126ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"sq8lh\"",
              "sol": "\"sq8lh\""
            },
            {
              "js": "[\"f4eoa7q\",\"[\",\"in65de\",\"pcmevm\"]",
              "sol": "[string(\"f4eoa7q\"),string(\"[\"),string(\"in65de\"),string(\"pcmevm\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.126ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"kxb98\",\"pcmevm\",\"d7f2q\",\"u64ve\"]",
              "sol": "[string(\"kxb98\"),string(\"pcmevm\"),string(\"d7f2q\"),string(\"u64ve\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.126ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "[\"9y1ahr\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\",\"d7f2q\"]",
              "sol": "[string(\"9y1ahr\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"d7f2q\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.127ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"t4t6aa\"",
              "sol": "\"t4t6aa\""
            },
            {
              "js": "[\"9y1ahr\",\"P\",\"in65de\",\"[\"]",
              "sol": "[string(\"9y1ahr\"),string(\"P\"),string(\"in65de\"),string(\"[\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.128ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"4mgwof\"",
              "sol": "\"4mgwof\""
            },
            {
              "js": "[\"sq8lh\",\"4mgwof\",\"pcmevm\",\"scn4e\",\"9y1ahr\"]",
              "sol": "[string(\"sq8lh\"),string(\"4mgwof\"),string(\"pcmevm\"),string(\"scn4e\"),string(\"9y1ahr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.128ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "[\"pcmevm\",\"sq8lh\",\"P\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"pcmevm\"),string(\"sq8lh\"),string(\"P\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.129ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"scn4e\",\"0\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"f4eoa7q\"]",
              "sol": "[string(\"scn4e\"),string(\"0\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"f4eoa7q\")]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.129ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"mxu3g\",\"g2obtk\",\"Capstones\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"mxu3g\"),string(\"g2obtk\"),string(\"Capstones\")]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.130ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[183,98,108,141,219,97,1,79,67,155,169,33,252,237,251,220,120,233,193,3,56,221,13,211,234,185,43,65,141,24,99,11],[143,223,115,176,96,93,35,41,29,105,67,93,43,6,229,210,203,157,22,8,160,155,33,15,191,44,163,67,117,84,88,20]]",
              "sol": "[bytes(abi.encode(\"183,98,108,141,219,97,1,79,67,155,169,33,252,237,251,220,120,233,193,3,56,221,13,211,234,185,43,65,141,24,99,11\")),bytes(abi.encode(\"143,223,115,176,96,93,35,41,29,105,67,93,43,6,229,210,203,157,22,8,160,155,33,15,191,44,163,67,117,84,88,20\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.130ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[47,77,172,42,61,225,42,18,16,163,113,147,78,151,30,111,46,85,95,203,237,120,125,184,52,128,179,217,85,191,242,151],[72,100,71,94,172,228,202,54,56,86,53,187,100,186,60,94,209,49,91,176,87,133,106,114,58,228,17,62,4,17,31,58]]",
              "sol": "[bytes(abi.encode(\"47,77,172,42,61,225,42,18,16,163,113,147,78,151,30,111,46,85,95,203,237,120,125,184,52,128,179,217,85,191,242,151\")),bytes(abi.encode(\"72,100,71,94,172,228,202,54,56,86,53,187,100,186,60,94,209,49,91,176,87,133,106,114,58,228,17,62,4,17,31,58\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.131ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"mxu3g\"",
              "sol": "\"mxu3g\""
            },
            {
              "js": "[[102,19,154,24,243,57,106,95,253,5,58,153,153,19,230,103,69,78,97,139,68,222,10,216,3,225,193,230,71,60,158,230],[16,243,60,134,106,132,222,245,87,172,154,202,173,186,224,22,91,128,228,37,3,89,121,169,217,24,178,255,49,136,106,204],[71,191,59,121,123,168,206,19,83,95,51,134,196,160,164,14,58,67,226,80,52,38,51,88,227,58,189,86,191,213,54,120],[176,126,78,54,203,93,67,121,16,49,55,97,193,186,239,56,2,255,77,18,106,13,200,59,58,95,214,185,82,24,194,248],[239,85,197,193,39,215,223,222,53,71,175,182,235,9,60,241,208,20,237,118,1,190,212,199,143,227,199,40,115,177,181,101],[43,148,98,91,137,20,249,76,185,253,158,164,76,244,12,0,48,213,75,16,65,219,201,13,16,46,122,19,224,187,43,38],[183,36,237,41,100,20,103,138,29,233,72,211,214,145,61,153,253,82,70,200,185,195,63,152,152,217,201,233,126,242,137,61],[232,199,121,83,26,74,242,102,255,135,121,10,158,232,143,226,86,202,20,255,251,22,195,248,81,130,10,0,161,140,71,13]]",
              "sol": "[bytes(abi.encode(\"102,19,154,24,243,57,106,95,253,5,58,153,153,19,230,103,69,78,97,139,68,222,10,216,3,225,193,230,71,60,158,230\")),bytes(abi.encode(\"16,243,60,134,106,132,222,245,87,172,154,202,173,186,224,22,91,128,228,37,3,89,121,169,217,24,178,255,49,136,106,204\")),bytes(abi.encode(\"71,191,59,121,123,168,206,19,83,95,51,134,196,160,164,14,58,67,226,80,52,38,51,88,227,58,189,86,191,213,54,120\")),bytes(abi.encode(\"176,126,78,54,203,93,67,121,16,49,55,97,193,186,239,56,2,255,77,18,106,13,200,59,58,95,214,185,82,24,194,248\")),bytes(abi.encode(\"239,85,197,193,39,215,223,222,53,71,175,182,235,9,60,241,208,20,237,118,1,190,212,199,143,227,199,40,115,177,181,101\")),bytes(abi.encode(\"43,148,98,91,137,20,249,76,185,253,158,164,76,244,12,0,48,213,75,16,65,219,201,13,16,46,122,19,224,187,43,38\")),bytes(abi.encode(\"183,36,237,41,100,20,103,138,29,233,72,211,214,145,61,153,253,82,70,200,185,195,63,152,152,217,201,233,126,242,137,61\")),bytes(abi.encode(\"232,199,121,83,26,74,242,102,255,135,121,10,158,232,143,226,86,202,20,255,251,22,195,248,81,130,10,0,161,140,71,13\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.133ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"d7f2q\"",
              "sol": "\"d7f2q\""
            },
            {
              "js": "[[244,74,214,152,167,251,27,225,222,225,136,249,181,249,193,115,193,72,226,90,130,12,230,173,117,176,240,228,100,46,225,85],[70,58,145,63,55,62,61,211,69,53,221,131,238,145,80,131,136,163,94,33,189,179,96,172,175,6,17,81,183,134,140,60],[199,235,95,190,175,3,63,205,138,236,44,152,203,78,190,253,108,171,62,97,44,55,177,79,145,136,223,242,225,135,89,92],[147,90,155,255,65,73,197,72,68,170,23,171,101,40,62,50,198,241,96,220,84,183,102,80,228,250,115,169,78,68,133,35],[150,3,31,234,109,237,182,70,9,22,166,115,77,247,139,212,253,9,92,146,82,208,234,73,86,27,140,85,255,103,19,172],[168,240,143,94,76,242,118,111,219,247,201,189,113,17,30,187,55,119,134,201,7,225,218,103,127,232,225,214,158,145,252,70]]",
              "sol": "[bytes(abi.encode(\"244,74,214,152,167,251,27,225,222,225,136,249,181,249,193,115,193,72,226,90,130,12,230,173,117,176,240,228,100,46,225,85\")),bytes(abi.encode(\"70,58,145,63,55,62,61,211,69,53,221,131,238,145,80,131,136,163,94,33,189,179,96,172,175,6,17,81,183,134,140,60\")),bytes(abi.encode(\"199,235,95,190,175,3,63,205,138,236,44,152,203,78,190,253,108,171,62,97,44,55,177,79,145,136,223,242,225,135,89,92\")),bytes(abi.encode(\"147,90,155,255,65,73,197,72,68,170,23,171,101,40,62,50,198,241,96,220,84,183,102,80,228,250,115,169,78,68,133,35\")),bytes(abi.encode(\"150,3,31,234,109,237,182,70,9,22,166,115,77,247,139,212,253,9,92,146,82,208,234,73,86,27,140,85,255,103,19,172\")),bytes(abi.encode(\"168,240,143,94,76,242,118,111,219,247,201,189,113,17,30,187,55,119,134,201,7,225,218,103,127,232,225,214,158,145,252,70\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.133ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[63,189,117,110,86,251,88,92,109,87,58,228,8,104,21,105,27,36,112,118,50,84,96,95,166,84,241,188,135,152,56,231]]",
              "sol": "[bytes(abi.encode(\"63,189,117,110,86,251,88,92,109,87,58,228,8,104,21,105,27,36,112,118,50,84,96,95,166,84,241,188,135,152,56,231\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.134ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "[[185,112,222,0,188,231,195,90,55,102,17,106,131,228,237,43,64,200,170,157,136,43,39,215,10,97,22,0,214,180,55,166]]",
              "sol": "[bytes(abi.encode(\"185,112,222,0,188,231,195,90,55,102,17,106,131,228,237,43,64,200,170,157,136,43,39,215,10,97,22,0,214,180,55,166\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.135ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "[[40,72,124,241,85,41,127,137,205,91,91,153,160,57,101,209,105,151,38,251,90,194,229,124,153,209,233,157,127,76,69,251]]",
              "sol": "[bytes(abi.encode(\"40,72,124,241,85,41,127,137,205,91,91,153,160,57,101,209,105,151,38,251,90,194,229,124,153,209,233,157,127,76,69,251\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.135ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"f4eoa7q\"",
              "sol": "\"f4eoa7q\""
            },
            {
              "js": "[[53,191,32,188,19,243,237,9,63,132,127,102,41,51,1,180,68,111,96,204,204,6,72,93,203,172,116,220,51,6,154,36]]",
              "sol": "[bytes(abi.encode(\"53,191,32,188,19,243,237,9,63,132,127,102,41,51,1,180,68,111,96,204,204,6,72,93,203,172,116,220,51,6,154,36\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.136ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"scn4e\"",
              "sol": "\"scn4e\""
            },
            {
              "js": "[[215,223,81,50,134,66,238,159,190,43,92,213,16,11,203,0,60,75,106,225,77,234,205,220,177,21,93,78,140,36,191,30],[199,23,165,19,131,144,25,96,229,73,115,223,111,140,54,72,56,117,180,199,170,156,233,81,193,8,47,49,49,73,60,90]]",
              "sol": "[bytes(abi.encode(\"215,223,81,50,134,66,238,159,190,43,92,213,16,11,203,0,60,75,106,225,77,234,205,220,177,21,93,78,140,36,191,30\")),bytes(abi.encode(\"199,23,165,19,131,144,25,96,229,73,115,223,111,140,54,72,56,117,180,199,170,156,233,81,193,8,47,49,49,73,60,90\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.136ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[14,46,54,6,186,252,135,129,32,215,129,17,77,35,76,97,129,37,254,117,203,151,77,104,142,117,123,152,172,32,229,20],[88,69,46,196,111,69,64,224,50,243,253,173,180,36,157,76,236,229,9,207,60,159,124,20,154,5,4,85,83,215,147,40]]",
              "sol": "[bytes(abi.encode(\"14,46,54,6,186,252,135,129,32,215,129,17,77,35,76,97,129,37,254,117,203,151,77,104,142,117,123,152,172,32,229,20\")),bytes(abi.encode(\"88,69,46,196,111,69,64,224,50,243,253,173,180,36,157,76,236,229,9,207,60,159,124,20,154,5,4,85,83,215,147,40\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.137ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[193,80,202,196,160,211,245,44,227,76,87,241,223,208,51,57,51,243,255,84,190,235,172,52,230,136,87,121,135,199,207,215],[181,235,109,143,164,238,180,123,43,11,148,185,122,137,71,53,96,250,96,125,197,158,6,89,155,232,229,168,77,67,172,112]]",
              "sol": "[bytes(abi.encode(\"193,80,202,196,160,211,245,44,227,76,87,241,223,208,51,57,51,243,255,84,190,235,172,52,230,136,87,121,135,199,207,215\")),bytes(abi.encode(\"181,235,109,143,164,238,180,123,43,11,148,185,122,137,71,53,96,250,96,125,197,158,6,89,155,232,229,168,77,67,172,112\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.138ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "[[171,239,239,83,179,39,115,116,181,63,75,40,43,218,197,167,80,31,133,166,226,65,115,228,133,46,169,231,164,111,155,16],[153,13,49,70,20,24,21,24,16,43,159,171,104,94,179,80,91,177,181,188,143,184,171,230,197,239,62,98,60,169,16,90]]",
              "sol": "[bytes(abi.encode(\"171,239,239,83,179,39,115,116,181,63,75,40,43,218,197,167,80,31,133,166,226,65,115,228,133,46,169,231,164,111,155,16\")),bytes(abi.encode(\"153,13,49,70,20,24,21,24,16,43,159,171,104,94,179,80,91,177,181,188,143,184,171,230,197,239,62,98,60,169,16,90\"))]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.138ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[64,183,178,246,69,60,214,199,92,35,136,58,128,236,9,205,244,1,249,85,201,111,47,36,126,114,85,235,3,19,180,67],[25,202,125,62,75,228,253,242,116,19,43,137,147,251,170,185,25,251,15,27,112,228,10,240,232,236,210,151,250,240,224,78],[105,112,221,197,210,137,18,248,118,111,217,209,85,237,207,42,56,128,124,213,76,214,42,250,58,155,213,206,168,181,201,34]]",
              "sol": "[bytes(abi.encode(\"64,183,178,246,69,60,214,199,92,35,136,58,128,236,9,205,244,1,249,85,201,111,47,36,126,114,85,235,3,19,180,67\")),bytes(abi.encode(\"25,202,125,62,75,228,253,242,116,19,43,137,147,251,170,185,25,251,15,27,112,228,10,240,232,236,210,151,250,240,224,78\")),bytes(abi.encode(\"105,112,221,197,210,137,18,248,118,111,217,209,85,237,207,42,56,128,124,213,76,214,42,250,58,155,213,206,168,181,201,34\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.139ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "[[47,121,86,213,105,220,175,29,191,20,118,203,169,55,100,109,70,2,106,249,41,183,215,111,20,29,235,166,127,150,96,170],[30,204,242,182,110,238,200,40,33,245,69,79,51,122,56,4,87,146,111,79,239,47,253,210,20,235,246,51,110,210,1,13],[80,113,27,45,94,88,243,123,220,6,220,5,146,78,102,229,27,102,119,58,75,225,239,152,157,164,17,213,209,127,162,216]]",
              "sol": "[bytes(abi.encode(\"47,121,86,213,105,220,175,29,191,20,118,203,169,55,100,109,70,2,106,249,41,183,215,111,20,29,235,166,127,150,96,170\")),bytes(abi.encode(\"30,204,242,182,110,238,200,40,33,245,69,79,51,122,56,4,87,146,111,79,239,47,253,210,20,235,246,51,110,210,1,13\")),bytes(abi.encode(\"80,113,27,45,94,88,243,123,220,6,220,5,146,78,102,229,27,102,119,58,75,225,239,152,157,164,17,213,209,127,162,216\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.139ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[220,255,22,14,168,145,48,170,202,235,126,179,251,213,201,24,66,77,167,113,96,98,58,195,196,43,39,250,255,60,29,12],[124,178,199,67,220,52,88,73,135,68,247,231,200,46,146,238,91,166,87,140,211,166,235,163,226,115,81,221,109,115,26,193],[205,48,107,115,109,244,42,238,127,113,191,42,98,40,24,21,164,71,58,128,164,170,128,229,226,180,33,57,145,190,35,197]]",
              "sol": "[bytes(abi.encode(\"220,255,22,14,168,145,48,170,202,235,126,179,251,213,201,24,66,77,167,113,96,98,58,195,196,43,39,250,255,60,29,12\")),bytes(abi.encode(\"124,178,199,67,220,52,88,73,135,68,247,231,200,46,146,238,91,166,87,140,211,166,235,163,226,115,81,221,109,115,26,193\")),bytes(abi.encode(\"205,48,107,115,109,244,42,238,127,113,191,42,98,40,24,21,164,71,58,128,164,170,128,229,226,180,33,57,145,190,35,197\"))]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.140ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"u64ve\"",
              "sol": "\"u64ve\""
            },
            {
              "js": "[[97,112,14,96,42,221,103,216,199,165,36,204,190,124,247,48,154,218,246,192,231,221,200,197,39,175,213,155,224,37,3,185],[44,22,219,60,8,85,0,209,133,207,180,33,63,187,142,173,221,169,199,138,161,149,150,5,239,64,3,97,169,32,9,48],[96,96,210,124,155,247,91,122,93,152,122,12,150,109,255,196,16,217,174,138,222,35,114,90,92,3,43,108,234,70,55,42]]",
              "sol": "[bytes(abi.encode(\"97,112,14,96,42,221,103,216,199,165,36,204,190,124,247,48,154,218,246,192,231,221,200,197,39,175,213,155,224,37,3,185\")),bytes(abi.encode(\"44,22,219,60,8,85,0,209,133,207,180,33,63,187,142,173,221,169,199,138,161,149,150,5,239,64,3,97,169,32,9,48\")),bytes(abi.encode(\"96,96,210,124,155,247,91,122,93,152,122,12,150,109,255,196,16,217,174,138,222,35,114,90,92,3,43,108,234,70,55,42\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.140ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"mxu3g\"",
              "sol": "\"mxu3g\""
            },
            {
              "js": "[[185,186,227,113,182,21,96,150,20,149,193,192,59,135,248,29,215,56,50,205,199,44,99,50,248,91,137,244,124,99,74,209],[55,218,51,157,199,247,62,120,4,104,252,30,15,86,53,243,103,14,27,193,221,3,9,197,241,184,172,226,16,175,93,21],[132,254,14,121,89,45,104,51,151,115,255,243,194,167,243,45,48,12,215,197,97,50,52,102,204,216,50,161,151,105,87,76],[224,134,16,143,3,164,145,101,20,244,111,156,26,68,87,101,153,151,189,37,33,40,161,135,113,139,26,8,187,45,204,11]]",
              "sol": "[bytes(abi.encode(\"185,186,227,113,182,21,96,150,20,149,193,192,59,135,248,29,215,56,50,205,199,44,99,50,248,91,137,244,124,99,74,209\")),bytes(abi.encode(\"55,218,51,157,199,247,62,120,4,104,252,30,15,86,53,243,103,14,27,193,221,3,9,197,241,184,172,226,16,175,93,21\")),bytes(abi.encode(\"132,254,14,121,89,45,104,51,151,115,255,243,194,167,243,45,48,12,215,197,97,50,52,102,204,216,50,161,151,105,87,76\")),bytes(abi.encode(\"224,134,16,143,3,164,145,101,20,244,111,156,26,68,87,101,153,151,189,37,33,40,161,135,113,139,26,8,187,45,204,11\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.141ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[244,204,162,183,216,0,248,34,172,229,91,221,95,213,0,64,136,4,239,204,112,182,168,228,84,175,204,250,99,96,13,220],[211,251,100,132,52,21,219,130,157,41,95,76,20,181,75,184,234,220,132,238,127,250,123,142,148,38,192,70,75,214,249,78],[109,25,21,158,138,16,221,146,72,241,114,159,16,209,186,170,199,236,198,125,209,34,172,92,49,202,228,191,71,16,235,87],[197,159,153,170,140,228,17,219,156,86,170,15,128,219,218,82,243,127,102,195,28,29,96,230,207,27,196,48,196,181,253,21]]",
              "sol": "[bytes(abi.encode(\"244,204,162,183,216,0,248,34,172,229,91,221,95,213,0,64,136,4,239,204,112,182,168,228,84,175,204,250,99,96,13,220\")),bytes(abi.encode(\"211,251,100,132,52,21,219,130,157,41,95,76,20,181,75,184,234,220,132,238,127,250,123,142,148,38,192,70,75,214,249,78\")),bytes(abi.encode(\"109,25,21,158,138,16,221,146,72,241,114,159,16,209,186,170,199,236,198,125,209,34,172,92,49,202,228,191,71,16,235,87\")),bytes(abi.encode(\"197,159,153,170,140,228,17,219,156,86,170,15,128,219,218,82,243,127,102,195,28,29,96,230,207,27,196,48,196,181,253,21\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.142ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"2sm0r6\"",
              "sol": "\"2sm0r6\""
            },
            {
              "js": "[[220,82,15,209,143,117,25,72,212,245,219,142,28,101,208,42,125,139,225,136,159,18,175,168,48,109,199,181,211,254,148,188],[193,88,75,84,188,110,99,200,233,181,176,61,249,167,134,34,185,51,112,107,83,8,159,245,218,6,196,38,160,23,100,91],[0,137,15,57,218,13,164,100,205,145,204,131,155,149,39,154,253,6,160,214,58,26,242,82,245,229,125,94,157,202,33,139],[23,78,126,193,19,120,177,218,197,63,181,3,222,61,212,127,69,183,227,245,20,169,202,194,27,45,7,137,99,142,61,182]]",
              "sol": "[bytes(abi.encode(\"220,82,15,209,143,117,25,72,212,245,219,142,28,101,208,42,125,139,225,136,159,18,175,168,48,109,199,181,211,254,148,188\")),bytes(abi.encode(\"193,88,75,84,188,110,99,200,233,181,176,61,249,167,134,34,185,51,112,107,83,8,159,245,218,6,196,38,160,23,100,91\")),bytes(abi.encode(\"0,137,15,57,218,13,164,100,205,145,204,131,155,149,39,154,253,6,160,214,58,26,242,82,245,229,125,94,157,202,33,139\")),bytes(abi.encode(\"23,78,126,193,19,120,177,218,197,63,181,3,222,61,212,127,69,183,227,245,20,169,202,194,27,45,7,137,99,142,61,182\"))]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.142ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[170,198,202,50,60,49,227,94,233,38,246,253,118,151,144,222,9,231,73,37,51,111,60,103,50,235,184,49,40,37,36,142],[154,117,239,17,203,203,246,45,224,173,3,178,31,73,165,137,38,119,125,217,158,104,175,179,37,112,94,75,100,13,167,247],[136,70,104,150,238,29,231,35,240,146,202,148,90,228,186,43,142,2,16,186,186,150,9,232,88,165,61,8,17,135,135,201],[100,26,201,211,71,36,39,137,21,141,112,63,107,58,66,172,215,234,219,47,16,101,133,166,154,2,220,205,11,70,189,39]]",
              "sol": "[bytes(abi.encode(\"170,198,202,50,60,49,227,94,233,38,246,253,118,151,144,222,9,231,73,37,51,111,60,103,50,235,184,49,40,37,36,142\")),bytes(abi.encode(\"154,117,239,17,203,203,246,45,224,173,3,178,31,73,165,137,38,119,125,217,158,104,175,179,37,112,94,75,100,13,167,247\")),bytes(abi.encode(\"136,70,104,150,238,29,231,35,240,146,202,148,90,228,186,43,142,2,16,186,186,150,9,232,88,165,61,8,17,135,135,201\")),bytes(abi.encode(\"100,26,201,211,71,36,39,137,21,141,112,63,107,58,66,172,215,234,219,47,16,101,133,166,154,2,220,205,11,70,189,39\"))]"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.143ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"kxb98\"",
              "sol": "\"kxb98\""
            },
            {
              "js": "[[16,175,137,134,168,213,75,77,60,173,137,9,72,233,156,189,123,194,148,105,71,116,248,25,177,142,60,95,39,90,44,238],[18,27,165,15,1,26,210,40,11,115,2,124,82,8,172,180,73,3,247,2,86,135,137,163,255,0,59,221,71,72,252,113],[119,6,63,34,104,37,222,64,70,75,86,134,94,28,71,66,207,235,80,54,223,87,254,81,163,242,93,228,161,221,178,178],[199,225,98,5,42,207,216,214,151,227,34,118,244,31,89,105,11,238,230,55,79,48,111,46,48,255,205,131,200,204,206,18],[122,236,161,9,232,156,57,172,114,180,129,179,22,136,121,8,47,69,126,167,159,251,48,15,141,225,190,48,110,222,148,59]]",
              "sol": "[bytes(abi.encode(\"16,175,137,134,168,213,75,77,60,173,137,9,72,233,156,189,123,194,148,105,71,116,248,25,177,142,60,95,39,90,44,238\")),bytes(abi.encode(\"18,27,165,15,1,26,210,40,11,115,2,124,82,8,172,180,73,3,247,2,86,135,137,163,255,0,59,221,71,72,252,113\")),bytes(abi.encode(\"119,6,63,34,104,37,222,64,70,75,86,134,94,28,71,66,207,235,80,54,223,87,254,81,163,242,93,228,161,221,178,178\")),bytes(abi.encode(\"199,225,98,5,42,207,216,214,151,227,34,118,244,31,89,105,11,238,230,55,79,48,111,46,48,255,205,131,200,204,206,18\")),bytes(abi.encode(\"122,236,161,9,232,156,57,172,114,180,129,179,22,136,121,8,47,69,126,167,159,251,48,15,141,225,190,48,110,222,148,59\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.144ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[150,64,198,85,4,136,178,4,7,84,252,14,127,105,66,218,178,45,140,207,212,208,88,137,80,34,105,120,252,0,234,54],[217,134,149,225,215,142,177,104,242,245,104,180,239,157,77,20,205,244,202,99,130,73,39,195,130,103,7,134,78,153,186,10],[245,48,0,112,207,224,70,43,57,203,55,227,85,102,206,121,57,161,94,57,211,244,83,123,185,30,201,175,43,121,45,136],[132,191,255,15,91,37,190,21,12,16,242,222,180,33,144,38,14,247,4,12,244,162,129,57,92,9,135,247,116,46,197,187],[165,238,41,123,131,175,136,101,117,224,73,24,1,56,184,180,88,128,254,249,124,188,39,237,107,18,106,44,179,164,43,123]]",
              "sol": "[bytes(abi.encode(\"150,64,198,85,4,136,178,4,7,84,252,14,127,105,66,218,178,45,140,207,212,208,88,137,80,34,105,120,252,0,234,54\")),bytes(abi.encode(\"217,134,149,225,215,142,177,104,242,245,104,180,239,157,77,20,205,244,202,99,130,73,39,195,130,103,7,134,78,153,186,10\")),bytes(abi.encode(\"245,48,0,112,207,224,70,43,57,203,55,227,85,102,206,121,57,161,94,57,211,244,83,123,185,30,201,175,43,121,45,136\")),bytes(abi.encode(\"132,191,255,15,91,37,190,21,12,16,242,222,180,33,144,38,14,247,4,12,244,162,129,57,92,9,135,247,116,46,197,187\")),bytes(abi.encode(\"165,238,41,123,131,175,136,101,117,224,73,24,1,56,184,180,88,128,254,249,124,188,39,237,107,18,106,44,179,164,43,123\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.145ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"t4t6aa\"",
              "sol": "\"t4t6aa\""
            },
            {
              "js": "[[31,99,156,178,21,131,183,10,168,54,245,87,231,50,106,57,100,96,185,40,156,15,208,200,254,109,111,62,203,117,136,160],[75,80,141,46,255,164,105,35,26,42,45,219,41,89,132,154,120,118,192,238,73,19,139,191,84,227,168,68,164,24,237,164],[141,106,209,150,46,68,4,161,150,152,13,114,214,83,189,20,204,82,1,4,231,74,178,245,202,75,130,113,163,87,218,141],[140,41,28,118,157,66,199,203,167,2,105,161,95,83,223,50,197,58,207,28,16,91,40,70,71,222,247,194,222,178,211,152],[128,225,140,35,208,32,40,120,100,65,82,84,151,219,165,144,222,88,224,180,173,56,238,103,240,125,162,102,19,67,120,146]]",
              "sol": "[bytes(abi.encode(\"31,99,156,178,21,131,183,10,168,54,245,87,231,50,106,57,100,96,185,40,156,15,208,200,254,109,111,62,203,117,136,160\")),bytes(abi.encode(\"75,80,141,46,255,164,105,35,26,42,45,219,41,89,132,154,120,118,192,238,73,19,139,191,84,227,168,68,164,24,237,164\")),bytes(abi.encode(\"141,106,209,150,46,68,4,161,150,152,13,114,214,83,189,20,204,82,1,4,231,74,178,245,202,75,130,113,163,87,218,141\")),bytes(abi.encode(\"140,41,28,118,157,66,199,203,167,2,105,161,95,83,223,50,197,58,207,28,16,91,40,70,71,222,247,194,222,178,211,152\")),bytes(abi.encode(\"128,225,140,35,208,32,40,120,100,65,82,84,151,219,165,144,222,88,224,180,173,56,238,103,240,125,162,102,19,67,120,146\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.146ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "[[47,89,7,202,63,210,179,114,154,141,234,236,180,85,95,131,49,89,100,158,158,40,169,37,164,64,199,255,165,202,33,156],[169,88,121,229,242,178,197,8,23,37,116,164,172,169,59,94,225,90,212,208,20,23,54,180,27,16,19,91,79,32,36,219],[126,115,185,82,159,224,238,138,148,166,116,249,183,144,114,62,87,164,109,185,138,168,190,33,79,120,174,127,194,234,60,213],[249,85,188,253,112,9,76,0,228,238,14,83,89,228,62,111,99,23,109,110,66,47,176,27,16,249,82,179,112,41,61,34],[19,170,62,252,66,34,230,242,81,93,159,135,44,160,135,66,82,217,45,186,82,42,84,30,241,227,253,122,233,194,143,31]]",
              "sol": "[bytes(abi.encode(\"47,89,7,202,63,210,179,114,154,141,234,236,180,85,95,131,49,89,100,158,158,40,169,37,164,64,199,255,165,202,33,156\")),bytes(abi.encode(\"169,88,121,229,242,178,197,8,23,37,116,164,172,169,59,94,225,90,212,208,20,23,54,180,27,16,19,91,79,32,36,219\")),bytes(abi.encode(\"126,115,185,82,159,224,238,138,148,166,116,249,183,144,114,62,87,164,109,185,138,168,190,33,79,120,174,127,194,234,60,213\")),bytes(abi.encode(\"249,85,188,253,112,9,76,0,228,238,14,83,89,228,62,111,99,23,109,110,66,47,176,27,16,249,82,179,112,41,61,34\")),bytes(abi.encode(\"19,170,62,252,66,34,230,242,81,93,159,135,44,160,135,66,82,217,45,186,82,42,84,30,241,227,253,122,233,194,143,31\"))]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.147ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[212]",
              "sol": "bytes1(\"212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.148ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.148ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.149ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.149ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.150ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"kxb98\"",
              "sol": "\"kxb98\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.150ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "\"9y1ahr\"",
              "sol": "\"9y1ahr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.151ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.152ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.152ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"4mgwof\"",
              "sol": "\"4mgwof\""
            },
            {
              "js": "\"f4eoa7q\"",
              "sol": "\"f4eoa7q\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.152ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"u64ve\"",
              "sol": "\"u64ve\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.153ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"sq8lh\"",
              "sol": "\"sq8lh\""
            },
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "\"in65de\"",
              "sol": "\"in65de\""
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "\"u64ve\"",
              "sol": "\"u64ve\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.153ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"sq8lh\"",
              "sol": "\"sq8lh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.153ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"u64ve\"",
              "sol": "\"u64ve\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.154ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"g2obtk\"",
              "sol": "\"g2obtk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.155ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"kxb98\"",
              "sol": "\"kxb98\""
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.155ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.156ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"mxu3g\",\"g2obtk\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"t4t6aa\",\"u64ve\",\"sq8lh\",\"P\"]",
              "sol": "[string(\"mxu3g\"),string(\"g2obtk\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"t4t6aa\"),string(\"u64ve\"),string(\"sq8lh\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.156ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[11,9,90,73,11,35,143,77,232,206,102,215,15,247,154,93,248,120,163,43,26,131,127,48,174,166,53,69,73,203,185,236]]",
              "sol": "[bytes(abi.encode(\"11,9,90,73,11,35,143,77,232,206,102,215,15,247,154,93,248,120,163,43,26,131,127,48,174,166,53,69,73,203,185,236\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.157ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.157ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[121,88,103,211,158,237,164,226,168,2,159,160,210,151,112,19,94,68,170,74,180,218,42,87,144,117,239,173,12,104,229,224]",
              "sol": "stringToBytes32(\"121,88,103,211,158,237,164,226,168,2,159,160,210,151,112,19,94,68,170,74,180,218,42,87,144,117,239,173,12,104,229,224\")"
            },
            {
              "js": "[57,131,130,101,250,16,50,48,133,115,45,246,46,119,206,90,102,130,78,43,115,62,116,113,247,139,221,63,122,55,237,106]",
              "sol": "stringToBytes32(\"57,131,130,101,250,16,50,48,133,115,45,246,46,119,206,90,102,130,78,43,115,62,116,113,247,139,221,63,122,55,237,106\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.158ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[232,153,254,207,14,45,81,97,10,185,127,61,24,43,62,92,169,61,6,236,84,193,177,20,126,251,235,184,138,228,153,222]",
              "sol": "stringToBytes32(\"232,153,254,207,14,45,81,97,10,185,127,61,24,43,62,92,169,61,6,236,84,193,177,20,126,251,235,184,138,228,153,222\")"
            },
            {
              "js": "[249,152,46,34,14,158,97,50,102,50,86,187,147,10,219,73,144,182,130,176,5,144,126,88,46,75,3,33,229,23,186,209]",
              "sol": "abi.encode(\"249,152,46,34,14,158,97,50,102,50,86,187,147,10,219,73,144,182,130,176,5,144,126,88,46,75,3,33,229,23,186,209\")"
            },
            {
              "js": "[181,6,228,59,26,154,36,210,37,98,106,170,239,19,101,198,212,19,42,24,36,215,130,21,135,188,221,75,4,146,252,151]",
              "sol": "abi.encode(\"181,6,228,59,26,154,36,210,37,98,106,170,239,19,101,198,212,19,42,24,36,215,130,21,135,188,221,75,4,146,252,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.158ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[49,39,10,154,160,56,210,198,12,18,7,62,140,24,244,41,174,19,213,171,15,37,175,24,215,7,198,219,62,101,118,220]",
              "sol": "abi.encode(\"49,39,10,154,160,56,210,198,12,18,7,62,140,24,244,41,174,19,213,171,15,37,175,24,215,7,198,219,62,101,118,220\")"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[98,190,251,97,23,181,205,65,87,169,195,168,173,216,27,27,234,28,27,22,227,152,162,190,203,107,231,53,94,152,176,203]",
              "sol": "abi.encode(\"98,190,251,97,23,181,205,65,87,169,195,168,173,216,27,27,234,28,27,22,227,152,162,190,203,107,231,53,94,152,176,203\")"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.160ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[153,5,14,221,167,249,36,177,5,195,251,219,2,49,229,117,29,116,95,50,239,225,222,187,246,124,83,147,107,9,16,178]",
              "sol": "stringToBytes32(\"153,5,14,221,167,249,36,177,5,195,251,219,2,49,229,117,29,116,95,50,239,225,222,187,246,124,83,147,107,9,16,178\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[162,194,107,41,121,124,168,35,6,38,32,106,140,122,182,8,86,206,168,240,193,219,20,180,87,150,237,7,90,22,154,30]",
              "sol": "abi.encode(\"162,194,107,41,121,124,168,35,6,38,32,106,140,122,182,8,86,206,168,240,193,219,20,180,87,150,237,7,90,22,154,30\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[101,224,95,255,21,240,179,87,157,187,156,6,88,224,43,165,193,187,123,182,225,182,101,94,25,47,221,126,254,1,243,9]",
              "sol": "stringToBytes32(\"101,224,95,255,21,240,179,87,157,187,156,6,88,224,43,165,193,187,123,182,225,182,101,94,25,47,221,126,254,1,243,9\")"
            },
            {
              "js": "\"7kxci\"",
              "sol": "\"7kxci\""
            },
            {
              "js": "[32,113,109,168,210,194,64,133,185,120,184,14,144,220,29,28,134,204,24,18,230,29,29,255,94,204,125,37,169,167,72,191]",
              "sol": "abi.encode(\"32,113,109,168,210,194,64,133,185,120,184,14,144,220,29,28,134,204,24,18,230,29,29,255,94,204,125,37,169,167,72,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.160ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[40,186,126,126,14,214,207,46,236,106,23,240,88,182,192,91,41,99,222,170,85,242,127,171,255,98,55,132,148,241,179,149]",
              "sol": "stringToBytes32(\"40,186,126,126,14,214,207,46,236,106,23,240,88,182,192,91,41,99,222,170,85,242,127,171,255,98,55,132,148,241,179,149\")"
            },
            {
              "js": "[184,56,106,56,138,92,134,80,240,131,85,75,43,170,105,211,145,185,78,190,177,134,32,82,168,88,80,187,166,20,2,120]",
              "sol": "abi.encode(\"184,56,106,56,138,92,134,80,240,131,85,75,43,170,105,211,145,185,78,190,177,134,32,82,168,88,80,187,166,20,2,120\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[40,186,126,126,14,214,207,46,236,106,23,240,88,182,192,91,41,99,222,170,85,242,127,171,255,98,55,132,148,241,179,149]",
                "sol": "stringToBytes32(\"40,186,126,126,14,214,207,46,236,106,23,240,88,182,192,91,41,99,222,170,85,242,127,171,255,98,55,132,148,241,179,149\")"
              },
              {
                "js": "[7,140,60,246,113,175,76,131,140,34,4,129,199,231,158,0,103,174,184,166,51,250,25,32,52,123,165,217,38,37,165,110,176]",
                "sol": "bytes33(\"7,140,60,246,113,175,76,131,140,34,4,129,199,231,158,0,103,174,184,166,51,250,25,32,52,123,165,217,38,37,165,110,176\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.161ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[78,182,133,5,29,112,222,242,194,195,142,152,81,69,184,79,118,6,181,38,74,163,0,55,12,38,15,220,118,141,62,201]",
              "sol": "abi.encode(\"78,182,133,5,29,112,222,242,194,195,142,152,81,69,184,79,118,6,181,38,74,163,0,55,12,38,15,220,118,141,62,201\")"
            },
            {
              "js": "[202,199,196,71,87,30,222,52,55,19,122,190,42,21,81,63,66,122,197,91,213,122,217,32,250,127,47,230,94,19,113,24]",
              "sol": "stringToBytes32(\"202,199,196,71,87,30,222,52,55,19,122,190,42,21,81,63,66,122,197,91,213,122,217,32,250,127,47,230,94,19,113,24\")"
            },
            {
              "js": "[33,39,173,160,244,225,126,169,217,167,124,193,68,52,119,60,144,145,108,163,245,157,175,130,216,40,82,248,47,29,129,130]",
              "sol": "abi.encode(\"33,39,173,160,244,225,126,169,217,167,124,193,68,52,119,60,144,145,108,163,245,157,175,130,216,40,82,248,47,29,129,130\")"
            },
            {
              "js": "\"mxu3g\"",
              "sol": "\"mxu3g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[148,60,47,95,202,147,14,183,100,200,154,86,222,116,98,242,82,70,33,0,205,230,115,225,39,76,147,116,117,51,95,113]",
              "sol": "abi.encode(\"148,60,47,95,202,147,14,183,100,200,154,86,222,116,98,242,82,70,33,0,205,230,115,225,39,76,147,116,117,51,95,113\")"
            },
            {
              "js": "[206,90,61,22,181,63,103,117,131,226,183,109,203,65,58,35,156,251,166,73,20,101,129,119,55,131,127,238,42,11,130,31]",
              "sol": "stringToBytes32(\"206,90,61,22,181,63,103,117,131,226,183,109,203,65,58,35,156,251,166,73,20,101,129,119,55,131,127,238,42,11,130,31\")"
            },
            {
              "js": "[37,27,245,151,67,115,224,71,14,110,221,232,134,1,210,185,104,134,220,191,135,244,100,75,228,225,221,143,131,79,198,165]",
              "sol": "abi.encode(\"37,27,245,151,67,115,224,71,14,110,221,232,134,1,210,185,104,134,220,191,135,244,100,75,228,225,221,143,131,79,198,165\")"
            },
            {
              "js": "\"t4t6aa\"",
              "sol": "\"t4t6aa\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[144,10,202,126,240,38,57,63,59,254,191,157,166,4,179,250,251,6,159,116,147,65,100,209,89,15,213,187,108,13,22,116]",
              "sol": "abi.encode(\"144,10,202,126,240,38,57,63,59,254,191,157,166,4,179,250,251,6,159,116,147,65,100,209,89,15,213,187,108,13,22,116\")"
            },
            {
              "js": "[142,167,71,197,19,177,67,137,188,63,30,245,184,132,195,4,149,131,242,61,84,115,147,242,121,37,186,48,136,202,39,128]",
              "sol": "stringToBytes32(\"142,167,71,197,19,177,67,137,188,63,30,245,184,132,195,4,149,131,242,61,84,115,147,242,121,37,186,48,136,202,39,128\")"
            },
            {
              "js": "[105,81,50,33,136,114,173,51,209,80,223,155,61,155,221,14,243,198,142,75,247,68,15,164,140,138,42,232,111,252,48,215]",
              "sol": "abi.encode(\"105,81,50,33,136,114,173,51,209,80,223,155,61,155,221,14,243,198,142,75,247,68,15,164,140,138,42,232,111,252,48,215\")"
            },
            {
              "js": "\"2sm0r6\"",
              "sol": "\"2sm0r6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[218,186,21,205,229,81,153,233,235,57,108,229,153,229,42,14,36,20,114,64,116,206,249,139,228,177,167,186,112,45,52,246]",
              "sol": "abi.encode(\"218,186,21,205,229,81,153,233,235,57,108,229,153,229,42,14,36,20,114,64,116,206,249,139,228,177,167,186,112,45,52,246\")"
            },
            {
              "js": "[255,34,158,41,166,97,246,54,158,152,32,113,161,180,88,116,113,236,210,158,124,70,133,57,22,234,114,172,168,117,249,201]",
              "sol": "stringToBytes32(\"255,34,158,41,166,97,246,54,158,152,32,113,161,180,88,116,113,236,210,158,124,70,133,57,22,234,114,172,168,117,249,201\")"
            },
            {
              "js": "[99,131,64,7,234,249,201,164,51,217,179,134,206,145,88,193,215,246,108,40,131,73,85,236,14,45,98,102,211,244,45,138]",
              "sol": "abi.encode(\"99,131,64,7,234,249,201,164,51,217,179,134,206,145,88,193,215,246,108,40,131,73,85,236,14,45,98,102,211,244,45,138\")"
            },
            {
              "js": "\"pcmevm\"",
              "sol": "\"pcmevm\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[216,158,246,182,104,120,142,1,74,215,0,59,20,104,250,0,246,62,216,140,253,182,235,230,170,112,161,43,217,112,201,26]",
              "sol": "abi.encode(\"216,158,246,182,104,120,142,1,74,215,0,59,20,104,250,0,246,62,216,140,253,182,235,230,170,112,161,43,217,112,201,26\")"
            },
            {
              "js": "[186,105,61,27,77,221,120,250,96,218,233,248,165,112,118,168,155,202,92,103,245,118,246,146,67,96,252,32,73,199,46,74]",
              "sol": "stringToBytes32(\"186,105,61,27,77,221,120,250,96,218,233,248,165,112,118,168,155,202,92,103,245,118,246,146,67,96,252,32,73,199,46,74\")"
            },
            {
              "js": "[57,119,162,246,16,124,23,113,107,107,90,202,245,67,36,65,58,154,168,224,172,126,6,111,222,178,142,92,11,248,25,100]",
              "sol": "abi.encode(\"57,119,162,246,16,124,23,113,107,107,90,202,245,67,36,65,58,154,168,224,172,126,6,111,222,178,142,92,11,248,25,100\")"
            },
            {
              "js": "\"in65de\"",
              "sol": "\"in65de\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[2,198,223,45,89,141,180,195,223,172,181,210,141,18,191,112,81,241,177,179,158,37,48,241,185,250,132,158,187,78,118,107]",
              "sol": "abi.encode(\"2,198,223,45,89,141,180,195,223,172,181,210,141,18,191,112,81,241,177,179,158,37,48,241,185,250,132,158,187,78,118,107\")"
            },
            {
              "js": "[101,124,140,15,157,159,15,85,48,151,37,41,98,108,243,83,255,165,222,192,209,180,237,228,249,131,188,49,71,189,200,44]",
              "sol": "stringToBytes32(\"101,124,140,15,157,159,15,85,48,151,37,41,98,108,243,83,255,165,222,192,209,180,237,228,249,131,188,49,71,189,200,44\")"
            },
            {
              "js": "[99,24,132,224,203,171,142,26,182,189,174,42,71,194,119,14,115,206,54,134,153,184,225,74,13,211,129,123,170,128,143,112]",
              "sol": "abi.encode(\"99,24,132,224,203,171,142,26,182,189,174,42,71,194,119,14,115,206,54,134,153,184,225,74,13,211,129,123,170,128,143,112\")"
            },
            {
              "js": "\"scn4e\"",
              "sol": "\"scn4e\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[178,0,117,255,29,255,242,101,64,42,148,211,116,34,41,195,129,128,215,159,249,78,157,212,102,124,243,204,44,5,80,145]",
              "sol": "abi.encode(\"178,0,117,255,29,255,242,101,64,42,148,211,116,34,41,195,129,128,215,159,249,78,157,212,102,124,243,204,44,5,80,145\")"
            },
            {
              "js": "[61,13,151,132,164,145,216,236,13,103,105,238,70,51,139,254,15,188,248,3,48,51,27,92,96,95,213,139,92,0,73,178]",
              "sol": "stringToBytes32(\"61,13,151,132,164,145,216,236,13,103,105,238,70,51,139,254,15,188,248,3,48,51,27,92,96,95,213,139,92,0,73,178\")"
            },
            {
              "js": "[52,255,252,15,157,248,69,22,79,53,31,12,24,0,208,165,239,95,248,100,225,161,162,150,156,140,210,97,18,147,186,204]",
              "sol": "abi.encode(\"52,255,252,15,157,248,69,22,79,53,31,12,24,0,208,165,239,95,248,100,225,161,162,150,156,140,210,97,18,147,186,204\")"
            },
            {
              "js": "\"q7rwor\"",
              "sol": "\"q7rwor\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[115,132,130,2,219,194,12,221,248,248,135,120,174,134,208,38,119,162,16,246,92,84,49,121,44,189,123,69,226,4,23,82]",
              "sol": "abi.encode(\"115,132,130,2,219,194,12,221,248,248,135,120,174,134,208,38,119,162,16,246,92,84,49,121,44,189,123,69,226,4,23,82\")"
            },
            {
              "js": "[117,220,223,169,116,136,15,241,197,169,143,20,221,111,152,116,162,71,92,115,43,103,64,149,73,201,162,228,199,250,87,52]",
              "sol": "stringToBytes32(\"117,220,223,169,116,136,15,241,197,169,143,20,221,111,152,116,162,71,92,115,43,103,64,149,73,201,162,228,199,250,87,52\")"
            },
            {
              "js": "[104,202,12,88,238,19,252,79,128,195,91,69,43,73,202,34,160,184,5,110,90,33,211,62,206,139,225,123,15,177,160,113]",
              "sol": "abi.encode(\"104,202,12,88,238,19,252,79,128,195,91,69,43,73,202,34,160,184,5,110,90,33,211,62,206,139,225,123,15,177,160,113\")"
            },
            {
              "js": "\"d7f2q\"",
              "sol": "\"d7f2q\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.167ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[100,237,29,185,186,190,190,95,131,20,177,162,243,92,180,253,230,136,8,172,240,73,4,177,130,229,57,227,90,44,228,213]",
              "sol": "abi.encode(\"100,237,29,185,186,190,190,95,131,20,177,162,243,92,180,253,230,136,8,172,240,73,4,177,130,229,57,227,90,44,228,213\")"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "[98,245,105,13,178,66,14,34,93,200,100,33,53,227,44,174,181,232,94,97,192,248,126,63,213,41,143,140,60,51,125,200]",
              "sol": "abi.encode(\"98,245,105,13,178,66,14,34,93,200,100,33,53,227,44,174,181,232,94,97,192,248,126,63,213,41,143,140,60,51,125,200\")"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.168ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[113,197,74,64,223,68,220,169,162,79,115,249,13,238,67,206,201,161,195,19,99,134,59,249,51,10,45,78,169,72,187,160]",
              "sol": "stringToBytes32(\"113,197,74,64,223,68,220,169,162,79,115,249,13,238,67,206,201,161,195,19,99,134,59,249,51,10,45,78,169,72,187,160\")"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "[94,127,157,228,51,125,229,144,246,182,143,88,24,242,119,168,120,8,171,117,180,183,53,243,135,169,126,139,85,95,22,10]",
              "sol": "stringToBytes32(\"94,127,157,228,51,125,229,144,246,182,143,88,24,242,119,168,120,8,171,117,180,183,53,243,135,169,126,139,85,95,22,10\")"
            },
            {
              "js": "[220,103,182,121,99,75,20,201,178,107,52,143,131,110,190,84,220,59,32,4,101,23,152,13,103,99,107,9,15,85,127,58]",
              "sol": "stringToBytes32(\"220,103,182,121,99,75,20,201,178,107,52,143,131,110,190,84,220,59,32,4,101,23,152,13,103,99,107,9,15,85,127,58\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.169ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[254,44,251,104,99,112,74,108,10,106,13,54,150,155,60,149,129,186,101,142,162,231,171,143,222,41,35,65,215,239,59,129]",
              "sol": "stringToBytes32(\"254,44,251,104,99,112,74,108,10,106,13,54,150,155,60,149,129,186,101,142,162,231,171,143,222,41,35,65,215,239,59,129\")"
            },
            {
              "js": "[43,98,162,41,55,31,114,6,101,140,105,5,33,150,95,0,23,149,152,82,13,149,59,216,226,252,211,70,228,122,243,235]",
              "sol": "abi.encode(\"43,98,162,41,55,31,114,6,101,140,105,5,33,150,95,0,23,149,152,82,13,149,59,216,226,252,211,70,228,122,243,235\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[53,47,112,160,108,203,29,75,205,75,1,77,225,184,75,44,39,47,24,216,173,124,252,42,218,180,225,7,68,8,113,177]",
              "sol": "stringToBytes32(\"53,47,112,160,108,203,29,75,205,75,1,77,225,184,75,44,39,47,24,216,173,124,252,42,218,180,225,7,68,8,113,177\")"
            },
            {
              "js": "[193,135,159,47,175,211,137,250,23,136,65,3,83,114,83,62,170,179,116,23,45,191,37,125,100,32,243,115,69,141,130,22,31,174,114,25,241,38,33,24,228,200,152,202,185,63,249,28,163,255,182,67,62,226,207,231,70,100,82,59,61,174,239,190,102]",
              "sol": "abi.encode(\"193,135,159,47,175,211,137,250,23,136,65,3,83,114,83,62,170,179,116,23,45,191,37,125,100,32,243,115,69,141,130,22,31,174,114,25,241,38,33,24,228,200,152,202,185,63,249,28,163,255,182,67,62,226,207,231,70,100,82,59,61,174,239,190,102\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.169ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.171ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1532892064,257]",
              "sol": "[uint(1532892064),uint(257)]"
            },
            {
              "js": "[[161,26],[17,19]]",
              "sol": "[[uint(161),uint(26)],[uint(17),uint(19)]]"
            },
            {
              "js": "[1024,60]",
              "sol": "[uint(1024),uint(60)]"
            },
            {
              "js": "[59,47]",
              "sol": "[uint(59),uint(47)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.173ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.173ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[57,59]",
              "sol": "[uint(57),uint(59)]"
            },
            {
              "js": "{\"A\": {\"X\": 33,\"Y\": 25},\"B\": {\"X\": [24,3],\"Y\": [1532892064,11]},\"C\": {\"X\": 60,\"Y\": 16}}",
              "sol": "Verifier.Proof(Pairing.G1Point(33,25),Pairing.G2Point([uint(24),uint(3)],[uint(1532892064),uint(11)]),Pairing.G1Point(60,16))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[26,88,257,255,15,200000,18,33,32,21]",
              "sol": "[uint(26),uint(88),uint(257),uint(255),uint(15),uint(200000),uint(18),uint(33),uint(32),uint(21)]"
            },
            {
              "js": "{\"A\": {\"X\": 257,\"Y\": 2014223715},\"B\": {\"X\": [98,29],\"Y\": [2014223715,22]},\"C\": {\"X\": 162,\"Y\": 18}}",
              "sol": "Verifier.Proof(Pairing.G1Point(257,2014223715),Pairing.G2Point([uint(98),uint(29)],[uint(2014223715),uint(22)]),Pairing.G1Point(162,18))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.175ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.176ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.176ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"accounts[4]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.178ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.178ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "accounts[7]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.178ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.179ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.180ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.187ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "[79,202,143,123,242,13,175,153,101,213,63,59,212,108,214,11,93,186,29,206,19,5,62,230,155,230,101,255,8,18,20,172]",
              "sol": "abi.encode(\"79,202,143,123,242,13,175,153,101,213,63,59,212,108,214,11,93,186,29,206,19,5,62,230,155,230,101,255,8,18,20,172\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "[79,202,143,123,242,13,175,153,101,213,63,59,212,108,214,11,93,186,29,206,19,5,62,230,155,230,101,255,8,18,20,172]",
                "sol": "abi.encode(\"79,202,143,123,242,13,175,153,101,213,63,59,212,108,214,11,93,186,29,206,19,5,62,230,155,230,101,255,8,18,20,172\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.188ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.190ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[252,104,167,191]",
              "sol": "bytes4(\"252,104,167,191\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.192ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.193ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.193ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.194ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.195ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "[114,157,124,54,249,115,183,237,156,192,202,239,63,219,222,173,202,29,181,177,90,78,50,204,226,169,70,170,84,37,123,145]",
              "sol": "abi.encode(\"114,157,124,54,249,115,183,237,156,192,202,239,63,219,222,173,202,29,181,177,90,78,50,204,226,169,70,170,84,37,123,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "[167,164,9,251,80,230,83,181,167,195,29,243,203,107,254,38,153,203,155,169,113,208,105,174,248,225,137,150,60,196,32,87]",
              "sol": "abi.encode(\"167,164,9,251,80,230,83,181,167,195,29,243,203,107,254,38,153,203,155,169,113,208,105,174,248,225,137,150,60,196,32,87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.197ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.199ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[129,57]",
              "sol": "[uint(129),uint(57)]"
            },
            {
              "js": "[[19,160],[200000,18]]",
              "sol": "[[uint(19),uint(160)],[uint(200000),uint(18)]]"
            },
            {
              "js": "[24,7]",
              "sol": "[uint(24),uint(7)]"
            },
            {
              "js": "[66,10]",
              "sol": "[uint(66),uint(10)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.202ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.204ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.206ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.207ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.208ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.210ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.211ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.212ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.212ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.214ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.216ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T03:10:52.217ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.218ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T03:10:52.218ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}