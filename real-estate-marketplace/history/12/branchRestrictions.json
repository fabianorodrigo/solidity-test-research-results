,{
  "2020-11-11T05:53:33.242ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:53:48.749ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:54:04.293ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:54:20.012ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:54:35.830ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:54:51.415ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.462ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [91,76,97,57,229,153,38,135,60,189,49,11,187,139,180,52,76,212,25,67,171,14,18,142,61,21,245,14,24,140,91,53],\"capacity\": 20}",
              "sol": "Buffer.buffer(abi.encode(\"91,76,97,57,229,153,38,135,60,189,49,11,187,139,180,52,76,212,25,67,171,14,18,142,61,21,245,14,24,140,91,53\"),20)"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.463ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [195,161,96,17,26,105,123,58,45,9,158,12,222,45,5,121,102,148,108,48,30,190,213,217,215,186,43,122,206,60,157,96],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"195,161,96,17,26,105,123,58,45,9,158,12,222,45,5,121,102,148,108,48,30,190,213,217,215,186,43,122,206,60,157,96\"),69)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [114,100,218,11,79,205,208,164,187,99,141,158,74,81,153,211,206,248,201,29,68,242,176,2,101,66,40,138,132,45,185,82],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"114,100,218,11,79,205,208,164,187,99,141,158,74,81,153,211,206,248,201,29,68,242,176,2,101,66,40,138,132,45,185,82\"),16)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.464ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [119,98,92,11,250,13,54,99,85,170,235,22,213,111,195,178,75,116,249,45,217,54,50,251,33,37,242,166,81,241,227,103],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"119,98,92,11,250,13,54,99,85,170,235,22,213,111,195,178,75,116,249,45,217,54,50,251,33,37,242,166,81,241,227,103\"),1024)"
            },
            {
              "js": "[238,0,19,7,223,35,133,38,181,17,110,126,190,6,62,205,1,82,140,234,196,228,54,100,129,230,183,175,133,254,253,188]",
              "sol": "abi.encode(\"238,0,19,7,223,35,133,38,181,17,110,126,190,6,62,205,1,82,140,234,196,228,54,100,129,230,183,175,133,254,253,188\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.465ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [235,108,106,251,42,121,125,77,33,20,66,250,175,190,120,78,98,67,109,59,254,128,209,63,192,217,198,117,131,108,116,16],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"235,108,106,251,42,121,125,77,33,20,66,250,175,190,120,78,98,67,109,59,254,128,209,63,192,217,198,117,131,108,116,16\"),1)"
            },
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.465ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [130,235,141,187,78,168,239,57,27,226,112,137,36,70,62,102,35,145,240,43,22,153,70,34,212,134,155,253,233,144,40,163],\"capacity\": 33}",
              "sol": "Buffer.buffer(abi.encode(\"130,235,141,187,78,168,239,57,27,226,112,137,36,70,62,102,35,145,240,43,22,153,70,34,212,134,155,253,233,144,40,163\"),33)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.466ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [110,129,174,40,219,228,246,23,217,106,26,107,218,18,55,165,50,128,31,1,118,37,234,74,111,161,232,175,153,156,109,246],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"110,129,174,40,219,228,246,23,217,106,26,107,218,18,55,165,50,128,31,1,118,37,234,74,111,161,232,175,153,156,109,246\"),71)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.466ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [217,181,222,181,125,123,114,161,143,25,71,57,248,184,237,38,108,189,219,187,157,15,72,113,215,94,176,126,100,53,64,178],\"capacity\": 61}",
              "sol": "Buffer.buffer(abi.encode(\"217,181,222,181,125,123,114,161,143,25,71,57,248,184,237,38,108,189,219,187,157,15,72,113,215,94,176,126,100,53,64,178\"),61)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.471ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.472ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.472ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 47,\"Y\": 69}",
              "sol": "Pairing.G1Point(47,69)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.473ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 256,\"Y\": 66}",
              "sol": "Pairing.G1Point(256,66)"
            },
            {
              "js": "{\"X\": 63,\"Y\": 98}",
              "sol": "Pairing.G1Point(63,98)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.473ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [7,87],\"Y\": [48,128]}",
              "sol": "Pairing.G2Point([uint(7),uint(87)],[uint(48),uint(128)])"
            },
            {
              "js": "{\"X\": [101,71],\"Y\": [17,21]}",
              "sol": "Pairing.G2Point([uint(101),uint(71)],[uint(17),uint(21)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.475ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 2014223715,\"Y\": 254}",
              "sol": "Pairing.G1Point(2014223715,254)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.475ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 1532892064,\"Y\": 21},{\"X\": 63,\"Y\": 63},{\"X\": 58,\"Y\": 1532892064},{\"X\": 2014223716,\"Y\": 2014223715},{\"X\": 58,\"Y\": 31},{\"X\": 199999,\"Y\": 1532892062},{\"X\": 86,\"Y\": 58}]",
              "sol": "[Pairing.G1Point(1532892064,21),Pairing.G1Point(63,63),Pairing.G1Point(58,1532892064),Pairing.G1Point(2014223716,2014223715),Pairing.G1Point(58,31),Pairing.G1Point(199999,1532892062),Pairing.G1Point(86,58)]"
            },
            {
              "js": "[{\"X\": [22,2014223715],\"Y\": [6,128]},{\"X\": [160,15],\"Y\": [200000,199999]},{\"X\": [59,32],\"Y\": [101,22]},{\"X\": [103,45],\"Y\": [7,1025]},{\"X\": [16,47],\"Y\": [2014223716,33]},{\"X\": [88,60],\"Y\": [101,6]},{\"X\": [103,1025],\"Y\": [29,59]}]",
              "sol": "[Pairing.G2Point([uint(22),uint(2014223715)],[uint(6),uint(128)]),Pairing.G2Point([uint(160),uint(15)],[uint(200000),uint(199999)]),Pairing.G2Point([uint(59),uint(32)],[uint(101),uint(22)]),Pairing.G2Point([uint(103),uint(45)],[uint(7),uint(1025)]),Pairing.G2Point([uint(16),uint(47)],[uint(2014223716),uint(33)]),Pairing.G2Point([uint(88),uint(60)],[uint(101),uint(6)]),Pairing.G2Point([uint(103),uint(1025)],[uint(29),uint(59)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 19,\"Y\": 21},{\"X\": 56,\"Y\": 23},{\"X\": 69,\"Y\": 23},{\"X\": 255,\"Y\": 55},{\"X\": 2,\"Y\": 128},{\"X\": 6,\"Y\": 162},{\"X\": 23,\"Y\": 257},{\"X\": 9,\"Y\": 22}]",
                "sol": "[Pairing.G1Point(48,47),Pairing.G1Point(49,1024),Pairing.G1Point(16,1532892064),Pairing.G1Point(1025,97),Pairing.G1Point(15,30),Pairing.G1Point(1532892064,8),Pairing.G1Point(47,29),Pairing.G1Point(10,19)]"
              },
              {
                "js": "[{\"X\": [22,2014223715],\"Y\": [6,128]},{\"X\": [160,15],\"Y\": [200000,199999]},{\"X\": [59,32],\"Y\": [101,22]},{\"X\": [103,45],\"Y\": [7,1025]},{\"X\": [16,47],\"Y\": [2014223716,33]},{\"X\": [88,60],\"Y\": [101,6]},{\"X\": [103,1025],\"Y\": [29,59]}]",
                "sol": "[Pairing.G2Point([uint(22),uint(2014223715)],[uint(6),uint(128)]),Pairing.G2Point([uint(160),uint(15)],[uint(200000),uint(199999)]),Pairing.G2Point([uint(59),uint(32)],[uint(101),uint(22)]),Pairing.G2Point([uint(103),uint(45)],[uint(7),uint(1025)]),Pairing.G2Point([uint(16),uint(47)],[uint(2014223716),uint(33)]),Pairing.G2Point([uint(88),uint(60)],[uint(101),uint(6)]),Pairing.G2Point([uint(103),uint(1025)],[uint(29),uint(59)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.481ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 47,\"Y\": 59}",
              "sol": "Pairing.G1Point(47,59)"
            },
            {
              "js": "{\"X\": [1532892064,24],\"Y\": [26,20]}",
              "sol": "Pairing.G2Point([uint(1532892064),uint(24)],[uint(26),uint(20)])"
            },
            {
              "js": "{\"X\": 98,\"Y\": 23}",
              "sol": "Pairing.G1Point(98,23)"
            },
            {
              "js": "{\"X\": [11,128],\"Y\": [66,1532892062]}",
              "sol": "Pairing.G2Point([uint(11),uint(128)],[uint(66),uint(1532892062)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.483ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 2,\"Y\": 101}",
              "sol": "Pairing.G1Point(2,101)"
            },
            {
              "js": "{\"X\": [47,59],\"Y\": [257,199999]}",
              "sol": "Pairing.G2Point([uint(47),uint(59)],[uint(257),uint(199999)])"
            },
            {
              "js": "{\"X\": 29,\"Y\": 1532892062}",
              "sol": "Pairing.G1Point(29,1532892062)"
            },
            {
              "js": "{\"X\": [16,200001],\"Y\": [199999,87]}",
              "sol": "Pairing.G2Point([uint(16),uint(200001)],[uint(199999),uint(87)])"
            },
            {
              "js": "{\"X\": 9,\"Y\": 11}",
              "sol": "Pairing.G1Point(9,11)"
            },
            {
              "js": "{\"X\": [87,56],\"Y\": [58,256]}",
              "sol": "Pairing.G2Point([uint(87),uint(56)],[uint(58),uint(256)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.487ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.488ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.488ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.489ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.489ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.492ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.493ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.493ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.494ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.494ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.495ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.497ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [225,238,212,76,177,213,158,77,147,17,189,84,164,223,157,82,203,108,200,161,142,192,210,14,119,99,218,243,111,27,109,79],\"capacity\": 15}",
              "sol": "Buffer.buffer(abi.encode(\"225,238,212,76,177,213,158,77,147,17,189,84,164,223,157,82,203,108,200,161,142,192,210,14,119,99,218,243,111,27,109,79\"),15)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.498ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [171,167,36,215,245,97,9,123,156,23,223,136,3,8,137,41,180,48,211,93,10,226,215,146,104,198,133,188,201,99,33,71],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"171,167,36,215,245,97,9,123,156,23,223,136,3,8,137,41,180,48,211,93,10,226,215,146,104,198,133,188,201,99,33,71\"),59)"
            },
            {
              "js": "[196,85,177,116,123,68,179,28,255,255,176,117,9,94,227,197,114,219,251,122,112,220,223,217,134,38,58,174,54,7,84,203]",
              "sol": "abi.encode(\"196,85,177,116,123,68,179,28,255,255,176,117,9,94,227,197,114,219,251,122,112,220,223,217,134,38,58,174,54,7,84,203\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.500ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [186,146,35,21,125,176,253,236,148,43,230,50,40,122,182,216,24,236,108,25,235,221,37,136,91,161,215,219,213,117,63,140],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"186,146,35,21,125,176,253,236,148,43,230,50,40,122,182,216,24,236,108,25,235,221,37,136,91,161,215,219,213,117,63,140\"),98)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.500ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [208,133,161,253,34,51,52,196,105,70,59,8,184,196,128,188,156,5,127,206,138,198,127,71,109,161,60,219,127,110,34,91],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"208,133,161,253,34,51,52,196,105,70,59,8,184,196,128,188,156,5,127,206,138,198,127,71,109,161,60,219,127,110,34,91\"),2)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.501ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[8,198,0,141,237,74,147,84,251,195,211,197,34,23,186,115,131,218,199,148,195,40,30,130,10,43,5,141,76,154,131,178]",
              "sol": "stringToBytes32(\"8,198,0,141,237,74,147,84,251,195,211,197,34,23,186,115,131,218,199,148,195,40,30,130,10,43,5,141,76,154,131,178\")"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.502ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[119,175,63,147,149,200,71,205,253,225,49,67,147,37,183,133,48,252,173,70,104,14,67,146,92,237,232,26,161,151,205,193]",
              "sol": "stringToBytes32(\"119,175,63,147,149,200,71,205,253,225,49,67,147,37,183,133,48,252,173,70,104,14,67,146,92,237,232,26,161,151,205,193\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[198,98,221,246,7,102,6,54,175,79,156,145,70,193,57,96,252,173,129,145,48,216,118,17,157,4,20,207,151,197,150,159]",
              "sol": "abi.encode(\"198,98,221,246,7,102,6,54,175,79,156,145,70,193,57,96,252,173,129,145,48,216,118,17,157,4,20,207,151,197,150,159\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.546ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.547ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.547ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.548ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.548ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.549ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.549ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.550ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.550ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.551ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.551ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.552ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.552ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.553ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"a05a7\"",
              "sol": "\"a05a7\""
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.553ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"L\",\"Transaction successfully verified.\",\"p7yiu8\",\"at44o\",\"L\",\"p7yiu8\",\"e7owj8\",\"L\"]",
              "sol": "[string(\"L\"),string(\"Transaction successfully verified.\"),string(\"p7yiu8\"),string(\"at44o\"),string(\"L\"),string(\"p7yiu8\"),string(\"e7owj8\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.553ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"Capstones\",\"w77do\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"p7yiu8\",\"Capstones\",\"ERC1820_ACCEPT_MAGIC\",\"Capstones\"]",
              "sol": "[string(\"Capstones\"),string(\"w77do\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"p7yiu8\"),string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.554ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "[\"0\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"0\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.555ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"a05a7\"",
              "sol": "\"a05a7\""
            },
            {
              "js": "[\"at44o\",\"w77do\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"v2yzfl\",\"0\"]",
              "sol": "[string(\"at44o\"),string(\"w77do\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"v2yzfl\"),string(\"0\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.555ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.556ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"f7327g\"",
              "sol": "\"f7327g\""
            },
            {
              "js": "[\"[\"]",
              "sol": "[string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.556ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"f7327g\"",
              "sol": "\"f7327g\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.557ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.557ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"at44o\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"at44o\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.557ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "[\"0\",\"L\"]",
              "sol": "[string(\"0\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.558ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"L\",\"[\"]",
              "sol": "[string(\"L\"),string(\"[\")]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.558ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"v2yzfl\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"v2yzfl\")]"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.559ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"shiiom\",\"0\",\"w77do\"]",
              "sol": "[string(\"shiiom\"),string(\"0\"),string(\"w77do\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.559ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"0\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"0\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.560ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "[\"v2yzfl\",\"P\",\"l6e83h\"]",
              "sol": "[string(\"v2yzfl\"),string(\"P\"),string(\"l6e83h\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.560ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"f7327g\"",
              "sol": "\"f7327g\""
            },
            {
              "js": "[\"Capstones\",\"at44o\",\"L\"]",
              "sol": "[string(\"Capstones\"),string(\"at44o\"),string(\"L\")]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.561ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"shiiom\"",
              "sol": "\"shiiom\""
            },
            {
              "js": "[\"shiiom\",\"gaav5bh\",\"v2yzfl\",\"p7yiu8\"]",
              "sol": "[string(\"shiiom\"),string(\"gaav5bh\"),string(\"v2yzfl\"),string(\"p7yiu8\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.563ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"l6e83h\"",
              "sol": "\"l6e83h\""
            },
            {
              "js": "[\"at44o\",\"\\x19Ethereum Signed Message:\\n32\",\"a05a7\",\"gaav5bh\"]",
              "sol": "[string(\"at44o\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"a05a7\"),string(\"gaav5bh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.563ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "[\"P\",\"Transaction successfully verified.\",\"p7yiu8\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"P\"),string(\"Transaction successfully verified.\"),string(\"p7yiu8\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.564ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"gaav5bh\"",
              "sol": "\"gaav5bh\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"L\",\"p7yiu8\",\"p7yiu8\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"L\"),string(\"p7yiu8\"),string(\"p7yiu8\")]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.564ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"w77do\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"e7owj8\",\"shiiom\"]",
              "sol": "[string(\"w77do\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"e7owj8\"),string(\"shiiom\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.565ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "[\"w77do\",\"P\",\"L\",\"L\",\"at44o\"]",
              "sol": "[string(\"w77do\"),string(\"P\"),string(\"L\"),string(\"L\"),string(\"at44o\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.565ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"shiiom\",\"[\",\"ERC1820_ACCEPT_MAGIC\",\"Capstones\",\"v2yzfl\"]",
              "sol": "[string(\"shiiom\"),string(\"[\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\"),string(\"v2yzfl\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.566ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"r2bkb6\"",
              "sol": "\"r2bkb6\""
            },
            {
              "js": "[\"p7yiu8\",\"ERC1820_ACCEPT_MAGIC\",\"e7owj8\",\"w77do\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"p7yiu8\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"e7owj8\"),string(\"w77do\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.566ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"gaav5bh\"",
              "sol": "\"gaav5bh\""
            },
            {
              "js": "[[22,220,147,74,183,192,113,172,128,92,210,37,181,71,209,40,46,187,159,216,243,45,128,235,236,216,249,79,234,107,102,229],[201,200,205,126,230,145,117,190,117,175,214,194,71,25,160,44,12,132,220,20,202,65,118,55,211,131,185,35,214,142,65,69],[84,179,27,26,219,132,53,129,22,170,67,224,207,177,35,251,170,102,112,172,236,163,183,136,51,180,51,146,12,226,106,247],[166,46,181,170,156,165,12,198,28,232,119,9,211,241,214,4,26,90,85,111,169,48,116,155,219,185,40,238,185,175,3,80]]",
              "sol": "[bytes(abi.encode(\"22,220,147,74,183,192,113,172,128,92,210,37,181,71,209,40,46,187,159,216,243,45,128,235,236,216,249,79,234,107,102,229\")),bytes(abi.encode(\"201,200,205,126,230,145,117,190,117,175,214,194,71,25,160,44,12,132,220,20,202,65,118,55,211,131,185,35,214,142,65,69\")),bytes(abi.encode(\"84,179,27,26,219,132,53,129,22,170,67,224,207,177,35,251,170,102,112,172,236,163,183,136,51,180,51,146,12,226,106,247\")),bytes(abi.encode(\"166,46,181,170,156,165,12,198,28,232,119,9,211,241,214,4,26,90,85,111,169,48,116,155,219,185,40,238,185,175,3,80\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.567ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"gaav5bh\"",
              "sol": "\"gaav5bh\""
            },
            {
              "js": "[[111,128,190,62,116,2,168,97,141,162,86,90,120,115,67,155,63,160,39,108,186,74,52,181,231,88,88,58,147,16,40,7],[99,40,143,221,176,238,119,178,143,27,140,146,82,116,6,238,7,207,76,87,217,100,208,91,130,6,194,81,206,33,240,26],[52,6,29,210,22,150,39,73,54,130,183,9,25,210,1,122,237,70,3,245,28,12,202,127,106,249,189,254,10,23,252,122],[147,226,248,86,254,129,45,21,38,44,171,148,211,90,69,137,225,0,7,189,218,140,216,11,184,253,101,214,181,23,87,70],[220,88,165,168,166,184,200,90,56,239,117,137,4,139,81,45,194,43,172,194,243,184,62,33,34,81,111,150,69,201,163,60],[254,227,202,26,113,84,172,220,235,28,238,217,215,175,17,35,135,103,147,218,75,126,37,117,152,213,3,53,121,193,124,47],[23,24,56,107,236,28,158,183,227,28,126,98,212,101,69,4,95,47,100,226,118,157,44,248,183,227,64,53,166,236,87,245],[67,203,55,4,80,27,105,184,6,154,215,49,31,50,241,28,10,187,40,242,89,29,17,192,209,176,171,185,92,186,155,104],[248,90,102,183,17,69,147,204,226,140,123,181,5,9,255,35,139,251,81,111,21,220,38,51,148,232,211,1,78,3,121,106]]",
              "sol": "[bytes(abi.encode(\"111,128,190,62,116,2,168,97,141,162,86,90,120,115,67,155,63,160,39,108,186,74,52,181,231,88,88,58,147,16,40,7\")),bytes(abi.encode(\"99,40,143,221,176,238,119,178,143,27,140,146,82,116,6,238,7,207,76,87,217,100,208,91,130,6,194,81,206,33,240,26\")),bytes(abi.encode(\"52,6,29,210,22,150,39,73,54,130,183,9,25,210,1,122,237,70,3,245,28,12,202,127,106,249,189,254,10,23,252,122\")),bytes(abi.encode(\"147,226,248,86,254,129,45,21,38,44,171,148,211,90,69,137,225,0,7,189,218,140,216,11,184,253,101,214,181,23,87,70\")),bytes(abi.encode(\"220,88,165,168,166,184,200,90,56,239,117,137,4,139,81,45,194,43,172,194,243,184,62,33,34,81,111,150,69,201,163,60\")),bytes(abi.encode(\"254,227,202,26,113,84,172,220,235,28,238,217,215,175,17,35,135,103,147,218,75,126,37,117,152,213,3,53,121,193,124,47\")),bytes(abi.encode(\"23,24,56,107,236,28,158,183,227,28,126,98,212,101,69,4,95,47,100,226,118,157,44,248,183,227,64,53,166,236,87,245\")),bytes(abi.encode(\"67,203,55,4,80,27,105,184,6,154,215,49,31,50,241,28,10,187,40,242,89,29,17,192,209,176,171,185,92,186,155,104\")),bytes(abi.encode(\"248,90,102,183,17,69,147,204,226,140,123,181,5,9,255,35,139,251,81,111,21,220,38,51,148,232,211,1,78,3,121,106\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.567ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[8,99,117,175,43,58,134,97,201,14,172,63,254,221,35,121,30,68,237,53,9,230,14,72,199,161,141,2,144,37,152,114],[207,80,135,22,37,2,243,231,204,250,124,91,56,161,126,213,194,105,203,217,183,211,8,62,36,159,119,169,17,153,83,11]]",
              "sol": "[bytes(abi.encode(\"8,99,117,175,43,58,134,97,201,14,172,63,254,221,35,121,30,68,237,53,9,230,14,72,199,161,141,2,144,37,152,114\")),bytes(abi.encode(\"207,80,135,22,37,2,243,231,204,250,124,91,56,161,126,213,194,105,203,217,183,211,8,62,36,159,119,169,17,153,83,11\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.568ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[154,20,64,130,11,33,105,147,102,42,186,238,29,156,6,15,233,85,155,77,46,72,235,74,43,111,3,136,160,59,239,34],[178,96,148,169,141,50,18,60,120,201,224,189,188,54,198,227,148,33,132,78,132,137,99,137,250,46,222,229,41,177,25,209],[20,128,135,209,128,210,26,152,222,177,0,60,117,228,201,160,168,235,55,219,103,192,77,9,80,179,81,37,145,197,47,220],[221,191,113,122,29,192,67,160,221,166,60,155,69,21,38,131,168,45,166,68,95,14,238,8,146,125,47,119,202,140,149,27],[66,186,39,27,170,79,159,68,151,21,35,140,183,235,15,35,208,13,254,226,252,71,164,58,250,200,207,61,168,161,106,152],[161,126,172,212,73,189,186,1,112,2,211,144,221,138,47,85,70,178,135,113,19,93,122,121,139,176,83,149,72,146,197,249],[145,5,36,183,60,255,59,129,46,156,118,222,27,181,55,136,55,38,226,73,220,120,220,120,160,14,53,42,160,134,48,224],[115,225,128,225,152,186,231,235,75,65,96,114,54,149,215,64,43,120,211,180,212,236,20,253,105,58,13,69,72,17,220,221],[8,184,118,83,125,82,14,14,146,173,213,229,87,18,39,61,162,109,86,24,107,67,232,30,109,218,125,159,143,228,94,154]]",
              "sol": "[bytes(abi.encode(\"154,20,64,130,11,33,105,147,102,42,186,238,29,156,6,15,233,85,155,77,46,72,235,74,43,111,3,136,160,59,239,34\")),bytes(abi.encode(\"178,96,148,169,141,50,18,60,120,201,224,189,188,54,198,227,148,33,132,78,132,137,99,137,250,46,222,229,41,177,25,209\")),bytes(abi.encode(\"20,128,135,209,128,210,26,152,222,177,0,60,117,228,201,160,168,235,55,219,103,192,77,9,80,179,81,37,145,197,47,220\")),bytes(abi.encode(\"221,191,113,122,29,192,67,160,221,166,60,155,69,21,38,131,168,45,166,68,95,14,238,8,146,125,47,119,202,140,149,27\")),bytes(abi.encode(\"66,186,39,27,170,79,159,68,151,21,35,140,183,235,15,35,208,13,254,226,252,71,164,58,250,200,207,61,168,161,106,152\")),bytes(abi.encode(\"161,126,172,212,73,189,186,1,112,2,211,144,221,138,47,85,70,178,135,113,19,93,122,121,139,176,83,149,72,146,197,249\")),bytes(abi.encode(\"145,5,36,183,60,255,59,129,46,156,118,222,27,181,55,136,55,38,226,73,220,120,220,120,160,14,53,42,160,134,48,224\")),bytes(abi.encode(\"115,225,128,225,152,186,231,235,75,65,96,114,54,149,215,64,43,120,211,180,212,236,20,253,105,58,13,69,72,17,220,221\")),bytes(abi.encode(\"8,184,118,83,125,82,14,14,146,173,213,229,87,18,39,61,162,109,86,24,107,67,232,30,109,218,125,159,143,228,94,154\"))]"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.569ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "[[217,205,158,45,121,66,54,101,200,177,216,188,112,41,151,133,149,2,244,36,59,235,85,217,31,74,45,119,143,110,222,32]]",
              "sol": "[bytes(abi.encode(\"217,205,158,45,121,66,54,101,200,177,216,188,112,41,151,133,149,2,244,36,59,235,85,217,31,74,45,119,143,110,222,32\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.569ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"a05a7\"",
              "sol": "\"a05a7\""
            },
            {
              "js": "[[145,226,172,47,123,174,249,238,171,7,5,51,102,121,119,151,19,86,131,144,80,153,124,168,89,141,150,71,36,48,37,204]]",
              "sol": "[bytes(abi.encode(\"145,226,172,47,123,174,249,238,171,7,5,51,102,121,119,151,19,86,131,144,80,153,124,168,89,141,150,71,36,48,37,204\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.570ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"l6e83h\"",
              "sol": "\"l6e83h\""
            },
            {
              "js": "[[131,22,109,192,222,9,165,42,186,102,221,16,214,189,196,14,242,131,27,59,51,173,90,220,25,2,131,13,128,174,132,102]]",
              "sol": "[bytes(abi.encode(\"131,22,109,192,222,9,165,42,186,102,221,16,214,189,196,14,242,131,27,59,51,173,90,220,25,2,131,13,128,174,132,102\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.570ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[132,21,157,102,124,249,130,82,38,136,5,159,188,227,95,211,251,109,226,101,233,101,72,207,135,127,115,48,135,129,36,21]]",
              "sol": "[bytes(abi.encode(\"132,21,157,102,124,249,130,82,38,136,5,159,188,227,95,211,251,109,226,101,233,101,72,207,135,127,115,48,135,129,36,21\"))]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.571ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[145,128,255,70,72,159,104,181,187,28,229,27,150,11,73,77,230,116,127,176,225,86,41,63,242,142,52,180,9,215,145,126],[177,133,35,182,224,44,253,139,154,59,6,79,211,244,227,7,178,80,98,22,232,42,113,217,80,55,21,35,22,7,237,184]]",
              "sol": "[bytes(abi.encode(\"145,128,255,70,72,159,104,181,187,28,229,27,150,11,73,77,230,116,127,176,225,86,41,63,242,142,52,180,9,215,145,126\")),bytes(abi.encode(\"177,133,35,182,224,44,253,139,154,59,6,79,211,244,227,7,178,80,98,22,232,42,113,217,80,55,21,35,22,7,237,184\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.571ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "[[120,78,161,203,161,158,208,158,59,220,229,166,42,241,69,158,114,235,32,92,201,59,108,130,80,102,221,48,40,49,124,126],[22,188,224,223,25,74,12,136,198,169,135,40,174,11,204,59,94,175,154,234,125,11,122,243,106,41,6,169,244,130,141,106]]",
              "sol": "[bytes(abi.encode(\"120,78,161,203,161,158,208,158,59,220,229,166,42,241,69,158,114,235,32,92,201,59,108,130,80,102,221,48,40,49,124,126\")),bytes(abi.encode(\"22,188,224,223,25,74,12,136,198,169,135,40,174,11,204,59,94,175,154,234,125,11,122,243,106,41,6,169,244,130,141,106\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.572ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"at44o\"",
              "sol": "\"at44o\""
            },
            {
              "js": "[[63,22,170,0,102,7,15,179,97,111,227,214,165,132,143,74,198,6,88,104,189,142,86,171,83,75,82,56,63,116,119,75],[4,145,14,14,19,184,236,188,140,111,225,48,133,29,188,177,160,99,71,68,80,196,136,205,161,91,208,128,249,180,144,136]]",
              "sol": "[bytes(abi.encode(\"63,22,170,0,102,7,15,179,97,111,227,214,165,132,143,74,198,6,88,104,189,142,86,171,83,75,82,56,63,116,119,75\")),bytes(abi.encode(\"4,145,14,14,19,184,236,188,140,111,225,48,133,29,188,177,160,99,71,68,80,196,136,205,161,91,208,128,249,180,144,136\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.573ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "[[115,97,18,151,126,103,201,251,215,34,50,105,128,5,86,228,220,200,158,209,228,54,25,105,60,24,73,159,13,116,122,213],[97,137,60,154,160,7,23,211,118,144,113,254,227,27,220,18,36,111,207,36,225,144,202,142,59,71,125,194,77,9,99,175]]",
              "sol": "[bytes(abi.encode(\"115,97,18,151,126,103,201,251,215,34,50,105,128,5,86,228,220,200,158,209,228,54,25,105,60,24,73,159,13,116,122,213\")),bytes(abi.encode(\"97,137,60,154,160,7,23,211,118,144,113,254,227,27,220,18,36,111,207,36,225,144,202,142,59,71,125,194,77,9,99,175\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.574ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"v2yzfl\"",
              "sol": "\"v2yzfl\""
            },
            {
              "js": "[[149,232,22,173,92,225,213,93,245,10,141,200,186,49,128,117,117,208,232,57,27,34,58,217,88,211,156,224,143,234,242,31],[241,129,200,244,159,138,210,36,16,52,105,80,58,110,229,142,9,26,133,52,13,11,43,228,34,215,234,11,85,74,9,246],[248,74,194,248,218,69,165,25,219,58,137,88,76,71,61,5,66,217,42,213,178,246,131,231,111,144,119,160,137,214,14,117]]",
              "sol": "[bytes(abi.encode(\"149,232,22,173,92,225,213,93,245,10,141,200,186,49,128,117,117,208,232,57,27,34,58,217,88,211,156,224,143,234,242,31\")),bytes(abi.encode(\"241,129,200,244,159,138,210,36,16,52,105,80,58,110,229,142,9,26,133,52,13,11,43,228,34,215,234,11,85,74,9,246\")),bytes(abi.encode(\"248,74,194,248,218,69,165,25,219,58,137,88,76,71,61,5,66,217,42,213,178,246,131,231,111,144,119,160,137,214,14,117\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.574ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"a05a7\"",
              "sol": "\"a05a7\""
            },
            {
              "js": "[[243,185,160,171,71,132,45,50,77,20,10,255,102,50,141,107,83,3,200,194,105,71,184,170,196,45,54,118,217,108,201,121],[80,220,35,160,174,63,240,105,165,43,44,70,44,166,255,115,218,39,229,101,150,68,21,231,171,73,104,95,107,7,246,184],[182,155,40,149,36,194,204,28,195,72,42,249,144,12,179,119,196,188,67,3,6,199,186,200,87,248,77,245,100,239,3,241]]",
              "sol": "[bytes(abi.encode(\"243,185,160,171,71,132,45,50,77,20,10,255,102,50,141,107,83,3,200,194,105,71,184,170,196,45,54,118,217,108,201,121\")),bytes(abi.encode(\"80,220,35,160,174,63,240,105,165,43,44,70,44,166,255,115,218,39,229,101,150,68,21,231,171,73,104,95,107,7,246,184\")),bytes(abi.encode(\"182,155,40,149,36,194,204,28,195,72,42,249,144,12,179,119,196,188,67,3,6,199,186,200,87,248,77,245,100,239,3,241\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.575ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"r2bkb6\"",
              "sol": "\"r2bkb6\""
            },
            {
              "js": "[[231,171,38,8,23,101,123,165,25,196,228,227,193,62,61,163,234,240,231,66,164,196,230,10,203,29,91,1,118,218,198,186],[147,239,79,139,27,39,171,174,59,120,52,104,255,116,95,86,59,34,82,233,5,27,210,151,222,224,62,141,118,223,129,53],[84,144,201,116,207,166,213,18,158,37,102,148,75,243,204,17,208,235,151,59,81,70,82,51,115,51,239,98,163,225,41,107]]",
              "sol": "[bytes(abi.encode(\"231,171,38,8,23,101,123,165,25,196,228,227,193,62,61,163,234,240,231,66,164,196,230,10,203,29,91,1,118,218,198,186\")),bytes(abi.encode(\"147,239,79,139,27,39,171,174,59,120,52,104,255,116,95,86,59,34,82,233,5,27,210,151,222,224,62,141,118,223,129,53\")),bytes(abi.encode(\"84,144,201,116,207,166,213,18,158,37,102,148,75,243,204,17,208,235,151,59,81,70,82,51,115,51,239,98,163,225,41,107\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.576ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[119,31,13,250,196,20,21,141,78,210,135,233,214,121,145,217,246,200,102,15,10,239,43,13,225,28,70,113,53,185,231,147],[133,194,233,43,62,161,123,156,57,30,243,46,47,90,243,34,73,87,82,93,173,152,137,193,106,56,192,103,248,113,95,19],[75,134,249,4,207,139,234,13,107,202,175,237,7,179,6,182,146,134,111,127,149,221,148,141,188,180,78,215,232,236,23,227]]",
              "sol": "[bytes(abi.encode(\"119,31,13,250,196,20,21,141,78,210,135,233,214,121,145,217,246,200,102,15,10,239,43,13,225,28,70,113,53,185,231,147\")),bytes(abi.encode(\"133,194,233,43,62,161,123,156,57,30,243,46,47,90,243,34,73,87,82,93,173,152,137,193,106,56,192,103,248,113,95,19\")),bytes(abi.encode(\"75,134,249,4,207,139,234,13,107,202,175,237,7,179,6,182,146,134,111,127,149,221,148,141,188,180,78,215,232,236,23,227\"))]"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.576ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[223,104,249,56,206,188,56,250,44,22,250,16,75,206,30,24,103,44,167,129,146,109,40,97,4,191,233,35,123,212,24,133],[135,245,196,44,168,214,187,125,242,77,154,206,3,118,44,143,115,157,193,29,168,81,92,194,10,41,117,64,213,7,81,147],[161,26,151,79,77,13,242,68,26,239,64,22,228,252,82,184,202,255,250,52,55,136,27,5,155,181,93,38,137,150,211,207],[191,40,85,116,112,231,63,225,204,172,225,43,139,206,77,151,206,191,115,215,126,77,48,97,184,227,207,12,106,228,60,125]]",
              "sol": "[bytes(abi.encode(\"223,104,249,56,206,188,56,250,44,22,250,16,75,206,30,24,103,44,167,129,146,109,40,97,4,191,233,35,123,212,24,133\")),bytes(abi.encode(\"135,245,196,44,168,214,187,125,242,77,154,206,3,118,44,143,115,157,193,29,168,81,92,194,10,41,117,64,213,7,81,147\")),bytes(abi.encode(\"161,26,151,79,77,13,242,68,26,239,64,22,228,252,82,184,202,255,250,52,55,136,27,5,155,181,93,38,137,150,211,207\")),bytes(abi.encode(\"191,40,85,116,112,231,63,225,204,172,225,43,139,206,77,151,206,191,115,215,126,77,48,97,184,227,207,12,106,228,60,125\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.577ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[3,96,150,123,115,5,231,239,193,30,238,96,247,156,141,72,195,204,81,148,204,145,129,220,233,85,22,153,182,137,128,153],[158,178,232,62,17,21,18,113,189,119,159,80,5,185,17,217,159,118,114,18,71,121,125,78,0,186,139,63,223,111,27,188],[197,136,163,189,139,229,152,172,205,69,118,34,167,52,10,46,116,215,109,25,132,127,192,61,152,238,82,64,89,206,0,40],[236,89,36,233,165,38,137,112,56,151,218,224,188,244,162,142,135,241,30,253,198,187,230,134,106,94,129,223,17,180,27,61]]",
              "sol": "[bytes(abi.encode(\"3,96,150,123,115,5,231,239,193,30,238,96,247,156,141,72,195,204,81,148,204,145,129,220,233,85,22,153,182,137,128,153\")),bytes(abi.encode(\"158,178,232,62,17,21,18,113,189,119,159,80,5,185,17,217,159,118,114,18,71,121,125,78,0,186,139,63,223,111,27,188\")),bytes(abi.encode(\"197,136,163,189,139,229,152,172,205,69,118,34,167,52,10,46,116,215,109,25,132,127,192,61,152,238,82,64,89,206,0,40\")),bytes(abi.encode(\"236,89,36,233,165,38,137,112,56,151,218,224,188,244,162,142,135,241,30,253,198,187,230,134,106,94,129,223,17,180,27,61\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.577ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "[[92,222,115,213,61,40,57,58,49,152,97,212,242,178,133,201,209,18,50,6,60,173,217,148,240,151,193,69,137,176,112,170],[61,85,235,25,29,42,81,144,152,8,232,0,177,170,228,62,2,181,175,252,88,223,231,144,24,80,107,213,206,128,208,60],[140,130,254,246,102,2,144,175,176,215,207,51,204,139,198,52,16,102,97,148,202,6,226,170,191,4,125,80,141,178,2,112],[163,95,150,44,88,52,139,38,124,37,150,51,210,11,189,139,156,162,121,181,165,190,63,28,158,191,38,198,194,91,217,246]]",
              "sol": "[bytes(abi.encode(\"92,222,115,213,61,40,57,58,49,152,97,212,242,178,133,201,209,18,50,6,60,173,217,148,240,151,193,69,137,176,112,170\")),bytes(abi.encode(\"61,85,235,25,29,42,81,144,152,8,232,0,177,170,228,62,2,181,175,252,88,223,231,144,24,80,107,213,206,128,208,60\")),bytes(abi.encode(\"140,130,254,246,102,2,144,175,176,215,207,51,204,139,198,52,16,102,97,148,202,6,226,170,191,4,125,80,141,178,2,112\")),bytes(abi.encode(\"163,95,150,44,88,52,139,38,124,37,150,51,210,11,189,139,156,162,121,181,165,190,63,28,158,191,38,198,194,91,217,246\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.579ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"l6e83h\"",
              "sol": "\"l6e83h\""
            },
            {
              "js": "[[157,220,52,175,77,209,46,234,11,141,69,222,94,158,9,244,40,149,180,25,48,181,111,9,231,170,186,244,24,85,219,215],[219,251,193,67,219,169,143,103,227,132,220,167,148,90,129,104,150,3,148,219,49,59,147,77,162,179,124,184,109,192,152,61],[10,19,244,91,208,250,106,49,97,56,137,252,10,131,163,146,16,22,253,200,137,233,169,39,58,140,222,134,7,251,8,219],[208,75,186,134,82,11,123,104,216,225,225,186,61,55,112,83,128,114,143,137,198,56,59,120,232,149,24,178,70,39,27,243]]",
              "sol": "[bytes(abi.encode(\"157,220,52,175,77,209,46,234,11,141,69,222,94,158,9,244,40,149,180,25,48,181,111,9,231,170,186,244,24,85,219,215\")),bytes(abi.encode(\"219,251,193,67,219,169,143,103,227,132,220,167,148,90,129,104,150,3,148,219,49,59,147,77,162,179,124,184,109,192,152,61\")),bytes(abi.encode(\"10,19,244,91,208,250,106,49,97,56,137,252,10,131,163,146,16,22,253,200,137,233,169,39,58,140,222,134,7,251,8,219\")),bytes(abi.encode(\"208,75,186,134,82,11,123,104,216,225,225,186,61,55,112,83,128,114,143,137,198,56,59,120,232,149,24,178,70,39,27,243\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.580ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[234,60,114,246,221,161,118,86,158,68,34,72,13,237,150,12,32,53,92,211,214,41,223,39,126,92,246,5,180,102,158,176],[33,240,227,163,101,77,240,222,177,92,136,72,113,20,79,181,57,115,111,147,37,17,116,203,158,155,58,73,22,2,243,85],[22,230,224,76,162,169,65,247,83,161,145,98,113,126,112,24,25,91,95,135,151,237,102,247,83,218,223,68,2,153,245,164],[241,32,239,193,133,116,6,132,98,204,235,29,170,32,21,21,150,93,172,111,216,176,255,96,161,240,242,192,186,196,88,90],[215,163,59,118,0,100,83,50,62,196,208,76,179,247,156,236,172,91,204,218,125,6,33,242,150,31,179,139,250,46,67,97]]",
              "sol": "[bytes(abi.encode(\"234,60,114,246,221,161,118,86,158,68,34,72,13,237,150,12,32,53,92,211,214,41,223,39,126,92,246,5,180,102,158,176\")),bytes(abi.encode(\"33,240,227,163,101,77,240,222,177,92,136,72,113,20,79,181,57,115,111,147,37,17,116,203,158,155,58,73,22,2,243,85\")),bytes(abi.encode(\"22,230,224,76,162,169,65,247,83,161,145,98,113,126,112,24,25,91,95,135,151,237,102,247,83,218,223,68,2,153,245,164\")),bytes(abi.encode(\"241,32,239,193,133,116,6,132,98,204,235,29,170,32,21,21,150,93,172,111,216,176,255,96,161,240,242,192,186,196,88,90\")),bytes(abi.encode(\"215,163,59,118,0,100,83,50,62,196,208,76,179,247,156,236,172,91,204,218,125,6,33,242,150,31,179,139,250,46,67,97\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.581ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[68,180,38,22,234,182,204,165,91,79,129,26,177,84,2,1,254,187,147,92,58,222,25,244,78,211,218,84,250,70,223,241],[131,186,141,75,43,171,176,49,155,45,190,64,133,77,58,211,76,240,235,175,9,68,62,169,201,134,141,46,205,237,50,183],[209,31,251,105,47,253,253,66,196,0,83,217,182,198,65,103,120,61,84,184,152,91,29,193,206,150,241,12,106,95,153,254],[93,102,33,201,13,239,103,199,17,75,163,206,180,211,238,253,25,12,80,102,216,38,205,46,251,101,252,16,71,153,69,21],[118,77,142,19,255,198,181,31,231,79,179,135,121,142,185,221,210,25,217,94,214,243,16,118,83,123,95,71,22,233,153,26]]",
              "sol": "[bytes(abi.encode(\"68,180,38,22,234,182,204,165,91,79,129,26,177,84,2,1,254,187,147,92,58,222,25,244,78,211,218,84,250,70,223,241\")),bytes(abi.encode(\"131,186,141,75,43,171,176,49,155,45,190,64,133,77,58,211,76,240,235,175,9,68,62,169,201,134,141,46,205,237,50,183\")),bytes(abi.encode(\"209,31,251,105,47,253,253,66,196,0,83,217,182,198,65,103,120,61,84,184,152,91,29,193,206,150,241,12,106,95,153,254\")),bytes(abi.encode(\"93,102,33,201,13,239,103,199,17,75,163,206,180,211,238,253,25,12,80,102,216,38,205,46,251,101,252,16,71,153,69,21\")),bytes(abi.encode(\"118,77,142,19,255,198,181,31,231,79,179,135,121,142,185,221,210,25,217,94,214,243,16,118,83,123,95,71,22,233,153,26\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.581ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"v2yzfl\"",
              "sol": "\"v2yzfl\""
            },
            {
              "js": "[[138,74,219,124,36,184,26,108,37,111,230,45,227,113,51,228,46,153,50,67,170,85,115,167,110,99,201,108,247,225,24,102],[22,157,176,32,108,225,17,163,252,190,1,80,231,3,126,177,216,173,143,215,219,47,195,131,202,75,213,133,103,249,82,110],[5,8,72,163,112,191,254,205,48,187,94,137,196,33,80,229,134,86,46,133,238,58,69,49,153,166,91,255,99,51,175,203],[209,113,47,211,128,14,200,39,67,185,9,36,117,176,142,66,99,71,73,26,114,183,30,111,15,140,165,244,116,134,9,225],[208,221,79,152,106,144,33,51,224,200,119,39,12,247,231,210,24,147,91,234,168,116,229,219,112,175,105,4,69,53,164,133]]",
              "sol": "[bytes(abi.encode(\"138,74,219,124,36,184,26,108,37,111,230,45,227,113,51,228,46,153,50,67,170,85,115,167,110,99,201,108,247,225,24,102\")),bytes(abi.encode(\"22,157,176,32,108,225,17,163,252,190,1,80,231,3,126,177,216,173,143,215,219,47,195,131,202,75,213,133,103,249,82,110\")),bytes(abi.encode(\"5,8,72,163,112,191,254,205,48,187,94,137,196,33,80,229,134,86,46,133,238,58,69,49,153,166,91,255,99,51,175,203\")),bytes(abi.encode(\"209,113,47,211,128,14,200,39,67,185,9,36,117,176,142,66,99,71,73,26,114,183,30,111,15,140,165,244,116,134,9,225\")),bytes(abi.encode(\"208,221,79,152,106,144,33,51,224,200,119,39,12,247,231,210,24,147,91,234,168,116,229,219,112,175,105,4,69,53,164,133\"))]"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.582ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"shiiom\"",
              "sol": "\"shiiom\""
            },
            {
              "js": "[[228,64,57,2,221,227,39,243,254,252,2,171,99,171,211,225,46,103,39,86,186,47,27,140,41,43,164,134,223,205,45,78],[220,151,7,190,67,212,155,96,101,116,230,246,49,67,183,97,56,27,106,198,48,115,157,140,34,75,208,19,194,174,31,100],[85,47,126,68,242,209,210,5,134,40,26,241,241,193,187,149,89,219,91,12,56,169,231,116,45,104,130,86,16,64,88,41],[216,20,226,244,63,82,20,61,182,101,241,90,93,61,52,175,136,202,1,13,161,131,119,221,59,214,67,114,254,174,10,224],[203,112,41,121,218,76,29,155,238,142,147,33,139,46,14,184,50,239,41,145,93,54,205,151,220,152,237,111,87,228,218,20]]",
              "sol": "[bytes(abi.encode(\"228,64,57,2,221,227,39,243,254,252,2,171,99,171,211,225,46,103,39,86,186,47,27,140,41,43,164,134,223,205,45,78\")),bytes(abi.encode(\"220,151,7,190,67,212,155,96,101,116,230,246,49,67,183,97,56,27,106,198,48,115,157,140,34,75,208,19,194,174,31,100\")),bytes(abi.encode(\"85,47,126,68,242,209,210,5,134,40,26,241,241,193,187,149,89,219,91,12,56,169,231,116,45,104,130,86,16,64,88,41\")),bytes(abi.encode(\"216,20,226,244,63,82,20,61,182,101,241,90,93,61,52,175,136,202,1,13,161,131,119,221,59,214,67,114,254,174,10,224\")),bytes(abi.encode(\"203,112,41,121,218,76,29,155,238,142,147,33,139,46,14,184,50,239,41,145,93,54,205,151,220,152,237,111,87,228,218,20\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.583ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[153]",
              "sol": "bytes1(\"153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.583ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.583ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.583ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.584ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.584ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"gx1gr8\"",
              "sol": "\"gx1gr8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.584ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"p7yiu8\"",
              "sol": "\"p7yiu8\""
            },
            {
              "js": "\"r2bkb6\"",
              "sol": "\"r2bkb6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.585ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"gx1gr8\"",
              "sol": "\"gx1gr8\""
            },
            {
              "js": "\"r2bkb6\"",
              "sol": "\"r2bkb6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.585ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"w77do\"",
              "sol": "\"w77do\""
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.585ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"shiiom\"",
              "sol": "\"shiiom\""
            },
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.586ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"v2yzfl\"",
              "sol": "\"v2yzfl\""
            },
            {
              "js": "\"gaav5bh\"",
              "sol": "\"gaav5bh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.586ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"gx1gr8\"",
              "sol": "\"gx1gr8\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"at44o\"",
              "sol": "\"at44o\""
            },
            {
              "js": "\"cbxtfo\"",
              "sol": "\"cbxtfo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.587ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"at44o\"",
              "sol": "\"at44o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.587ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"at44o\"",
              "sol": "\"at44o\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.588ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.588ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"a05a7\"",
              "sol": "\"a05a7\""
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"e7owj8\"",
              "sol": "\"e7owj8\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.589ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.590ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"bk5gql\",\"shiiom\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"bk5gql\"),string(\"shiiom\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.591ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[222,100,244,171,82,160,210,197,140,101,43,246,140,102,106,139,79,30,75,96,161,184,103,213,96,102,7,196,110,212,126,52],[63,59,95,77,96,121,199,17,155,203,180,2,59,66,165,72,115,145,135,88,85,166,178,197,132,32,23,69,74,181,27,64],[84,244,114,1,197,190,121,244,128,230,248,129,171,148,166,120,128,209,200,151,12,134,55,193,172,248,17,190,154,67,200,151],[44,188,27,176,19,53,39,125,147,42,158,178,151,71,168,43,186,83,13,107,235,240,130,17,179,59,112,47,125,76,77,171],[86,218,84,38,161,104,24,8,253,65,12,229,164,156,25,25,87,179,124,248,23,197,230,217,111,58,128,245,235,111,149,208],[58,116,163,21,13,6,228,128,195,126,216,91,63,150,246,157,79,162,249,109,93,85,26,29,36,197,33,146,30,160,45,161],[39,90,151,178,131,221,204,88,183,100,17,26,162,146,9,170,176,79,111,201,38,4,90,180,145,22,39,124,222,198,186,4],[124,80,61,76,219,38,166,249,173,176,79,218,209,97,66,97,243,229,104,222,247,63,51,182,47,164,244,138,1,33,103,158]]",
              "sol": "[bytes(abi.encode(\"222,100,244,171,82,160,210,197,140,101,43,246,140,102,106,139,79,30,75,96,161,184,103,213,96,102,7,196,110,212,126,52\")),bytes(abi.encode(\"63,59,95,77,96,121,199,17,155,203,180,2,59,66,165,72,115,145,135,88,85,166,178,197,132,32,23,69,74,181,27,64\")),bytes(abi.encode(\"84,244,114,1,197,190,121,244,128,230,248,129,171,148,166,120,128,209,200,151,12,134,55,193,172,248,17,190,154,67,200,151\")),bytes(abi.encode(\"44,188,27,176,19,53,39,125,147,42,158,178,151,71,168,43,186,83,13,107,235,240,130,17,179,59,112,47,125,76,77,171\")),bytes(abi.encode(\"86,218,84,38,161,104,24,8,253,65,12,229,164,156,25,25,87,179,124,248,23,197,230,217,111,58,128,245,235,111,149,208\")),bytes(abi.encode(\"58,116,163,21,13,6,228,128,195,126,216,91,63,150,246,157,79,162,249,109,93,85,26,29,36,197,33,146,30,160,45,161\")),bytes(abi.encode(\"39,90,151,178,131,221,204,88,183,100,17,26,162,146,9,170,176,79,111,201,38,4,90,180,145,22,39,124,222,198,186,4\")),bytes(abi.encode(\"124,80,61,76,219,38,166,249,173,176,79,218,209,97,66,97,243,229,104,222,247,63,51,182,47,164,244,138,1,33,103,158\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.591ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.592ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[122,34,166,40,8,233,22,216,214,59,160,119,146,182,187,47,22,73,93,32,53,107,7,251,29,207,117,206,39,70,29,130]",
              "sol": "stringToBytes32(\"122,34,166,40,8,233,22,216,214,59,160,119,146,182,187,47,22,73,93,32,53,107,7,251,29,207,117,206,39,70,29,130\")"
            },
            {
              "js": "[248,44,200,119,75,206,179,6,159,88,245,156,166,213,57,213,203,76,174,176,177,77,44,63,135,17,207,232,36,190,87,41]",
              "sol": "stringToBytes32(\"248,44,200,119,75,206,179,6,159,88,245,156,166,213,57,213,203,76,174,176,177,77,44,63,135,17,207,232,36,190,87,41\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.592ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[177,193,237,35,182,80,231,177,43,6,198,243,152,161,80,175,106,153,234,8,87,20,159,17,253,194,195,218,60,23,215,60]",
              "sol": "stringToBytes32(\"177,193,237,35,182,80,231,177,43,6,198,243,152,161,80,175,106,153,234,8,87,20,159,17,253,194,195,218,60,23,215,60\")"
            },
            {
              "js": "[1,199,152,237,83,248,18,145,88,69,114,67,131,136,186,0,79,9,129,255,114,36,198,83,44,162,204,253,137,38,192,160]",
              "sol": "abi.encode(\"1,199,152,237,83,248,18,145,88,69,114,67,131,136,186,0,79,9,129,255,114,36,198,83,44,162,204,253,137,38,192,160\")"
            },
            {
              "js": "[14,78,150,127,220,81,162,253,0,145,109,245,76,18,180,76,193,153,82,188,242,35,29,103,133,24,56,11,97,7,237,249]",
              "sol": "abi.encode(\"14,78,150,127,220,81,162,253,0,145,109,245,76,18,180,76,193,153,82,188,242,35,29,103,133,24,56,11,97,7,237,249\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.593ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[187,19,172,118,140,58,169,182,23,198,132,67,59,178,236,55,31,37,71,0,15,165,28,171,81,80,219,160,226,62,177,103]",
              "sol": "abi.encode(\"187,19,172,118,140,58,169,182,23,198,132,67,59,178,236,55,31,37,71,0,15,165,28,171,81,80,219,160,226,62,177,103\")"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[227,126,72,186,142,248,102,99,199,202,83,210,141,196,69,93,221,253,196,172,33,182,230,119,174,7,199,76,80,150,173,96]",
              "sol": "abi.encode(\"227,126,72,186,142,248,102,99,199,202,83,210,141,196,69,93,221,253,196,172,33,182,230,119,174,7,199,76,80,150,173,96\")"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.594ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[163,148,129,128,201,5,39,143,91,41,219,214,35,176,111,244,221,33,137,95,118,41,187,195,82,221,106,79,17,42,118,86]",
              "sol": "stringToBytes32(\"163,148,129,128,201,5,39,143,91,41,219,214,35,176,111,244,221,33,137,95,118,41,187,195,82,221,106,79,17,42,118,86\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[208,55,1,50,193,74,94,1,3,11,253,232,128,71,165,171,71,51,60,146,92,51,36,1,229,93,76,43,80,110,190,219]",
              "sol": "abi.encode(\"208,55,1,50,193,74,94,1,3,11,253,232,128,71,165,171,71,51,60,146,92,51,36,1,229,93,76,43,80,110,190,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[140,128,10,82,41,221,198,179,187,31,237,56,198,197,115,213,107,154,75,184,209,220,0,246,228,99,139,40,204,14,143,250]",
              "sol": "stringToBytes32(\"140,128,10,82,41,221,198,179,187,31,237,56,198,197,115,213,107,154,75,184,209,220,0,246,228,99,139,40,204,14,143,250\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[213,134,145,173,248,140,114,59,73,70,20,143,102,200,138,56,246,156,150,220,136,177,82,145,86,124,33,81,32,131,194,63]",
              "sol": "abi.encode(\"213,134,145,173,248,140,114,59,73,70,20,143,102,200,138,56,246,156,150,220,136,177,82,145,86,124,33,81,32,131,194,63\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.596ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[240,194,219,206,182,224,83,239,56,89,136,161,204,218,129,25,186,119,100,89,27,127,214,73,38,138,111,245,7,214,148,28]",
              "sol": "stringToBytes32(\"240,194,219,206,182,224,83,239,56,89,136,161,204,218,129,25,186,119,100,89,27,127,214,73,38,138,111,245,7,214,148,28\")"
            },
            {
              "js": "[118,239,119,152,182,62,3,196,64,105,165,125,119,129,119,204,130,66,115,46,157,109,19,135,119,43,189,199,21,97,35,206]",
              "sol": "abi.encode(\"118,239,119,152,182,62,3,196,64,105,165,125,119,129,119,204,130,66,115,46,157,109,19,135,119,43,189,199,21,97,35,206\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[240,194,219,206,182,224,83,239,56,89,136,161,204,218,129,25,186,119,100,89,27,127,214,73,38,138,111,245,7,214,148,28]",
                "sol": "stringToBytes32(\"240,194,219,206,182,224,83,239,56,89,136,161,204,218,129,25,186,119,100,89,27,127,214,73,38,138,111,245,7,214,148,28\")"
              },
              {
                "js": "[104,117,91,232,34,55,160,219,122,140,212,140,180,243,134,91,209,100,204,190,121,124,0,3,63,253,31,248,156,192,231,162,105]",
                "sol": "bytes33(\"104,117,91,232,34,55,160,219,122,140,212,140,180,243,134,91,209,100,204,190,121,124,0,3,63,253,31,248,156,192,231,162,105\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.597ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[121,53,234,150,210,146,174,222,18,171,186,218,86,0,237,1,80,122,103,114,254,244,72,129,180,68,217,199,229,43,17,173]",
              "sol": "abi.encode(\"121,53,234,150,210,146,174,222,18,171,186,218,86,0,237,1,80,122,103,114,254,244,72,129,180,68,217,199,229,43,17,173\")"
            },
            {
              "js": "[113,0,146,9,212,237,150,138,63,247,155,138,229,68,72,55,204,149,228,98,71,254,85,38,61,252,195,132,111,100,201,128]",
              "sol": "stringToBytes32(\"113,0,146,9,212,237,150,138,63,247,155,138,229,68,72,55,204,149,228,98,71,254,85,38,61,252,195,132,111,100,201,128\")"
            },
            {
              "js": "[99,178,17,82,238,70,213,218,93,109,67,21,212,216,167,22,97,106,89,224,114,41,109,247,163,139,236,71,1,219,183,154]",
              "sol": "abi.encode(\"99,178,17,82,238,70,213,218,93,109,67,21,212,216,167,22,97,106,89,224,114,41,109,247,163,139,236,71,1,219,183,154\")"
            },
            {
              "js": "\"at44o\"",
              "sol": "\"at44o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[96,140,155,133,40,33,27,161,135,83,35,220,107,58,245,107,105,109,217,3,117,49,90,174,67,148,187,52,200,205,226,194]",
              "sol": "abi.encode(\"96,140,155,133,40,33,27,161,135,83,35,220,107,58,245,107,105,109,217,3,117,49,90,174,67,148,187,52,200,205,226,194\")"
            },
            {
              "js": "[138,29,33,112,253,108,175,32,144,145,216,152,136,46,166,189,164,26,145,132,71,191,124,210,3,74,57,143,74,72,201,62]",
              "sol": "stringToBytes32(\"138,29,33,112,253,108,175,32,144,145,216,152,136,46,166,189,164,26,145,132,71,191,124,210,3,74,57,143,74,72,201,62\")"
            },
            {
              "js": "[99,119,169,109,82,41,129,192,53,22,4,143,207,117,70,158,236,186,193,168,183,92,197,253,88,160,175,229,216,70,76,179]",
              "sol": "abi.encode(\"99,119,169,109,82,41,129,192,53,22,4,143,207,117,70,158,236,186,193,168,183,92,197,253,88,160,175,229,216,70,76,179\")"
            },
            {
              "js": "\"f7327g\"",
              "sol": "\"f7327g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[97,152,107,245,144,131,93,236,84,124,181,124,191,254,218,183,91,55,211,19,94,38,84,86,167,191,208,45,50,220,44,118]",
              "sol": "abi.encode(\"97,152,107,245,144,131,93,236,84,124,181,124,191,254,218,183,91,55,211,19,94,38,84,86,167,191,208,45,50,220,44,118\")"
            },
            {
              "js": "[154,82,1,67,59,221,124,198,99,236,1,130,25,245,192,144,142,109,210,202,178,195,199,208,102,154,15,157,213,103,135,45]",
              "sol": "stringToBytes32(\"154,82,1,67,59,221,124,198,99,236,1,130,25,245,192,144,142,109,210,202,178,195,199,208,102,154,15,157,213,103,135,45\")"
            },
            {
              "js": "[145,209,3,105,119,255,18,116,149,49,221,107,149,255,107,53,166,107,102,34,209,23,126,204,160,219,106,108,96,196,204,61]",
              "sol": "abi.encode(\"145,209,3,105,119,255,18,116,149,49,221,107,149,255,107,53,166,107,102,34,209,23,126,204,160,219,106,108,96,196,204,61\")"
            },
            {
              "js": "\"gx1gr8\"",
              "sol": "\"gx1gr8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[44,87,137,98,236,118,143,160,164,221,229,245,154,161,40,251,196,73,240,141,158,168,131,195,36,128,10,3,53,40,129,20]",
              "sol": "abi.encode(\"44,87,137,98,236,118,143,160,164,221,229,245,154,161,40,251,196,73,240,141,158,168,131,195,36,128,10,3,53,40,129,20\")"
            },
            {
              "js": "[140,3,29,59,140,70,29,146,19,37,70,211,58,73,151,202,90,226,182,253,167,138,109,89,165,58,123,240,41,14,45,221]",
              "sol": "stringToBytes32(\"140,3,29,59,140,70,29,146,19,37,70,211,58,73,151,202,90,226,182,253,167,138,109,89,165,58,123,240,41,14,45,221\")"
            },
            {
              "js": "[235,185,198,26,45,204,141,80,23,70,130,88,218,108,197,179,87,132,41,240,241,169,173,8,246,139,93,0,227,154,42,233]",
              "sol": "abi.encode(\"235,185,198,26,45,204,141,80,23,70,130,88,218,108,197,179,87,132,41,240,241,169,173,8,246,139,93,0,227,154,42,233\")"
            },
            {
              "js": "\"bk5gql\"",
              "sol": "\"bk5gql\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[43,149,236,167,73,91,195,151,128,8,206,197,142,14,56,82,88,253,101,251,40,52,83,37,248,220,150,31,243,211,228,172]",
              "sol": "abi.encode(\"43,149,236,167,73,91,195,151,128,8,206,197,142,14,56,82,88,253,101,251,40,52,83,37,248,220,150,31,243,211,228,172\")"
            },
            {
              "js": "[197,210,115,179,247,73,182,138,218,47,255,213,72,121,146,132,162,7,201,250,40,105,87,146,223,141,155,19,199,184,160,180]",
              "sol": "stringToBytes32(\"197,210,115,179,247,73,182,138,218,47,255,213,72,121,146,132,162,7,201,250,40,105,87,146,223,141,155,19,199,184,160,180\")"
            },
            {
              "js": "[93,227,118,240,163,92,101,111,158,117,32,142,16,237,57,139,149,159,92,161,113,141,53,229,1,95,98,42,245,15,229,160]",
              "sol": "abi.encode(\"93,227,118,240,163,92,101,111,158,117,32,142,16,237,57,139,149,159,92,161,113,141,53,229,1,95,98,42,245,15,229,160\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[13,126,213,255,218,91,177,191,55,99,75,245,118,55,14,152,190,201,138,85,48,39,241,223,250,112,154,159,72,77,154,87]",
              "sol": "abi.encode(\"13,126,213,255,218,91,177,191,55,99,75,245,118,55,14,152,190,201,138,85,48,39,241,223,250,112,154,159,72,77,154,87\")"
            },
            {
              "js": "[85,110,140,228,104,52,174,63,210,223,105,142,113,253,177,208,190,104,42,53,20,252,32,104,56,179,254,58,3,181,145,244]",
              "sol": "stringToBytes32(\"85,110,140,228,104,52,174,63,210,223,105,142,113,253,177,208,190,104,42,53,20,252,32,104,56,179,254,58,3,181,145,244\")"
            },
            {
              "js": "[160,67,15,235,244,248,73,252,142,64,123,230,162,114,200,238,138,107,80,245,162,220,10,183,41,253,148,178,91,67,145,45]",
              "sol": "abi.encode(\"160,67,15,235,244,248,73,252,142,64,123,230,162,114,200,238,138,107,80,245,162,220,10,183,41,253,148,178,91,67,145,45\")"
            },
            {
              "js": "\"f7327g\"",
              "sol": "\"f7327g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[71,24,87,255,53,200,65,49,245,180,170,9,34,188,156,113,10,106,25,49,58,41,50,81,92,253,164,154,91,37,199,155]",
              "sol": "abi.encode(\"71,24,87,255,53,200,65,49,245,180,170,9,34,188,156,113,10,106,25,49,58,41,50,81,92,253,164,154,91,37,199,155\")"
            },
            {
              "js": "[203,170,24,150,53,133,75,54,186,52,77,185,175,201,239,135,181,207,226,91,87,48,211,18,58,214,250,218,42,108,31,187]",
              "sol": "stringToBytes32(\"203,170,24,150,53,133,75,54,186,52,77,185,175,201,239,135,181,207,226,91,87,48,211,18,58,214,250,218,42,108,31,187\")"
            },
            {
              "js": "[103,124,212,202,33,222,21,121,213,244,4,75,134,220,86,101,152,166,112,155,196,49,253,151,91,103,185,91,160,31,163,120]",
              "sol": "abi.encode(\"103,124,212,202,33,222,21,121,213,244,4,75,134,220,86,101,152,166,112,155,196,49,253,151,91,103,185,91,160,31,163,120\")"
            },
            {
              "js": "\"shiiom\"",
              "sol": "\"shiiom\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[61,52,106,13,21,187,173,193,235,208,55,170,87,209,104,141,136,82,16,30,69,9,194,22,55,207,175,130,34,210,33,117]",
              "sol": "abi.encode(\"61,52,106,13,21,187,173,193,235,208,55,170,87,209,104,141,136,82,16,30,69,9,194,22,55,207,175,130,34,210,33,117\")"
            },
            {
              "js": "[89,189,92,219,163,100,197,218,7,112,50,157,44,86,248,24,121,88,93,105,81,51,242,174,162,245,183,235,98,87,186,40]",
              "sol": "stringToBytes32(\"89,189,92,219,163,100,197,218,7,112,50,157,44,86,248,24,121,88,93,105,81,51,242,174,162,245,183,235,98,87,186,40\")"
            },
            {
              "js": "[32,100,14,126,104,252,147,43,48,156,109,249,157,2,247,253,114,111,74,218,55,38,54,98,106,220,103,231,46,33,182,102]",
              "sol": "abi.encode(\"32,100,14,126,104,252,147,43,48,156,109,249,157,2,247,253,114,111,74,218,55,38,54,98,106,220,103,231,46,33,182,102\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.607ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[134,124,101,249,152,217,242,211,241,192,243,99,209,54,16,102,192,54,157,100,131,148,210,75,123,206,229,212,18,95,196,12]",
              "sol": "abi.encode(\"134,124,101,249,152,217,242,211,241,192,243,99,209,54,16,102,192,54,157,100,131,148,210,75,123,206,229,212,18,95,196,12\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[19,20,28,97,111,133,41,91,135,146,142,158,8,130,76,102,128,189,150,10,201,223,148,83,180,155,53,255,82,141,245,49]",
              "sol": "abi.encode(\"19,20,28,97,111,133,41,91,135,146,142,158,8,130,76,102,128,189,150,10,201,223,148,83,180,155,53,255,82,141,245,49\")"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.607ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[229,233,234,2,4,58,61,204,243,210,6,33,193,66,178,119,197,56,54,214,27,242,61,114,70,216,13,94,250,30,105,120]",
              "sol": "stringToBytes32(\"229,233,234,2,4,58,61,204,243,210,6,33,193,66,178,119,197,56,54,214,27,242,61,114,70,216,13,94,250,30,105,120\")"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[196,138,143,52,198,98,124,47,93,249,180,22,59,249,82,128,227,227,73,232,16,32,13,1,121,151,207,230,33,186,147,103]",
              "sol": "stringToBytes32(\"196,138,143,52,198,98,124,47,93,249,180,22,59,249,82,128,227,227,73,232,16,32,13,1,121,151,207,230,33,186,147,103\")"
            },
            {
              "js": "[22,7,13,80,24,26,178,252,2,16,16,244,60,181,88,155,78,0,218,156,121,97,3,79,190,7,108,5,74,124,173,223]",
              "sol": "stringToBytes32(\"22,7,13,80,24,26,178,252,2,16,16,244,60,181,88,155,78,0,218,156,121,97,3,79,190,7,108,5,74,124,173,223\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.608ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[170,221,3,146,21,171,206,58,220,107,195,175,186,61,27,66,55,220,175,98,69,108,156,142,227,74,186,78,5,46,238,68]",
              "sol": "stringToBytes32(\"170,221,3,146,21,171,206,58,220,107,195,175,186,61,27,66,55,220,175,98,69,108,156,142,227,74,186,78,5,46,238,68\")"
            },
            {
              "js": "[136,103,147,90,94,245,76,15,186,153,79]",
              "sol": "abi.encode(\"136,103,147,90,94,245,76,15,186,153,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[48,218,26,63,250,15,27,244,101,16,114,119,139,50,130,3,8,115,210,104,182,230,107,130,165,158,44,84,233,38,62,177]",
              "sol": "stringToBytes32(\"48,218,26,63,250,15,27,244,101,16,114,119,139,50,130,3,8,115,210,104,182,230,107,130,165,158,44,84,233,38,62,177\")"
            },
            {
              "js": "[122,151,53,185,170,83,245,254,78,58,152,73,242,97,185,91,203,243,1,181,65,178,63,208,207,100,11,233,84,171,42,172,102,125,39,249,196,235,111,157,92,213,200,210,74,11,255,71,143,226,163,188,192,237,244,243,77,91,112,148,201,107,77,59,36]",
              "sol": "abi.encode(\"122,151,53,185,170,83,245,254,78,58,152,73,242,97,185,91,203,243,1,181,65,178,63,208,207,100,11,233,84,171,42,172,102,125,39,249,196,235,111,157,92,213,200,210,74,11,255,71,143,226,163,188,192,237,244,243,77,91,112,148,201,107,77,59,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.609ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.610ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[47,59]",
              "sol": "[uint(47),uint(59)]"
            },
            {
              "js": "[[47,65],[59,88]]",
              "sol": "[[uint(47),uint(65)],[uint(59),uint(88)]]"
            },
            {
              "js": "[1,200001]",
              "sol": "[uint(1),uint(200001)]"
            },
            {
              "js": "[16,28]",
              "sol": "[uint(16),uint(28)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.612ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.613ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[16,55,8,1532892064,23,22,28,49,1,1532892064]",
              "sol": "[uint(16),uint(55),uint(8),uint(1532892064),uint(23),uint(22),uint(28),uint(49),uint(1),uint(1532892064)]"
            },
            {
              "js": "{\"A\": {\"X\": 46,\"Y\": 162},\"B\": {\"X\": [46,254],\"Y\": [19,1532892062]},\"C\": {\"X\": 98,\"Y\": 1532892062}}",
              "sol": "Verifier.Proof(Pairing.G1Point(46,162),Pairing.G2Point([uint(46),uint(254)],[uint(19),uint(1532892062)]),Pairing.G1Point(98,1532892062))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[4,25,8,17,98,9]",
              "sol": "[uint(4),uint(25),uint(8),uint(17),uint(98),uint(9)]"
            },
            {
              "js": "{\"A\": {\"X\": 102,\"Y\": 4},\"B\": {\"X\": [63,71],\"Y\": [88,59]},\"C\": {\"X\": 1532892064,\"Y\": 1024}}",
              "sol": "Verifier.Proof(Pairing.G1Point(102,4),Pairing.G2Point([uint(63),uint(71)],[uint(88),uint(59)]),Pairing.G1Point(1532892064,1024))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.617ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.618ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.618ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[7]}",
                "sol": "{\"from\":\"accounts[7]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.620ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.620ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.621ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.621ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "22",
                "sol": "22"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.622ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.623ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "[19,36,92,102,199,244,83,63,127,187,26,173,180,104,27,99,127,109,145,23,222,42,153,173,169,113,8,221,67,100,16,84]",
              "sol": "abi.encode(\"19,36,92,102,199,244,83,63,127,187,26,173,180,104,27,99,127,109,145,23,222,42,153,173,169,113,8,221,67,100,16,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "[19,36,92,102,199,244,83,63,127,187,26,173,180,104,27,99,127,109,145,23,222,42,153,173,169,113,8,221,67,100,16,84]",
                "sol": "abi.encode(\"19,36,92,102,199,244,83,63,127,187,26,173,180,104,27,99,127,109,145,23,222,42,153,173,169,113,8,221,67,100,16,84\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.624ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.625ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[184,201,188,190]",
              "sol": "bytes4(\"184,201,188,190\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.627ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.628ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.628ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1025",
                "sol": "1025"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.629ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.629ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "[144,231,189,122,173,73,173,244,147,77,202,5,39,78,24,3,166,170,159,243,180,155,141,121,28,69,242,204,92,178,104,244]",
              "sol": "abi.encode(\"144,231,189,122,173,73,173,244,147,77,202,5,39,78,24,3,166,170,159,243,180,155,141,121,28,69,242,204,92,178,104,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "[166,28,100,6,108,14,212,56,156,130,79,239,177,225,78,164,226,62,47,8,229,78,151,32,155,251,118,166,41,84,51,81]",
              "sol": "abi.encode(\"166,28,100,6,108,14,212,56,156,130,79,239,177,225,78,164,226,62,47,8,229,78,151,32,155,251,118,166,41,84,51,81\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.632ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.634ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[22,70]",
              "sol": "[uint(22),uint(70)]"
            },
            {
              "js": "[[1532892062,161],[45,255]]",
              "sol": "[[uint(1532892062),uint(161)],[uint(45),uint(255)]]"
            },
            {
              "js": "[47,66]",
              "sol": "[uint(47),uint(66)]"
            },
            {
              "js": "[102,23]",
              "sol": "[uint(102),uint(23)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.636ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.637ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.638ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.638ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.639ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.640ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.642ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.643ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.643ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.645ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "86",
                "sol": "86"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.646ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:55:07.646ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.647ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:55:07.648ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}