,{
  "2020-11-10T23:07:21.553ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:07:37.277ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:07:52.696ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:08.504ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:24.182ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:39.634ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.368ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [202,209,200,246,233,91,101,227,36,230,185,254,92,59,92,223,207,94,240,67,237,166,249,199,52,132,58,76,70,191,116,198],\"capacity\": 32}",
              "sol": "Buffer.buffer(abi.encode(\"202,209,200,246,233,91,101,227,36,230,185,254,92,59,92,223,207,94,240,67,237,166,249,199,52,132,58,76,70,191,116,198\"),32)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.369ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [126,144,70,206,114,43,63,241,58,208,173,194,22,114,111,26,195,235,202,67,100,35,53,186,113,109,109,9,42,167,72,182],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"126,144,70,206,114,43,63,241,58,208,173,194,22,114,111,26,195,235,202,67,100,35,53,186,113,109,109,9,42,167,72,182\"),49)"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [85,157,253,29,149,116,181,236,127,152,137,244,205,117,194,219,68,244,255,192,31,237,220,94,208,79,121,144,205,209,135,110],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"85,157,253,29,149,116,181,236,127,152,137,244,205,117,194,219,68,244,255,192,31,237,220,94,208,79,121,144,205,209,135,110\"),69)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.370ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [145,13,179,107,62,192,71,21,53,115,163,184,9,106,119,112,136,250,103,248,56,132,86,98,108,216,240,12,44,197,226,111],\"capacity\": 45}",
              "sol": "Buffer.buffer(abi.encode(\"145,13,179,107,62,192,71,21,53,115,163,184,9,106,119,112,136,250,103,248,56,132,86,98,108,216,240,12,44,197,226,111\"),45)"
            },
            {
              "js": "[103,229,186,6,220,191,143,19,128,230,243,25,234,7,93,46,229,91,98,163,225,117,224,134,7,49,200,154,138,56,9,48]",
              "sol": "abi.encode(\"103,229,186,6,220,191,143,19,128,230,243,25,234,7,93,46,229,91,98,163,225,117,224,134,7,49,200,154,138,56,9,48\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.371ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [24,144,15,150,218,235,18,230,1,48,217,230,125,18,191,124,64,146,66,126,30,236,169,92,56,90,156,106,205,71,190,211],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"24,144,15,150,218,235,18,230,1,48,217,230,125,18,191,124,64,146,66,126,30,236,169,92,56,90,156,106,205,71,190,211\"),56)"
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.374ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [31,192,231,93,63,139,220,174,70,96,199,166,65,70,184,222,136,157,221,152,179,88,170,190,30,125,169,122,122,115,71,85],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"31,192,231,93,63,139,220,174,70,96,199,166,65,70,184,222,136,157,221,152,179,88,170,190,30,125,169,122,122,115,71,85\"),66)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.374ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [142,234,246,44,27,168,30,236,154,168,205,76,0,42,99,61,250,156,148,39,220,194,172,60,10,32,111,179,148,70,90,214],\"capacity\": 1025}",
              "sol": "Buffer.buffer(abi.encode(\"142,234,246,44,27,168,30,236,154,168,205,76,0,42,99,61,250,156,148,39,220,194,172,60,10,32,111,179,148,70,90,214\"),1025)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.375ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [120,191,85,35,232,251,98,113,124,141,167,193,174,164,75,16,25,105,24,82,220,25,98,192,238,56,206,152,234,138,5,149],\"capacity\": 49}",
              "sol": "Buffer.buffer(abi.encode(\"120,191,85,35,232,251,98,113,124,141,167,193,174,164,75,16,25,105,24,82,220,25,98,192,238,56,206,152,234,138,5,149\"),49)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.380ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.381ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.381ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 7,\"Y\": 25}",
              "sol": "Pairing.G1Point(7,25)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.382ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 45,\"Y\": 46}",
              "sol": "Pairing.G1Point(45,46)"
            },
            {
              "js": "{\"X\": 31,\"Y\": 69}",
              "sol": "Pairing.G1Point(31,69)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.383ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [10,48],\"Y\": [22,95]}",
              "sol": "Pairing.G2Point([uint(10),uint(48)],[uint(22),uint(95)])"
            },
            {
              "js": "{\"X\": [26,47],\"Y\": [54,162]}",
              "sol": "Pairing.G2Point([uint(26),uint(47)],[uint(54),uint(162)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.385ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 1025,\"Y\": 24}",
              "sol": "Pairing.G1Point(1025,24)"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.385ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 22,\"Y\": 5},{\"X\": 1532892062,\"Y\": 200000}]",
              "sol": "[Pairing.G1Point(22,5),Pairing.G1Point(1532892062,200000)]"
            },
            {
              "js": "[{\"X\": [64,64],\"Y\": [101,23]},{\"X\": [16,45],\"Y\": [45,17]}]",
              "sol": "[Pairing.G2Point([uint(64),uint(64)],[uint(101),uint(23)]),Pairing.G2Point([uint(16),uint(45)],[uint(45),uint(17)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 5,\"Y\": 18},{\"X\": 256,\"Y\": 63},{\"X\": 58,\"Y\": 200000}]",
                "sol": "[Pairing.G1Point(10,66),Pairing.G1Point(255,29),Pairing.G1Point(200000,15)]"
              },
              {
                "js": "[{\"X\": [64,64],\"Y\": [101,23]},{\"X\": [16,45],\"Y\": [45,17]}]",
                "sol": "[Pairing.G2Point([uint(64),uint(64)],[uint(101),uint(23)]),Pairing.G2Point([uint(16),uint(45)],[uint(45),uint(17)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.388ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 17,\"Y\": 70}",
              "sol": "Pairing.G1Point(17,70)"
            },
            {
              "js": "{\"X\": [59,2014223714],\"Y\": [254,47]}",
              "sol": "Pairing.G2Point([uint(59),uint(2014223714)],[uint(254),uint(47)])"
            },
            {
              "js": "{\"X\": 22,\"Y\": 98}",
              "sol": "Pairing.G1Point(22,98)"
            },
            {
              "js": "{\"X\": [1532892062,254],\"Y\": [8,1025]}",
              "sol": "Pairing.G2Point([uint(1532892062),uint(254)],[uint(8),uint(1025)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.389ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 24,\"Y\": 29}",
              "sol": "Pairing.G1Point(24,29)"
            },
            {
              "js": "{\"X\": [28,29],\"Y\": [60,16]}",
              "sol": "Pairing.G2Point([uint(28),uint(29)],[uint(60),uint(16)])"
            },
            {
              "js": "{\"X\": 4,\"Y\": 1}",
              "sol": "Pairing.G1Point(4,1)"
            },
            {
              "js": "{\"X\": [1532892063,70],\"Y\": [162,71]}",
              "sol": "Pairing.G2Point([uint(1532892063),uint(70)],[uint(162),uint(71)])"
            },
            {
              "js": "{\"X\": 1532892064,\"Y\": 8}",
              "sol": "Pairing.G1Point(1532892064,8)"
            },
            {
              "js": "{\"X\": [4,23],\"Y\": [69,71]}",
              "sol": "Pairing.G2Point([uint(4),uint(23)],[uint(69),uint(71)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.398ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.399ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.401ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.402ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.403ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.404ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.405ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.406ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.407ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.409ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.410ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.415ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [79,62,145,177,198,21,5,168,4,169,193,117,234,35,211,86,123,81,85,122,9,143,237,165,109,125,4,0,164,214,4,98],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"79,62,145,177,198,21,5,168,4,169,193,117,234,35,211,86,123,81,85,122,9,143,237,165,109,125,4,0,164,214,4,98\"),1024)"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.416ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [163,15,153,122,252,115,220,238,248,1,33,161,218,149,128,127,148,32,47,85,134,14,177,187,169,122,6,13,26,155,19,180],\"capacity\": 26}",
              "sol": "Buffer.buffer(abi.encode(\"163,15,153,122,252,115,220,238,248,1,33,161,218,149,128,127,148,32,47,85,134,14,177,187,169,122,6,13,26,155,19,180\"),26)"
            },
            {
              "js": "[188,80,40,120,70,230,34,86,158,228,210,218,178,189,134,107,40,3,153,129,226,61,91,223,85,44,227,2,10,91,51,204]",
              "sol": "abi.encode(\"188,80,40,120,70,230,34,86,158,228,210,218,178,189,134,107,40,3,153,129,226,61,91,223,85,44,227,2,10,91,51,204\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.417ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [152,164,43,27,11,72,146,152,135,132,234,165,71,69,114,105,184,11,235,58,220,211,8,83,70,182,222,102,71,56,81,201],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"152,164,43,27,11,72,146,152,135,132,234,165,71,69,114,105,184,11,235,58,220,211,8,83,70,182,222,102,71,56,81,201\"),55)"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.417ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [153,235,78,176,162,135,242,5,172,6,66,85,245,175,53,196,150,38,73,91,202,234,139,67,68,79,81,129,233,138,110,102],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"153,235,78,176,162,135,242,5,172,6,66,85,245,175,53,196,150,38,73,91,202,234,139,67,68,79,81,129,233,138,110,102\"),161)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.419ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[110,49,190,13,80,182,54,1,186,89,253,223,64,82,174,240,139,164,161,233,40,242,124,197,190,203,130,86,132,229,198,60]",
              "sol": "stringToBytes32(\"110,49,190,13,80,182,54,1,186,89,253,223,64,82,174,240,139,164,161,233,40,242,124,197,190,203,130,86,132,229,198,60\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.420ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[158,190,227,207,220,231,81,184,147,37,98,157,139,82,146,177,43,168,116,115,29,236,92,111,218,214,54,18,143,237,108,244]",
              "sol": "stringToBytes32(\"158,190,227,207,220,231,81,184,147,37,98,157,139,82,146,177,43,168,116,115,29,236,92,111,218,214,54,18,143,237,108,244\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[175,213,131,207,247,71,163,72,229,131,110,67,178,97,122,212,74,204,116,49,201,21,165,120,35,218,246,225,60,120,172,238]",
              "sol": "abi.encode(\"175,213,131,207,247,71,163,72,229,131,110,67,178,97,122,212,74,204,116,49,201,21,165,120,35,218,246,225,60,120,172,238\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.465ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.465ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.466ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.467ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.468ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.468ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.469ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"hydw1r\"",
              "sol": "\"hydw1r\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.469ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.469ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.470ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.470ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.471ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.471ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.472ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.472ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"fg98bm\",\"q3uec8\",\"[\",\"pcikeh\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"fg98bm\"),string(\"q3uec8\"),string(\"[\"),string(\"pcikeh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.473ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"q3uec8\",\"dn4xb\",\"Capstones\",\"sgf9vh\"]",
              "sol": "[string(\"q3uec8\"),string(\"dn4xb\"),string(\"Capstones\"),string(\"sgf9vh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.473ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"hydw1r\"",
              "sol": "\"hydw1r\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"q3uec8\",\"fg98bm\",\"fg98bm\",\"L\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"q3uec8\"),string(\"fg98bm\"),string(\"fg98bm\"),string(\"L\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.474ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"dn4xb\"",
              "sol": "\"dn4xb\""
            },
            {
              "js": "[\"q3uec8\",\"P\",\"o5it6k\",\"sgf9vh\",\"Capstones\"]",
              "sol": "[string(\"q3uec8\"),string(\"P\"),string(\"o5it6k\"),string(\"sgf9vh\"),string(\"Capstones\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.475ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.475ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"o5it6k\"",
              "sol": "\"o5it6k\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.476ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.476ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"hydw1r\"]",
              "sol": "[string(\"hydw1r\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.477ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"0\",\"0\"]",
              "sol": "[string(\"0\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.477ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"dn4xb\"",
              "sol": "\"dn4xb\""
            },
            {
              "js": "[\"o5it6k\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"o5it6k\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.478ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"coanwp\"",
              "sol": "\"coanwp\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"r6stb\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"r6stb\")]"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.478ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"L\",\"o5it6k\"]",
              "sol": "[string(\"L\"),string(\"o5it6k\")]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.479ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\",\"sgf9vh\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\"),string(\"sgf9vh\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.479ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "[\"sgf9vh\",\"hydw1r\",\"coanwp\"]",
              "sol": "[string(\"sgf9vh\"),string(\"hydw1r\"),string(\"coanwp\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.480ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "[\"sgf9vh\",\"Capstones\",\"dn4xb\"]",
              "sol": "[string(\"sgf9vh\"),string(\"Capstones\"),string(\"dn4xb\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.480ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"coanwp\"",
              "sol": "\"coanwp\""
            },
            {
              "js": "[\"pcikeh\",\"[\",\"dn4xb\"]",
              "sol": "[string(\"pcikeh\"),string(\"[\"),string(\"dn4xb\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.481ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"q3uec8\",\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"hydw1r\"]",
              "sol": "[string(\"q3uec8\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"hydw1r\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.481ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"dn4xb\"",
              "sol": "\"dn4xb\""
            },
            {
              "js": "[\"P\",\"hydw1r\",\"ERC1820_ACCEPT_MAGIC\",\"0\"]",
              "sol": "[string(\"P\"),string(\"hydw1r\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.481ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"[\",\"hydw1r\",\"r6stb\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"[\"),string(\"hydw1r\"),string(\"r6stb\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.482ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"0\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"q3uec8\"]",
              "sol": "[string(\"0\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"q3uec8\")]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.482ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"P\",\"0\",\"P\",\"hydw1r\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"P\"),string(\"0\"),string(\"P\"),string(\"hydw1r\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.483ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"r6stb\"",
              "sol": "\"r6stb\""
            },
            {
              "js": "[\"dn4xb\",\"[\",\"0\",\"Transaction successfully verified.\",\"L\"]",
              "sol": "[string(\"dn4xb\"),string(\"[\"),string(\"0\"),string(\"Transaction successfully verified.\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.483ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"o5it6k\",\"an4z0d\",\"r6stb\",\"erbjq\",\"an4z0d\"]",
              "sol": "[string(\"o5it6k\"),string(\"an4z0d\"),string(\"r6stb\"),string(\"erbjq\"),string(\"an4z0d\")]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.484ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"an4z0d\"",
              "sol": "\"an4z0d\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"9mi4ep\",\"\\x19Ethereum Signed Message:\\n32\",\"an4z0d\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"9mi4ep\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"an4z0d\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.485ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[103,143,237,181,201,239,119,227,187,140,172,229,33,115,55,173,37,194,56,60,80,162,30,107,74,150,20,154,158,63,127,18],[199,7,134,222,109,78,63,228,14,51,92,140,100,145,168,199,234,121,88,232,94,174,229,160,98,200,79,184,18,128,33,3],[45,132,27,211,199,56,76,203,17,93,139,130,18,197,109,52,97,8,183,175,242,124,76,62,237,246,195,16,29,153,19,208],[164,217,240,5,68,89,228,45,26,157,138,218,81,29,254,14,228,128,157,248,204,118,33,54,146,213,170,232,63,30,55,89],[145,41,102,217,185,27,221,113,221,243,165,44,121,205,108,114,145,155,173,199,52,186,97,150,133,78,73,231,254,227,59,168],[121,158,143,74,124,125,240,81,117,3,228,27,236,253,134,236,130,254,59,168,32,41,49,182,208,137,215,178,124,156,91,0]]",
              "sol": "[bytes(abi.encode(\"103,143,237,181,201,239,119,227,187,140,172,229,33,115,55,173,37,194,56,60,80,162,30,107,74,150,20,154,158,63,127,18\")),bytes(abi.encode(\"199,7,134,222,109,78,63,228,14,51,92,140,100,145,168,199,234,121,88,232,94,174,229,160,98,200,79,184,18,128,33,3\")),bytes(abi.encode(\"45,132,27,211,199,56,76,203,17,93,139,130,18,197,109,52,97,8,183,175,242,124,76,62,237,246,195,16,29,153,19,208\")),bytes(abi.encode(\"164,217,240,5,68,89,228,45,26,157,138,218,81,29,254,14,228,128,157,248,204,118,33,54,146,213,170,232,63,30,55,89\")),bytes(abi.encode(\"145,41,102,217,185,27,221,113,221,243,165,44,121,205,108,114,145,155,173,199,52,186,97,150,133,78,73,231,254,227,59,168\")),bytes(abi.encode(\"121,158,143,74,124,125,240,81,117,3,228,27,236,253,134,236,130,254,59,168,32,41,49,182,208,137,215,178,124,156,91,0\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.485ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "[[86,16,176,21,136,146,90,248,29,24,79,54,229,203,228,31,243,212,126,102,167,49,115,246,189,149,97,86,62,64,79,39]]",
              "sol": "[bytes(abi.encode(\"86,16,176,21,136,146,90,248,29,24,79,54,229,203,228,31,243,212,126,102,167,49,115,246,189,149,97,86,62,64,79,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.486ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[248,181,124,92,239,13,187,34,46,180,144,90,100,172,147,17,26,142,43,178,252,102,219,17,39,70,104,206,65,194,132,187],[220,172,103,72,45,230,209,110,203,149,82,160,218,224,179,24,11,235,115,198,183,83,49,80,232,4,109,47,109,17,106,14],[180,87,223,211,56,223,207,218,142,8,115,26,150,56,89,1,121,182,77,235,202,162,235,2,171,182,98,224,96,111,102,70]]",
              "sol": "[bytes(abi.encode(\"248,181,124,92,239,13,187,34,46,180,144,90,100,172,147,17,26,142,43,178,252,102,219,17,39,70,104,206,65,194,132,187\")),bytes(abi.encode(\"220,172,103,72,45,230,209,110,203,149,82,160,218,224,179,24,11,235,115,198,183,83,49,80,232,4,109,47,109,17,106,14\")),bytes(abi.encode(\"180,87,223,211,56,223,207,218,142,8,115,26,150,56,89,1,121,182,77,235,202,162,235,2,171,182,98,224,96,111,102,70\"))]"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.486ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"wunls\"",
              "sol": "\"wunls\""
            },
            {
              "js": "[[45,142,115,89,204,6,25,2,55,18,53,127,226,44,24,111,70,93,80,83,59,63,158,35,126,63,72,74,193,166,67,37],[121,177,203,68,42,184,217,99,83,65,131,160,212,183,143,91,250,250,4,247,121,145,212,19,194,5,182,149,221,115,19,210],[120,199,56,226,113,161,190,218,159,6,223,14,185,85,42,208,191,69,244,231,38,253,20,195,57,23,245,91,165,95,79,183],[100,106,250,69,89,154,75,240,67,202,88,66,58,129,188,206,78,137,173,142,253,50,98,105,99,124,125,230,237,6,232,254],[48,0,253,138,140,76,9,23,213,101,119,164,221,100,233,145,127,229,205,133,107,15,2,143,69,38,62,33,112,242,243,76],[19,200,60,7,224,158,190,84,98,162,176,255,73,80,247,224,79,220,1,228,102,196,240,68,69,247,163,125,249,139,193,60],[204,99,238,112,120,40,88,38,40,181,69,224,226,54,87,60,170,19,149,20,247,167,23,145,112,236,169,164,179,73,143,181],[215,68,9,33,248,46,135,250,63,203,236,250,97,207,26,223,147,172,240,235,119,187,62,9,217,201,96,44,88,183,59,251]]",
              "sol": "[bytes(abi.encode(\"45,142,115,89,204,6,25,2,55,18,53,127,226,44,24,111,70,93,80,83,59,63,158,35,126,63,72,74,193,166,67,37\")),bytes(abi.encode(\"121,177,203,68,42,184,217,99,83,65,131,160,212,183,143,91,250,250,4,247,121,145,212,19,194,5,182,149,221,115,19,210\")),bytes(abi.encode(\"120,199,56,226,113,161,190,218,159,6,223,14,185,85,42,208,191,69,244,231,38,253,20,195,57,23,245,91,165,95,79,183\")),bytes(abi.encode(\"100,106,250,69,89,154,75,240,67,202,88,66,58,129,188,206,78,137,173,142,253,50,98,105,99,124,125,230,237,6,232,254\")),bytes(abi.encode(\"48,0,253,138,140,76,9,23,213,101,119,164,221,100,233,145,127,229,205,133,107,15,2,143,69,38,62,33,112,242,243,76\")),bytes(abi.encode(\"19,200,60,7,224,158,190,84,98,162,176,255,73,80,247,224,79,220,1,228,102,196,240,68,69,247,163,125,249,139,193,60\")),bytes(abi.encode(\"204,99,238,112,120,40,88,38,40,181,69,224,226,54,87,60,170,19,149,20,247,167,23,145,112,236,169,164,179,73,143,181\")),bytes(abi.encode(\"215,68,9,33,248,46,135,250,63,203,236,250,97,207,26,223,147,172,240,235,119,187,62,9,217,201,96,44,88,183,59,251\"))]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.487ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"hydw1r\"",
              "sol": "\"hydw1r\""
            },
            {
              "js": "[[226,169,75,239,151,235,4,98,178,106,217,124,93,125,12,75,178,153,145,39,198,183,240,3,148,2,160,135,229,239,122,173]]",
              "sol": "[bytes(abi.encode(\"226,169,75,239,151,235,4,98,178,106,217,124,93,125,12,75,178,153,145,39,198,183,240,3,148,2,160,135,229,239,122,173\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.488ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "[[27,88,189,129,247,250,156,124,24,80,35,182,138,109,120,232,98,125,130,168,109,92,46,27,99,39,74,123,103,129,215,110]]",
              "sol": "[bytes(abi.encode(\"27,88,189,129,247,250,156,124,24,80,35,182,138,109,120,232,98,125,130,168,109,92,46,27,99,39,74,123,103,129,215,110\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.489ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"an4z0d\"",
              "sol": "\"an4z0d\""
            },
            {
              "js": "[[74,170,66,175,34,171,94,137,60,119,202,3,161,197,113,169,202,94,144,225,5,198,22,224,219,174,187,94,4,56,199,148]]",
              "sol": "[bytes(abi.encode(\"74,170,66,175,34,171,94,137,60,119,202,3,161,197,113,169,202,94,144,225,5,198,22,224,219,174,187,94,4,56,199,148\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.489ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[222,19,213,8,211,237,118,76,137,106,210,212,211,217,35,164,13,174,139,128,42,7,128,12,84,155,152,66,28,19,150,72]]",
              "sol": "[bytes(abi.encode(\"222,19,213,8,211,237,118,76,137,106,210,212,211,217,35,164,13,174,139,128,42,7,128,12,84,155,152,66,28,19,150,72\"))]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.490ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[3,117,216,62,81,220,221,85,226,204,106,237,235,66,48,223,102,2,33,96,177,144,168,207,83,69,95,103,195,36,251,244],[157,55,95,204,214,203,156,16,141,242,250,33,82,188,63,175,87,152,217,163,221,254,228,253,166,246,189,184,136,164,143,67]]",
              "sol": "[bytes(abi.encode(\"3,117,216,62,81,220,221,85,226,204,106,237,235,66,48,223,102,2,33,96,177,144,168,207,83,69,95,103,195,36,251,244\")),bytes(abi.encode(\"157,55,95,204,214,203,156,16,141,242,250,33,82,188,63,175,87,152,217,163,221,254,228,253,166,246,189,184,136,164,143,67\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.491ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"wunls\"",
              "sol": "\"wunls\""
            },
            {
              "js": "[[121,83,21,71,89,184,8,205,133,36,221,250,239,2,104,24,190,133,227,131,125,24,239,57,242,15,60,62,97,122,101,185],[60,56,148,170,68,78,236,177,20,0,152,43,87,106,2,24,96,112,11,38,74,137,161,245,16,56,73,136,38,28,113,60]]",
              "sol": "[bytes(abi.encode(\"121,83,21,71,89,184,8,205,133,36,221,250,239,2,104,24,190,133,227,131,125,24,239,57,242,15,60,62,97,122,101,185\")),bytes(abi.encode(\"60,56,148,170,68,78,236,177,20,0,152,43,87,106,2,24,96,112,11,38,74,137,161,245,16,56,73,136,38,28,113,60\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.491ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"pcikeh\"",
              "sol": "\"pcikeh\""
            },
            {
              "js": "[[243,84,19,110,5,189,196,8,70,172,101,83,68,45,245,189,109,229,245,137,208,147,198,50,18,71,77,19,208,109,192,154],[209,220,4,95,54,12,94,167,138,89,59,240,143,7,39,63,238,59,66,153,74,173,52,238,255,26,109,171,29,117,196,121]]",
              "sol": "[bytes(abi.encode(\"243,84,19,110,5,189,196,8,70,172,101,83,68,45,245,189,109,229,245,137,208,147,198,50,18,71,77,19,208,109,192,154\")),bytes(abi.encode(\"209,220,4,95,54,12,94,167,138,89,59,240,143,7,39,63,238,59,66,153,74,173,52,238,255,26,109,171,29,117,196,121\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.492ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[133,212,160,24,232,183,202,90,223,20,193,159,160,38,88,235,252,111,157,205,182,175,195,143,132,184,194,183,199,232,228,235],[143,181,69,18,107,160,9,111,126,77,235,62,243,213,176,205,147,90,121,76,55,252,217,101,250,241,44,253,40,73,117,157]]",
              "sol": "[bytes(abi.encode(\"133,212,160,24,232,183,202,90,223,20,193,159,160,38,88,235,252,111,157,205,182,175,195,143,132,184,194,183,199,232,228,235\")),bytes(abi.encode(\"143,181,69,18,107,160,9,111,126,77,235,62,243,213,176,205,147,90,121,76,55,252,217,101,250,241,44,253,40,73,117,157\"))]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.494ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[127,39,102,144,219,142,209,102,15,219,125,5,211,17,216,217,47,27,137,46,25,9,18,141,213,128,77,200,183,211,126,197],[153,130,44,81,20,203,151,143,232,124,248,104,178,197,82,134,238,106,240,22,248,129,7,235,146,199,146,215,255,166,167,175],[238,228,145,19,82,46,117,149,8,25,21,222,218,145,93,176,97,144,44,136,27,63,7,190,162,171,53,164,13,139,95,235]]",
              "sol": "[bytes(abi.encode(\"127,39,102,144,219,142,209,102,15,219,125,5,211,17,216,217,47,27,137,46,25,9,18,141,213,128,77,200,183,211,126,197\")),bytes(abi.encode(\"153,130,44,81,20,203,151,143,232,124,248,104,178,197,82,134,238,106,240,22,248,129,7,235,146,199,146,215,255,166,167,175\")),bytes(abi.encode(\"238,228,145,19,82,46,117,149,8,25,21,222,218,145,93,176,97,144,44,136,27,63,7,190,162,171,53,164,13,139,95,235\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.494ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[31,203,247,233,241,70,196,173,191,68,181,125,248,171,45,68,161,252,96,65,69,10,157,132,33,98,146,201,192,218,198,111],[181,230,30,3,235,101,253,187,176,135,69,189,48,127,20,48,14,170,49,212,6,71,44,147,62,247,176,30,173,73,148,101],[119,90,75,249,20,83,88,172,139,145,127,172,74,9,225,2,122,129,136,146,43,190,184,190,201,40,202,34,214,231,187,39]]",
              "sol": "[bytes(abi.encode(\"31,203,247,233,241,70,196,173,191,68,181,125,248,171,45,68,161,252,96,65,69,10,157,132,33,98,146,201,192,218,198,111\")),bytes(abi.encode(\"181,230,30,3,235,101,253,187,176,135,69,189,48,127,20,48,14,170,49,212,6,71,44,147,62,247,176,30,173,73,148,101\")),bytes(abi.encode(\"119,90,75,249,20,83,88,172,139,145,127,172,74,9,225,2,122,129,136,146,43,190,184,190,201,40,202,34,214,231,187,39\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.495ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "[[47,37,181,186,91,205,86,122,188,32,153,224,228,25,48,237,27,126,238,90,201,201,166,45,242,136,75,216,49,2,224,16],[96,204,172,171,25,202,247,4,170,47,239,205,220,143,123,208,234,214,119,220,2,195,102,82,63,172,165,124,124,106,92,228],[41,201,141,242,103,25,197,150,182,200,85,110,66,5,57,160,63,164,74,201,230,131,90,158,176,202,138,41,3,225,11,121]]",
              "sol": "[bytes(abi.encode(\"47,37,181,186,91,205,86,122,188,32,153,224,228,25,48,237,27,126,238,90,201,201,166,45,242,136,75,216,49,2,224,16\")),bytes(abi.encode(\"96,204,172,171,25,202,247,4,170,47,239,205,220,143,123,208,234,214,119,220,2,195,102,82,63,172,165,124,124,106,92,228\")),bytes(abi.encode(\"41,201,141,242,103,25,197,150,182,200,85,110,66,5,57,160,63,164,74,201,230,131,90,158,176,202,138,41,3,225,11,121\"))]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.495ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"wunls\"",
              "sol": "\"wunls\""
            },
            {
              "js": "[[148,48,162,115,40,93,167,159,21,151,160,234,219,176,61,10,153,138,140,167,250,229,179,33,145,101,28,111,125,195,193,154],[86,43,93,207,58,42,64,206,161,163,176,94,195,58,109,128,90,238,21,165,94,130,114,114,124,141,120,173,108,33,227,135],[34,103,164,99,26,170,34,61,156,162,121,145,74,234,13,222,156,175,89,142,230,16,136,173,180,197,42,29,172,223,90,110]]",
              "sol": "[bytes(abi.encode(\"148,48,162,115,40,93,167,159,21,151,160,234,219,176,61,10,153,138,140,167,250,229,179,33,145,101,28,111,125,195,193,154\")),bytes(abi.encode(\"86,43,93,207,58,42,64,206,161,163,176,94,195,58,109,128,90,238,21,165,94,130,114,114,124,141,120,173,108,33,227,135\")),bytes(abi.encode(\"34,103,164,99,26,170,34,61,156,162,121,145,74,234,13,222,156,175,89,142,230,16,136,173,180,197,42,29,172,223,90,110\"))]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.496ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[155,124,174,123,152,74,53,101,46,246,81,147,231,115,218,83,143,29,188,166,31,252,81,227,106,176,165,207,30,111,50,108],[250,34,252,46,107,60,248,213,225,246,255,162,99,163,20,240,137,109,188,194,214,199,175,188,108,52,103,98,174,23,30,26],[143,229,242,3,243,123,79,110,174,7,20,181,54,244,50,140,236,142,18,107,210,102,217,16,106,153,218,83,64,222,255,180],[164,167,208,52,169,23,49,205,127,11,135,204,129,238,220,125,235,121,31,228,194,35,152,136,25,71,125,143,115,11,196,47]]",
              "sol": "[bytes(abi.encode(\"155,124,174,123,152,74,53,101,46,246,81,147,231,115,218,83,143,29,188,166,31,252,81,227,106,176,165,207,30,111,50,108\")),bytes(abi.encode(\"250,34,252,46,107,60,248,213,225,246,255,162,99,163,20,240,137,109,188,194,214,199,175,188,108,52,103,98,174,23,30,26\")),bytes(abi.encode(\"143,229,242,3,243,123,79,110,174,7,20,181,54,244,50,140,236,142,18,107,210,102,217,16,106,153,218,83,64,222,255,180\")),bytes(abi.encode(\"164,167,208,52,169,23,49,205,127,11,135,204,129,238,220,125,235,121,31,228,194,35,152,136,25,71,125,143,115,11,196,47\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.497ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"erbjq\"",
              "sol": "\"erbjq\""
            },
            {
              "js": "[[248,47,228,188,200,235,74,111,194,111,55,146,16,34,32,70,251,132,247,224,160,82,35,168,246,16,202,22,221,230,99,63],[124,66,36,130,141,193,170,64,243,2,67,104,192,122,22,121,140,225,33,86,163,175,35,69,14,168,44,43,174,122,106,100],[143,15,233,210,210,128,248,20,248,80,128,5,28,194,242,231,104,218,225,22,40,254,245,187,178,11,14,69,160,78,239,125],[228,156,135,250,21,157,251,222,77,87,70,90,83,192,136,152,212,35,195,46,151,159,182,1,100,118,99,20,27,93,69,167]]",
              "sol": "[bytes(abi.encode(\"248,47,228,188,200,235,74,111,194,111,55,146,16,34,32,70,251,132,247,224,160,82,35,168,246,16,202,22,221,230,99,63\")),bytes(abi.encode(\"124,66,36,130,141,193,170,64,243,2,67,104,192,122,22,121,140,225,33,86,163,175,35,69,14,168,44,43,174,122,106,100\")),bytes(abi.encode(\"143,15,233,210,210,128,248,20,248,80,128,5,28,194,242,231,104,218,225,22,40,254,245,187,178,11,14,69,160,78,239,125\")),bytes(abi.encode(\"228,156,135,250,21,157,251,222,77,87,70,90,83,192,136,152,212,35,195,46,151,159,182,1,100,118,99,20,27,93,69,167\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.497ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"erbjq\"",
              "sol": "\"erbjq\""
            },
            {
              "js": "[[228,39,68,111,112,138,48,199,221,107,69,139,128,143,6,24,97,182,205,36,68,23,131,198,208,212,151,79,156,240,71,12],[102,141,4,0,77,67,217,130,78,128,52,22,241,10,201,29,7,187,180,190,230,100,35,153,251,170,167,247,148,68,159,218],[111,9,103,95,34,46,138,42,72,119,67,162,106,79,59,71,216,170,106,155,36,141,141,108,25,110,129,173,2,125,146,12],[57,228,232,125,194,59,104,228,54,58,25,8,192,174,118,227,205,251,53,200,209,38,134,78,23,23,63,166,102,84,116,47]]",
              "sol": "[bytes(abi.encode(\"228,39,68,111,112,138,48,199,221,107,69,139,128,143,6,24,97,182,205,36,68,23,131,198,208,212,151,79,156,240,71,12\")),bytes(abi.encode(\"102,141,4,0,77,67,217,130,78,128,52,22,241,10,201,29,7,187,180,190,230,100,35,153,251,170,167,247,148,68,159,218\")),bytes(abi.encode(\"111,9,103,95,34,46,138,42,72,119,67,162,106,79,59,71,216,170,106,155,36,141,141,108,25,110,129,173,2,125,146,12\")),bytes(abi.encode(\"57,228,232,125,194,59,104,228,54,58,25,8,192,174,118,227,205,251,53,200,209,38,134,78,23,23,63,166,102,84,116,47\"))]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.498ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[95,183,183,64,70,44,78,212,160,161,26,53,181,91,157,63,56,205,13,96,248,188,58,241,78,65,196,170,166,199,252,215],[181,85,86,170,6,79,124,70,179,176,18,120,2,230,215,163,250,121,138,129,24,84,183,126,76,244,235,95,76,85,220,217],[48,163,124,47,109,38,36,153,66,31,239,45,25,143,58,112,75,249,4,157,223,28,161,156,0,53,167,147,61,225,117,206],[184,252,240,246,139,59,218,221,1,23,93,167,249,226,108,179,92,129,111,93,125,31,135,168,70,11,164,149,187,44,17,74]]",
              "sol": "[bytes(abi.encode(\"95,183,183,64,70,44,78,212,160,161,26,53,181,91,157,63,56,205,13,96,248,188,58,241,78,65,196,170,166,199,252,215\")),bytes(abi.encode(\"181,85,86,170,6,79,124,70,179,176,18,120,2,230,215,163,250,121,138,129,24,84,183,126,76,244,235,95,76,85,220,217\")),bytes(abi.encode(\"48,163,124,47,109,38,36,153,66,31,239,45,25,143,58,112,75,249,4,157,223,28,161,156,0,53,167,147,61,225,117,206\")),bytes(abi.encode(\"184,252,240,246,139,59,218,221,1,23,93,167,249,226,108,179,92,129,111,93,125,31,135,168,70,11,164,149,187,44,17,74\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.498ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"coanwp\"",
              "sol": "\"coanwp\""
            },
            {
              "js": "[[32,214,91,247,25,23,44,27,36,213,166,29,108,150,202,136,246,114,113,223,227,102,98,180,65,94,119,200,250,113,40,129],[74,165,152,176,104,29,57,111,126,207,102,147,132,162,253,134,158,9,61,99,192,223,73,146,97,193,121,252,216,120,63,129],[123,99,34,62,158,81,203,93,45,46,4,160,15,183,103,128,162,106,103,201,28,56,85,79,203,102,249,174,57,176,88,129],[71,194,212,65,88,84,156,250,17,236,120,209,144,95,200,53,38,10,110,61,40,12,178,120,125,228,211,157,56,120,59,169],[140,49,157,47,247,42,128,129,243,156,22,79,137,243,18,204,60,90,227,227,85,109,189,198,244,149,34,208,42,1,4,233]]",
              "sol": "[bytes(abi.encode(\"32,214,91,247,25,23,44,27,36,213,166,29,108,150,202,136,246,114,113,223,227,102,98,180,65,94,119,200,250,113,40,129\")),bytes(abi.encode(\"74,165,152,176,104,29,57,111,126,207,102,147,132,162,253,134,158,9,61,99,192,223,73,146,97,193,121,252,216,120,63,129\")),bytes(abi.encode(\"123,99,34,62,158,81,203,93,45,46,4,160,15,183,103,128,162,106,103,201,28,56,85,79,203,102,249,174,57,176,88,129\")),bytes(abi.encode(\"71,194,212,65,88,84,156,250,17,236,120,209,144,95,200,53,38,10,110,61,40,12,178,120,125,228,211,157,56,120,59,169\")),bytes(abi.encode(\"140,49,157,47,247,42,128,129,243,156,22,79,137,243,18,204,60,90,227,227,85,109,189,198,244,149,34,208,42,1,4,233\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.499ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"hydw1r\"",
              "sol": "\"hydw1r\""
            },
            {
              "js": "[[48,86,53,225,197,39,167,178,73,60,219,5,59,250,163,143,115,184,251,151,166,119,215,81,250,245,113,148,0,179,14,166],[212,173,151,140,34,181,64,191,179,203,11,200,213,247,9,190,32,228,18,224,161,6,219,206,182,103,158,31,13,245,186,60],[4,245,147,17,53,119,187,117,14,221,80,44,53,31,94,253,22,209,230,166,206,58,123,13,119,189,14,174,106,201,20,221],[83,197,133,209,177,159,136,197,153,72,112,0,100,75,147,212,206,182,226,8,4,91,179,176,102,137,116,150,73,51,15,146],[240,115,176,72,9,114,231,98,190,148,182,87,2,60,207,54,178,108,106,191,229,100,36,211,14,223,217,231,204,228,223,61]]",
              "sol": "[bytes(abi.encode(\"48,86,53,225,197,39,167,178,73,60,219,5,59,250,163,143,115,184,251,151,166,119,215,81,250,245,113,148,0,179,14,166\")),bytes(abi.encode(\"212,173,151,140,34,181,64,191,179,203,11,200,213,247,9,190,32,228,18,224,161,6,219,206,182,103,158,31,13,245,186,60\")),bytes(abi.encode(\"4,245,147,17,53,119,187,117,14,221,80,44,53,31,94,253,22,209,230,166,206,58,123,13,119,189,14,174,106,201,20,221\")),bytes(abi.encode(\"83,197,133,209,177,159,136,197,153,72,112,0,100,75,147,212,206,182,226,8,4,91,179,176,102,137,116,150,73,51,15,146\")),bytes(abi.encode(\"240,115,176,72,9,114,231,98,190,148,182,87,2,60,207,54,178,108,106,191,229,100,36,211,14,223,217,231,204,228,223,61\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.500ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"0ujr6e\"",
              "sol": "\"0ujr6e\""
            },
            {
              "js": "[[69,26,25,174,184,113,152,168,41,179,131,224,110,189,17,41,36,70,122,57,171,32,145,207,88,94,20,80,121,90,140,106],[162,246,75,137,184,151,195,98,71,230,214,254,189,112,240,46,239,87,122,84,153,79,244,234,236,239,87,212,89,198,222,200],[69,159,129,79,119,58,21,245,173,30,123,52,247,82,113,119,180,124,158,184,85,72,152,221,250,182,97,101,139,152,176,22],[182,180,34,210,253,105,142,196,245,86,39,182,43,106,6,70,121,245,163,106,74,195,124,20,97,230,24,90,112,30,165,161],[186,3,147,182,233,222,43,169,41,165,48,18,193,136,120,30,120,173,65,24,132,11,222,236,101,150,123,67,36,224,64,197]]",
              "sol": "[bytes(abi.encode(\"69,26,25,174,184,113,152,168,41,179,131,224,110,189,17,41,36,70,122,57,171,32,145,207,88,94,20,80,121,90,140,106\")),bytes(abi.encode(\"162,246,75,137,184,151,195,98,71,230,214,254,189,112,240,46,239,87,122,84,153,79,244,234,236,239,87,212,89,198,222,200\")),bytes(abi.encode(\"69,159,129,79,119,58,21,245,173,30,123,52,247,82,113,119,180,124,158,184,85,72,152,221,250,182,97,101,139,152,176,22\")),bytes(abi.encode(\"182,180,34,210,253,105,142,196,245,86,39,182,43,106,6,70,121,245,163,106,74,195,124,20,97,230,24,90,112,30,165,161\")),bytes(abi.encode(\"186,3,147,182,233,222,43,169,41,165,48,18,193,136,120,30,120,173,65,24,132,11,222,236,101,150,123,67,36,224,64,197\"))]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.500ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"erbjq\"",
              "sol": "\"erbjq\""
            },
            {
              "js": "[[226,116,21,178,141,104,20,155,161,135,23,50,149,239,37,160,197,48,46,201,110,129,65,3,4,34,181,7,158,138,53,71],[1,51,253,136,179,213,210,1,113,7,182,148,95,21,221,30,83,247,50,232,136,107,174,26,234,190,233,226,62,176,25,14],[94,71,57,28,236,221,37,135,194,142,26,130,31,230,115,30,33,39,3,40,33,12,209,144,6,224,37,169,206,29,194,8],[106,19,183,219,11,101,64,66,40,87,10,245,62,70,107,78,118,131,91,21,149,229,111,176,8,96,151,217,243,64,242,122],[121,82,245,164,112,240,90,239,109,112,149,104,224,102,179,12,18,140,45,225,157,200,172,58,122,10,244,226,109,129,93,69]]",
              "sol": "[bytes(abi.encode(\"226,116,21,178,141,104,20,155,161,135,23,50,149,239,37,160,197,48,46,201,110,129,65,3,4,34,181,7,158,138,53,71\")),bytes(abi.encode(\"1,51,253,136,179,213,210,1,113,7,182,148,95,21,221,30,83,247,50,232,136,107,174,26,234,190,233,226,62,176,25,14\")),bytes(abi.encode(\"94,71,57,28,236,221,37,135,194,142,26,130,31,230,115,30,33,39,3,40,33,12,209,144,6,224,37,169,206,29,194,8\")),bytes(abi.encode(\"106,19,183,219,11,101,64,66,40,87,10,245,62,70,107,78,118,131,91,21,149,229,111,176,8,96,151,217,243,64,242,122\")),bytes(abi.encode(\"121,82,245,164,112,240,90,239,109,112,149,104,224,102,179,12,18,140,45,225,157,200,172,58,122,10,244,226,109,129,93,69\"))]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.501ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[202]",
              "sol": "bytes1(\"202\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.501ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.501ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.502ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.502ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.503ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.503ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"9mi4ep\"",
              "sol": "\"9mi4ep\""
            },
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.504ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.504ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"0ujr6e\"",
              "sol": "\"0ujr6e\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.504ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"dn4xb\"",
              "sol": "\"dn4xb\""
            },
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "\"an4z0d\"",
              "sol": "\"an4z0d\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.505ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.505ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"sgf9vh\"",
              "sol": "\"sgf9vh\""
            },
            {
              "js": "\"an4z0d\"",
              "sol": "\"an4z0d\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.505ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"erbjq\"",
              "sol": "\"erbjq\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.506ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"hkfeq1\"",
              "sol": "\"hkfeq1\""
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.507ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.507ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"fg98bm\"",
              "sol": "\"fg98bm\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.508ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.509ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"Capstones\",\"coanwp\",\"0ujr6e\",\"r6stb\",\"0\",\"q3uec8\",\"L\",\"an4z0d\"]",
              "sol": "[string(\"Capstones\"),string(\"coanwp\"),string(\"0ujr6e\"),string(\"r6stb\"),string(\"0\"),string(\"q3uec8\"),string(\"L\"),string(\"an4z0d\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.510ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[206,218,135,244,143,150,52,167,142,203,28,130,139,10,58,177,7,89,189,214,45,201,241,55,91,20,107,172,231,85,71,205],[151,145,47,237,8,24,36,115,131,190,63,1,51,216,47,69,10,22,141,209,138,249,224,26,187,76,170,56,219,47,170,228],[64,46,177,232,134,235,211,31,254,114,253,157,89,87,12,31,233,115,195,133,248,105,199,13,188,227,89,39,84,232,150,36],[187,83,164,222,202,241,239,83,73,105,177,47,214,176,44,91,46,187,40,78,149,193,249,176,97,235,229,192,72,46,170,130],[58,193,13,125,147,205,239,233,7,173,28,202,16,143,244,37,213,32,117,27,177,133,27,252,56,163,96,171,83,54,144,133],[139,236,40,100,177,252,177,107,17,227,69,169,113,72,32,207,103,17,203,2,186,25,179,112,243,220,41,246,82,161,78,221],[69,24,86,62,110,25,58,64,40,118,255,72,130,196,211,101,233,64,173,62,75,251,244,14,106,81,118,94,99,176,137,17],[104,240,185,19,230,102,9,39,209,99,236,124,182,111,98,207,153,153,1,14,153,201,134,84,168,177,242,248,196,101,147,59]]",
              "sol": "[bytes(abi.encode(\"206,218,135,244,143,150,52,167,142,203,28,130,139,10,58,177,7,89,189,214,45,201,241,55,91,20,107,172,231,85,71,205\")),bytes(abi.encode(\"151,145,47,237,8,24,36,115,131,190,63,1,51,216,47,69,10,22,141,209,138,249,224,26,187,76,170,56,219,47,170,228\")),bytes(abi.encode(\"64,46,177,232,134,235,211,31,254,114,253,157,89,87,12,31,233,115,195,133,248,105,199,13,188,227,89,39,84,232,150,36\")),bytes(abi.encode(\"187,83,164,222,202,241,239,83,73,105,177,47,214,176,44,91,46,187,40,78,149,193,249,176,97,235,229,192,72,46,170,130\")),bytes(abi.encode(\"58,193,13,125,147,205,239,233,7,173,28,202,16,143,244,37,213,32,117,27,177,133,27,252,56,163,96,171,83,54,144,133\")),bytes(abi.encode(\"139,236,40,100,177,252,177,107,17,227,69,169,113,72,32,207,103,17,203,2,186,25,179,112,243,220,41,246,82,161,78,221\")),bytes(abi.encode(\"69,24,86,62,110,25,58,64,40,118,255,72,130,196,211,101,233,64,173,62,75,251,244,14,106,81,118,94,99,176,137,17\")),bytes(abi.encode(\"104,240,185,19,230,102,9,39,209,99,236,124,182,111,98,207,153,153,1,14,153,201,134,84,168,177,242,248,196,101,147,59\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.510ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.511ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[159,76,16,74,212,182,116,160,238,67,245,96,198,122,205,55,156,123,211,81,248,92,91,107,203,185,100,164,115,225,148,188]",
              "sol": "stringToBytes32(\"159,76,16,74,212,182,116,160,238,67,245,96,198,122,205,55,156,123,211,81,248,92,91,107,203,185,100,164,115,225,148,188\")"
            },
            {
              "js": "[55,109,76,197,161,70,221,10,193,196,4,136,119,12,54,167,219,45,235,40,214,17,196,177,67,41,67,255,252,33,22,19]",
              "sol": "stringToBytes32(\"55,109,76,197,161,70,221,10,193,196,4,136,119,12,54,167,219,45,235,40,214,17,196,177,67,41,67,255,252,33,22,19\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.511ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[140,33,202,91,10,153,156,180,215,74,199,81,77,227,100,74,243,11,61,50,42,212,7,65,160,197,177,237,137,218,59,225]",
              "sol": "stringToBytes32(\"140,33,202,91,10,153,156,180,215,74,199,81,77,227,100,74,243,11,61,50,42,212,7,65,160,197,177,237,137,218,59,225\")"
            },
            {
              "js": "[115,172,101,143,250,154,238,190,216,140,37,115,64,31,25,39,224,188,111,14,150,210,179,18,77,34,196,111,142,40,76,184]",
              "sol": "abi.encode(\"115,172,101,143,250,154,238,190,216,140,37,115,64,31,25,39,224,188,111,14,150,210,179,18,77,34,196,111,142,40,76,184\")"
            },
            {
              "js": "[67,121,145,22,116,205,140,250,234,60,143,13,225,35,196,29,40,217,44,244,240,99,172,105,74,57,162,79,82,95,87,79]",
              "sol": "abi.encode(\"67,121,145,22,116,205,140,250,234,60,143,13,225,35,196,29,40,217,44,244,240,99,172,105,74,57,162,79,82,95,87,79\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.512ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[42,216,81,68,197,93,97,120,103,125,253,46,107,48,68,14,10,73,225,45,60,228,57,114,86,226,236,24,7,135,215,208]",
              "sol": "abi.encode(\"42,216,81,68,197,93,97,120,103,125,253,46,107,48,68,14,10,73,225,45,60,228,57,114,86,226,236,24,7,135,215,208\")"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[213,118,247,191,213,181,183,30,203,178,190,91,144,169,205,81,225,13,13,229,158,88,244,241,129,174,60,44,120,58,159,147]",
              "sol": "abi.encode(\"213,118,247,191,213,181,183,30,203,178,190,91,144,169,205,81,225,13,13,229,158,88,244,241,129,174,60,44,120,58,159,147\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.513ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[32,172,161,84,210,162,188,62,2,52,137,5,106,30,142,174,23,236,17,179,75,95,226,198,216,247,41,204,250,65,207,242]",
              "sol": "stringToBytes32(\"32,172,161,84,210,162,188,62,2,52,137,5,106,30,142,174,23,236,17,179,75,95,226,198,216,247,41,204,250,65,207,242\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[189,19,98,10,139,151,64,109,246,180,31,148,99,6,243,2,55,104,206,162,51,77,153,122,244,11,60,90,112,154,211,192]",
              "sol": "abi.encode(\"189,19,98,10,139,151,64,109,246,180,31,148,99,6,243,2,55,104,206,162,51,77,153,122,244,11,60,90,112,154,211,192\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[153,51,175,11,3,140,139,113,203,64,92,26,240,55,246,76,87,119,142,244,44,209,123,195,50,232,168,200,131,23,164,42]",
              "sol": "stringToBytes32(\"153,51,175,11,3,140,139,113,203,64,92,26,240,55,246,76,87,119,142,244,44,209,123,195,50,232,168,200,131,23,164,42\")"
            },
            {
              "js": "\"hydw1r\"",
              "sol": "\"hydw1r\""
            },
            {
              "js": "[151,195,180,3,51,112,15,51,175,47,132,128,48,145,237,28,50,38,156,103,193,61,58,152,247,244,181,210,151,226,178,142]",
              "sol": "abi.encode(\"151,195,180,3,51,112,15,51,175,47,132,128,48,145,237,28,50,38,156,103,193,61,58,152,247,244,181,210,151,226,178,142\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.514ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[87,137,11,180,243,34,156,132,1,107,191,72,172,93,175,126,203,27,224,34,212,251,73,226,161,64,18,223,246,4,205,161]",
              "sol": "stringToBytes32(\"87,137,11,180,243,34,156,132,1,107,191,72,172,93,175,126,203,27,224,34,212,251,73,226,161,64,18,223,246,4,205,161\")"
            },
            {
              "js": "[93,82,95,84,149,1,234,127,159,96,126,147,154,10,101,236,115,175,115,10,184,89,103,123,177,38,139,57,5,129,13,72]",
              "sol": "abi.encode(\"93,82,95,84,149,1,234,127,159,96,126,147,154,10,101,236,115,175,115,10,184,89,103,123,177,38,139,57,5,129,13,72\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[87,137,11,180,243,34,156,132,1,107,191,72,172,93,175,126,203,27,224,34,212,251,73,226,161,64,18,223,246,4,205,161]",
                "sol": "stringToBytes32(\"87,137,11,180,243,34,156,132,1,107,191,72,172,93,175,126,203,27,224,34,212,251,73,226,161,64,18,223,246,4,205,161\")"
              },
              {
                "js": "[246,38,9,175,178,176,249,191,54,56,13,139,52,83,86,3,226,24,17,74,153,211,106,177,165,244,218,100,9,162,152,37,136]",
                "sol": "bytes33(\"246,38,9,175,178,176,249,191,54,56,13,139,52,83,86,3,226,24,17,74,153,211,106,177,165,244,218,100,9,162,152,37,136\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.515ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[141,115,20,194,52,228,217,212,196,194,32,147,192,103,118,227,127,232,141,13,206,157,68,192,114,61,110,64,95,233,19,247]",
              "sol": "abi.encode(\"141,115,20,194,52,228,217,212,196,194,32,147,192,103,118,227,127,232,141,13,206,157,68,192,114,61,110,64,95,233,19,247\")"
            },
            {
              "js": "[224,119,210,84,204,45,113,151,40,37,189,109,33,5,0,245,233,14,25,246,212,122,61,243,224,177,231,188,131,45,90,228]",
              "sol": "stringToBytes32(\"224,119,210,84,204,45,113,151,40,37,189,109,33,5,0,245,233,14,25,246,212,122,61,243,224,177,231,188,131,45,90,228\")"
            },
            {
              "js": "[72,98,35,62,171,229,61,103,69,254,21,123,218,118,92,100,89,103,20,38,110,105,218,96,100,240,58,55,7,138,93,144]",
              "sol": "abi.encode(\"72,98,35,62,171,229,61,103,69,254,21,123,218,118,92,100,89,103,20,38,110,105,218,96,100,240,58,55,7,138,93,144\")"
            },
            {
              "js": "\"r6stb\"",
              "sol": "\"r6stb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[119,77,1,14,74,233,57,186,212,56,35,106,13,133,64,235,164,57,121,236,18,227,23,78,37,102,30,240,71,143,131,136]",
              "sol": "abi.encode(\"119,77,1,14,74,233,57,186,212,56,35,106,13,133,64,235,164,57,121,236,18,227,23,78,37,102,30,240,71,143,131,136\")"
            },
            {
              "js": "[54,202,45,184,212,200,154,215,48,117,155,19,22,151,141,197,14,85,74,19,9,113,217,40,250,96,218,18,9,60,173,171]",
              "sol": "stringToBytes32(\"54,202,45,184,212,200,154,215,48,117,155,19,22,151,141,197,14,85,74,19,9,113,217,40,250,96,218,18,9,60,173,171\")"
            },
            {
              "js": "[250,38,228,25,3,145,22,251,26,229,24,25,27,110,81,199,9,213,203,192,22,73,154,116,160,121,165,73,208,112,202,11]",
              "sol": "abi.encode(\"250,38,228,25,3,145,22,251,26,229,24,25,27,110,81,199,9,213,203,192,22,73,154,116,160,121,165,73,208,112,202,11\")"
            },
            {
              "js": "\"hkfeq1\"",
              "sol": "\"hkfeq1\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[139,239,123,159,56,141,80,94,252,232,165,62,55,143,212,18,160,119,143,250,124,197,137,236,109,107,205,84,55,18,120,86]",
              "sol": "abi.encode(\"139,239,123,159,56,141,80,94,252,232,165,62,55,143,212,18,160,119,143,250,124,197,137,236,109,107,205,84,55,18,120,86\")"
            },
            {
              "js": "[91,11,138,60,19,222,130,198,194,147,184,105,234,70,202,46,211,96,136,32,78,27,252,176,145,24,170,224,194,71,224,164]",
              "sol": "stringToBytes32(\"91,11,138,60,19,222,130,198,194,147,184,105,234,70,202,46,211,96,136,32,78,27,252,176,145,24,170,224,194,71,224,164\")"
            },
            {
              "js": "[106,43,79,123,80,249,242,192,245,21,102,161,65,241,13,236,61,67,66,130,59,148,92,127,229,158,20,164,189,59,130,112]",
              "sol": "abi.encode(\"106,43,79,123,80,249,242,192,245,21,102,161,65,241,13,236,61,67,66,130,59,148,92,127,229,158,20,164,189,59,130,112\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[50,187,189,245,32,84,189,243,153,167,109,191,73,225,48,44,186,98,56,139,145,21,186,245,22,92,132,113,1,115,210,171]",
              "sol": "abi.encode(\"50,187,189,245,32,84,189,243,153,167,109,191,73,225,48,44,186,98,56,139,145,21,186,245,22,92,132,113,1,115,210,171\")"
            },
            {
              "js": "[71,57,237,196,139,70,132,108,106,253,139,16,178,63,228,31,230,241,244,134,110,201,163,210,11,147,5,63,239,102,253,103]",
              "sol": "stringToBytes32(\"71,57,237,196,139,70,132,108,106,253,139,16,178,63,228,31,230,241,244,134,110,201,163,210,11,147,5,63,239,102,253,103\")"
            },
            {
              "js": "[152,193,209,160,163,235,11,229,158,144,159,133,62,30,109,237,213,237,138,69,18,119,122,30,60,157,139,11,83,28,173,130]",
              "sol": "abi.encode(\"152,193,209,160,163,235,11,229,158,144,159,133,62,30,109,237,213,237,138,69,18,119,122,30,60,157,139,11,83,28,173,130\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[72,195,237,63,87,196,35,5,243,193,60,163,150,235,1,205,104,180,206,184,164,23,131,5,215,34,202,33,75,108,177,80]",
              "sol": "abi.encode(\"72,195,237,63,87,196,35,5,243,193,60,163,150,235,1,205,104,180,206,184,164,23,131,5,215,34,202,33,75,108,177,80\")"
            },
            {
              "js": "[166,90,103,210,30,37,73,228,36,90,162,176,124,21,119,55,243,11,145,240,5,66,26,83,202,231,112,151,81,218,0,157]",
              "sol": "stringToBytes32(\"166,90,103,210,30,37,73,228,36,90,162,176,124,21,119,55,243,11,145,240,5,66,26,83,202,231,112,151,81,218,0,157\")"
            },
            {
              "js": "[76,91,254,212,114,2,26,174,191,149,18,124,196,242,27,111,35,140,220,125,101,106,6,46,146,14,159,138,151,5,71,77]",
              "sol": "abi.encode(\"76,91,254,212,114,2,26,174,191,149,18,124,196,242,27,111,35,140,220,125,101,106,6,46,146,14,159,138,151,5,71,77\")"
            },
            {
              "js": "\"8kic\"",
              "sol": "\"8kic\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[31,249,37,6,245,217,119,17,91,247,78,225,243,246,197,59,42,89,157,186,3,131,184,167,173,234,135,104,164,185,178,148]",
              "sol": "abi.encode(\"31,249,37,6,245,217,119,17,91,247,78,225,243,246,197,59,42,89,157,186,3,131,184,167,173,234,135,104,164,185,178,148\")"
            },
            {
              "js": "[247,138,35,72,37,241,176,146,155,69,121,139,123,149,164,125,205,183,65,189,115,17,101,223,67,150,121,84,86,127,227,107]",
              "sol": "stringToBytes32(\"247,138,35,72,37,241,176,146,155,69,121,139,123,149,164,125,205,183,65,189,115,17,101,223,67,150,121,84,86,127,227,107\")"
            },
            {
              "js": "[57,76,58,121,201,75,133,72,106,232,116,32,196,78,68,25,198,184,101,112,233,72,33,20,176,87,240,93,209,204,233,213]",
              "sol": "abi.encode(\"57,76,58,121,201,75,133,72,106,232,116,32,196,78,68,25,198,184,101,112,233,72,33,20,176,87,240,93,209,204,233,213\")"
            },
            {
              "js": "\"q3uec8\"",
              "sol": "\"q3uec8\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[193,31,1,40,254,143,29,97,181,19,207,42,224,159,50,200,214,42,13,149,142,53,192,99,69,190,137,74,114,138,80,89]",
              "sol": "abi.encode(\"193,31,1,40,254,143,29,97,181,19,207,42,224,159,50,200,214,42,13,149,142,53,192,99,69,190,137,74,114,138,80,89\")"
            },
            {
              "js": "[159,212,67,85,83,19,162,206,244,186,57,61,116,103,203,194,130,184,154,175,220,193,165,61,194,173,147,107,202,232,214,148]",
              "sol": "stringToBytes32(\"159,212,67,85,83,19,162,206,244,186,57,61,116,103,203,194,130,184,154,175,220,193,165,61,194,173,147,107,202,232,214,148\")"
            },
            {
              "js": "[186,214,246,22,10,224,139,202,60,5,134,145,195,155,154,160,21,79,70,51,241,119,101,164,147,172,77,147,59,229,41,212]",
              "sol": "abi.encode(\"186,214,246,22,10,224,139,202,60,5,134,145,195,155,154,160,21,79,70,51,241,119,101,164,147,172,77,147,59,229,41,212\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[254,137,93,41,197,197,246,59,84,75,147,116,236,5,129,81,76,126,242,32,39,145,203,151,117,215,62,0,67,38,171,144]",
              "sol": "abi.encode(\"254,137,93,41,197,197,246,59,84,75,147,116,236,5,129,81,76,126,242,32,39,145,203,151,117,215,62,0,67,38,171,144\")"
            },
            {
              "js": "[21,173,77,117,99,106,36,207,231,42,215,169,12,183,232,185,216,30,188,12,143,249,101,66,220,184,151,81,121,219,140,173]",
              "sol": "stringToBytes32(\"21,173,77,117,99,106,36,207,231,42,215,169,12,183,232,185,216,30,188,12,143,249,101,66,220,184,151,81,121,219,140,173\")"
            },
            {
              "js": "[49,117,31,140,62,79,239,15,123,40,174,83,222,246,156,177,115,82,184,133,178,18,118,99,248,0,103,80,194,0,253,171]",
              "sol": "abi.encode(\"49,117,31,140,62,79,239,15,123,40,174,83,222,246,156,177,115,82,184,133,178,18,118,99,248,0,103,80,194,0,253,171\")"
            },
            {
              "js": "\"7ipanr\"",
              "sol": "\"7ipanr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.520ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[130,200,38,189,50,220,60,133,148,61,6,31,25,83,70,78,251,227,147,62,41,84,122,172,67,150,134,162,13,94,60,121]",
              "sol": "abi.encode(\"130,200,38,189,50,220,60,133,148,61,6,31,25,83,70,78,251,227,147,62,41,84,122,172,67,150,134,162,13,94,60,121\")"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[88,58,7,97,189,24,223,7,132,75,105,180,240,105,17,220,40,230,92,233,114,57,8,83,184,111,218,200,86,172,138,226]",
              "sol": "abi.encode(\"88,58,7,97,189,24,223,7,132,75,105,180,240,105,17,220,40,230,92,233,114,57,8,83,184,111,218,200,86,172,138,226\")"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.521ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[72,166,229,229,251,178,61,105,224,204,48,141,127,228,133,55,177,144,87,28,164,149,125,3,226,232,128,35,130,235,68,90]",
              "sol": "stringToBytes32(\"72,166,229,229,251,178,61,105,224,204,48,141,127,228,133,55,177,144,87,28,164,149,125,3,226,232,128,35,130,235,68,90\")"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[223,172,189,156,120,209,162,179,73,116,18,107,239,189,1,84,132,82,83,215,158,56,12,207,154,110,178,163,212,149,144,249]",
              "sol": "stringToBytes32(\"223,172,189,156,120,209,162,179,73,116,18,107,239,189,1,84,132,82,83,215,158,56,12,207,154,110,178,163,212,149,144,249\")"
            },
            {
              "js": "[123,163,188,217,210,215,40,201,45,252,187,180,157,17,72,50,23,34,208,212,91,156,143,225,248,29,79,136,212,209,81,255]",
              "sol": "stringToBytes32(\"123,163,188,217,210,215,40,201,45,252,187,180,157,17,72,50,23,34,208,212,91,156,143,225,248,29,79,136,212,209,81,255\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.521ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[242,166,115,12,54,124,18,218,211,227,112,176,247,134,227,230,26,197,116,5,148,253,145,218,185,248,127,76,64,203,251,32]",
              "sol": "stringToBytes32(\"242,166,115,12,54,124,18,218,211,227,112,176,247,134,227,230,26,197,116,5,148,253,145,218,185,248,127,76,64,203,251,32\")"
            },
            {
              "js": "[73,178,139,194,221,241,27,222,78,51,248,181,255,20,149,95,53,117,13,135,5,101,64]",
              "sol": "abi.encode(\"73,178,139,194,221,241,27,222,78,51,248,181,255,20,149,95,53,117,13,135,5,101,64\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[104,0,158,230,130,95,76,86,28,73,70,203,226,220,0,151,208,158,129,235,65,48,49,34,211,9,98,190,157,116,227,101]",
              "sol": "stringToBytes32(\"104,0,158,230,130,95,76,86,28,73,70,203,226,220,0,151,208,158,129,235,65,48,49,34,211,9,98,190,157,116,227,101\")"
            },
            {
              "js": "[97,9,79,205,47,56,255,93,64,22,176,108,230,33,233,55,123,199,170,147,201,249,221,255,2,228,103,88,161,159,89,15,53,90,218,98,99,50,40,232,183,64,209,230,26,7,150,189,86,141,218,167,154,215,197,20,188,48,227,213,146,142,221,219,212]",
              "sol": "abi.encode(\"97,9,79,205,47,56,255,93,64,22,176,108,230,33,233,55,123,199,170,147,201,249,221,255,2,228,103,88,161,159,89,15,53,90,218,98,99,50,40,232,183,64,209,230,26,7,150,189,86,141,218,167,154,215,197,20,188,48,227,213,146,142,221,219,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.527ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.529ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[162,16]",
              "sol": "[uint(162),uint(16)]"
            },
            {
              "js": "[[70,101],[4,9]]",
              "sol": "[[uint(70),uint(101)],[uint(4),uint(9)]]"
            },
            {
              "js": "[49,7]",
              "sol": "[uint(49),uint(7)]"
            },
            {
              "js": "[18,27]",
              "sol": "[uint(18),uint(27)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.533ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.534ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[127,1532892063]",
              "sol": "[uint(127),uint(1532892063)]"
            },
            {
              "js": "{\"A\": {\"X\": 103,\"Y\": 24},\"B\": {\"X\": [15,16],\"Y\": [47,102]},\"C\": {\"X\": 2,\"Y\": 31}}",
              "sol": "Verifier.Proof(Pairing.G1Point(103,24),Pairing.G2Point([uint(15),uint(16)],[uint(47),uint(102)]),Pairing.G1Point(2,31))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[16,47,9]",
              "sol": "[uint(16),uint(47),uint(9)]"
            },
            {
              "js": "{\"A\": {\"X\": 162,\"Y\": 23},\"B\": {\"X\": [17,48],\"Y\": [88,55]},\"C\": {\"X\": 1025,\"Y\": 10}}",
              "sol": "Verifier.Proof(Pairing.G1Point(162,23),Pairing.G2Point([uint(17),uint(48)],[uint(88),uint(55)]),Pairing.G1Point(1025,10))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.537ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.537ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.538ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"accounts[0]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.540ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.541ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "accounts[1]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.541ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.542ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.543ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.544ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[163,213,29,121,148,235,36,61,207,163,54,70,226,168,66,140,222,244,143,255,181,218,47,46,27,44,242,81,242,18,94,152]",
              "sol": "abi.encode(\"163,213,29,121,148,235,36,61,207,163,54,70,226,168,66,140,222,244,143,255,181,218,47,46,27,44,242,81,242,18,94,152\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "[163,213,29,121,148,235,36,61,207,163,54,70,226,168,66,140,222,244,143,255,181,218,47,46,27,44,242,81,242,18,94,152]",
                "sol": "abi.encode(\"163,213,29,121,148,235,36,61,207,163,54,70,226,168,66,140,222,244,143,255,181,218,47,46,27,44,242,81,242,18,94,152\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.545ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.546ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[167,100,17,32]",
              "sol": "bytes4(\"167,100,17,32\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.548ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.550ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.550ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1024",
                "sol": "1024"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.551ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "23",
                "sol": "23"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.552ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[148,195,114,96,241,238,134,46,121,221,225,17,109,156,223,188,143,52,89,4,154,16,226,173,66,83,120,246,81,144,8,0]",
              "sol": "abi.encode(\"148,195,114,96,241,238,134,46,121,221,225,17,109,156,223,188,143,52,89,4,154,16,226,173,66,83,120,246,81,144,8,0\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "[223,82,0,241,74,8,221,134,116,143,132,98,171,253,214,161,9,172,179,165,35,120,170,86,245,11,13,97,23,62,72,86]",
              "sol": "abi.encode(\"223,82,0,241,74,8,221,134,116,143,132,98,171,253,214,161,9,172,179,165,35,120,170,86,245,11,13,97,23,62,72,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.553ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.555ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[71,162]",
              "sol": "[uint(71),uint(162)]"
            },
            {
              "js": "[[30,160],[47,95]]",
              "sol": "[[uint(30),uint(160)],[uint(47),uint(95)]]"
            },
            {
              "js": "[48,162]",
              "sol": "[uint(48),uint(162)]"
            },
            {
              "js": "[66,32]",
              "sol": "[uint(66),uint(32)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.557ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.559ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.559ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.560ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.560ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.562ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.564ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.564ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.565ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.567ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.568ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T23:08:55.569ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.570ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T23:08:55.571ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}