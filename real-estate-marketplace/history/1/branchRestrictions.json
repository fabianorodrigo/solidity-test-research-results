,{
  "2020-11-10T05:25:33.926ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:25:49.152ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:26:04.407ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:26:19.609ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:26:34.964ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:26:50.503ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.049ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [105,117,127,199,5,210,208,114,100,176,205,207,242,247,122,222,72,104,103,208,18,84,179,183,187,33,100,83,235,55,2,192],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"105,117,127,199,5,210,208,114,100,176,205,207,242,247,122,222,72,104,103,208,18,84,179,183,187,33,100,83,235,55,2,192\"),2014223716)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.050ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [92,52,250,177,179,12,173,98,3,200,147,163,242,85,175,151,81,194,201,37,97,132,80,97,57,180,155,32,60,90,240,45],\"capacity\": 8}",
              "sol": "Buffer.buffer(abi.encode(\"92,52,250,177,179,12,173,98,3,200,147,163,242,85,175,151,81,194,201,37,97,132,80,97,57,180,155,32,60,90,240,45\"),8)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [102,28,181,91,122,179,70,91,83,164,145,1,149,33,10,8,80,181,226,18,4,7,97,69,63,249,18,183,238,43,34,78],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"102,28,181,91,122,179,70,91,83,164,145,1,149,33,10,8,80,181,226,18,4,7,97,69,63,249,18,183,238,43,34,78\"),199999)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.051ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [118,215,255,60,60,185,227,189,178,165,68,134,90,138,177,58,246,161,63,170,18,122,206,104,2,92,88,78,118,75,45,223],\"capacity\": 199999}",
              "sol": "Buffer.buffer(abi.encode(\"118,215,255,60,60,185,227,189,178,165,68,134,90,138,177,58,246,161,63,170,18,122,206,104,2,92,88,78,118,75,45,223\"),199999)"
            },
            {
              "js": "[44,125,44,156,170,207,111,155,161,23,98,96,180,109,150,202,39,189,231,54,249,205,146,218,237,11,118,71,255,24,61,60]",
              "sol": "abi.encode(\"44,125,44,156,170,207,111,155,161,23,98,96,180,109,150,202,39,189,231,54,249,205,146,218,237,11,118,71,255,24,61,60\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.052ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [109,252,216,2,145,132,214,186,185,92,213,191,111,95,184,31,72,35,166,114,186,166,169,189,119,23,115,190,198,36,72,20],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"109,252,216,2,145,132,214,186,185,92,213,191,111,95,184,31,72,35,166,114,186,166,169,189,119,23,115,190,198,36,72,20\"),1)"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.052ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [54,137,19,184,236,213,207,209,72,197,76,246,242,221,35,223,81,120,58,10,106,37,216,27,83,123,3,245,90,55,1,242],\"capacity\": 69}",
              "sol": "Buffer.buffer(abi.encode(\"54,137,19,184,236,213,207,209,72,197,76,246,242,221,35,223,81,120,58,10,106,37,216,27,83,123,3,245,90,55,1,242\"),69)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.054ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [177,147,122,246,139,112,64,226,237,17,217,43,118,75,150,89,141,42,39,141,203,56,158,211,142,190,209,247,169,203,117,142],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"177,147,122,246,139,112,64,226,237,17,217,43,118,75,150,89,141,42,39,141,203,56,158,211,142,190,209,247,169,203,117,142\"),23)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.054ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [30,63,149,95,143,222,166,135,79,38,103,12,70,79,67,252,148,182,30,72,105,215,129,221,170,163,203,206,85,25,116,49],\"capacity\": 0}",
              "sol": "Buffer.buffer(abi.encode(\"30,63,149,95,143,222,166,135,79,38,103,12,70,79,67,252,148,182,30,72,105,215,129,221,170,163,203,206,85,25,116,49\"),0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.058ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.058ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.059ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 58,\"Y\": 48}",
              "sol": "Pairing.G1Point(58,48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.060ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 96}",
              "sol": "Pairing.G1Point(0,96)"
            },
            {
              "js": "{\"X\": 71,\"Y\": 0}",
              "sol": "Pairing.G1Point(71,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.060ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [18,60],\"Y\": [7,98]}",
              "sol": "Pairing.G2Point([uint(18),uint(60)],[uint(7),uint(98)])"
            },
            {
              "js": "{\"X\": [1024,60],\"Y\": [2014223715,2014223714]}",
              "sol": "Pairing.G2Point([uint(1024),uint(60)],[uint(2014223715),uint(2014223714)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.062ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 199999,\"Y\": 1532892064}",
              "sol": "Pairing.G1Point(199999,1532892064)"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.063ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 7,\"Y\": 11}]",
              "sol": "[Pairing.G1Point(7,11)]"
            },
            {
              "js": "[{\"X\": [70,1],\"Y\": [57,45]}]",
              "sol": "[Pairing.G2Point([uint(70),uint(1)],[uint(57),uint(45)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 129,\"Y\": 2},{\"X\": 98,\"Y\": 88}]",
                "sol": "[Pairing.G1Point(33,70),Pairing.G1Point(2014223716,54)]"
              },
              {
                "js": "[{\"X\": [70,1],\"Y\": [57,45]}]",
                "sol": "[Pairing.G2Point([uint(70),uint(1)],[uint(57),uint(45)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.065ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 55,\"Y\": 30}",
              "sol": "Pairing.G1Point(55,30)"
            },
            {
              "js": "{\"X\": [27,1532892063],\"Y\": [200001,55]}",
              "sol": "Pairing.G2Point([uint(27),uint(1532892063)],[uint(200001),uint(55)])"
            },
            {
              "js": "{\"X\": 256,\"Y\": 1025}",
              "sol": "Pairing.G1Point(256,1025)"
            },
            {
              "js": "{\"X\": [1532892063,32],\"Y\": [9,23]}",
              "sol": "Pairing.G2Point([uint(1532892063),uint(32)],[uint(9),uint(23)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.066ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 128,\"Y\": 63}",
              "sol": "Pairing.G1Point(128,63)"
            },
            {
              "js": "{\"X\": [61,3],\"Y\": [0,69]}",
              "sol": "Pairing.G2Point([uint(61),uint(3)],[uint(0),uint(69)])"
            },
            {
              "js": "{\"X\": 21,\"Y\": 58}",
              "sol": "Pairing.G1Point(21,58)"
            },
            {
              "js": "{\"X\": [1,54],\"Y\": [47,27]}",
              "sol": "Pairing.G2Point([uint(1),uint(54)],[uint(47),uint(27)])"
            },
            {
              "js": "{\"X\": 200001,\"Y\": 58}",
              "sol": "Pairing.G1Point(200001,58)"
            },
            {
              "js": "{\"X\": [96,3],\"Y\": [254,71]}",
              "sol": "Pairing.G2Point([uint(96),uint(3)],[uint(254),uint(71)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.072ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.072ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.073ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.073ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.074ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.074ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.075ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.076ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.076ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.079ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.079ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.082ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [66,136,204,217,40,65,15,207,45,139,47,158,216,185,250,219,119,249,87,87,83,121,146,158,255,217,110,7,66,58,64,253],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"66,136,204,217,40,65,15,207,45,139,47,158,216,185,250,219,119,249,87,87,83,121,146,158,255,217,110,7,66,58,64,253\"),16)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.083ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [38,243,117,189,154,154,252,36,230,38,227,208,206,172,59,104,186,120,230,246,204,98,216,201,206,10,119,167,16,97,132,91],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"38,243,117,189,154,154,252,36,230,38,227,208,206,172,59,104,186,120,230,246,204,98,216,201,206,10,119,167,16,97,132,91\"),98)"
            },
            {
              "js": "[8,29,39,59,89,162,31,114,152,192,222,213,53,248,149,51,25,130,159,24,203,133,197,207,87,106,140,135,41,137,147,93]",
              "sol": "abi.encode(\"8,29,39,59,89,162,31,114,152,192,222,213,53,248,149,51,25,130,159,24,203,133,197,207,87,106,140,135,41,137,147,93\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.084ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [116,224,23,46,119,33,94,14,180,20,96,132,62,50,83,182,31,38,182,26,166,66,207,243,141,22,53,198,11,74,106,21],\"capacity\": 256}",
              "sol": "Buffer.buffer(abi.encode(\"116,224,23,46,119,33,94,14,180,20,96,132,62,50,83,182,31,38,182,26,166,66,207,243,141,22,53,198,11,74,106,21\"),256)"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.084ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [47,221,202,170,244,25,69,208,11,64,157,248,183,211,202,140,92,11,124,247,85,237,174,102,174,123,32,130,155,130,127,247],\"capacity\": 86}",
              "sol": "Buffer.buffer(abi.encode(\"47,221,202,170,244,25,69,208,11,64,157,248,183,211,202,140,92,11,124,247,85,237,174,102,174,123,32,130,155,130,127,247\"),86)"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.085ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[108,84,67,99,113,220,190,45,63,166,246,30,242,139,233,71,63,1,246,96,201,5,185,9,41,46,146,69,8,166,233,95]",
              "sol": "stringToBytes32(\"108,84,67,99,113,220,190,45,63,166,246,30,242,139,233,71,63,1,246,96,201,5,185,9,41,46,146,69,8,166,233,95\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.086ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[15,210,9,189,38,199,246,98,55,170,134,202,199,11,173,161,194,101,29,122,26,188,245,220,159,108,7,194,71,247,125,20]",
              "sol": "stringToBytes32(\"15,210,9,189,38,199,246,98,55,170,134,202,199,11,173,161,194,101,29,122,26,188,245,220,159,108,7,194,71,247,125,20\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[250,194,98,194,69,78,232,212,234,127,146,206,70,149,62,230,74,0,228,94,81,120,238,151,16,6,114,101,112,215,164,244]",
              "sol": "abi.encode(\"250,194,98,194,69,78,232,212,234,127,146,206,70,149,62,230,74,0,228,94,81,120,238,151,16,6,114,101,112,215,164,244\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.136ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.137ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.137ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.139ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.139ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.140ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.140ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.141ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.141ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.142ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.142ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.142ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.143ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.143ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.144ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.144ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"cby0bh\",\"Transaction successfully verified.\",\"[\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"cby0bh\"),string(\"Transaction successfully verified.\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.145ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"[\",\"L\",\"L\",\"13120q\",\"0\",\"Capstones\",\"cby0bh\",\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"[\"),string(\"L\"),string(\"L\"),string(\"13120q\"),string(\"0\"),string(\"Capstones\"),string(\"cby0bh\"),string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.146ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"[\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"cby0bh\",\"lznjau\",\"cby0bh\",\"tnq3z\",\"Capstones\",\"t65nq4\",\"L\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"[\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"cby0bh\"),string(\"lznjau\"),string(\"cby0bh\"),string(\"tnq3z\"),string(\"Capstones\"),string(\"t65nq4\"),string(\"L\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.148ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.149ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.149ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"cby0bh\"]",
              "sol": "[string(\"cby0bh\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.150ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"lznjau\"]",
              "sol": "[string(\"lznjau\")]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.150ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "[\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.150ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "[\"cby0bh\",\"tnq3z\"]",
              "sol": "[string(\"cby0bh\"),string(\"tnq3z\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.151ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.151ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"[\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"[\")]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.152ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"13120q\",\"Capstones\",\"[\"]",
              "sol": "[string(\"13120q\"),string(\"Capstones\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.152ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "[\"cby0bh\",\"t65nq4\",\"0\"]",
              "sol": "[string(\"cby0bh\"),string(\"t65nq4\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.153ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"Capstones\",\"L\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"Capstones\"),string(\"L\")]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.153ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"[\",\"0\",\"cby0bh\"]",
              "sol": "[string(\"[\"),string(\"0\"),string(\"cby0bh\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.154ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"\\x19Ethereum Signed Message:\\n32\",\"cby0bh\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"cby0bh\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.154ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"tnq3z\",\"[\",\"\\x19Ethereum Signed Message:\\n32\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"tnq3z\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.155ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"0\",\"Capstones\",\"L\",\"Capstones\"]",
              "sol": "[string(\"0\"),string(\"Capstones\"),string(\"L\"),string(\"Capstones\")]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.155ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"tnq3z\",\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"tnq3z\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.156ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\",\"lznjau\",\"t65nq4\",\"t65nq4\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\"),string(\"lznjau\"),string(\"t65nq4\"),string(\"t65nq4\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.156ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "\"xdsbws\"",
              "sol": "\"xdsbws\""
            },
            {
              "js": "[\"tnq3z\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"xdsbws\",\"P\",\"xdb2f\"]",
              "sol": "[string(\"tnq3z\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"xdsbws\"),string(\"P\"),string(\"xdb2f\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.157ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"xdsbws\"",
              "sol": "\"xdsbws\""
            },
            {
              "js": "[\"tnq3z\",\"P\",\"L\",\"cby0bh\",\"tnq3z\"]",
              "sol": "[string(\"tnq3z\"),string(\"P\"),string(\"L\"),string(\"cby0bh\"),string(\"tnq3z\")]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.157ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"lznjau\",\"xdsbws\",\"tnq3z\",\"t65nq4\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"lznjau\"),string(\"xdsbws\"),string(\"tnq3z\"),string(\"t65nq4\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.158ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[39,207,240,151,71,119,166,217,29,216,242,9,122,4,48,177,40,227,78,120,39,169,92,210,90,223,4,231,147,96,149,35],[149,20,18,183,224,167,77,21,209,153,189,207,196,106,44,20,4,180,152,242,48,140,111,80,169,112,59,17,140,91,64,80],[144,160,167,48,64,229,198,204,98,136,129,82,176,78,177,120,135,182,239,155,186,252,142,89,245,105,108,72,240,91,148,198],[112,117,186,154,187,235,190,93,197,47,77,183,219,29,47,153,199,121,164,204,164,107,176,145,58,129,94,7,242,61,169,226],[177,185,174,241,69,26,115,164,248,158,212,117,229,236,0,186,76,96,47,4,69,103,52,135,202,162,236,62,203,8,29,175],[99,54,56,138,153,254,86,4,137,145,124,117,252,31,194,68,14,76,228,86,219,97,208,47,250,198,17,155,182,119,25,88],[33,64,162,150,161,214,216,204,219,216,239,235,162,153,56,160,228,8,158,176,16,42,202,221,174,65,14,245,160,115,136,93],[77,218,182,146,71,96,248,78,8,7,159,221,4,8,103,123,199,238,138,74,10,76,171,119,72,128,218,247,67,45,203,93],[52,26,87,23,220,56,108,34,33,40,255,1,222,3,52,99,78,189,209,182,150,184,27,17,177,65,229,44,1,109,147,1]]",
              "sol": "[bytes(abi.encode(\"39,207,240,151,71,119,166,217,29,216,242,9,122,4,48,177,40,227,78,120,39,169,92,210,90,223,4,231,147,96,149,35\")),bytes(abi.encode(\"149,20,18,183,224,167,77,21,209,153,189,207,196,106,44,20,4,180,152,242,48,140,111,80,169,112,59,17,140,91,64,80\")),bytes(abi.encode(\"144,160,167,48,64,229,198,204,98,136,129,82,176,78,177,120,135,182,239,155,186,252,142,89,245,105,108,72,240,91,148,198\")),bytes(abi.encode(\"112,117,186,154,187,235,190,93,197,47,77,183,219,29,47,153,199,121,164,204,164,107,176,145,58,129,94,7,242,61,169,226\")),bytes(abi.encode(\"177,185,174,241,69,26,115,164,248,158,212,117,229,236,0,186,76,96,47,4,69,103,52,135,202,162,236,62,203,8,29,175\")),bytes(abi.encode(\"99,54,56,138,153,254,86,4,137,145,124,117,252,31,194,68,14,76,228,86,219,97,208,47,250,198,17,155,182,119,25,88\")),bytes(abi.encode(\"33,64,162,150,161,214,216,204,219,216,239,235,162,153,56,160,228,8,158,176,16,42,202,221,174,65,14,245,160,115,136,93\")),bytes(abi.encode(\"77,218,182,146,71,96,248,78,8,7,159,221,4,8,103,123,199,238,138,74,10,76,171,119,72,128,218,247,67,45,203,93\")),bytes(abi.encode(\"52,26,87,23,220,56,108,34,33,40,255,1,222,3,52,99,78,189,209,182,150,184,27,17,177,65,229,44,1,109,147,1\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.159ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"coh7g\"",
              "sol": "\"coh7g\""
            },
            {
              "js": "[[92,127,210,189,159,68,204,161,119,165,71,62,147,102,53,103,111,108,193,147,168,14,5,106,253,124,166,58,49,5,137,70],[222,214,53,182,198,127,13,90,72,129,65,181,54,211,20,254,162,154,179,34,178,119,163,228,99,41,107,122,12,147,198,167],[40,206,149,92,150,30,169,69,14,89,111,27,88,231,42,46,160,203,76,69,152,207,30,227,147,36,189,20,199,60,217,113],[249,67,232,136,213,38,164,206,120,9,71,14,243,62,56,92,196,141,90,50,73,31,191,82,40,52,89,146,240,80,45,254],[120,142,17,255,46,49,125,180,249,212,177,141,207,201,56,9,207,140,23,31,105,23,105,247,94,234,194,26,39,225,9,224],[59,38,108,83,29,145,0,49,150,233,113,230,11,120,230,249,16,3,253,148,83,175,162,169,202,197,78,254,132,172,197,210],[127,230,58,103,29,15,24,106,143,120,192,239,119,233,210,154,129,249,128,228,165,72,223,103,208,120,186,49,124,223,22,15],[97,247,194,8,246,111,108,135,44,26,217,226,140,3,158,155,103,72,37,244,82,53,146,122,215,13,244,155,50,230,224,232],[152,150,210,197,130,179,51,237,5,11,210,93,240,63,152,63,163,72,165,116,103,47,253,41,86,57,236,44,27,49,228,86]]",
              "sol": "[bytes(abi.encode(\"92,127,210,189,159,68,204,161,119,165,71,62,147,102,53,103,111,108,193,147,168,14,5,106,253,124,166,58,49,5,137,70\")),bytes(abi.encode(\"222,214,53,182,198,127,13,90,72,129,65,181,54,211,20,254,162,154,179,34,178,119,163,228,99,41,107,122,12,147,198,167\")),bytes(abi.encode(\"40,206,149,92,150,30,169,69,14,89,111,27,88,231,42,46,160,203,76,69,152,207,30,227,147,36,189,20,199,60,217,113\")),bytes(abi.encode(\"249,67,232,136,213,38,164,206,120,9,71,14,243,62,56,92,196,141,90,50,73,31,191,82,40,52,89,146,240,80,45,254\")),bytes(abi.encode(\"120,142,17,255,46,49,125,180,249,212,177,141,207,201,56,9,207,140,23,31,105,23,105,247,94,234,194,26,39,225,9,224\")),bytes(abi.encode(\"59,38,108,83,29,145,0,49,150,233,113,230,11,120,230,249,16,3,253,148,83,175,162,169,202,197,78,254,132,172,197,210\")),bytes(abi.encode(\"127,230,58,103,29,15,24,106,143,120,192,239,119,233,210,154,129,249,128,228,165,72,223,103,208,120,186,49,124,223,22,15\")),bytes(abi.encode(\"97,247,194,8,246,111,108,135,44,26,217,226,140,3,158,155,103,72,37,244,82,53,146,122,215,13,244,155,50,230,224,232\")),bytes(abi.encode(\"152,150,210,197,130,179,51,237,5,11,210,93,240,63,152,63,163,72,165,116,103,47,253,41,86,57,236,44,27,49,228,86\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.160ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[193,9,19,168,235,51,111,109,50,153,5,92,31,110,197,77,11,4,116,200,255,179,89,21,50,227,62,132,227,74,6,204],[225,48,209,227,141,95,158,61,107,66,226,135,110,43,196,205,69,67,183,152,19,29,254,25,47,22,82,74,217,74,25,89],[190,175,58,188,185,243,5,98,124,119,160,7,138,6,152,12,206,11,187,108,219,157,235,143,81,129,18,219,212,63,145,197],[110,224,190,158,253,98,8,135,2,140,105,86,26,167,38,153,211,241,178,73,75,28,122,18,82,78,3,251,1,35,173,148],[6,65,12,62,93,190,237,183,45,31,106,15,45,96,130,22,41,11,0,45,75,75,201,89,103,98,41,101,10,124,110,22]]",
              "sol": "[bytes(abi.encode(\"193,9,19,168,235,51,111,109,50,153,5,92,31,110,197,77,11,4,116,200,255,179,89,21,50,227,62,132,227,74,6,204\")),bytes(abi.encode(\"225,48,209,227,141,95,158,61,107,66,226,135,110,43,196,205,69,67,183,152,19,29,254,25,47,22,82,74,217,74,25,89\")),bytes(abi.encode(\"190,175,58,188,185,243,5,98,124,119,160,7,138,6,152,12,206,11,187,108,219,157,235,143,81,129,18,219,212,63,145,197\")),bytes(abi.encode(\"110,224,190,158,253,98,8,135,2,140,105,86,26,167,38,153,211,241,178,73,75,28,122,18,82,78,3,251,1,35,173,148\")),bytes(abi.encode(\"6,65,12,62,93,190,237,183,45,31,106,15,45,96,130,22,41,11,0,45,75,75,201,89,103,98,41,101,10,124,110,22\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.160ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[25,180,196,167,109,181,60,128,234,112,126,116,15,175,65,204,91,200,88,93,178,119,212,209,193,127,221,86,71,223,37,236],[11,131,94,159,27,126,146,130,181,66,126,27,101,67,145,44,178,194,229,36,29,170,85,137,210,34,123,14,32,51,194,95],[2,170,143,245,202,159,141,20,207,132,230,67,156,153,90,48,84,241,34,17,218,2,178,147,221,8,24,100,214,185,239,9]]",
              "sol": "[bytes(abi.encode(\"25,180,196,167,109,181,60,128,234,112,126,116,15,175,65,204,91,200,88,93,178,119,212,209,193,127,221,86,71,223,37,236\")),bytes(abi.encode(\"11,131,94,159,27,126,146,130,181,66,126,27,101,67,145,44,178,194,229,36,29,170,85,137,210,34,123,14,32,51,194,95\")),bytes(abi.encode(\"2,170,143,245,202,159,141,20,207,132,230,67,156,153,90,48,84,241,34,17,218,2,178,147,221,8,24,100,214,185,239,9\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.161ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "[[238,67,234,110,114,224,135,92,29,103,183,23,16,42,52,213,38,226,16,94,53,220,92,212,250,38,29,48,81,238,43,13]]",
              "sol": "[bytes(abi.encode(\"238,67,234,110,114,224,135,92,29,103,183,23,16,42,52,213,38,226,16,94,53,220,92,212,250,38,29,48,81,238,43,13\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.162ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[106,181,197,159,190,38,31,186,103,133,55,197,6,240,84,3,200,252,213,209,123,103,125,58,47,207,126,97,59,190,154,48]]",
              "sol": "[bytes(abi.encode(\"106,181,197,159,190,38,31,186,103,133,55,197,6,240,84,3,200,252,213,209,123,103,125,58,47,207,126,97,59,190,154,48\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.163ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "[[214,206,162,52,106,245,0,182,216,150,152,222,20,96,201,89,57,135,128,211,183,218,197,179,207,246,71,41,135,89,19,210]]",
              "sol": "[bytes(abi.encode(\"214,206,162,52,106,245,0,182,216,150,152,222,20,96,201,89,57,135,128,211,183,218,197,179,207,246,71,41,135,89,19,210\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.163ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "[[16,39,215,126,58,15,134,85,126,95,47,110,166,56,110,39,29,124,173,54,21,159,235,218,65,103,222,74,244,123,212,182]]",
              "sol": "[bytes(abi.encode(\"16,39,215,126,58,15,134,85,126,95,47,110,166,56,110,39,29,124,173,54,21,159,235,218,65,103,222,74,244,123,212,182\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.164ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[225,60,73,27,230,81,98,30,41,94,79,229,197,151,233,41,64,128,101,177,211,109,45,152,188,146,190,124,132,148,233,146],[140,98,44,134,87,189,248,112,240,7,158,160,7,222,116,85,13,49,255,255,201,132,50,249,146,65,220,55,236,242,226,146]]",
              "sol": "[bytes(abi.encode(\"225,60,73,27,230,81,98,30,41,94,79,229,197,151,233,41,64,128,101,177,211,109,45,152,188,146,190,124,132,148,233,146\")),bytes(abi.encode(\"140,98,44,134,87,189,248,112,240,7,158,160,7,222,116,85,13,49,255,255,201,132,50,249,146,65,220,55,236,242,226,146\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.165ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"coh7g\"",
              "sol": "\"coh7g\""
            },
            {
              "js": "[[122,25,146,115,235,199,245,205,32,243,169,191,50,205,65,190,253,95,8,86,113,130,7,242,31,173,59,210,144,196,99,155],[89,148,12,184,78,36,83,186,82,80,250,213,3,85,199,228,22,206,58,118,183,197,72,202,26,78,160,41,234,170,218,101]]",
              "sol": "[bytes(abi.encode(\"122,25,146,115,235,199,245,205,32,243,169,191,50,205,65,190,253,95,8,86,113,130,7,242,31,173,59,210,144,196,99,155\")),bytes(abi.encode(\"89,148,12,184,78,36,83,186,82,80,250,213,3,85,199,228,22,206,58,118,183,197,72,202,26,78,160,41,234,170,218,101\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.166ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"xdsbws\"",
              "sol": "\"xdsbws\""
            },
            {
              "js": "[[94,47,200,89,86,227,149,141,10,6,218,61,33,66,245,51,25,162,196,21,32,91,104,51,146,143,167,182,229,128,252,118],[167,56,247,127,167,228,68,243,48,217,191,52,186,5,206,58,195,207,78,102,89,227,28,29,2,163,139,239,15,127,229,182]]",
              "sol": "[bytes(abi.encode(\"94,47,200,89,86,227,149,141,10,6,218,61,33,66,245,51,25,162,196,21,32,91,104,51,146,143,167,182,229,128,252,118\")),bytes(abi.encode(\"167,56,247,127,167,228,68,243,48,217,191,52,186,5,206,58,195,207,78,102,89,227,28,29,2,163,139,239,15,127,229,182\"))]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.167ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "[[105,126,22,183,130,12,93,111,55,246,145,57,20,139,244,218,120,129,239,203,44,207,34,178,92,204,219,201,196,215,24,218],[86,173,123,62,190,97,15,139,67,80,47,1,58,5,250,156,116,149,196,226,177,122,244,143,159,213,20,152,125,144,134,228]]",
              "sol": "[bytes(abi.encode(\"105,126,22,183,130,12,93,111,55,246,145,57,20,139,244,218,120,129,239,203,44,207,34,178,92,204,219,201,196,215,24,218\")),bytes(abi.encode(\"86,173,123,62,190,97,15,139,67,80,47,1,58,5,250,156,116,149,196,226,177,122,244,143,159,213,20,152,125,144,134,228\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.167ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "[[153,164,4,128,127,194,34,180,127,178,66,63,130,61,28,68,218,115,232,153,173,174,210,38,105,55,151,255,152,51,173,233],[10,227,109,117,197,3,206,62,91,34,145,30,251,72,173,246,235,210,189,246,30,248,71,54,131,103,130,133,24,175,218,38],[29,220,243,129,251,63,11,97,94,254,35,237,213,18,216,212,157,84,93,87,169,221,12,16,21,144,222,18,137,51,160,0]]",
              "sol": "[bytes(abi.encode(\"153,164,4,128,127,194,34,180,127,178,66,63,130,61,28,68,218,115,232,153,173,174,210,38,105,55,151,255,152,51,173,233\")),bytes(abi.encode(\"10,227,109,117,197,3,206,62,91,34,145,30,251,72,173,246,235,210,189,246,30,248,71,54,131,103,130,133,24,175,218,38\")),bytes(abi.encode(\"29,220,243,129,251,63,11,97,94,254,35,237,213,18,216,212,157,84,93,87,169,221,12,16,21,144,222,18,137,51,160,0\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.168ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[166,61,204,25,241,50,238,209,236,146,121,244,34,17,128,85,41,218,107,163,89,51,100,185,35,218,165,2,98,137,95,210],[108,133,209,76,40,246,62,30,252,119,98,248,24,144,180,170,93,43,209,222,33,28,32,49,162,129,163,26,192,220,89,94],[166,9,183,71,250,58,45,3,193,120,191,9,78,0,112,42,150,221,51,24,55,81,180,21,57,189,26,244,174,174,57,109]]",
              "sol": "[bytes(abi.encode(\"166,61,204,25,241,50,238,209,236,146,121,244,34,17,128,85,41,218,107,163,89,51,100,185,35,218,165,2,98,137,95,210\")),bytes(abi.encode(\"108,133,209,76,40,246,62,30,252,119,98,248,24,144,180,170,93,43,209,222,33,28,32,49,162,129,163,26,192,220,89,94\")),bytes(abi.encode(\"166,9,183,71,250,58,45,3,193,120,191,9,78,0,112,42,150,221,51,24,55,81,180,21,57,189,26,244,174,174,57,109\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.168ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "[[194,37,142,45,87,139,169,209,86,141,219,174,119,238,96,168,230,6,212,129,33,147,53,125,221,176,190,82,249,158,228,54],[136,40,106,139,135,169,190,117,126,209,53,97,59,28,57,186,61,82,81,134,176,224,249,112,9,144,84,200,209,26,239,183],[170,195,101,96,57,31,145,15,241,47,111,172,120,67,40,16,20,60,161,109,64,238,173,254,132,35,210,222,183,77,70,81]]",
              "sol": "[bytes(abi.encode(\"194,37,142,45,87,139,169,209,86,141,219,174,119,238,96,168,230,6,212,129,33,147,53,125,221,176,190,82,249,158,228,54\")),bytes(abi.encode(\"136,40,106,139,135,169,190,117,126,209,53,97,59,28,57,186,61,82,81,134,176,224,249,112,9,144,84,200,209,26,239,183\")),bytes(abi.encode(\"170,195,101,96,57,31,145,15,241,47,111,172,120,67,40,16,20,60,161,109,64,238,173,254,132,35,210,222,183,77,70,81\"))]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.169ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[28,165,81,196,106,195,165,122,75,90,168,132,189,157,137,30,210,200,150,200,200,103,144,168,103,25,57,86,122,113,52,235],[75,28,174,4,66,122,48,251,236,193,249,205,191,197,29,200,172,161,154,113,250,236,159,141,170,114,223,247,207,9,249,215],[208,13,51,55,199,58,183,106,247,211,253,132,192,78,241,18,84,223,24,166,220,198,88,3,239,29,106,122,164,6,41,81]]",
              "sol": "[bytes(abi.encode(\"28,165,81,196,106,195,165,122,75,90,168,132,189,157,137,30,210,200,150,200,200,103,144,168,103,25,57,86,122,113,52,235\")),bytes(abi.encode(\"75,28,174,4,66,122,48,251,236,193,249,205,191,197,29,200,172,161,154,113,250,236,159,141,170,114,223,247,207,9,249,215\")),bytes(abi.encode(\"208,13,51,55,199,58,183,106,247,211,253,132,192,78,241,18,84,223,24,166,220,198,88,3,239,29,106,122,164,6,41,81\"))]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.169ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"xdb2f\"",
              "sol": "\"xdb2f\""
            },
            {
              "js": "[[44,187,54,175,44,250,217,225,6,88,22,218,101,74,12,135,126,183,113,247,123,166,12,107,141,141,129,185,223,54,250,147],[114,105,1,204,133,184,212,229,212,34,143,7,249,182,196,63,5,232,239,78,101,27,21,249,60,237,17,40,48,219,45,82],[115,70,2,246,113,214,188,8,51,166,81,228,2,204,250,63,11,231,60,155,59,44,245,195,82,71,127,161,85,56,40,49],[74,197,203,210,4,75,200,59,198,29,125,82,11,117,179,160,64,236,63,24,108,122,105,83,10,203,112,195,20,195,31,250]]",
              "sol": "[bytes(abi.encode(\"44,187,54,175,44,250,217,225,6,88,22,218,101,74,12,135,126,183,113,247,123,166,12,107,141,141,129,185,223,54,250,147\")),bytes(abi.encode(\"114,105,1,204,133,184,212,229,212,34,143,7,249,182,196,63,5,232,239,78,101,27,21,249,60,237,17,40,48,219,45,82\")),bytes(abi.encode(\"115,70,2,246,113,214,188,8,51,166,81,228,2,204,250,63,11,231,60,155,59,44,245,195,82,71,127,161,85,56,40,49\")),bytes(abi.encode(\"74,197,203,210,4,75,200,59,198,29,125,82,11,117,179,160,64,236,63,24,108,122,105,83,10,203,112,195,20,195,31,250\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.170ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "[[181,93,138,169,158,226,33,202,229,132,167,115,26,123,198,209,223,185,36,18,216,183,194,161,225,117,87,24,100,71,88,254],[152,172,199,43,177,130,19,253,252,76,137,48,110,245,14,12,92,23,231,124,158,144,190,166,220,187,181,243,229,146,105,0],[126,183,156,168,209,249,95,185,101,250,148,220,75,15,228,96,240,183,101,50,183,187,240,234,65,83,42,122,144,81,97,171],[45,114,133,186,76,125,0,108,22,162,104,77,36,39,57,187,209,110,170,62,2,106,150,143,22,238,190,203,177,33,90,58]]",
              "sol": "[bytes(abi.encode(\"181,93,138,169,158,226,33,202,229,132,167,115,26,123,198,209,223,185,36,18,216,183,194,161,225,117,87,24,100,71,88,254\")),bytes(abi.encode(\"152,172,199,43,177,130,19,253,252,76,137,48,110,245,14,12,92,23,231,124,158,144,190,166,220,187,181,243,229,146,105,0\")),bytes(abi.encode(\"126,183,156,168,209,249,95,185,101,250,148,220,75,15,228,96,240,183,101,50,183,187,240,234,65,83,42,122,144,81,97,171\")),bytes(abi.encode(\"45,114,133,186,76,125,0,108,22,162,104,77,36,39,57,187,209,110,170,62,2,106,150,143,22,238,190,203,177,33,90,58\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.171ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "[[22,91,52,26,167,239,32,35,223,186,218,71,92,169,4,66,227,148,41,136,129,66,117,103,11,184,48,12,10,217,117,203],[50,233,33,79,104,124,172,160,61,97,107,212,105,21,203,147,9,181,96,60,210,241,30,254,39,79,144,186,98,193,117,51],[82,247,134,63,143,157,57,111,136,38,146,135,166,174,91,175,193,51,213,216,204,48,142,103,180,68,35,18,70,188,23,219],[142,107,143,141,159,178,83,6,119,199,172,175,206,167,38,53,230,100,254,153,70,241,36,235,136,22,51,53,44,214,247,54]]",
              "sol": "[bytes(abi.encode(\"22,91,52,26,167,239,32,35,223,186,218,71,92,169,4,66,227,148,41,136,129,66,117,103,11,184,48,12,10,217,117,203\")),bytes(abi.encode(\"50,233,33,79,104,124,172,160,61,97,107,212,105,21,203,147,9,181,96,60,210,241,30,254,39,79,144,186,98,193,117,51\")),bytes(abi.encode(\"82,247,134,63,143,157,57,111,136,38,146,135,166,174,91,175,193,51,213,216,204,48,142,103,180,68,35,18,70,188,23,219\")),bytes(abi.encode(\"142,107,143,141,159,178,83,6,119,199,172,175,206,167,38,53,230,100,254,153,70,241,36,235,136,22,51,53,44,214,247,54\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.172ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[196,62,115,213,134,28,137,197,117,114,35,196,209,15,234,77,21,7,118,18,218,185,148,187,21,45,78,113,43,188,30,218],[57,74,232,5,153,57,54,40,151,66,150,158,200,103,33,52,55,11,247,18,88,216,140,133,213,221,255,230,155,167,41,202],[126,210,73,195,52,243,126,212,53,128,133,97,132,147,156,116,159,56,53,174,48,42,192,9,190,155,160,180,172,195,132,209],[170,152,117,54,127,251,150,109,186,123,191,11,107,160,37,6,62,78,5,119,9,93,171,53,97,29,33,121,233,19,254,43]]",
              "sol": "[bytes(abi.encode(\"196,62,115,213,134,28,137,197,117,114,35,196,209,15,234,77,21,7,118,18,218,185,148,187,21,45,78,113,43,188,30,218\")),bytes(abi.encode(\"57,74,232,5,153,57,54,40,151,66,150,158,200,103,33,52,55,11,247,18,88,216,140,133,213,221,255,230,155,167,41,202\")),bytes(abi.encode(\"126,210,73,195,52,243,126,212,53,128,133,97,132,147,156,116,159,56,53,174,48,42,192,9,190,155,160,180,172,195,132,209\")),bytes(abi.encode(\"170,152,117,54,127,251,150,109,186,123,191,11,107,160,37,6,62,78,5,119,9,93,171,53,97,29,33,121,233,19,254,43\"))]"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.172ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[20,39,222,65,151,197,252,205,39,47,73,187,2,178,19,229,203,187,137,129,242,20,133,60,73,96,66,119,82,112,193,202],[135,23,93,161,213,112,198,165,183,63,91,159,219,54,177,63,139,223,145,244,171,87,200,132,153,228,59,143,150,116,171,254],[167,68,219,34,197,157,197,43,92,174,138,32,133,101,228,15,253,31,183,230,17,223,231,231,226,70,197,45,234,23,243,46],[248,153,116,180,54,209,87,228,139,100,152,83,131,240,67,117,93,103,236,99,85,210,208,4,40,46,176,126,236,119,168,166],[52,240,123,57,237,29,97,155,159,152,96,250,201,15,150,55,231,234,222,33,141,16,48,212,218,136,242,38,132,142,61,170]]",
              "sol": "[bytes(abi.encode(\"20,39,222,65,151,197,252,205,39,47,73,187,2,178,19,229,203,187,137,129,242,20,133,60,73,96,66,119,82,112,193,202\")),bytes(abi.encode(\"135,23,93,161,213,112,198,165,183,63,91,159,219,54,177,63,139,223,145,244,171,87,200,132,153,228,59,143,150,116,171,254\")),bytes(abi.encode(\"167,68,219,34,197,157,197,43,92,174,138,32,133,101,228,15,253,31,183,230,17,223,231,231,226,70,197,45,234,23,243,46\")),bytes(abi.encode(\"248,153,116,180,54,209,87,228,139,100,152,83,131,240,67,117,93,103,236,99,85,210,208,4,40,46,176,126,236,119,168,166\")),bytes(abi.encode(\"52,240,123,57,237,29,97,155,159,152,96,250,201,15,150,55,231,234,222,33,141,16,48,212,218,136,242,38,132,142,61,170\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.173ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[76,73,113,179,93,73,54,253,109,116,193,124,100,19,207,80,2,187,67,196,191,149,28,96,12,194,145,211,86,65,66,241],[58,88,105,131,26,63,84,127,200,120,21,6,237,57,176,153,141,1,184,59,106,159,133,196,241,39,97,238,186,7,118,234],[146,246,158,156,42,206,233,169,239,92,90,3,58,58,202,162,51,145,219,117,31,144,21,70,155,62,47,94,240,150,159,87],[176,204,35,139,138,34,8,187,246,177,246,48,202,170,193,112,230,32,103,204,19,22,52,229,221,1,7,243,38,134,146,80],[72,29,187,91,53,226,77,200,84,85,225,196,248,225,79,81,200,152,86,6,211,170,106,14,120,4,201,20,76,224,46,158]]",
              "sol": "[bytes(abi.encode(\"76,73,113,179,93,73,54,253,109,116,193,124,100,19,207,80,2,187,67,196,191,149,28,96,12,194,145,211,86,65,66,241\")),bytes(abi.encode(\"58,88,105,131,26,63,84,127,200,120,21,6,237,57,176,153,141,1,184,59,106,159,133,196,241,39,97,238,186,7,118,234\")),bytes(abi.encode(\"146,246,158,156,42,206,233,169,239,92,90,3,58,58,202,162,51,145,219,117,31,144,21,70,155,62,47,94,240,150,159,87\")),bytes(abi.encode(\"176,204,35,139,138,34,8,187,246,177,246,48,202,170,193,112,230,32,103,204,19,22,52,229,221,1,7,243,38,134,146,80\")),bytes(abi.encode(\"72,29,187,91,53,226,77,200,84,85,225,196,248,225,79,81,200,152,86,6,211,170,106,14,120,4,201,20,76,224,46,158\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.174ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[61,70,249,119,34,36,199,198,14,61,216,56,39,98,97,191,252,21,19,32,101,133,98,67,60,180,185,32,48,203,201,37],[112,94,16,198,238,45,237,3,101,98,150,2,7,232,102,50,181,235,172,127,198,105,39,37,5,146,126,138,226,77,187,182],[31,22,191,178,178,250,230,164,162,102,44,11,24,59,222,93,112,126,40,70,144,213,76,148,97,5,158,41,206,157,239,204],[64,200,82,83,161,108,49,150,140,232,101,67,1,213,158,77,92,18,168,175,205,196,66,212,57,70,211,96,128,80,197,162],[238,34,65,249,71,43,78,227,185,58,15,62,159,160,190,74,65,36,95,3,148,54,58,166,173,103,161,239,219,3,107,218]]",
              "sol": "[bytes(abi.encode(\"61,70,249,119,34,36,199,198,14,61,216,56,39,98,97,191,252,21,19,32,101,133,98,67,60,180,185,32,48,203,201,37\")),bytes(abi.encode(\"112,94,16,198,238,45,237,3,101,98,150,2,7,232,102,50,181,235,172,127,198,105,39,37,5,146,126,138,226,77,187,182\")),bytes(abi.encode(\"31,22,191,178,178,250,230,164,162,102,44,11,24,59,222,93,112,126,40,70,144,213,76,148,97,5,158,41,206,157,239,204\")),bytes(abi.encode(\"64,200,82,83,161,108,49,150,140,232,101,67,1,213,158,77,92,18,168,175,205,196,66,212,57,70,211,96,128,80,197,162\")),bytes(abi.encode(\"238,34,65,249,71,43,78,227,185,58,15,62,159,160,190,74,65,36,95,3,148,54,58,166,173,103,161,239,219,3,107,218\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.174ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[75,146,117,109,205,170,162,121,193,53,167,12,58,219,13,41,199,244,102,13,61,241,151,86,9,31,4,175,167,62,82,203],[31,111,55,145,242,138,125,130,233,119,51,176,18,132,164,136,119,94,100,116,3,123,18,105,101,1,8,248,47,93,79,201],[195,104,32,192,243,175,125,153,237,154,15,37,207,76,174,53,100,245,77,222,113,234,168,158,253,40,13,102,81,219,107,110],[45,244,151,96,181,121,58,252,155,170,157,209,197,233,148,29,151,131,244,229,214,134,59,177,47,58,38,252,200,145,160,245],[58,17,240,12,188,236,38,94,254,100,157,192,186,238,53,211,242,194,108,255,201,219,164,200,137,44,183,211,130,137,21,236]]",
              "sol": "[bytes(abi.encode(\"75,146,117,109,205,170,162,121,193,53,167,12,58,219,13,41,199,244,102,13,61,241,151,86,9,31,4,175,167,62,82,203\")),bytes(abi.encode(\"31,111,55,145,242,138,125,130,233,119,51,176,18,132,164,136,119,94,100,116,3,123,18,105,101,1,8,248,47,93,79,201\")),bytes(abi.encode(\"195,104,32,192,243,175,125,153,237,154,15,37,207,76,174,53,100,245,77,222,113,234,168,158,253,40,13,102,81,219,107,110\")),bytes(abi.encode(\"45,244,151,96,181,121,58,252,155,170,157,209,197,233,148,29,151,131,244,229,214,134,59,177,47,58,38,252,200,145,160,245\")),bytes(abi.encode(\"58,17,240,12,188,236,38,94,254,100,157,192,186,238,53,211,242,194,108,255,201,219,164,200,137,44,183,211,130,137,21,236\"))]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.175ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[105]",
              "sol": "bytes1(\"105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.175ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.176ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.176ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.176ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.177ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"xdb2f\"",
              "sol": "\"xdb2f\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.177ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.177ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.178ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"cby0bh\"",
              "sol": "\"cby0bh\""
            },
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.178ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "\"4dkzfv\"",
              "sol": "\"4dkzfv\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.178ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "\"xdsbws\"",
              "sol": "\"xdsbws\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.179ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"13120q\"",
              "sol": "\"13120q\""
            },
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "\"coh7g\"",
              "sol": "\"coh7g\""
            },
            {
              "js": "\"tnq3z\"",
              "sol": "\"tnq3z\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.179ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.179ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"coh7g\"",
              "sol": "\"coh7g\""
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.180ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.181ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"4dkzfv\"",
              "sol": "\"4dkzfv\""
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"coh7g\"",
              "sol": "\"coh7g\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.182ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.183ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"Capstones\",\"6chbmf\",\"[\",\"P\",\"xdb2f\"]",
              "sol": "[string(\"Capstones\"),string(\"6chbmf\"),string(\"[\"),string(\"P\"),string(\"xdb2f\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.184ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[205,181,142,247,10,201,108,64,85,96,111,166,8,247,191,79,36,15,138,155,77,28,30,181,242,178,247,69,175,57,25,138],[225,1,164,57,154,59,93,38,1,114,248,42,246,21,151,235,27,180,14,76,217,126,172,31,219,151,243,166,13,219,34,3],[51,56,192,157,67,120,60,227,231,248,101,252,154,4,105,164,168,226,205,245,101,115,227,188,69,53,90,66,12,63,171,13]]",
              "sol": "[bytes(abi.encode(\"205,181,142,247,10,201,108,64,85,96,111,166,8,247,191,79,36,15,138,155,77,28,30,181,242,178,247,69,175,57,25,138\")),bytes(abi.encode(\"225,1,164,57,154,59,93,38,1,114,248,42,246,21,151,235,27,180,14,76,217,126,172,31,219,151,243,166,13,219,34,3\")),bytes(abi.encode(\"51,56,192,157,67,120,60,227,231,248,101,252,154,4,105,164,168,226,205,245,101,115,227,188,69,53,90,66,12,63,171,13\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.184ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.185ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[212,130,200,54,101,242,111,135,142,63,227,36,207,17,200,82,129,103,23,38,216,197,91,66,182,215,205,254,126,47,105,126]",
              "sol": "stringToBytes32(\"212,130,200,54,101,242,111,135,142,63,227,36,207,17,200,82,129,103,23,38,216,197,91,66,182,215,205,254,126,47,105,126\")"
            },
            {
              "js": "[184,185,113,66,86,3,223,174,250,100,245,6,51,201,222,17,62,16,151,164,212,131,37,236,191,218,4,90,195,9,46,4]",
              "sol": "stringToBytes32(\"184,185,113,66,86,3,223,174,250,100,245,6,51,201,222,17,62,16,151,164,212,131,37,236,191,218,4,90,195,9,46,4\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.185ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[208,239,218,153,63,227,111,22,96,129,159,234,133,248,228,132,125,146,162,136,135,69,250,4,178,182,255,149,238,183,186,172]",
              "sol": "stringToBytes32(\"208,239,218,153,63,227,111,22,96,129,159,234,133,248,228,132,125,146,162,136,135,69,250,4,178,182,255,149,238,183,186,172\")"
            },
            {
              "js": "[187,106,214,247,138,12,89,207,0,141,156,120,212,42,178,84,135,81,45,30,146,48,48,105,87,147,249,125,132,0,139,74]",
              "sol": "abi.encode(\"187,106,214,247,138,12,89,207,0,141,156,120,212,42,178,84,135,81,45,30,146,48,48,105,87,147,249,125,132,0,139,74\")"
            },
            {
              "js": "[221,80,241,196,91,211,10,124,121,244,200,174,64,145,52,162,89,87,197,89,42,170,31,42,232,17,91,213,79,150,182,21]",
              "sol": "abi.encode(\"221,80,241,196,91,211,10,124,121,244,200,174,64,145,52,162,89,87,197,89,42,170,31,42,232,17,91,213,79,150,182,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.185ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[35,100,104,107,198,195,146,42,60,88,101,194,186,19,162,176,84,235,55,254,90,214,128,1,63,226,3,119,203,150,169,68]",
              "sol": "abi.encode(\"35,100,104,107,198,195,146,42,60,88,101,194,186,19,162,176,84,235,55,254,90,214,128,1,63,226,3,119,203,150,169,68\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[99,160,172,157,213,115,113,62,123,43,212,43,222,235,225,192,110,218,240,27,110,26,144,70,111,49,140,203,239,64,133,144]",
              "sol": "abi.encode(\"99,160,172,157,213,115,113,62,123,43,212,43,222,235,225,192,110,218,240,27,110,26,144,70,111,49,140,203,239,64,133,144\")"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.187ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[48,224,21,68,79,249,255,153,186,137,110,96,32,32,90,183,175,247,185,131,102,43,186,18,5,182,182,247,44,169,140,231]",
              "sol": "stringToBytes32(\"48,224,21,68,79,249,255,153,186,137,110,96,32,32,90,183,175,247,185,131,102,43,186,18,5,182,182,247,44,169,140,231\")"
            },
            {
              "js": "\"xdb2f\"",
              "sol": "\"xdb2f\""
            },
            {
              "js": "[23,98,156,224,132,104,38,81,117,55,16,233,21,173,55,244,138,6,94,163,35,104,95,152,13,221,168,225,11,107,62,2]",
              "sol": "abi.encode(\"23,98,156,224,132,104,38,81,117,55,16,233,21,173,55,244,138,6,94,163,35,104,95,152,13,221,168,225,11,107,62,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[177,25,37,51,249,219,236,189,74,114,15,225,200,214,112,80,103,159,187,25,17,89,159,155,138,232,228,165,44,188,80,236]",
              "sol": "stringToBytes32(\"177,25,37,51,249,219,236,189,74,114,15,225,200,214,112,80,103,159,187,25,17,89,159,155,138,232,228,165,44,188,80,236\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[149,129,229,81,209,174,86,116,114,79,217,115,46,79,110,6,131,212,190,133,149,204,129,150,101,59,219,204,138,73,205,141]",
              "sol": "abi.encode(\"149,129,229,81,209,174,86,116,114,79,217,115,46,79,110,6,131,212,190,133,149,204,129,150,101,59,219,204,138,73,205,141\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.188ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[120,26,129,167,37,116,167,144,210,194,125,106,106,129,220,196,67,118,121,240,54,78,199,68,16,133,3,238,163,121,66,195]",
              "sol": "stringToBytes32(\"120,26,129,167,37,116,167,144,210,194,125,106,106,129,220,196,67,118,121,240,54,78,199,68,16,133,3,238,163,121,66,195\")"
            },
            {
              "js": "[142,35,37,222,9,63,83,123,190,201,168,80,219,55,27,7,224,234,82,65,25,173,157,76,221,197,8,5,195,41,49,54]",
              "sol": "abi.encode(\"142,35,37,222,9,63,83,123,190,201,168,80,219,55,27,7,224,234,82,65,25,173,157,76,221,197,8,5,195,41,49,54\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[120,26,129,167,37,116,167,144,210,194,125,106,106,129,220,196,67,118,121,240,54,78,199,68,16,133,3,238,163,121,66,195]",
                "sol": "stringToBytes32(\"120,26,129,167,37,116,167,144,210,194,125,106,106,129,220,196,67,118,121,240,54,78,199,68,16,133,3,238,163,121,66,195\")"
              },
              {
                "js": "[211,126,202,69,113,25,117,166,155,90,147,127,36,164,27,146,76,212,249,34,188,134,184,129,8,32,135,48,206,78,169,103,109]",
                "sol": "bytes33(\"211,126,202,69,113,25,117,166,155,90,147,127,36,164,27,146,76,212,249,34,188,134,184,129,8,32,135,48,206,78,169,103,109\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.189ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[96,4,113,118,208,126,170,142,26,157,211,104,234,92,204,95,253,194,136,16,27,184,178,181,54,196,62,250,149,188,31,32]",
              "sol": "abi.encode(\"96,4,113,118,208,126,170,142,26,157,211,104,234,92,204,95,253,194,136,16,27,184,178,181,54,196,62,250,149,188,31,32\")"
            },
            {
              "js": "[123,73,229,120,41,188,129,167,89,44,149,131,113,5,37,195,94,80,21,178,179,176,207,230,60,77,66,98,94,84,37,70]",
              "sol": "stringToBytes32(\"123,73,229,120,41,188,129,167,89,44,149,131,113,5,37,195,94,80,21,178,179,176,207,230,60,77,66,98,94,84,37,70\")"
            },
            {
              "js": "[68,128,255,226,45,96,157,217,181,172,226,80,154,1,60,217,8,152,244,37,117,177,156,72,139,90,243,162,140,144,146,11]",
              "sol": "abi.encode(\"68,128,255,226,45,96,157,217,181,172,226,80,154,1,60,217,8,152,244,37,117,177,156,72,139,90,243,162,140,144,146,11\")"
            },
            {
              "js": "\"xdsbws\"",
              "sol": "\"xdsbws\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[43,57,132,238,99,85,3,9,59,232,40,174,61,70,160,119,220,97,127,39,220,234,212,134,95,72,77,40,108,54,160,2]",
              "sol": "abi.encode(\"43,57,132,238,99,85,3,9,59,232,40,174,61,70,160,119,220,97,127,39,220,234,212,134,95,72,77,40,108,54,160,2\")"
            },
            {
              "js": "[5,156,174,43,83,22,217,75,165,245,154,218,178,132,99,193,64,246,145,158,85,4,235,158,181,42,194,213,1,90,51,177]",
              "sol": "stringToBytes32(\"5,156,174,43,83,22,217,75,165,245,154,218,178,132,99,193,64,246,145,158,85,4,235,158,181,42,194,213,1,90,51,177\")"
            },
            {
              "js": "[49,199,232,94,193,178,197,52,151,62,212,204,112,155,76,161,28,96,150,167,77,18,61,178,17,45,245,77,236,221,143,101]",
              "sol": "abi.encode(\"49,199,232,94,193,178,197,52,151,62,212,204,112,155,76,161,28,96,150,167,77,18,61,178,17,45,245,77,236,221,143,101\")"
            },
            {
              "js": "\"xdb2f\"",
              "sol": "\"xdb2f\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[10,155,9,28,164,101,73,151,51,227,167,13,199,143,71,49,151,104,117,55,204,81,193,94,140,153,149,174,175,70,198,241]",
              "sol": "abi.encode(\"10,155,9,28,164,101,73,151,51,227,167,13,199,143,71,49,151,104,117,55,204,81,193,94,140,153,149,174,175,70,198,241\")"
            },
            {
              "js": "[63,137,214,71,11,157,138,75,219,126,153,225,134,90,42,190,188,52,190,159,229,0,190,47,101,191,89,171,35,193,59,103]",
              "sol": "stringToBytes32(\"63,137,214,71,11,157,138,75,219,126,153,225,134,90,42,190,188,52,190,159,229,0,190,47,101,191,89,171,35,193,59,103\")"
            },
            {
              "js": "[222,157,209,241,89,85,125,247,55,242,91,133,71,168,252,173,131,114,40,152,115,142,104,216,216,115,62,230,160,115,88,247]",
              "sol": "abi.encode(\"222,157,209,241,89,85,125,247,55,242,91,133,71,168,252,173,131,114,40,152,115,142,104,216,216,115,62,230,160,115,88,247\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[16,129,251,64,69,76,57,62,211,158,229,187,30,21,39,161,101,218,233,78,161,49,87,152,2,136,174,208,22,184,99,213]",
              "sol": "abi.encode(\"16,129,251,64,69,76,57,62,211,158,229,187,30,21,39,161,101,218,233,78,161,49,87,152,2,136,174,208,22,184,99,213\")"
            },
            {
              "js": "[127,67,135,32,203,91,136,222,25,229,33,217,186,108,245,245,242,193,65,26,28,223,199,93,252,74,1,45,60,37,96,57]",
              "sol": "stringToBytes32(\"127,67,135,32,203,91,136,222,25,229,33,217,186,108,245,245,242,193,65,26,28,223,199,93,252,74,1,45,60,37,96,57\")"
            },
            {
              "js": "[38,101,218,34,63,174,9,206,4,77,79,116,129,69,20,94,197,138,125,68,231,14,3,93,129,212,238,10,109,155,232,193]",
              "sol": "abi.encode(\"38,101,218,34,63,174,9,206,4,77,79,116,129,69,20,94,197,138,125,68,231,14,3,93,129,212,238,10,109,155,232,193\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[37,138,194,50,172,121,16,117,9,6,138,93,25,184,240,247,254,87,209,38,56,153,73,83,82,30,76,148,51,200,84,152]",
              "sol": "abi.encode(\"37,138,194,50,172,121,16,117,9,6,138,93,25,184,240,247,254,87,209,38,56,153,73,83,82,30,76,148,51,200,84,152\")"
            },
            {
              "js": "[65,148,202,235,2,2,118,224,116,199,210,79,79,11,95,253,162,255,40,76,15,41,187,137,7,70,158,208,2,61,94,227]",
              "sol": "stringToBytes32(\"65,148,202,235,2,2,118,224,116,199,210,79,79,11,95,253,162,255,40,76,15,41,187,137,7,70,158,208,2,61,94,227\")"
            },
            {
              "js": "[138,6,7,8,45,96,67,218,183,243,183,189,225,6,155,33,124,219,252,140,48,149,20,243,40,126,172,121,136,11,195,69]",
              "sol": "abi.encode(\"138,6,7,8,45,96,67,218,183,243,183,189,225,6,155,33,124,219,252,140,48,149,20,243,40,126,172,121,136,11,195,69\")"
            },
            {
              "js": "\"lznjau\"",
              "sol": "\"lznjau\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[118,78,22,123,1,216,194,175,91,139,163,170,156,13,66,180,93,109,244,110,36,175,13,61,80,111,54,134,142,187,126,89]",
              "sol": "abi.encode(\"118,78,22,123,1,216,194,175,91,139,163,170,156,13,66,180,93,109,244,110,36,175,13,61,80,111,54,134,142,187,126,89\")"
            },
            {
              "js": "[98,118,179,90,244,249,186,116,232,184,205,37,85,157,247,3,229,180,240,246,140,239,60,253,167,87,252,231,11,123,130,143]",
              "sol": "stringToBytes32(\"98,118,179,90,244,249,186,116,232,184,205,37,85,157,247,3,229,180,240,246,140,239,60,253,167,87,252,231,11,123,130,143\")"
            },
            {
              "js": "[47,55,236,188,5,191,15,243,201,209,47,80,90,12,71,41,153,3,204,194,51,159,61,198,223,224,125,236,202,110,42,250]",
              "sol": "abi.encode(\"47,55,236,188,5,191,15,243,201,209,47,80,90,12,71,41,153,3,204,194,51,159,61,198,223,224,125,236,202,110,42,250\")"
            },
            {
              "js": "\"t65nq4\"",
              "sol": "\"t65nq4\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[39,208,207,61,227,24,111,84,32,183,70,191,193,26,114,10,150,93,1,142,180,189,214,172,163,211,171,71,188,194,76,215]",
              "sol": "abi.encode(\"39,208,207,61,227,24,111,84,32,183,70,191,193,26,114,10,150,93,1,142,180,189,214,172,163,211,171,71,188,194,76,215\")"
            },
            {
              "js": "[2,186,255,113,102,99,158,41,240,153,228,5,190,105,217,107,196,239,139,190,225,64,223,22,198,50,113,255,37,153,191,68]",
              "sol": "stringToBytes32(\"2,186,255,113,102,99,158,41,240,153,228,5,190,105,217,107,196,239,139,190,225,64,223,22,198,50,113,255,37,153,191,68\")"
            },
            {
              "js": "[128,25,35,171,63,179,126,17,53,212,58,190,31,75,227,218,53,97,113,97,179,220,118,25,2,173,227,251,6,34,56,13]",
              "sol": "abi.encode(\"128,25,35,171,63,179,126,17,53,212,58,190,31,75,227,218,53,97,113,97,179,220,118,25,2,173,227,251,6,34,56,13\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[121,147,214,31,201,174,107,230,137,1,7,210,41,60,77,210,146,227,83,14,48,117,232,123,90,13,143,173,222,35,47,60]",
              "sol": "abi.encode(\"121,147,214,31,201,174,107,230,137,1,7,210,41,60,77,210,146,227,83,14,48,117,232,123,90,13,143,173,222,35,47,60\")"
            },
            {
              "js": "[240,164,89,15,116,153,0,169,73,68,15,147,80,11,199,255,83,123,225,127,198,179,254,88,114,221,171,197,6,215,211,228]",
              "sol": "stringToBytes32(\"240,164,89,15,116,153,0,169,73,68,15,147,80,11,199,255,83,123,225,127,198,179,254,88,114,221,171,197,6,215,211,228\")"
            },
            {
              "js": "[123,179,190,33,77,197,173,73,73,109,205,83,43,188,249,21,149,71,246,153,19,155,161,122,253,162,99,199,189,119,200,221]",
              "sol": "abi.encode(\"123,179,190,33,77,197,173,73,73,109,205,83,43,188,249,21,149,71,246,153,19,155,161,122,253,162,99,199,189,119,200,221\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.198ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[159,46,51,193,41,172,56,210,247,11,48,235,255,252,100,132,115,168,115,3,72,45,254,151,208,140,94,140,88,174,158,197]",
              "sol": "abi.encode(\"159,46,51,193,41,172,56,210,247,11,48,235,255,252,100,132,115,168,115,3,72,45,254,151,208,140,94,140,88,174,158,197\")"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "[10,49,70,125,31,14,147,230,148,174,118,152,202,77,233,51,16,116,235,86,231,209,189,38,193,69,5,75,10,126,59,11]",
              "sol": "abi.encode(\"10,49,70,125,31,14,147,230,148,174,118,152,202,77,233,51,16,116,235,86,231,209,189,38,193,69,5,75,10,126,59,11\")"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.199ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[152,154,20,162,6,224,94,212,42,29,39,122,89,166,139,75,112,100,66,125,227,171,205,137,108,241,247,7,248,126,56,53]",
              "sol": "stringToBytes32(\"152,154,20,162,6,224,94,212,42,29,39,122,89,166,139,75,112,100,66,125,227,171,205,137,108,241,247,7,248,126,56,53\")"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "[160,167,172,85,101,159,160,214,143,28,219,242,77,191,13,51,188,170,51,108,1,161,95,123,124,225,93,228,91,39,128,56]",
              "sol": "stringToBytes32(\"160,167,172,85,101,159,160,214,143,28,219,242,77,191,13,51,188,170,51,108,1,161,95,123,124,225,93,228,91,39,128,56\")"
            },
            {
              "js": "[243,86,128,188,15,210,234,112,88,243,129,132,149,211,117,122,28,169,78,120,79,176,111,159,142,183,131,30,189,47,222,83]",
              "sol": "stringToBytes32(\"243,86,128,188,15,210,234,112,88,243,129,132,149,211,117,122,28,169,78,120,79,176,111,159,142,183,131,30,189,47,222,83\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.199ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[87,235,88,206,4,220,26,203,226,98,203,12,214,102,250,221,107,140,57,8,61,231,3,22,169,238,135,5,89,173,255,186]",
              "sol": "stringToBytes32(\"87,235,88,206,4,220,26,203,226,98,203,12,214,102,250,221,107,140,57,8,61,231,3,22,169,238,135,5,89,173,255,186\")"
            },
            {
              "js": "[65,204,141,227,124,113,28,127,105,159,87,23,225,124,62,90,253,92,39,144,92,82,166,30,169,82,56,115,225,35,212,236,208,210,168,77,2,244,87,193,19,126,136,183,236,189,136,89,99,188,250,60,68,185,171,250,114,41,32]",
              "sol": "abi.encode(\"65,204,141,227,124,113,28,127,105,159,87,23,225,124,62,90,253,92,39,144,92,82,166,30,169,82,56,115,225,35,212,236,208,210,168,77,2,244,87,193,19,126,136,183,236,189,136,89,99,188,250,60,68,185,171,250,114,41,32\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[128,199,33,171,48,24,223,17,243,89,241,16,180,218,32,59,65,127,40,81,191,4,132,48,180,252,190,244,103,134,51,114]",
              "sol": "stringToBytes32(\"128,199,33,171,48,24,223,17,243,89,241,16,180,218,32,59,65,127,40,81,191,4,132,48,180,252,190,244,103,134,51,114\")"
            },
            {
              "js": "[144,161,105,94,219,251,132,29,153,66,253,148,222,70,194,191,109,107,229,219,73,214,70,3,143,116,79,136,41,208,55,131,203,41,244,220,113,43,184,0,185,244,223,198,188,115,30,189,87,223,197,210,168,158,2,109,246,78,90,0,2,146,14,33,60]",
              "sol": "abi.encode(\"144,161,105,94,219,251,132,29,153,66,253,148,222,70,194,191,109,107,229,219,73,214,70,3,143,116,79,136,41,208,55,131,203,41,244,220,113,43,184,0,185,244,223,198,188,115,30,189,87,223,197,210,168,158,2,109,246,78,90,0,2,146,14,33,60\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.202ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.203ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[49,47]",
              "sol": "[uint(49),uint(47)]"
            },
            {
              "js": "[[55,31],[87,66]]",
              "sol": "[[uint(55),uint(31)],[uint(87),uint(66)]]"
            },
            {
              "js": "[15,200001]",
              "sol": "[uint(15),uint(200001)]"
            },
            {
              "js": "[161,1025]",
              "sol": "[uint(161),uint(1025)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.205ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.206ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[2014223715,16,257,26,70,55]",
              "sol": "[uint(2014223715),uint(16),uint(257),uint(26),uint(70),uint(55)]"
            },
            {
              "js": "{\"A\": {\"X\": 127,\"Y\": 101},\"B\": {\"X\": [27,87],\"Y\": [2,71]},\"C\": {\"X\": 21,\"Y\": 256}}",
              "sol": "Verifier.Proof(Pairing.G1Point(127,101),Pairing.G2Point([uint(27),uint(87)],[uint(2),uint(71)]),Pairing.G1Point(21,256))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[96,48,161]",
              "sol": "[uint(96),uint(48),uint(161)]"
            },
            {
              "js": "{\"A\": {\"X\": 103,\"Y\": 8},\"B\": {\"X\": [23,254],\"Y\": [1532892063,49]},\"C\": {\"X\": 102,\"Y\": 21}}",
              "sol": "Verifier.Proof(Pairing.G1Point(103,8),Pairing.G2Point([uint(23),uint(254)],[uint(1532892063),uint(49)]),Pairing.G1Point(102,21))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.209ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.209ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.210ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"accounts[4]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.211ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.212ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.213ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.213ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.214ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.216ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "[169,247,38,227,40,246,111,84,87,9,161,17,70,110,223,155,227,166,104,19,231,40,247,168,145,100,31,54,144,5,162,63]",
              "sol": "abi.encode(\"169,247,38,227,40,246,111,84,87,9,161,17,70,110,223,155,227,166,104,19,231,40,247,168,145,100,31,54,144,5,162,63\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "24",
                "sol": "24"
              },
              {
                "js": "[169,247,38,227,40,246,111,84,87,9,161,17,70,110,223,155,227,166,104,19,231,40,247,168,145,100,31,54,144,5,162,63]",
                "sol": "abi.encode(\"169,247,38,227,40,246,111,84,87,9,161,17,70,110,223,155,227,166,104,19,231,40,247,168,145,100,31,54,144,5,162,63\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.217ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.218ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[131,182,69,133]",
              "sol": "bytes4(\"131,182,69,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.221ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.222ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.222ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.223ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.224ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "[203,195,12,29,154,143,133,166,40,129,239,227,55,107,119,162,121,114,178,15,142,39,5,141,49,215,134,63,201,232,139,99]",
              "sol": "abi.encode(\"203,195,12,29,154,143,133,166,40,129,239,227,55,107,119,162,121,114,178,15,142,39,5,141,49,215,134,63,201,232,139,99\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "[3,6,72,247,48,23,49,123,203,175,175,55,125,36,127,185,195,245,63,60,156,105,168,125,208,28,187,230,199,108,243,121]",
              "sol": "abi.encode(\"3,6,72,247,48,23,49,123,203,175,175,55,125,36,127,185,195,245,63,60,156,105,168,125,208,28,187,230,199,108,243,121\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.225ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "23",
                "sol": "23"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "23",
                "sol": "23"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.227ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[48,69]",
              "sol": "[uint(48),uint(69)]"
            },
            {
              "js": "[[257,1024],[46,33]]",
              "sol": "[[uint(257),uint(1024)],[uint(46),uint(33)]]"
            },
            {
              "js": "[21,8]",
              "sol": "[uint(21),uint(8)]"
            },
            {
              "js": "[87,161]",
              "sol": "[uint(87),uint(161)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.229ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.230ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.230ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.231ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.231ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.233ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.235ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.236ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.236ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.239ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.240ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T05:27:06.241ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.242ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T05:27:06.242ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}