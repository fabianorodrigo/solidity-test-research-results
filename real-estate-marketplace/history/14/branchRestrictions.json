,{
  "2020-11-11T16:29:41.491ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:29:56.593ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:30:11.523ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:30:26.794ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:30:41.885ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:30:57.128ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.172ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [127,231,228,124,116,140,2,134,109,111,118,171,254,138,11,119,6,26,133,122,30,122,104,156,129,77,151,243,177,43,51,47],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"127,231,228,124,116,140,2,134,109,111,118,171,254,138,11,119,6,26,133,122,30,122,104,156,129,77,151,243,177,43,51,47\"),59)"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.173ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [117,244,153,172,114,158,235,161,179,160,95,201,190,5,52,65,39,210,243,62,46,21,43,158,7,16,209,69,79,41,29,26],\"capacity\": 87}",
              "sol": "Buffer.buffer(abi.encode(\"117,244,153,172,114,158,235,161,179,160,95,201,190,5,52,65,39,210,243,62,46,21,43,158,7,16,209,69,79,41,29,26\"),87)"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [35,2,200,227,101,158,165,230,246,130,107,43,242,232,182,137,74,126,163,7,233,246,203,107,253,213,174,178,112,199,110,22],\"capacity\": 101}",
              "sol": "Buffer.buffer(abi.encode(\"35,2,200,227,101,158,165,230,246,130,107,43,242,232,182,137,74,126,163,7,233,246,203,107,253,213,174,178,112,199,110,22\"),101)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.175ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [195,111,125,136,81,90,254,203,132,177,140,4,236,33,69,158,106,18,199,218,123,38,153,132,226,208,3,148,91,255,102,118],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"195,111,125,136,81,90,254,203,132,177,140,4,236,33,69,158,106,18,199,218,123,38,153,132,226,208,3,148,91,255,102,118\"),55)"
            },
            {
              "js": "[208,244,42,129,148,119,80,194,74,35,148,136,212,86,37,68,91,149,148,98,175,244,60,232,113,215,1,230,82,21,62,254]",
              "sol": "abi.encode(\"208,244,42,129,148,119,80,194,74,35,148,136,212,86,37,68,91,149,148,98,175,244,60,232,113,215,1,230,82,21,62,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.177ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [153,109,193,97,144,183,130,88,237,107,69,62,124,201,195,34,164,142,170,133,37,23,122,97,211,225,147,108,26,94,177,250],\"capacity\": 8}",
              "sol": "Buffer.buffer(abi.encode(\"153,109,193,97,144,183,130,88,237,107,69,62,124,201,195,34,164,142,170,133,37,23,122,97,211,225,147,108,26,94,177,250\"),8)"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.177ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [92,130,129,169,240,67,9,73,168,182,156,86,186,206,80,127,144,28,171,47,123,39,236,179,37,102,120,101,63,235,44,233],\"capacity\": 2014223715}",
              "sol": "Buffer.buffer(abi.encode(\"92,130,129,169,240,67,9,73,168,182,156,86,186,206,80,127,144,28,171,47,123,39,236,179,37,102,120,101,63,235,44,233\"),2014223715)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.178ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [178,93,119,28,191,7,87,44,156,115,98,41,184,232,250,189,69,225,13,58,67,156,66,161,184,2,126,18,27,156,92,155],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"178,93,119,28,191,7,87,44,156,115,98,41,184,232,250,189,69,225,13,58,67,156,66,161,184,2,126,18,27,156,92,155\"),21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.178ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [145,134,161,152,201,184,104,11,133,18,185,120,37,80,217,137,208,89,251,35,12,63,29,172,188,19,250,247,11,197,223,84],\"capacity\": 200000}",
              "sol": "Buffer.buffer(abi.encode(\"145,134,161,152,201,184,104,11,133,18,185,120,37,80,217,137,208,89,251,35,12,63,29,172,188,19,250,247,11,197,223,84\"),200000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.187ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.188ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.188ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 95,\"Y\": 254}",
              "sol": "Pairing.G1Point(95,254)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.189ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 46,\"Y\": 255}",
              "sol": "Pairing.G1Point(46,255)"
            },
            {
              "js": "{\"X\": 256,\"Y\": 66}",
              "sol": "Pairing.G1Point(256,66)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.190ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [2014223714,61],\"Y\": [103,18]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(61)],[uint(103),uint(18)])"
            },
            {
              "js": "{\"X\": [6,56],\"Y\": [8,1532892062]}",
              "sol": "Pairing.G2Point([uint(6),uint(56)],[uint(8),uint(1532892062)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.191ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 31,\"Y\": 200001}",
              "sol": "Pairing.G1Point(31,200001)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.191ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 95,\"Y\": 127},{\"X\": 103,\"Y\": 15},{\"X\": 0,\"Y\": 2014223714}]",
              "sol": "[Pairing.G1Point(95,127),Pairing.G1Point(103,15),Pairing.G1Point(0,2014223714)]"
            },
            {
              "js": "[{\"X\": [48,160],\"Y\": [17,129]},{\"X\": [255,56],\"Y\": [127,256]},{\"X\": [8,8],\"Y\": [3,129]}]",
              "sol": "[Pairing.G2Point([uint(48),uint(160)],[uint(17),uint(129)]),Pairing.G2Point([uint(255),uint(56)],[uint(127),uint(256)]),Pairing.G2Point([uint(8),uint(8)],[uint(3),uint(129)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 95,\"Y\": 87},{\"X\": 18,\"Y\": 17},{\"X\": 46,\"Y\": 256},{\"X\": 8,\"Y\": 54}]",
                "sol": "[Pairing.G1Point(2,21),Pairing.G1Point(87,88),Pairing.G1Point(103,56),Pairing.G1Point(1024,255)]"
              },
              {
                "js": "[{\"X\": [48,160],\"Y\": [17,129]},{\"X\": [255,56],\"Y\": [127,256]},{\"X\": [8,8],\"Y\": [3,129]}]",
                "sol": "[Pairing.G2Point([uint(48),uint(160)],[uint(17),uint(129)]),Pairing.G2Point([uint(255),uint(56)],[uint(127),uint(256)]),Pairing.G2Point([uint(8),uint(8)],[uint(3),uint(129)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.196ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 1532892063,\"Y\": 20}",
              "sol": "Pairing.G1Point(1532892063,20)"
            },
            {
              "js": "{\"X\": [56,128],\"Y\": [2014223714,257]}",
              "sol": "Pairing.G2Point([uint(56),uint(128)],[uint(2014223714),uint(257)])"
            },
            {
              "js": "{\"X\": 20,\"Y\": 48}",
              "sol": "Pairing.G1Point(20,48)"
            },
            {
              "js": "{\"X\": [46,16],\"Y\": [29,101]}",
              "sol": "Pairing.G2Point([uint(46),uint(16)],[uint(29),uint(101)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.197ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 254,\"Y\": 200001}",
              "sol": "Pairing.G1Point(254,200001)"
            },
            {
              "js": "{\"X\": [24,27],\"Y\": [86,26]}",
              "sol": "Pairing.G2Point([uint(24),uint(27)],[uint(86),uint(26)])"
            },
            {
              "js": "{\"X\": 30,\"Y\": 28}",
              "sol": "Pairing.G1Point(30,28)"
            },
            {
              "js": "{\"X\": [21,96],\"Y\": [6,49]}",
              "sol": "Pairing.G2Point([uint(21),uint(96)],[uint(6),uint(49)])"
            },
            {
              "js": "{\"X\": 1,\"Y\": 60}",
              "sol": "Pairing.G1Point(1,60)"
            },
            {
              "js": "{\"X\": [18,27],\"Y\": [63,200000]}",
              "sol": "Pairing.G2Point([uint(18),uint(27)],[uint(63),uint(200000)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.205ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.206ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.207ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.207ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.208ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.208ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.210ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.211ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.212ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.212ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.213ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.219ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [159,104,208,250,113,133,18,147,36,2,230,40,115,124,198,191,211,243,219,66,178,239,77,126,158,40,197,124,128,13,2,27],\"capacity\": 65}",
              "sol": "Buffer.buffer(abi.encode(\"159,104,208,250,113,133,18,147,36,2,230,40,115,124,198,191,211,243,219,66,178,239,77,126,158,40,197,124,128,13,2,27\"),65)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.219ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [212,25,74,98,203,160,169,154,172,164,94,121,242,183,137,150,235,167,79,139,169,37,102,230,8,138,85,103,22,229,23,200],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"212,25,74,98,203,160,169,154,172,164,94,121,242,183,137,150,235,167,79,139,169,37,102,230,8,138,85,103,22,229,23,200\"),57)"
            },
            {
              "js": "[174,112,49,215,187,231,216,161,8,18,162,255,236,242,55,57,76,157,129,69,204,153,183,98,206,77,14,242,94,173,105,128]",
              "sol": "abi.encode(\"174,112,49,215,187,231,216,161,8,18,162,255,236,242,55,57,76,157,129,69,204,153,183,98,206,77,14,242,94,173,105,128\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.220ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [137,204,111,8,234,158,184,66,128,234,186,174,58,250,226,4,139,58,223,160,83,158,138,162,70,141,154,193,75,100,86,85],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"137,204,111,8,234,158,184,66,128,234,186,174,58,250,226,4,139,58,223,160,83,158,138,162,70,141,154,193,75,100,86,85\"),98)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.220ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [172,15,120,113,176,212,96,181,252,47,27,167,28,123,226,213,71,74,102,172,173,232,2,121,139,141,105,238,172,127,111,84],\"capacity\": 96}",
              "sol": "Buffer.buffer(abi.encode(\"172,15,120,113,176,212,96,181,252,47,27,167,28,123,226,213,71,74,102,172,173,232,2,121,139,141,105,238,172,127,111,84\"),96)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.221ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[157,188,36,65,118,238,34,156,144,155,221,214,144,17,129,173,146,50,252,179,138,140,121,16,78,172,166,19,171,173,175,141]",
              "sol": "stringToBytes32(\"157,188,36,65,118,238,34,156,144,155,221,214,144,17,129,173,146,50,252,179,138,140,121,16,78,172,166,19,171,173,175,141\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.222ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[35,128,170,167,197,197,238,217,134,123,26,16,121,32,92,156,105,59,1,26,18,228,95,79,146,157,96,93,44,38,204,234]",
              "sol": "stringToBytes32(\"35,128,170,167,197,197,238,217,134,123,26,16,121,32,92,156,105,59,1,26,18,228,95,79,146,157,96,93,44,38,204,234\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[250,250,64,219,178,212,171,119,187,181,215,82,181,100,207,82,14,71,99,130,17,237,228,188,192,81,111,87,32,84,14,122]",
              "sol": "abi.encode(\"250,250,64,219,178,212,171,119,187,181,215,82,181,100,207,82,14,71,99,130,17,237,228,188,192,81,111,87,32,84,14,122\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.290ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.291ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.291ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.292ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.292ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.292ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.293ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.293ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.294ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.297ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.297ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.298ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"0cokis\"",
              "sol": "\"0cokis\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.298ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.299ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.299ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"[\",\"0\",\"0cokis\",\"0cokis\",\"Transaction successfully verified.\",\"Transaction successfully verified.\",\"P\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"j1m5k\"]",
              "sol": "[string(\"[\"),string(\"0\"),string(\"0cokis\"),string(\"0cokis\"),string(\"Transaction successfully verified.\"),string(\"Transaction successfully verified.\"),string(\"P\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"j1m5k\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.300ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"9j2o4\"",
              "sol": "\"9j2o4\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"pm43br\",\"\\x19Ethereum Signed Message:\\n32\",\"1f47n8\",\"98d4za\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"pm43br\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"1f47n8\"),string(\"98d4za\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.301ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "[\"j1m5k\",\"9j2o4\",\"L\",\"9j2o4\"]",
              "sol": "[string(\"j1m5k\"),string(\"9j2o4\"),string(\"L\"),string(\"9j2o4\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.301ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.302ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"pm43br\"]",
              "sol": "[string(\"pm43br\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.302ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "[\"9j2o4\"]",
              "sol": "[string(\"9j2o4\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.303ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "\"0cokis\"",
              "sol": "\"0cokis\""
            },
            {
              "js": "[\"98d4za\"]",
              "sol": "[string(\"98d4za\")]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.303ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"j1m5k\"]",
              "sol": "[string(\"j1m5k\")]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.304ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"z70nl9\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"z70nl9\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.305ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0cokis\",\"0cokis\"]",
              "sol": "[string(\"0cokis\"),string(\"0cokis\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.305ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "[\"L\",\"L\"]",
              "sol": "[string(\"L\"),string(\"L\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.306ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"0cokis\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0cokis\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.306ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"1f47n8\",\"pm43br\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"1f47n8\"),string(\"pm43br\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.307ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Capstones\",\"98d4za\",\"1f47n8\"]",
              "sol": "[string(\"Capstones\"),string(\"98d4za\"),string(\"1f47n8\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.308ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "[\"4qe678\",\"0\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"4qe678\"),string(\"0\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.309ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"0\",\"j1m5k\",\"P\"]",
              "sol": "[string(\"0\"),string(\"j1m5k\"),string(\"P\")]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.309ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"2u4wok\"",
              "sol": "\"2u4wok\""
            },
            {
              "js": "[\"[\",\"1f47n8\",\"\\x19Ethereum Signed Message:\\n32\",\"0\"]",
              "sol": "[string(\"[\"),string(\"1f47n8\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.310ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "[\"1f47n8\",\"o2al8l\",\"4qe678\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"1f47n8\"),string(\"o2al8l\"),string(\"4qe678\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.311ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"z70nl9\",\"0cokis\",\"Capstones\",\"98d4za\"]",
              "sol": "[string(\"z70nl9\"),string(\"0cokis\"),string(\"Capstones\"),string(\"98d4za\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.311ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"1f47n8\",\"2u4wok\",\"z70nl9\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"1f47n8\"),string(\"2u4wok\"),string(\"z70nl9\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.312ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"L\",\"h7c1ak\",\"98d4za\",\"1f47n8\",\"0cokis\"]",
              "sol": "[string(\"L\"),string(\"h7c1ak\"),string(\"98d4za\"),string(\"1f47n8\"),string(\"0cokis\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.312ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"o2al8l\",\"j1m5k\",\"z70nl9\",\"z70nl9\",\"[\"]",
              "sol": "[string(\"o2al8l\"),string(\"j1m5k\"),string(\"z70nl9\"),string(\"z70nl9\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.313ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"2u4wok\",\"P\",\"o2al8l\",\"9j2o4\",\"L\"]",
              "sol": "[string(\"2u4wok\"),string(\"P\"),string(\"o2al8l\"),string(\"9j2o4\"),string(\"L\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.314ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"o2al8l\"",
              "sol": "\"o2al8l\""
            },
            {
              "js": "[\"h7c1ak\",\"L\",\"P\",\"0\",\"1f47n8\"]",
              "sol": "[string(\"h7c1ak\"),string(\"L\"),string(\"P\"),string(\"0\"),string(\"1f47n8\")]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.314ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "[[64,250,60,204,139,148,103,178,249,62,167,166,178,189,33,188,154,126,27,67,40,97,191,132,249,253,33,5,164,142,29,37],[142,49,52,100,237,251,133,83,174,110,229,95,45,174,239,224,131,144,163,104,72,7,228,143,72,229,121,75,8,53,209,240],[210,92,255,251,212,63,90,125,94,82,94,133,160,129,37,216,9,40,20,29,103,228,108,159,40,160,184,3,194,232,144,37],[51,232,162,145,115,106,177,77,209,211,239,37,69,142,117,220,192,229,190,7,149,163,15,136,5,79,130,6,108,41,57,163],[221,8,132,190,9,182,131,45,194,4,108,223,219,107,86,75,155,251,86,54,133,211,249,51,174,93,207,12,186,21,231,182]]",
              "sol": "[bytes(abi.encode(\"64,250,60,204,139,148,103,178,249,62,167,166,178,189,33,188,154,126,27,67,40,97,191,132,249,253,33,5,164,142,29,37\")),bytes(abi.encode(\"142,49,52,100,237,251,133,83,174,110,229,95,45,174,239,224,131,144,163,104,72,7,228,143,72,229,121,75,8,53,209,240\")),bytes(abi.encode(\"210,92,255,251,212,63,90,125,94,82,94,133,160,129,37,216,9,40,20,29,103,228,108,159,40,160,184,3,194,232,144,37\")),bytes(abi.encode(\"51,232,162,145,115,106,177,77,209,211,239,37,69,142,117,220,192,229,190,7,149,163,15,136,5,79,130,6,108,41,57,163\")),bytes(abi.encode(\"221,8,132,190,9,182,131,45,194,4,108,223,219,107,86,75,155,251,86,54,133,211,249,51,174,93,207,12,186,21,231,182\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.315ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "[[10,8,116,213,89,121,70,215,18,156,112,85,174,168,27,244,32,36,15,146,227,83,162,4,42,4,34,126,128,124,180,188]]",
              "sol": "[bytes(abi.encode(\"10,8,116,213,89,121,70,215,18,156,112,85,174,168,27,244,32,36,15,146,227,83,162,4,42,4,34,126,128,124,180,188\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.316ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "\"xmcitf\"",
              "sol": "\"xmcitf\""
            },
            {
              "js": "[[18,80,104,113,250,207,36,217,220,40,98,69,168,162,134,49,144,245,128,42,24,79,216,32,253,52,65,244,247,41,17,180]]",
              "sol": "[bytes(abi.encode(\"18,80,104,113,250,207,36,217,220,40,98,69,168,162,134,49,144,245,128,42,24,79,216,32,253,52,65,244,247,41,17,180\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.316ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "[[127,128,215,170,232,23,16,217,189,240,43,17,28,10,153,54,144,83,78,174,197,35,197,98,105,247,145,6,22,115,166,65],[1,96,110,42,252,192,56,209,210,38,151,42,248,104,34,223,169,185,10,186,76,43,121,92,84,87,195,49,229,120,230,52],[16,108,59,75,57,42,15,188,135,14,242,102,28,78,168,129,185,247,126,52,120,147,249,228,162,12,250,3,201,68,195,30],[245,212,220,190,50,233,7,214,177,51,150,94,233,150,193,214,36,1,57,66,235,116,103,242,41,190,67,181,99,35,154,175],[18,222,164,231,32,172,27,105,250,166,114,242,232,17,24,190,66,211,211,185,56,69,65,219,211,48,58,223,97,203,190,173],[43,250,172,190,200,247,123,162,86,26,221,128,193,24,182,98,79,111,214,63,43,181,34,245,18,27,179,248,65,54,245,127],[152,215,135,174,64,189,206,140,176,222,139,8,128,168,143,4,255,141,212,200,30,69,76,182,176,110,221,139,224,151,30,18],[213,182,97,235,235,200,254,104,201,146,163,248,113,5,71,78,182,1,4,176,158,139,152,209,103,204,15,17,148,36,8,32],[103,179,47,11,208,97,241,116,1,64,100,198,88,183,133,191,165,157,77,97,14,75,134,200,134,63,137,58,156,253,218,142],[5,41,61,51,48,123,205,149,187,229,40,253,50,251,249,240,171,52,2,226,230,35,8,17,17,18,157,179,69,228,211,125]]",
              "sol": "[bytes(abi.encode(\"127,128,215,170,232,23,16,217,189,240,43,17,28,10,153,54,144,83,78,174,197,35,197,98,105,247,145,6,22,115,166,65\")),bytes(abi.encode(\"1,96,110,42,252,192,56,209,210,38,151,42,248,104,34,223,169,185,10,186,76,43,121,92,84,87,195,49,229,120,230,52\")),bytes(abi.encode(\"16,108,59,75,57,42,15,188,135,14,242,102,28,78,168,129,185,247,126,52,120,147,249,228,162,12,250,3,201,68,195,30\")),bytes(abi.encode(\"245,212,220,190,50,233,7,214,177,51,150,94,233,150,193,214,36,1,57,66,235,116,103,242,41,190,67,181,99,35,154,175\")),bytes(abi.encode(\"18,222,164,231,32,172,27,105,250,166,114,242,232,17,24,190,66,211,211,185,56,69,65,219,211,48,58,223,97,203,190,173\")),bytes(abi.encode(\"43,250,172,190,200,247,123,162,86,26,221,128,193,24,182,98,79,111,214,63,43,181,34,245,18,27,179,248,65,54,245,127\")),bytes(abi.encode(\"152,215,135,174,64,189,206,140,176,222,139,8,128,168,143,4,255,141,212,200,30,69,76,182,176,110,221,139,224,151,30,18\")),bytes(abi.encode(\"213,182,97,235,235,200,254,104,201,146,163,248,113,5,71,78,182,1,4,176,158,139,152,209,103,204,15,17,148,36,8,32\")),bytes(abi.encode(\"103,179,47,11,208,97,241,116,1,64,100,198,88,183,133,191,165,157,77,97,14,75,134,200,134,63,137,58,156,253,218,142\")),bytes(abi.encode(\"5,41,61,51,48,123,205,149,187,229,40,253,50,251,249,240,171,52,2,226,230,35,8,17,17,18,157,179,69,228,211,125\"))]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.317ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"xmcitf\"",
              "sol": "\"xmcitf\""
            },
            {
              "js": "[[36,118,55,217,64,147,243,202,20,178,145,162,85,112,92,132,52,80,0,215,179,2,161,189,7,138,32,242,76,140,19,232]]",
              "sol": "[bytes(abi.encode(\"36,118,55,217,64,147,243,202,20,178,145,162,85,112,92,132,52,80,0,215,179,2,161,189,7,138,32,242,76,140,19,232\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.318ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"z70nl9\"",
              "sol": "\"z70nl9\""
            },
            {
              "js": "[[94,241,151,91,1,8,208,229,206,7,225,94,31,10,32,198,252,114,159,190,29,58,190,52,66,33,142,43,76,165,198,70]]",
              "sol": "[bytes(abi.encode(\"94,241,151,91,1,8,208,229,206,7,225,94,31,10,32,198,252,114,159,190,29,58,190,52,66,33,142,43,76,165,198,70\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.318ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[192,23,202,193,139,207,128,133,218,201,163,39,189,92,234,110,123,190,79,127,201,224,116,163,135,151,117,82,161,161,66,112]]",
              "sol": "[bytes(abi.encode(\"192,23,202,193,139,207,128,133,218,201,163,39,189,92,234,110,123,190,79,127,201,224,116,163,135,151,117,82,161,161,66,112\"))]"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.319ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "[[143,220,190,38,27,96,113,233,139,118,62,73,144,151,28,235,204,74,17,198,46,55,231,242,35,140,186,119,78,202,52,145]]",
              "sol": "[bytes(abi.encode(\"143,220,190,38,27,96,113,233,139,118,62,73,144,151,28,235,204,74,17,198,46,55,231,242,35,140,186,119,78,202,52,145\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.320ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[207,247,246,14,215,122,48,144,29,96,113,66,239,186,152,242,40,122,221,71,148,236,129,211,223,170,79,245,35,212,84,65],[134,169,159,27,239,119,37,209,246,244,101,91,103,217,231,226,110,203,146,59,159,229,18,249,144,255,76,33,53,147,205,167]]",
              "sol": "[bytes(abi.encode(\"207,247,246,14,215,122,48,144,29,96,113,66,239,186,152,242,40,122,221,71,148,236,129,211,223,170,79,245,35,212,84,65\")),bytes(abi.encode(\"134,169,159,27,239,119,37,209,246,244,101,91,103,217,231,226,110,203,146,59,159,229,18,249,144,255,76,33,53,147,205,167\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.320ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "[[160,7,3,176,97,192,192,183,238,48,129,241,36,251,30,254,169,246,234,121,137,252,167,214,221,193,81,127,144,238,172,248],[32,181,200,176,245,175,194,24,173,252,204,207,240,104,34,57,174,113,90,245,88,27,165,127,24,168,242,202,249,82,242,203]]",
              "sol": "[bytes(abi.encode(\"160,7,3,176,97,192,192,183,238,48,129,241,36,251,30,254,169,246,234,121,137,252,167,214,221,193,81,127,144,238,172,248\")),bytes(abi.encode(\"32,181,200,176,245,175,194,24,173,252,204,207,240,104,34,57,174,113,90,245,88,27,165,127,24,168,242,202,249,82,242,203\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.321ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[144,118,187,184,57,156,127,246,132,30,11,253,66,90,166,35,221,89,4,75,156,73,61,184,26,176,91,71,148,96,227,52],[125,137,24,54,78,44,43,125,83,196,246,143,111,247,253,31,6,113,183,100,89,24,127,8,4,206,93,61,173,101,219,226]]",
              "sol": "[bytes(abi.encode(\"144,118,187,184,57,156,127,246,132,30,11,253,66,90,166,35,221,89,4,75,156,73,61,184,26,176,91,71,148,96,227,52\")),bytes(abi.encode(\"125,137,24,54,78,44,43,125,83,196,246,143,111,247,253,31,6,113,183,100,89,24,127,8,4,206,93,61,173,101,219,226\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.322ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "[[228,116,199,139,103,48,123,89,193,5,236,230,235,255,131,180,187,183,39,252,182,14,230,172,90,196,84,136,241,28,241,163],[213,34,239,43,24,92,105,72,205,240,228,150,125,220,245,142,30,122,247,222,74,201,72,32,30,114,22,149,167,114,169,142]]",
              "sol": "[bytes(abi.encode(\"228,116,199,139,103,48,123,89,193,5,236,230,235,255,131,180,187,183,39,252,182,14,230,172,90,196,84,136,241,28,241,163\")),bytes(abi.encode(\"213,34,239,43,24,92,105,72,205,240,228,150,125,220,245,142,30,122,247,222,74,201,72,32,30,114,22,149,167,114,169,142\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.323ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"0cokis\"",
              "sol": "\"0cokis\""
            },
            {
              "js": "[[20,34,27,78,144,52,234,166,237,124,86,212,209,167,153,195,131,112,75,111,36,177,154,31,64,242,176,195,34,252,87,68],[15,67,138,124,111,142,213,59,6,165,68,38,85,179,161,52,252,169,203,239,37,85,160,54,157,226,54,25,87,79,229,245],[141,243,18,85,66,0,23,104,51,11,236,215,220,71,164,215,109,232,239,159,49,12,127,154,128,224,241,207,191,240,124,4]]",
              "sol": "[bytes(abi.encode(\"20,34,27,78,144,52,234,166,237,124,86,212,209,167,153,195,131,112,75,111,36,177,154,31,64,242,176,195,34,252,87,68\")),bytes(abi.encode(\"15,67,138,124,111,142,213,59,6,165,68,38,85,179,161,52,252,169,203,239,37,85,160,54,157,226,54,25,87,79,229,245\")),bytes(abi.encode(\"141,243,18,85,66,0,23,104,51,11,236,215,220,71,164,215,109,232,239,159,49,12,127,154,128,224,241,207,191,240,124,4\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.324ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "[[31,76,111,183,197,190,50,220,231,21,212,172,186,169,114,247,180,85,3,183,173,218,89,125,233,133,157,17,138,116,226,181],[116,101,74,147,172,69,53,150,142,91,84,40,94,108,25,142,20,51,47,200,69,12,217,144,89,99,62,11,222,129,171,103],[136,195,227,191,228,167,118,101,232,126,46,12,79,156,249,152,60,74,113,99,87,189,91,169,24,248,24,207,52,8,61,79]]",
              "sol": "[bytes(abi.encode(\"31,76,111,183,197,190,50,220,231,21,212,172,186,169,114,247,180,85,3,183,173,218,89,125,233,133,157,17,138,116,226,181\")),bytes(abi.encode(\"116,101,74,147,172,69,53,150,142,91,84,40,94,108,25,142,20,51,47,200,69,12,217,144,89,99,62,11,222,129,171,103\")),bytes(abi.encode(\"136,195,227,191,228,167,118,101,232,126,46,12,79,156,249,152,60,74,113,99,87,189,91,169,24,248,24,207,52,8,61,79\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.324ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[14,143,58,237,121,155,253,247,35,33,148,167,172,155,68,253,184,214,229,219,249,62,75,227,140,37,116,39,28,79,67,88],[9,40,27,114,84,102,110,9,240,226,155,113,197,28,27,210,125,81,160,244,253,61,138,133,96,38,223,171,172,240,33,124],[31,179,16,243,245,203,162,84,107,134,58,165,9,121,166,251,232,40,113,25,98,117,218,159,19,109,219,4,161,6,211,145]]",
              "sol": "[bytes(abi.encode(\"14,143,58,237,121,155,253,247,35,33,148,167,172,155,68,253,184,214,229,219,249,62,75,227,140,37,116,39,28,79,67,88\")),bytes(abi.encode(\"9,40,27,114,84,102,110,9,240,226,155,113,197,28,27,210,125,81,160,244,253,61,138,133,96,38,223,171,172,240,33,124\")),bytes(abi.encode(\"31,179,16,243,245,203,162,84,107,134,58,165,9,121,166,251,232,40,113,25,98,117,218,159,19,109,219,4,161,6,211,145\"))]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.325ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"vtkc8h\"",
              "sol": "\"vtkc8h\""
            },
            {
              "js": "[[250,168,17,178,29,241,186,23,156,168,13,248,52,204,27,95,176,66,22,132,216,219,127,182,241,138,233,6,200,217,49,178],[137,183,107,242,66,125,83,82,175,251,51,161,157,250,74,94,79,174,97,167,250,66,174,33,167,44,55,87,101,179,122,19],[205,114,242,142,10,116,114,60,57,128,19,224,83,117,188,103,57,61,230,82,164,218,79,203,104,196,99,184,196,127,165,138]]",
              "sol": "[bytes(abi.encode(\"250,168,17,178,29,241,186,23,156,168,13,248,52,204,27,95,176,66,22,132,216,219,127,182,241,138,233,6,200,217,49,178\")),bytes(abi.encode(\"137,183,107,242,66,125,83,82,175,251,51,161,157,250,74,94,79,174,97,167,250,66,174,33,167,44,55,87,101,179,122,19\")),bytes(abi.encode(\"205,114,242,142,10,116,114,60,57,128,19,224,83,117,188,103,57,61,230,82,164,218,79,203,104,196,99,184,196,127,165,138\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.326ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "[[177,9,168,59,30,254,249,204,3,175,164,103,114,254,1,178,106,100,100,10,129,250,109,90,59,83,202,245,128,175,228,45],[184,4,111,241,18,73,235,199,194,225,112,151,109,16,58,1,137,65,214,131,231,31,237,166,229,184,4,244,17,133,7,199],[32,129,239,183,180,113,194,66,108,233,75,5,172,252,177,109,73,151,97,32,91,117,146,236,252,121,177,107,135,160,179,199],[0,4,95,156,134,73,71,89,67,248,29,73,112,27,155,120,10,190,208,7,139,112,237,99,179,219,110,127,190,1,199,250]]",
              "sol": "[bytes(abi.encode(\"177,9,168,59,30,254,249,204,3,175,164,103,114,254,1,178,106,100,100,10,129,250,109,90,59,83,202,245,128,175,228,45\")),bytes(abi.encode(\"184,4,111,241,18,73,235,199,194,225,112,151,109,16,58,1,137,65,214,131,231,31,237,166,229,184,4,244,17,133,7,199\")),bytes(abi.encode(\"32,129,239,183,180,113,194,66,108,233,75,5,172,252,177,109,73,151,97,32,91,117,146,236,252,121,177,107,135,160,179,199\")),bytes(abi.encode(\"0,4,95,156,134,73,71,89,67,248,29,73,112,27,155,120,10,190,208,7,139,112,237,99,179,219,110,127,190,1,199,250\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.326ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"2u4wok\"",
              "sol": "\"2u4wok\""
            },
            {
              "js": "[[81,138,240,181,234,223,8,203,184,152,221,78,239,107,192,189,205,33,157,81,75,30,61,11,10,132,22,241,84,194,5,172],[94,222,194,7,25,90,217,149,50,195,215,35,158,145,69,14,72,21,110,130,200,202,190,158,251,158,48,231,205,247,128,248],[23,116,184,71,1,194,64,192,147,79,54,246,111,160,212,251,235,159,145,124,91,4,151,161,108,136,124,251,166,174,91,178],[244,243,159,153,85,148,62,166,210,134,251,90,55,1,249,194,151,154,27,98,39,83,192,75,5,63,33,32,126,126,188,150]]",
              "sol": "[bytes(abi.encode(\"81,138,240,181,234,223,8,203,184,152,221,78,239,107,192,189,205,33,157,81,75,30,61,11,10,132,22,241,84,194,5,172\")),bytes(abi.encode(\"94,222,194,7,25,90,217,149,50,195,215,35,158,145,69,14,72,21,110,130,200,202,190,158,251,158,48,231,205,247,128,248\")),bytes(abi.encode(\"23,116,184,71,1,194,64,192,147,79,54,246,111,160,212,251,235,159,145,124,91,4,151,161,108,136,124,251,166,174,91,178\")),bytes(abi.encode(\"244,243,159,153,85,148,62,166,210,134,251,90,55,1,249,194,151,154,27,98,39,83,192,75,5,63,33,32,126,126,188,150\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.330ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[226,100,32,76,240,183,102,203,194,96,242,202,25,178,246,224,247,79,156,127,146,67,86,92,170,142,90,17,190,213,126,71],[56,127,98,231,6,213,220,20,21,152,252,74,148,31,159,32,34,145,14,142,109,137,179,6,242,194,160,44,118,55,86,151],[35,127,109,199,191,24,176,38,168,86,29,114,71,236,215,123,72,37,146,52,74,115,107,0,119,10,229,48,238,121,224,215],[157,102,31,70,132,212,30,76,20,212,254,21,66,228,56,113,0,19,209,147,40,220,184,206,59,27,96,94,217,53,62,82]]",
              "sol": "[bytes(abi.encode(\"226,100,32,76,240,183,102,203,194,96,242,202,25,178,246,224,247,79,156,127,146,67,86,92,170,142,90,17,190,213,126,71\")),bytes(abi.encode(\"56,127,98,231,6,213,220,20,21,152,252,74,148,31,159,32,34,145,14,142,109,137,179,6,242,194,160,44,118,55,86,151\")),bytes(abi.encode(\"35,127,109,199,191,24,176,38,168,86,29,114,71,236,215,123,72,37,146,52,74,115,107,0,119,10,229,48,238,121,224,215\")),bytes(abi.encode(\"157,102,31,70,132,212,30,76,20,212,254,21,66,228,56,113,0,19,209,147,40,220,184,206,59,27,96,94,217,53,62,82\"))]"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.332ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "[[187,154,91,145,236,228,253,87,88,121,206,16,78,12,123,202,46,34,41,253,77,122,53,144,14,140,2,225,149,63,113,95],[137,11,234,57,150,35,209,245,96,199,126,98,183,249,51,253,17,55,182,82,163,178,117,115,255,169,102,59,1,69,53,37],[188,17,212,199,193,229,208,83,216,250,245,54,140,83,168,78,107,96,181,231,163,4,58,48,62,165,35,228,36,170,3,96],[83,72,253,147,131,152,10,239,182,42,153,161,212,146,157,246,121,139,21,207,49,46,109,174,60,185,38,78,201,162,151,83]]",
              "sol": "[bytes(abi.encode(\"187,154,91,145,236,228,253,87,88,121,206,16,78,12,123,202,46,34,41,253,77,122,53,144,14,140,2,225,149,63,113,95\")),bytes(abi.encode(\"137,11,234,57,150,35,209,245,96,199,126,98,183,249,51,253,17,55,182,82,163,178,117,115,255,169,102,59,1,69,53,37\")),bytes(abi.encode(\"188,17,212,199,193,229,208,83,216,250,245,54,140,83,168,78,107,96,181,231,163,4,58,48,62,165,35,228,36,170,3,96\")),bytes(abi.encode(\"83,72,253,147,131,152,10,239,182,42,153,161,212,146,157,246,121,139,21,207,49,46,109,174,60,185,38,78,201,162,151,83\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.333ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[128,218,52,186,44,113,36,157,221,197,161,161,19,140,143,138,81,251,91,92,30,104,166,57,141,158,53,228,196,222,154,54],[231,167,226,65,26,22,175,120,218,78,117,34,152,223,110,244,61,199,121,198,31,21,120,28,94,115,51,0,133,29,33,143],[69,13,163,67,210,168,26,127,105,30,137,192,180,24,248,244,204,234,168,204,4,187,242,71,121,116,48,34,19,222,27,239],[106,93,95,8,211,97,184,88,103,105,147,0,173,150,8,158,167,167,117,17,10,193,0,144,123,128,174,159,249,103,52,61],[50,159,61,78,255,62,22,87,28,226,67,42,48,203,235,232,50,55,146,116,138,88,75,111,38,32,143,241,69,166,90,86]]",
              "sol": "[bytes(abi.encode(\"128,218,52,186,44,113,36,157,221,197,161,161,19,140,143,138,81,251,91,92,30,104,166,57,141,158,53,228,196,222,154,54\")),bytes(abi.encode(\"231,167,226,65,26,22,175,120,218,78,117,34,152,223,110,244,61,199,121,198,31,21,120,28,94,115,51,0,133,29,33,143\")),bytes(abi.encode(\"69,13,163,67,210,168,26,127,105,30,137,192,180,24,248,244,204,234,168,204,4,187,242,71,121,116,48,34,19,222,27,239\")),bytes(abi.encode(\"106,93,95,8,211,97,184,88,103,105,147,0,173,150,8,158,167,167,117,17,10,193,0,144,123,128,174,159,249,103,52,61\")),bytes(abi.encode(\"50,159,61,78,255,62,22,87,28,226,67,42,48,203,235,232,50,55,146,116,138,88,75,111,38,32,143,241,69,166,90,86\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.334ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"vtkc8h\"",
              "sol": "\"vtkc8h\""
            },
            {
              "js": "[[203,80,11,96,167,202,152,102,160,150,205,60,41,255,72,215,187,77,48,161,32,8,80,221,192,102,22,230,55,204,221,154],[149,180,170,29,99,62,37,125,155,248,85,61,77,181,132,0,132,222,150,112,101,200,13,139,14,116,9,41,43,249,161,195],[203,15,56,41,77,245,54,2,79,207,212,28,143,177,205,164,33,213,226,19,242,82,30,136,93,191,165,87,42,98,68,212],[197,71,78,80,246,168,124,224,156,26,115,32,181,5,85,222,251,33,237,24,159,49,56,165,10,1,117,164,220,130,153,201],[15,92,56,173,217,122,103,111,186,221,58,216,237,79,27,18,209,97,250,191,86,199,136,8,202,90,34,110,24,197,228,27]]",
              "sol": "[bytes(abi.encode(\"203,80,11,96,167,202,152,102,160,150,205,60,41,255,72,215,187,77,48,161,32,8,80,221,192,102,22,230,55,204,221,154\")),bytes(abi.encode(\"149,180,170,29,99,62,37,125,155,248,85,61,77,181,132,0,132,222,150,112,101,200,13,139,14,116,9,41,43,249,161,195\")),bytes(abi.encode(\"203,15,56,41,77,245,54,2,79,207,212,28,143,177,205,164,33,213,226,19,242,82,30,136,93,191,165,87,42,98,68,212\")),bytes(abi.encode(\"197,71,78,80,246,168,124,224,156,26,115,32,181,5,85,222,251,33,237,24,159,49,56,165,10,1,117,164,220,130,153,201\")),bytes(abi.encode(\"15,92,56,173,217,122,103,111,186,221,58,216,237,79,27,18,209,97,250,191,86,199,136,8,202,90,34,110,24,197,228,27\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.336ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"h7c1ak\"",
              "sol": "\"h7c1ak\""
            },
            {
              "js": "[[201,110,189,173,250,252,93,221,254,164,175,155,9,243,253,14,190,79,164,18,12,38,174,246,253,242,96,142,146,135,3,104],[17,101,190,164,92,121,236,25,184,167,174,100,93,95,84,94,242,151,202,169,154,211,183,98,55,168,91,163,250,49,106,93],[246,142,177,113,176,226,55,155,42,27,8,224,115,202,38,179,120,40,139,191,51,205,38,230,95,226,249,171,131,225,118,228],[213,142,151,157,14,162,44,89,50,160,202,106,37,245,16,128,78,72,77,229,173,243,209,210,87,177,19,186,134,89,244,20],[129,101,171,96,87,101,65,121,191,38,170,194,2,144,168,154,51,240,35,0,85,33,3,38,249,3,176,20,92,213,156,10]]",
              "sol": "[bytes(abi.encode(\"201,110,189,173,250,252,93,221,254,164,175,155,9,243,253,14,190,79,164,18,12,38,174,246,253,242,96,142,146,135,3,104\")),bytes(abi.encode(\"17,101,190,164,92,121,236,25,184,167,174,100,93,95,84,94,242,151,202,169,154,211,183,98,55,168,91,163,250,49,106,93\")),bytes(abi.encode(\"246,142,177,113,176,226,55,155,42,27,8,224,115,202,38,179,120,40,139,191,51,205,38,230,95,226,249,171,131,225,118,228\")),bytes(abi.encode(\"213,142,151,157,14,162,44,89,50,160,202,106,37,245,16,128,78,72,77,229,173,243,209,210,87,177,19,186,134,89,244,20\")),bytes(abi.encode(\"129,101,171,96,87,101,65,121,191,38,170,194,2,144,168,154,51,240,35,0,85,33,3,38,249,3,176,20,92,213,156,10\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.338ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"vtkc8h\"",
              "sol": "\"vtkc8h\""
            },
            {
              "js": "[[192,21,182,24,7,5,255,144,119,250,255,9,118,120,49,143,60,137,167,82,16,147,94,230,19,65,216,106,67,60,191,224],[78,113,143,20,235,37,150,159,232,28,252,128,197,244,62,184,153,160,78,239,1,51,128,247,30,42,110,140,241,29,167,250],[201,237,176,155,233,130,95,54,73,119,69,208,83,251,33,158,46,137,206,238,184,150,217,78,124,50,132,7,103,165,56,19],[200,66,29,3,158,177,72,238,8,94,40,149,119,11,67,126,210,62,7,49,62,80,132,104,17,103,216,244,231,115,52,111],[145,117,87,45,79,235,12,184,203,40,29,195,76,171,15,142,210,185,108,188,129,226,189,187,102,29,136,207,45,164,94,134]]",
              "sol": "[bytes(abi.encode(\"192,21,182,24,7,5,255,144,119,250,255,9,118,120,49,143,60,137,167,82,16,147,94,230,19,65,216,106,67,60,191,224\")),bytes(abi.encode(\"78,113,143,20,235,37,150,159,232,28,252,128,197,244,62,184,153,160,78,239,1,51,128,247,30,42,110,140,241,29,167,250\")),bytes(abi.encode(\"201,237,176,155,233,130,95,54,73,119,69,208,83,251,33,158,46,137,206,238,184,150,217,78,124,50,132,7,103,165,56,19\")),bytes(abi.encode(\"200,66,29,3,158,177,72,238,8,94,40,149,119,11,67,126,210,62,7,49,62,80,132,104,17,103,216,244,231,115,52,111\")),bytes(abi.encode(\"145,117,87,45,79,235,12,184,203,40,29,195,76,171,15,142,210,185,108,188,129,226,189,187,102,29,136,207,45,164,94,134\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.339ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[87]",
              "sol": "bytes1(\"87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.340ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.341ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.341ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.343ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.343ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.344ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"pm43br\"",
              "sol": "\"pm43br\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.345ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"na15j\"",
              "sol": "\"na15j\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.346ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "\"o2al8l\"",
              "sol": "\"o2al8l\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.347ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"na15j\"",
              "sol": "\"na15j\""
            },
            {
              "js": "\"0cokis\"",
              "sol": "\"0cokis\""
            },
            {
              "js": "\"z70nl9\"",
              "sol": "\"z70nl9\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.348ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"9j2o4\"",
              "sol": "\"9j2o4\""
            },
            {
              "js": "\"1f47n8\"",
              "sol": "\"1f47n8\""
            },
            {
              "js": "\"vtkc8h\"",
              "sol": "\"vtkc8h\""
            },
            {
              "js": "\"2u4wok\"",
              "sol": "\"2u4wok\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.349ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "\"z70nl9\"",
              "sol": "\"z70nl9\""
            },
            {
              "js": "\"vtkc8h\"",
              "sol": "\"vtkc8h\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.350ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.352ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.355ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"na15j\"",
              "sol": "\"na15j\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.356ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"2u4wok\"",
              "sol": "\"2u4wok\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.360ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.362ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"9j2o4\",\"1f47n8\",\"pm43br\",\"i80n4s\",\"na15j\",\"0cokis\",\"P\",\"0\"]",
              "sol": "[string(\"9j2o4\"),string(\"1f47n8\"),string(\"pm43br\"),string(\"i80n4s\"),string(\"na15j\"),string(\"0cokis\"),string(\"P\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.364ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[164,206,198,165,38,113,52,126,236,83,242,209,224,57,99,19,152,184,228,20,249,55,250,73,224,62,59,251,235,119,141,58],[60,69,163,253,175,230,176,61,158,106,145,26,0,223,159,111,137,248,241,15,23,181,158,140,152,138,144,172,157,164,40,215],[126,147,102,60,208,242,227,73,6,88,250,189,192,42,83,31,111,228,204,50,16,46,149,152,129,249,182,148,134,74,144,153],[231,25,110,79,227,56,255,105,181,225,201,7,24,57,219,253,88,61,199,102,105,65,92,73,118,47,135,181,175,109,9,18]]",
              "sol": "[bytes(abi.encode(\"164,206,198,165,38,113,52,126,236,83,242,209,224,57,99,19,152,184,228,20,249,55,250,73,224,62,59,251,235,119,141,58\")),bytes(abi.encode(\"60,69,163,253,175,230,176,61,158,106,145,26,0,223,159,111,137,248,241,15,23,181,158,140,152,138,144,172,157,164,40,215\")),bytes(abi.encode(\"126,147,102,60,208,242,227,73,6,88,250,189,192,42,83,31,111,228,204,50,16,46,149,152,129,249,182,148,134,74,144,153\")),bytes(abi.encode(\"231,25,110,79,227,56,255,105,181,225,201,7,24,57,219,253,88,61,199,102,105,65,92,73,118,47,135,181,175,109,9,18\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.366ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.368ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[227,2,211,234,188,245,202,229,15,134,93,218,213,33,36,37,94,154,105,137,103,239,176,42,27,1,97,125,205,83,109,195]",
              "sol": "stringToBytes32(\"227,2,211,234,188,245,202,229,15,134,93,218,213,33,36,37,94,154,105,137,103,239,176,42,27,1,97,125,205,83,109,195\")"
            },
            {
              "js": "[201,83,167,188,76,88,211,226,126,212,44,171,20,90,239,227,195,236,69,234,41,142,27,152,144,201,46,128,251,25,11,170]",
              "sol": "stringToBytes32(\"201,83,167,188,76,88,211,226,126,212,44,171,20,90,239,227,195,236,69,234,41,142,27,152,144,201,46,128,251,25,11,170\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.369ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[75,237,182,179,88,189,140,176,144,178,233,137,101,230,14,193,210,247,91,255,73,98,244,224,158,246,232,24,141,254,191,63]",
              "sol": "stringToBytes32(\"75,237,182,179,88,189,140,176,144,178,233,137,101,230,14,193,210,247,91,255,73,98,244,224,158,246,232,24,141,254,191,63\")"
            },
            {
              "js": "[37,89,244,243,255,225,206,59,237,24,206,83,57,52,30,16,112,104,219,175,180,95,172,120,192,52,70,175,229,166,207,69]",
              "sol": "abi.encode(\"37,89,244,243,255,225,206,59,237,24,206,83,57,52,30,16,112,104,219,175,180,95,172,120,192,52,70,175,229,166,207,69\")"
            },
            {
              "js": "[42,122,14,52,22,138,251,37,170,29,188,108,227,96,216,39,203,62,154,207,204,127,121,70,42,0,22,94,107,30,13,133]",
              "sol": "abi.encode(\"42,122,14,52,22,138,251,37,170,29,188,108,227,96,216,39,203,62,154,207,204,127,121,70,42,0,22,94,107,30,13,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.370ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[16,6,245,211,177,174,25,132,236,47,56,117,7,59,90,100,108,8,65,166,162,232,32,101,201,211,51,67,218,4,197,154]",
              "sol": "abi.encode(\"16,6,245,211,177,174,25,132,236,47,56,117,7,59,90,100,108,8,65,166,162,232,32,101,201,211,51,67,218,4,197,154\")"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[60,213,27,163,35,223,77,153,138,233,206,24,83,179,191,194,219,187,222,151,65,99,189,244,4,118,104,11,193,176,106,53]",
              "sol": "abi.encode(\"60,213,27,163,35,223,77,153,138,233,206,24,83,179,191,194,219,187,222,151,65,99,189,244,4,118,104,11,193,176,106,53\")"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.373ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[248,37,254,55,200,21,32,171,196,125,49,3,33,84,152,192,221,57,62,111,211,135,87,103,239,210,22,50,73,222,60,114]",
              "sol": "stringToBytes32(\"248,37,254,55,200,21,32,171,196,125,49,3,33,84,152,192,221,57,62,111,211,135,87,103,239,210,22,50,73,222,60,114\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[60,162,18,62,29,123,44,172,140,138,70,51,232,70,123,207,228,191,127,131,80,39,212,244,129,233,110,26,170,135,71,231]",
              "sol": "abi.encode(\"60,162,18,62,29,123,44,172,140,138,70,51,232,70,123,207,228,191,127,131,80,39,212,244,129,233,110,26,170,135,71,231\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[223,47,160,243,146,222,198,3,23,237,50,170,147,182,248,185,198,160,6,44,191,58,5,78,168,8,75,204,15,21,107,10]",
              "sol": "stringToBytes32(\"223,47,160,243,146,222,198,3,23,237,50,170,147,182,248,185,198,160,6,44,191,58,5,78,168,8,75,204,15,21,107,10\")"
            },
            {
              "js": "\"na15j\"",
              "sol": "\"na15j\""
            },
            {
              "js": "[234,89,199,110,140,16,147,78,175,108,61,182,216,48,218,232,149,52,109,86,102,60,46,11,220,20,20,60,146,95,6,13]",
              "sol": "abi.encode(\"234,89,199,110,140,16,147,78,175,108,61,182,216,48,218,232,149,52,109,86,102,60,46,11,220,20,20,60,146,95,6,13\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.375ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[95,34,235,174,224,184,82,16,130,92,239,231,187,218,252,74,148,148,199,107,169,21,207,177,73,229,205,71,169,123,149,102]",
              "sol": "stringToBytes32(\"95,34,235,174,224,184,82,16,130,92,239,231,187,218,252,74,148,148,199,107,169,21,207,177,73,229,205,71,169,123,149,102\")"
            },
            {
              "js": "[90,52,105,175,42,104,137,30,206,76,179,37,38,25,231,51,61,55,86,118,246,42,167,134,81,101,16,140,228,59,122,136]",
              "sol": "abi.encode(\"90,52,105,175,42,104,137,30,206,76,179,37,38,25,231,51,61,55,86,118,246,42,167,134,81,101,16,140,228,59,122,136\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[95,34,235,174,224,184,82,16,130,92,239,231,187,218,252,74,148,148,199,107,169,21,207,177,73,229,205,71,169,123,149,102]",
                "sol": "stringToBytes32(\"95,34,235,174,224,184,82,16,130,92,239,231,187,218,252,74,148,148,199,107,169,21,207,177,73,229,205,71,169,123,149,102\")"
              },
              {
                "js": "[37,5,13,27,33,41,153,247,160,246,43,199,61,77,101,144,193,141,169,246,225,64,158,20,188,117,150,192,58,148,204,66,232]",
                "sol": "bytes33(\"37,5,13,27,33,41,153,247,160,246,43,199,61,77,101,144,193,141,169,246,225,64,158,20,188,117,150,192,58,148,204,66,232\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.378ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[27,216,166,208,12,67,236,142,159,45,9,138,232,100,16,145,152,136,49,210,205,128,77,43,80,86,165,171,182,247,194,166]",
              "sol": "abi.encode(\"27,216,166,208,12,67,236,142,159,45,9,138,232,100,16,145,152,136,49,210,205,128,77,43,80,86,165,171,182,247,194,166\")"
            },
            {
              "js": "[234,239,58,143,162,238,121,34,210,197,191,72,42,233,153,161,33,172,194,188,7,21,23,22,8,129,220,34,53,99,43,165]",
              "sol": "stringToBytes32(\"234,239,58,143,162,238,121,34,210,197,191,72,42,233,153,161,33,172,194,188,7,21,23,22,8,129,220,34,53,99,43,165\")"
            },
            {
              "js": "[220,78,43,6,20,134,144,71,25,165,29,114,56,125,117,253,119,167,201,191,216,204,196,133,100,46,102,234,186,29,27,135]",
              "sol": "abi.encode(\"220,78,43,6,20,134,144,71,25,165,29,114,56,125,117,253,119,167,201,191,216,204,196,133,100,46,102,234,186,29,27,135\")"
            },
            {
              "js": "\"xmcitf\"",
              "sol": "\"xmcitf\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[18,116,75,183,178,40,194,77,218,164,200,238,8,200,103,53,207,246,80,202,120,111,197,11,165,71,200,206,152,160,109,89]",
              "sol": "abi.encode(\"18,116,75,183,178,40,194,77,218,164,200,238,8,200,103,53,207,246,80,202,120,111,197,11,165,71,200,206,152,160,109,89\")"
            },
            {
              "js": "[239,132,87,189,37,14,105,180,177,218,58,224,204,234,191,249,107,4,224,82,36,90,132,118,117,107,194,69,206,97,204,99]",
              "sol": "stringToBytes32(\"239,132,87,189,37,14,105,180,177,218,58,224,204,234,191,249,107,4,224,82,36,90,132,118,117,107,194,69,206,97,204,99\")"
            },
            {
              "js": "[144,249,241,160,196,7,86,174,234,226,19,229,239,81,27,19,97,43,216,13,193,75,234,20,254,199,235,20,224,34,200,96]",
              "sol": "abi.encode(\"144,249,241,160,196,7,86,174,234,226,19,229,239,81,27,19,97,43,216,13,193,75,234,20,254,199,235,20,224,34,200,96\")"
            },
            {
              "js": "\"9j2o4\"",
              "sol": "\"9j2o4\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[160,253,68,154,214,116,128,155,93,80,147,27,168,89,72,230,189,47,172,49,223,22,123,72,82,132,29,18,19,136,16,254]",
              "sol": "abi.encode(\"160,253,68,154,214,116,128,155,93,80,147,27,168,89,72,230,189,47,172,49,223,22,123,72,82,132,29,18,19,136,16,254\")"
            },
            {
              "js": "[159,45,151,132,43,149,210,100,150,198,87,170,50,101,163,43,66,108,142,182,67,196,3,238,137,89,126,30,220,253,170,202]",
              "sol": "stringToBytes32(\"159,45,151,132,43,149,210,100,150,198,87,170,50,101,163,43,66,108,142,182,67,196,3,238,137,89,126,30,220,253,170,202\")"
            },
            {
              "js": "[109,164,240,223,147,56,220,23,224,34,68,129,146,106,194,184,244,211,110,191,45,98,83,20,228,226,214,77,186,11,103,32]",
              "sol": "abi.encode(\"109,164,240,223,147,56,220,23,224,34,68,129,146,106,194,184,244,211,110,191,45,98,83,20,228,226,214,77,186,11,103,32\")"
            },
            {
              "js": "\"dxi8ub\"",
              "sol": "\"dxi8ub\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[62,80,189,99,149,108,137,128,17,50,237,225,243,157,158,13,109,118,177,193,70,173,224,107,41,120,211,238,250,160,57,245]",
              "sol": "abi.encode(\"62,80,189,99,149,108,137,128,17,50,237,225,243,157,158,13,109,118,177,193,70,173,224,107,41,120,211,238,250,160,57,245\")"
            },
            {
              "js": "[16,25,165,180,150,136,254,38,169,135,47,37,250,242,170,205,139,166,208,173,254,50,169,19,28,101,129,5,106,28,209,98]",
              "sol": "stringToBytes32(\"16,25,165,180,150,136,254,38,169,135,47,37,250,242,170,205,139,166,208,173,254,50,169,19,28,101,129,5,106,28,209,98\")"
            },
            {
              "js": "[75,182,143,81,107,57,160,66,14,48,146,186,208,202,5,163,100,191,70,111,187,225,147,205,227,195,177,35,155,45,250,36]",
              "sol": "abi.encode(\"75,182,143,81,107,57,160,66,14,48,146,186,208,202,5,163,100,191,70,111,187,225,147,205,227,195,177,35,155,45,250,36\")"
            },
            {
              "js": "\"98d4za\"",
              "sol": "\"98d4za\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[81,54,214,9,141,132,232,127,5,77,78,245,35,245,38,219,91,23,94,62,121,144,243,2,21,250,69,39,99,74,61,127]",
              "sol": "abi.encode(\"81,54,214,9,141,132,232,127,5,77,78,245,35,245,38,219,91,23,94,62,121,144,243,2,21,250,69,39,99,74,61,127\")"
            },
            {
              "js": "[151,101,179,222,33,96,153,213,158,157,83,180,179,88,120,2,133,41,23,131,159,120,1,77,213,141,64,113,69,176,171,113]",
              "sol": "stringToBytes32(\"151,101,179,222,33,96,153,213,158,157,83,180,179,88,120,2,133,41,23,131,159,120,1,77,213,141,64,113,69,176,171,113\")"
            },
            {
              "js": "[87,60,233,52,7,116,33,48,159,235,191,150,198,47,32,113,155,2,186,106,28,208,97,166,181,197,83,197,148,138,155,163]",
              "sol": "abi.encode(\"87,60,233,52,7,116,33,48,159,235,191,150,198,47,32,113,155,2,186,106,28,208,97,166,181,197,83,197,148,138,155,163\")"
            },
            {
              "js": "\"j1m5k\"",
              "sol": "\"j1m5k\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[242,3,34,116,51,170,186,212,44,31,190,228,194,228,193,185,125,105,137,105,236,101,188,89,136,184,233,184,246,64,75,177]",
              "sol": "abi.encode(\"242,3,34,116,51,170,186,212,44,31,190,228,194,228,193,185,125,105,137,105,236,101,188,89,136,184,233,184,246,64,75,177\")"
            },
            {
              "js": "[130,10,153,125,124,3,85,90,211,161,184,171,255,224,137,166,154,131,215,109,197,85,24,216,121,248,10,245,109,21,67,81]",
              "sol": "stringToBytes32(\"130,10,153,125,124,3,85,90,211,161,184,171,255,224,137,166,154,131,215,109,197,85,24,216,121,248,10,245,109,21,67,81\")"
            },
            {
              "js": "[203,247,253,86,108,22,54,50,77,55,124,151,94,74,55,68,245,226,20,9,187,252,127,204,130,205,218,26,103,214,195,50]",
              "sol": "abi.encode(\"203,247,253,86,108,22,54,50,77,55,124,151,94,74,55,68,245,226,20,9,187,252,127,204,130,205,218,26,103,214,195,50\")"
            },
            {
              "js": "\"dxi8ub\"",
              "sol": "\"dxi8ub\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[193,255,20,11,37,207,112,156,77,69,73,17,152,244,99,103,52,5,50,160,101,146,49,115,78,224,43,80,130,80,223,98]",
              "sol": "abi.encode(\"193,255,20,11,37,207,112,156,77,69,73,17,152,244,99,103,52,5,50,160,101,146,49,115,78,224,43,80,130,80,223,98\")"
            },
            {
              "js": "[2,94,206,118,108,223,52,206,143,192,0,167,116,85,46,243,178,22,214,14,106,14,23,64,207,15,109,26,12,9,85,168]",
              "sol": "stringToBytes32(\"2,94,206,118,108,223,52,206,143,192,0,167,116,85,46,243,178,22,214,14,106,14,23,64,207,15,109,26,12,9,85,168\")"
            },
            {
              "js": "[151,241,111,175,169,246,251,159,147,163,149,41,86,61,228,4,135,26,253,100,138,96,69,116,16,221,26,145,149,16,224,154]",
              "sol": "abi.encode(\"151,241,111,175,169,246,251,159,147,163,149,41,86,61,228,4,135,26,253,100,138,96,69,116,16,221,26,145,149,16,224,154\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[96,120,219,178,165,189,162,111,64,71,103,147,15,58,239,225,167,103,84,177,104,157,118,152,153,187,141,222,96,56,109,34]",
              "sol": "abi.encode(\"96,120,219,178,165,189,162,111,64,71,103,147,15,58,239,225,167,103,84,177,104,157,118,152,153,187,141,222,96,56,109,34\")"
            },
            {
              "js": "[175,108,142,189,13,44,45,16,182,29,27,1,121,12,245,232,42,215,131,120,67,230,210,196,80,124,242,112,47,34,83,135]",
              "sol": "stringToBytes32(\"175,108,142,189,13,44,45,16,182,29,27,1,121,12,245,232,42,215,131,120,67,230,210,196,80,124,242,112,47,34,83,135\")"
            },
            {
              "js": "[4,233,79,116,157,47,248,107,32,67,231,2,165,229,212,192,199,154,126,198,58,122,101,46,182,54,212,18,211,199,18,237]",
              "sol": "abi.encode(\"4,233,79,116,157,47,248,107,32,67,231,2,165,229,212,192,199,154,126,198,58,122,101,46,182,54,212,18,211,199,18,237\")"
            },
            {
              "js": "\"26o2gs\"",
              "sol": "\"26o2gs\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.394ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[172,22,170,188,244,161,170,202,139,61,232,6,250,252,14,156,204,163,229,99,14,11,46,123,174,236,164,84,205,0,74,0]",
              "sol": "abi.encode(\"172,22,170,188,244,161,170,202,139,61,232,6,250,252,14,156,204,163,229,99,14,11,46,123,174,236,164,84,205,0,74,0\")"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "[202,234,79,82,43,10,39,185,146,210,149,178,157,98,50,127,34,103,67,206,242,222,223,136,215,174,86,118,175,241,167,38]",
              "sol": "abi.encode(\"202,234,79,82,43,10,39,185,146,210,149,178,157,98,50,127,34,103,67,206,242,222,223,136,215,174,86,118,175,241,167,38\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.397ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[77,216,207,113,243,106,163,50,241,77,123,156,151,142,136,251,113,250,251,48,236,191,199,159,5,79,133,208,127,241,173,155]",
              "sol": "stringToBytes32(\"77,216,207,113,243,106,163,50,241,77,123,156,151,142,136,251,113,250,251,48,236,191,199,159,5,79,133,208,127,241,173,155\")"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "[26,160,220,136,70,247,54,224,87,7,170,247,80,154,11,3,101,48,57,53,70,161,8,148,178,44,13,69,100,141,171,236]",
              "sol": "stringToBytes32(\"26,160,220,136,70,247,54,224,87,7,170,247,80,154,11,3,101,48,57,53,70,161,8,148,178,44,13,69,100,141,171,236\")"
            },
            {
              "js": "[208,87,14,73,111,4,18,44,141,136,18,82,188,132,139,108,104,205,244,197,145,93,200,254,34,149,225,212,208,111,168,250]",
              "sol": "stringToBytes32(\"208,87,14,73,111,4,18,44,141,136,18,82,188,132,139,108,104,205,244,197,145,93,200,254,34,149,225,212,208,111,168,250\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.407ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[166,55,194,223,136,204,127,128,17,6,24,13,39,118,191,96,252,217,96,113,170,150,75,180,246,246,3,96,99,109,210,88]",
              "sol": "stringToBytes32(\"166,55,194,223,136,204,127,128,17,6,24,13,39,118,191,96,252,217,96,113,170,150,75,180,246,246,3,96,99,109,210,88\")"
            },
            {
              "js": "[183,153,132,176,229,35,49,155,218,219,166,114,229,125,104,65,145,206,169,138,211,66,205]",
              "sol": "abi.encode(\"183,153,132,176,229,35,49,155,218,219,166,114,229,125,104,65,145,206,169,138,211,66,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[27,245,17,129,146,136,4,185,214,49,48,149,171,217,212,27,96,5,190,152,207,244,147,162,211,114,77,166,90,12,92,28]",
              "sol": "stringToBytes32(\"27,245,17,129,146,136,4,185,214,49,48,149,171,217,212,27,96,5,190,152,207,244,147,162,211,114,77,166,90,12,92,28\")"
            },
            {
              "js": "[42,194,112,250,150,199,136,102,162,85,163,153,81,133,225,168,242,25,240,18,27,134,131,29,182,153,112,120,147,146,60,9,99,183,200,73,221,248,27,254,127,116,41,14,233,162,208,110,218,227,44,7,39,83,191,212,123,20,66,143,49,91,37,195,36]",
              "sol": "abi.encode(\"42,194,112,250,150,199,136,102,162,85,163,153,81,133,225,168,242,25,240,18,27,134,131,29,182,153,112,120,147,146,60,9,99,183,200,73,221,248,27,254,127,116,41,14,233,162,208,110,218,227,44,7,39,83,191,212,123,20,66,143,49,91,37,195,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.409ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.411ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1532892062,1]",
              "sol": "[uint(1532892062),uint(1)]"
            },
            {
              "js": "[[0,27],[47,1532892064]]",
              "sol": "[[uint(0),uint(27)],[uint(47),uint(1532892064)]]"
            },
            {
              "js": "[22,0]",
              "sol": "[uint(22),uint(0)]"
            },
            {
              "js": "[45,1]",
              "sol": "[uint(45),uint(1)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.416ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.417ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[200001,25,256,88,56,63,3,1024,129,1025]",
              "sol": "[uint(200001),uint(25),uint(256),uint(88),uint(56),uint(63),uint(3),uint(1024),uint(129),uint(1025)]"
            },
            {
              "js": "{\"A\": {\"X\": 20,\"Y\": 129},\"B\": {\"X\": [98,24],\"Y\": [200000,27]},\"C\": {\"X\": 199999,\"Y\": 1024}}",
              "sol": "Verifier.Proof(Pairing.G1Point(20,129),Pairing.G2Point([uint(98),uint(24)],[uint(200000),uint(27)]),Pairing.G1Point(199999,1024))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[161,27,96,255,22,30,2,1024]",
              "sol": "[uint(161),uint(27),uint(96),uint(255),uint(22),uint(30),uint(2),uint(1024)]"
            },
            {
              "js": "{\"A\": {\"X\": 129,\"Y\": 1},\"B\": {\"X\": [199999,97],\"Y\": [33,56]},\"C\": {\"X\": 95,\"Y\": 1532892062}}",
              "sol": "Verifier.Proof(Pairing.G1Point(129,1),Pairing.G2Point([uint(199999),uint(97)],[uint(33),uint(56)]),Pairing.G1Point(95,1532892062))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.420ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.421ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.421ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"accounts[5]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.423ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.424ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.424ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.424ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.425ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "45",
                "sol": "45"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.426ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "[203,101,227,211,228,37,32,145,210,139,40,0,123,229,71,170,22,92,175,82,155,10,34,56,144,145,9,133,79,58,250,43]",
              "sol": "abi.encode(\"203,101,227,211,228,37,32,145,210,139,40,0,123,229,71,170,22,92,175,82,155,10,34,56,144,145,9,133,79,58,250,43\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "22",
                "sol": "22"
              },
              {
                "js": "[203,101,227,211,228,37,32,145,210,139,40,0,123,229,71,170,22,92,175,82,155,10,34,56,144,145,9,133,79,58,250,43]",
                "sol": "abi.encode(\"203,101,227,211,228,37,32,145,210,139,40,0,123,229,71,170,22,92,175,82,155,10,34,56,144,145,9,133,79,58,250,43\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.427ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.428ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[215,154,73,101]",
              "sol": "bytes4(\"215,154,73,101\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.430ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.430ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.430ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.431ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.432ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "[238,78,159,145,222,109,73,34,186,11,231,27,51,241,229,208,242,151,100,16,73,58,18,26,154,212,161,229,113,32,232,8]",
              "sol": "abi.encode(\"238,78,159,145,222,109,73,34,186,11,231,27,51,241,229,208,242,151,100,16,73,58,18,26,154,212,161,229,113,32,232,8\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[104,237,243,77,204,108,218,51,11,224,105,118,225,185,21,197,255,171,146,200,189,226,62,197,150,13,65,229,34,218,7,45]",
              "sol": "abi.encode(\"104,237,243,77,204,108,218,51,11,224,105,118,225,185,21,197,255,171,146,200,189,226,62,197,150,13,65,229,34,218,7,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.433ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.435ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1532892063,200001]",
              "sol": "[uint(1532892063),uint(200001)]"
            },
            {
              "js": "[[48,127],[2014223716,64]]",
              "sol": "[[uint(48),uint(127)],[uint(2014223716),uint(64)]]"
            },
            {
              "js": "[0,54]",
              "sol": "[uint(0),uint(54)]"
            },
            {
              "js": "[11,87]",
              "sol": "[uint(11),uint(87)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.436ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.437ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.437ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.438ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.438ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.440ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.442ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.442ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.443ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.444ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.446ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T16:31:12.447ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.448ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T16:31:12.448ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}