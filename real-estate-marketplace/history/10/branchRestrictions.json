,{
  "2020-11-11T01:29:42.107ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:29:57.451ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:30:13.344ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:30:29.108ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:30:44.850ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:00.606ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.444ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [85,255,220,228,199,251,27,222,65,172,5,167,112,68,220,48,102,106,243,245,45,160,179,147,33,39,165,247,0,91,37,197],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"85,255,220,228,199,251,27,222,65,172,5,167,112,68,220,48,102,106,243,245,45,160,179,147,33,39,165,247,0,91,37,197\"),5)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.445ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [145,224,160,150,221,99,11,73,198,110,31,240,144,204,48,177,241,59,48,99,230,16,225,255,201,2,117,138,175,76,94,98],\"capacity\": 257}",
              "sol": "Buffer.buffer(abi.encode(\"145,224,160,150,221,99,11,73,198,110,31,240,144,204,48,177,241,59,48,99,230,16,225,255,201,2,117,138,175,76,94,98\"),257)"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [40,149,117,9,65,150,170,181,222,201,142,127,25,101,20,39,94,0,66,103,86,30,157,160,73,199,59,33,196,152,44,209],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"40,149,117,9,65,150,170,181,222,201,142,127,25,101,20,39,94,0,66,103,86,30,157,160,73,199,59,33,196,152,44,209\"),19)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.446ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [214,56,153,194,188,65,44,94,136,4,114,188,14,137,120,55,142,221,37,236,191,244,14,3,134,18,212,159,135,3,192,45],\"capacity\": 6}",
              "sol": "Buffer.buffer(abi.encode(\"214,56,153,194,188,65,44,94,136,4,114,188,14,137,120,55,142,221,37,236,191,244,14,3,134,18,212,159,135,3,192,45\"),6)"
            },
            {
              "js": "[196,43,68,133,246,20,169,225,25,84,65,17,162,44,19,90,105,32,47,175,215,59,47,11,22,71,122,149,220,220,190,4]",
              "sol": "abi.encode(\"196,43,68,133,246,20,169,225,25,84,65,17,162,44,19,90,105,32,47,175,215,59,47,11,22,71,122,149,220,220,190,4\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.447ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [16,217,112,228,39,51,129,227,98,87,29,33,198,250,61,145,112,172,48,11,147,68,2,105,58,40,77,8,1,153,101,204],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"16,217,112,228,39,51,129,227,98,87,29,33,198,250,61,145,112,172,48,11,147,68,2,105,58,40,77,8,1,153,101,204\"),71)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.447ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [237,25,109,93,238,60,109,43,241,138,240,141,32,183,136,127,102,13,222,26,151,196,131,169,244,97,59,209,35,18,12,19],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"237,25,109,93,238,60,109,43,241,138,240,141,32,183,136,127,102,13,222,26,151,196,131,169,244,97,59,209,35,18,12,19\"),4)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.448ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [221,176,82,60,121,20,228,87,183,248,31,21,67,95,115,229,158,240,70,225,52,92,244,143,108,34,245,70,242,52,119,191],\"capacity\": 57}",
              "sol": "Buffer.buffer(abi.encode(\"221,176,82,60,121,20,228,87,183,248,31,21,67,95,115,229,158,240,70,225,52,92,244,143,108,34,245,70,242,52,119,191\"),57)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.449ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [73,213,80,141,142,182,85,38,8,176,218,79,231,3,122,251,216,61,21,197,199,112,9,180,36,244,115,6,76,227,226,40],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"73,213,80,141,142,182,85,38,8,176,218,79,231,3,122,251,216,61,21,197,199,112,9,180,36,244,115,6,76,227,226,40\"),71)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.455ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.456ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.456ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 15,\"Y\": 103}",
              "sol": "Pairing.G1Point(15,103)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.457ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 96,\"Y\": 65}",
              "sol": "Pairing.G1Point(96,65)"
            },
            {
              "js": "{\"X\": 28,\"Y\": 1532892063}",
              "sol": "Pairing.G1Point(28,1532892063)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.457ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [160,257],\"Y\": [20,4]}",
              "sol": "Pairing.G2Point([uint(160),uint(257)],[uint(20),uint(4)])"
            },
            {
              "js": "{\"X\": [127,55],\"Y\": [127,66]}",
              "sol": "Pairing.G2Point([uint(127),uint(55)],[uint(127),uint(66)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.458ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 2014223715,\"Y\": 46}",
              "sol": "Pairing.G1Point(2014223715,46)"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.459ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 64,\"Y\": 255},{\"X\": 71,\"Y\": 65},{\"X\": 22,\"Y\": 56}]",
              "sol": "[Pairing.G1Point(64,255),Pairing.G1Point(71,65),Pairing.G1Point(22,56)]"
            },
            {
              "js": "[{\"X\": [57,15],\"Y\": [2014223716,127]},{\"X\": [24,96],\"Y\": [54,1]},{\"X\": [86,23],\"Y\": [64,86]}]",
              "sol": "[Pairing.G2Point([uint(57),uint(15)],[uint(2014223716),uint(127)]),Pairing.G2Point([uint(24),uint(96)],[uint(54),uint(1)]),Pairing.G2Point([uint(86),uint(23)],[uint(64),uint(86)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 33,\"Y\": 4},{\"X\": 160,\"Y\": 1532892062},{\"X\": 160,\"Y\": 29},{\"X\": 20,\"Y\": 30}]",
                "sol": "[Pairing.G1Point(24,161),Pairing.G1Point(2014223715,98),Pairing.G1Point(59,2014223714),Pairing.G1Point(31,66)]"
              },
              {
                "js": "[{\"X\": [57,15],\"Y\": [2014223716,127]},{\"X\": [24,96],\"Y\": [54,1]},{\"X\": [86,23],\"Y\": [64,86]}]",
                "sol": "[Pairing.G2Point([uint(57),uint(15)],[uint(2014223716),uint(127)]),Pairing.G2Point([uint(24),uint(96)],[uint(54),uint(1)]),Pairing.G2Point([uint(86),uint(23)],[uint(64),uint(86)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.463ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 46,\"Y\": 58}",
              "sol": "Pairing.G1Point(46,58)"
            },
            {
              "js": "{\"X\": [95,70],\"Y\": [102,1025]}",
              "sol": "Pairing.G2Point([uint(95),uint(70)],[uint(102),uint(1025)])"
            },
            {
              "js": "{\"X\": 60,\"Y\": 60}",
              "sol": "Pairing.G1Point(60,60)"
            },
            {
              "js": "{\"X\": [101,21],\"Y\": [256,200001]}",
              "sol": "Pairing.G2Point([uint(101),uint(21)],[uint(256),uint(200001)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.464ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 101,\"Y\": 128}",
              "sol": "Pairing.G1Point(101,128)"
            },
            {
              "js": "{\"X\": [1024,127],\"Y\": [7,33]}",
              "sol": "Pairing.G2Point([uint(1024),uint(127)],[uint(7),uint(33)])"
            },
            {
              "js": "{\"X\": 8,\"Y\": 28}",
              "sol": "Pairing.G1Point(8,28)"
            },
            {
              "js": "{\"X\": [257,1532892063],\"Y\": [29,56]}",
              "sol": "Pairing.G2Point([uint(257),uint(1532892063)],[uint(29),uint(56)])"
            },
            {
              "js": "{\"X\": 71,\"Y\": 32}",
              "sol": "Pairing.G1Point(71,32)"
            },
            {
              "js": "{\"X\": [70,161],\"Y\": [63,69]}",
              "sol": "Pairing.G2Point([uint(70),uint(161)],[uint(63),uint(69)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.468ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.471ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.472ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.473ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.474ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.474ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.475ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.476ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.476ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.477ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.477ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.481ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [122,221,164,195,180,55,250,86,19,71,141,209,168,190,226,179,52,230,200,203,178,160,57,55,162,237,219,66,141,4,223,26],\"capacity\": 15}",
              "sol": "Buffer.buffer(abi.encode(\"122,221,164,195,180,55,250,86,19,71,141,209,168,190,226,179,52,230,200,203,178,160,57,55,162,237,219,66,141,4,223,26\"),15)"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.482ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [115,112,244,77,216,189,29,184,149,98,146,96,98,5,78,115,182,143,184,120,143,47,212,43,20,152,47,177,232,135,235,130],\"capacity\": 2014223716}",
              "sol": "Buffer.buffer(abi.encode(\"115,112,244,77,216,189,29,184,149,98,146,96,98,5,78,115,182,143,184,120,143,47,212,43,20,152,47,177,232,135,235,130\"),2014223716)"
            },
            {
              "js": "[240,15,89,26,100,191,96,148,8,90,55,156,113,200,224,158,49,119,210,160,61,78,159,223,255,35,93,152,64,255,233,65]",
              "sol": "abi.encode(\"240,15,89,26,100,191,96,148,8,90,55,156,113,200,224,158,49,119,210,160,61,78,159,223,255,35,93,152,64,255,233,65\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.482ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [39,224,150,238,34,99,45,161,42,135,235,146,129,181,8,152,37,69,30,211,162,64,184,96,112,203,48,126,120,163,84,200],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"39,224,150,238,34,99,45,161,42,135,235,146,129,181,8,152,37,69,30,211,162,64,184,96,112,203,48,126,120,163,84,200\"),55)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.482ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [31,20,90,205,59,141,107,226,33,214,251,10,69,181,236,234,2,224,157,0,36,28,62,37,145,91,92,41,195,70,154,186],\"capacity\": 15}",
              "sol": "Buffer.buffer(abi.encode(\"31,20,90,205,59,141,107,226,33,214,251,10,69,181,236,234,2,224,157,0,36,28,62,37,145,91,92,41,195,70,154,186\"),15)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.483ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[206,127,129,16,5,32,93,81,121,253,151,243,174,255,96,82,49,101,173,2,135,19,159,112,12,92,17,41,214,249,202,75]",
              "sol": "stringToBytes32(\"206,127,129,16,5,32,93,81,121,253,151,243,174,255,96,82,49,101,173,2,135,19,159,112,12,92,17,41,214,249,202,75\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.484ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[115,26,215,222,231,121,84,109,210,46,68,247,10,120,148,185,248,250,161,182,114,38,126,202,145,109,162,243,10,176,160,111]",
              "sol": "stringToBytes32(\"115,26,215,222,231,121,84,109,210,46,68,247,10,120,148,185,248,250,161,182,114,38,126,202,145,109,162,243,10,176,160,111\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[82,63,119,62,148,38,68,31,251,247,155,13,103,130,190,237,62,131,41,141,179,247,149,241,99,235,77,152,177,107,15,6]",
              "sol": "abi.encode(\"82,63,119,62,148,38,68,31,251,247,155,13,103,130,190,237,62,131,41,141,179,247,149,241,99,235,77,152,177,107,15,6\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.525ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.526ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.527ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.527ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.528ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.528ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.529ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.529ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.531ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.532ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.532ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.532ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"j2nrfk\"",
              "sol": "\"j2nrfk\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.533ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.533ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.534ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"w04rw\",\"Capstones\",\"P\"]",
              "sol": "[string(\"w04rw\"),string(\"Capstones\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.534ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"qs4sne\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"w04rw\",\"Capstones\",\"0\",\"[\",\"P\",\"[\",\"[\"]",
              "sol": "[string(\"qs4sne\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"w04rw\"),string(\"Capstones\"),string(\"0\"),string(\"[\"),string(\"P\"),string(\"[\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.535ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"qs4sne\",\"qs4sne\",\"ERC1820_ACCEPT_MAGIC\",\"ERC1820_ACCEPT_MAGIC\",\"ERC1820_ACCEPT_MAGIC\",\"w04rw\",\"P\",\"Capstones\",\"L\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"qs4sne\"),string(\"qs4sne\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"w04rw\"),string(\"P\"),string(\"Capstones\"),string(\"L\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.535ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"w04rw\",\"Transaction successfully verified.\",\"j2nrfk\",\"w04rw\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"w04rw\"),string(\"Transaction successfully verified.\"),string(\"j2nrfk\"),string(\"w04rw\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.536ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.536ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.537ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"x4eljo\"]",
              "sol": "[string(\"x4eljo\")]"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.537ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.538ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"P\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.538ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"3v6p4\"",
              "sol": "\"3v6p4\""
            },
            {
              "js": "[\"mkzdal\",\"x4eljo\"]",
              "sol": "[string(\"mkzdal\"),string(\"x4eljo\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.538ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"x4eljo\",\"Capstones\"]",
              "sol": "[string(\"x4eljo\"),string(\"Capstones\")]"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.539ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"qs4sne\"",
              "sol": "\"qs4sne\""
            },
            {
              "js": "[\"x4eljo\",\"w04rw\"]",
              "sol": "[string(\"x4eljo\"),string(\"w04rw\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.540ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "[\"P\",\"3v6p4\",\"w04rw\"]",
              "sol": "[string(\"P\"),string(\"3v6p4\"),string(\"w04rw\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.540ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"qs4sne\"",
              "sol": "\"qs4sne\""
            },
            {
              "js": "[\"x1wbr\",\"Transaction successfully verified.\",\"3v6p4\"]",
              "sol": "[string(\"x1wbr\"),string(\"Transaction successfully verified.\"),string(\"3v6p4\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.540ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"0\",\"mkzdal\",\"w04rw\"]",
              "sol": "[string(\"0\"),string(\"mkzdal\"),string(\"w04rw\")]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.541ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"L\",\"mkzdal\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"L\"),string(\"mkzdal\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.542ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "[\"Capstones\",\"[\",\"Transaction successfully verified.\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"Capstones\"),string(\"[\"),string(\"Transaction successfully verified.\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.542ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "[\"[\",\"x4eljo\",\"j2nrfk\",\"x1wbr\"]",
              "sol": "[string(\"[\"),string(\"x4eljo\"),string(\"j2nrfk\"),string(\"x1wbr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.543ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"j2nrfk\",\"P\",\"[\",\"mkzdal\"]",
              "sol": "[string(\"j2nrfk\"),string(\"P\"),string(\"[\"),string(\"mkzdal\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.544ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"mkzdal\"",
              "sol": "\"mkzdal\""
            },
            {
              "js": "[\"x4eljo\",\"L\",\"k9yyu\",\"[\"]",
              "sol": "[string(\"x4eljo\"),string(\"L\"),string(\"k9yyu\"),string(\"[\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.544ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"qs4sne\"",
              "sol": "\"qs4sne\""
            },
            {
              "js": "[\"qs4sne\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"j2nrfk\",\"v917i\",\"L\"]",
              "sol": "[string(\"qs4sne\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"j2nrfk\"),string(\"v917i\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.545ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"mkzdal\"",
              "sol": "\"mkzdal\""
            },
            {
              "js": "[\"v917i\",\"Capstones\",\"mkzdal\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"x4eljo\"]",
              "sol": "[string(\"v917i\"),string(\"Capstones\"),string(\"mkzdal\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"x4eljo\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.545ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"3v6p4\"",
              "sol": "\"3v6p4\""
            },
            {
              "js": "[\"x4eljo\",\"qs4sne\",\"P\",\"w04rw\",\"x4eljo\"]",
              "sol": "[string(\"x4eljo\"),string(\"qs4sne\"),string(\"P\"),string(\"w04rw\"),string(\"x4eljo\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.546ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"w04rw\",\"[\",\"mkzdal\",\"jp1pgh\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"w04rw\"),string(\"[\"),string(\"mkzdal\"),string(\"jp1pgh\")]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.546ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "[[211,8,146,43,72,154,142,49,249,83,90,223,64,190,28,57,95,15,189,161,12,47,136,144,17,14,102,37,122,202,24,61]]",
              "sol": "[bytes(abi.encode(\"211,8,146,43,72,154,142,49,249,83,90,223,64,190,28,57,95,15,189,161,12,47,136,144,17,14,102,37,122,202,24,61\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.547ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "[[44,33,203,222,85,172,33,70,10,55,61,229,13,36,241,212,72,138,131,67,22,110,159,231,61,208,252,20,198,117,71,56],[200,212,48,127,53,145,148,6,161,175,14,4,35,100,141,115,18,45,108,49,198,1,246,111,56,19,96,242,221,200,113,203],[120,30,82,163,40,244,170,170,87,234,41,82,189,154,249,247,99,12,131,165,60,158,73,184,32,129,178,187,125,186,36,205],[87,142,69,77,142,36,123,106,73,232,201,152,71,81,179,215,185,199,128,151,137,135,129,131,175,125,171,44,204,103,115,63],[219,246,210,177,95,125,177,111,129,107,36,69,119,13,150,62,150,226,208,117,101,23,37,113,140,137,211,80,117,231,242,22],[215,200,60,131,57,3,11,222,203,133,8,255,238,188,177,7,50,225,17,136,0,14,171,99,46,164,208,75,37,228,236,59],[187,45,50,113,82,112,214,131,200,23,112,223,157,1,25,127,3,91,64,75,218,129,77,114,85,81,111,44,142,18,160,232],[105,149,228,150,63,89,88,153,181,194,227,45,252,66,206,211,82,224,165,228,186,165,105,202,241,146,26,152,177,120,123,218]]",
              "sol": "[bytes(abi.encode(\"44,33,203,222,85,172,33,70,10,55,61,229,13,36,241,212,72,138,131,67,22,110,159,231,61,208,252,20,198,117,71,56\")),bytes(abi.encode(\"200,212,48,127,53,145,148,6,161,175,14,4,35,100,141,115,18,45,108,49,198,1,246,111,56,19,96,242,221,200,113,203\")),bytes(abi.encode(\"120,30,82,163,40,244,170,170,87,234,41,82,189,154,249,247,99,12,131,165,60,158,73,184,32,129,178,187,125,186,36,205\")),bytes(abi.encode(\"87,142,69,77,142,36,123,106,73,232,201,152,71,81,179,215,185,199,128,151,137,135,129,131,175,125,171,44,204,103,115,63\")),bytes(abi.encode(\"219,246,210,177,95,125,177,111,129,107,36,69,119,13,150,62,150,226,208,117,101,23,37,113,140,137,211,80,117,231,242,22\")),bytes(abi.encode(\"215,200,60,131,57,3,11,222,203,133,8,255,238,188,177,7,50,225,17,136,0,14,171,99,46,164,208,75,37,228,236,59\")),bytes(abi.encode(\"187,45,50,113,82,112,214,131,200,23,112,223,157,1,25,127,3,91,64,75,218,129,77,114,85,81,111,44,142,18,160,232\")),bytes(abi.encode(\"105,149,228,150,63,89,88,153,181,194,227,45,252,66,206,211,82,224,165,228,186,165,105,202,241,146,26,152,177,120,123,218\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.549ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[45,197,186,134,124,168,30,14,10,198,142,97,139,212,104,237,57,203,138,97,236,38,192,69,52,78,15,136,142,206,131,83]]",
              "sol": "[bytes(abi.encode(\"45,197,186,134,124,168,30,14,10,198,142,97,139,212,104,237,57,203,138,97,236,38,192,69,52,78,15,136,142,206,131,83\"))]"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.549ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[50,228,145,195,18,158,210,100,160,208,247,87,226,149,160,49,63,92,195,175,27,70,209,85,136,217,165,247,34,78,66,72],[90,71,224,109,250,85,99,49,12,35,230,14,202,71,120,240,216,20,126,176,210,223,100,194,93,177,217,95,183,48,48,185],[143,57,68,126,167,170,234,70,120,179,133,0,95,32,47,87,33,168,78,133,109,142,59,176,50,115,217,100,1,179,204,216],[162,155,21,134,162,238,61,96,211,162,37,187,137,250,85,18,34,35,151,134,228,114,85,34,103,78,113,126,88,223,218,216],[28,119,128,53,2,214,153,173,56,13,201,17,166,28,112,24,88,177,172,54,229,233,166,218,220,1,98,237,92,64,242,233],[183,213,164,153,181,61,107,16,87,178,26,90,158,88,93,210,238,194,173,187,52,90,247,50,208,150,11,95,145,173,28,158],[29,14,70,70,240,151,178,105,74,38,152,16,237,228,145,152,80,180,47,127,55,51,61,45,51,12,29,108,151,72,117,42]]",
              "sol": "[bytes(abi.encode(\"50,228,145,195,18,158,210,100,160,208,247,87,226,149,160,49,63,92,195,175,27,70,209,85,136,217,165,247,34,78,66,72\")),bytes(abi.encode(\"90,71,224,109,250,85,99,49,12,35,230,14,202,71,120,240,216,20,126,176,210,223,100,194,93,177,217,95,183,48,48,185\")),bytes(abi.encode(\"143,57,68,126,167,170,234,70,120,179,133,0,95,32,47,87,33,168,78,133,109,142,59,176,50,115,217,100,1,179,204,216\")),bytes(abi.encode(\"162,155,21,134,162,238,61,96,211,162,37,187,137,250,85,18,34,35,151,134,228,114,85,34,103,78,113,126,88,223,218,216\")),bytes(abi.encode(\"28,119,128,53,2,214,153,173,56,13,201,17,166,28,112,24,88,177,172,54,229,233,166,218,220,1,98,237,92,64,242,233\")),bytes(abi.encode(\"183,213,164,153,181,61,107,16,87,178,26,90,158,88,93,210,238,194,173,187,52,90,247,50,208,150,11,95,145,173,28,158\")),bytes(abi.encode(\"29,14,70,70,240,151,178,105,74,38,152,16,237,228,145,152,80,180,47,127,55,51,61,45,51,12,29,108,151,72,117,42\"))]"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.550ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[133,73,125,187,34,120,8,29,59,54,32,92,175,59,244,57,189,252,220,120,103,70,134,37,54,100,5,78,57,53,166,92]]",
              "sol": "[bytes(abi.encode(\"133,73,125,187,34,120,8,29,59,54,32,92,175,59,244,57,189,252,220,120,103,70,134,37,54,100,5,78,57,53,166,92\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.551ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"3v6p4\"",
              "sol": "\"3v6p4\""
            },
            {
              "js": "[[78,255,228,67,208,20,202,156,57,84,40,255,124,49,170,90,28,92,31,180,195,11,70,146,52,214,40,53,45,155,43,77]]",
              "sol": "[bytes(abi.encode(\"78,255,228,67,208,20,202,156,57,84,40,255,124,49,170,90,28,92,31,180,195,11,70,146,52,214,40,53,45,155,43,77\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.551ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[77,16,127,232,19,46,105,70,167,110,206,236,73,32,81,198,204,107,205,225,78,245,176,157,213,150,175,181,39,95,67,164]]",
              "sol": "[bytes(abi.encode(\"77,16,127,232,19,46,105,70,167,110,206,236,73,32,81,198,204,107,205,225,78,245,176,157,213,150,175,181,39,95,67,164\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.552ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"v917i\"",
              "sol": "\"v917i\""
            },
            {
              "js": "[[168,186,147,91,58,194,104,185,122,123,233,207,190,90,219,42,27,53,182,146,122,55,167,139,94,243,244,112,161,58,155,75]]",
              "sol": "[bytes(abi.encode(\"168,186,147,91,58,194,104,185,122,123,233,207,190,90,219,42,27,53,182,146,122,55,167,139,94,243,244,112,161,58,155,75\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.552ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"jp1pgh\"",
              "sol": "\"jp1pgh\""
            },
            {
              "js": "[[129,16,50,108,40,193,67,16,75,148,153,190,234,5,140,204,120,1,103,194,151,87,25,239,250,135,232,230,193,124,153,174],[215,247,56,215,5,168,131,62,60,130,171,80,123,28,120,163,101,174,83,211,19,5,249,176,163,130,69,250,239,97,94,37]]",
              "sol": "[bytes(abi.encode(\"129,16,50,108,40,193,67,16,75,148,153,190,234,5,140,204,120,1,103,194,151,87,25,239,250,135,232,230,193,124,153,174\")),bytes(abi.encode(\"215,247,56,215,5,168,131,62,60,130,171,80,123,28,120,163,101,174,83,211,19,5,249,176,163,130,69,250,239,97,94,37\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.553ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[183,45,15,200,72,50,219,40,115,223,1,27,74,40,103,122,194,132,145,81,150,152,91,178,99,188,4,85,48,126,131,112],[176,54,250,17,17,58,213,250,148,27,64,83,223,157,47,75,129,180,18,206,74,232,230,242,98,153,131,55,149,2,80,127]]",
              "sol": "[bytes(abi.encode(\"183,45,15,200,72,50,219,40,115,223,1,27,74,40,103,122,194,132,145,81,150,152,91,178,99,188,4,85,48,126,131,112\")),bytes(abi.encode(\"176,54,250,17,17,58,213,250,148,27,64,83,223,157,47,75,129,180,18,206,74,232,230,242,98,153,131,55,149,2,80,127\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.554ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[98,217,147,245,102,26,158,105,14,64,190,184,220,174,159,193,74,33,237,86,244,130,250,216,90,228,77,135,122,178,199,129],[181,245,186,208,85,42,75,130,183,102,212,106,89,194,107,49,72,43,200,195,79,108,18,22,156,51,113,57,58,108,131,111]]",
              "sol": "[bytes(abi.encode(\"98,217,147,245,102,26,158,105,14,64,190,184,220,174,159,193,74,33,237,86,244,130,250,216,90,228,77,135,122,178,199,129\")),bytes(abi.encode(\"181,245,186,208,85,42,75,130,183,102,212,106,89,194,107,49,72,43,200,195,79,108,18,22,156,51,113,57,58,108,131,111\"))]"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.554ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[147,195,164,248,70,70,155,112,18,119,107,233,13,241,241,141,235,226,212,188,156,72,240,117,23,200,109,236,246,32,117,188],[183,28,0,77,127,72,20,95,68,165,22,150,160,251,117,17,1,59,206,78,52,198,134,193,108,184,67,121,70,144,96,19]]",
              "sol": "[bytes(abi.encode(\"147,195,164,248,70,70,155,112,18,119,107,233,13,241,241,141,235,226,212,188,156,72,240,117,23,200,109,236,246,32,117,188\")),bytes(abi.encode(\"183,28,0,77,127,72,20,95,68,165,22,150,160,251,117,17,1,59,206,78,52,198,134,193,108,184,67,121,70,144,96,19\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.555ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "[[90,58,153,110,200,178,13,161,2,109,164,253,198,149,228,211,191,180,123,115,23,215,210,220,189,129,239,68,247,185,4,172],[0,244,245,141,143,155,254,61,208,199,249,31,115,185,190,250,139,235,210,144,73,17,255,157,65,111,86,78,56,249,197,89],[23,84,81,199,125,65,163,211,192,180,134,94,241,75,164,182,234,167,113,168,104,40,109,235,188,30,242,113,7,42,214,202]]",
              "sol": "[bytes(abi.encode(\"90,58,153,110,200,178,13,161,2,109,164,253,198,149,228,211,191,180,123,115,23,215,210,220,189,129,239,68,247,185,4,172\")),bytes(abi.encode(\"0,244,245,141,143,155,254,61,208,199,249,31,115,185,190,250,139,235,210,144,73,17,255,157,65,111,86,78,56,249,197,89\")),bytes(abi.encode(\"23,84,81,199,125,65,163,211,192,180,134,94,241,75,164,182,234,167,113,168,104,40,109,235,188,30,242,113,7,42,214,202\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.555ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"v917i\"",
              "sol": "\"v917i\""
            },
            {
              "js": "[[198,56,115,80,149,171,248,237,155,0,76,193,173,137,119,98,71,221,197,88,220,83,235,9,185,197,57,160,211,180,110,47],[191,251,67,247,80,31,193,255,199,66,231,15,63,52,205,70,112,9,201,182,38,39,124,129,229,6,79,34,227,143,181,225],[161,169,125,245,179,46,7,78,126,212,166,113,252,221,62,16,249,238,249,44,135,12,172,234,216,40,225,72,90,1,189,29]]",
              "sol": "[bytes(abi.encode(\"198,56,115,80,149,171,248,237,155,0,76,193,173,137,119,98,71,221,197,88,220,83,235,9,185,197,57,160,211,180,110,47\")),bytes(abi.encode(\"191,251,67,247,80,31,193,255,199,66,231,15,63,52,205,70,112,9,201,182,38,39,124,129,229,6,79,34,227,143,181,225\")),bytes(abi.encode(\"161,169,125,245,179,46,7,78,126,212,166,113,252,221,62,16,249,238,249,44,135,12,172,234,216,40,225,72,90,1,189,29\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.556ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "[[203,65,76,172,1,55,104,93,192,17,129,10,89,158,251,91,130,81,250,14,67,39,28,150,56,230,58,187,227,211,123,43],[65,178,91,71,107,35,209,68,158,227,54,20,100,127,125,84,70,81,131,219,160,241,6,188,43,55,165,151,243,238,99,222],[102,54,35,108,236,67,189,199,114,12,147,69,160,123,20,114,124,177,48,47,31,6,20,65,44,48,234,238,153,185,155,98]]",
              "sol": "[bytes(abi.encode(\"203,65,76,172,1,55,104,93,192,17,129,10,89,158,251,91,130,81,250,14,67,39,28,150,56,230,58,187,227,211,123,43\")),bytes(abi.encode(\"65,178,91,71,107,35,209,68,158,227,54,20,100,127,125,84,70,81,131,219,160,241,6,188,43,55,165,151,243,238,99,222\")),bytes(abi.encode(\"102,54,35,108,236,67,189,199,114,12,147,69,160,123,20,114,124,177,48,47,31,6,20,65,44,48,234,238,153,185,155,98\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.556ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[188,187,113,219,53,121,183,133,67,139,65,10,150,70,70,142,211,153,212,101,18,3,105,207,150,241,52,30,87,170,16,13],[173,107,180,196,109,30,6,55,82,90,59,78,21,96,236,9,123,142,3,124,23,148,70,207,140,139,91,193,117,38,127,252],[154,27,42,4,87,15,152,109,239,238,28,173,222,102,135,52,253,188,8,189,189,104,41,71,91,236,5,87,213,67,111,151]]",
              "sol": "[bytes(abi.encode(\"188,187,113,219,53,121,183,133,67,139,65,10,150,70,70,142,211,153,212,101,18,3,105,207,150,241,52,30,87,170,16,13\")),bytes(abi.encode(\"173,107,180,196,109,30,6,55,82,90,59,78,21,96,236,9,123,142,3,124,23,148,70,207,140,139,91,193,117,38,127,252\")),bytes(abi.encode(\"154,27,42,4,87,15,152,109,239,238,28,173,222,102,135,52,253,188,8,189,189,104,41,71,91,236,5,87,213,67,111,151\"))]"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.557ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[108,67,53,52,223,77,187,89,20,25,153,8,30,28,118,103,30,70,116,193,47,6,128,116,203,121,34,121,41,152,80,181],[105,240,152,9,200,90,122,97,117,9,61,34,12,218,217,29,227,87,97,252,100,228,226,205,148,139,158,249,223,6,149,193],[244,191,226,47,72,246,51,36,246,122,59,157,69,143,223,253,145,46,2,14,149,157,198,125,208,128,14,109,220,63,92,82],[179,252,143,199,199,193,199,234,220,15,168,234,87,160,100,128,218,175,125,0,140,49,31,183,174,82,62,174,144,222,98,226]]",
              "sol": "[bytes(abi.encode(\"108,67,53,52,223,77,187,89,20,25,153,8,30,28,118,103,30,70,116,193,47,6,128,116,203,121,34,121,41,152,80,181\")),bytes(abi.encode(\"105,240,152,9,200,90,122,97,117,9,61,34,12,218,217,29,227,87,97,252,100,228,226,205,148,139,158,249,223,6,149,193\")),bytes(abi.encode(\"244,191,226,47,72,246,51,36,246,122,59,157,69,143,223,253,145,46,2,14,149,157,198,125,208,128,14,109,220,63,92,82\")),bytes(abi.encode(\"179,252,143,199,199,193,199,234,220,15,168,234,87,160,100,128,218,175,125,0,140,49,31,183,174,82,62,174,144,222,98,226\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.558ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[20,10,204,59,131,123,111,57,228,93,75,241,168,213,234,137,85,46,181,66,106,177,88,134,194,13,186,164,100,141,145,246],[213,138,106,0,180,186,139,222,248,71,33,4,41,149,158,240,208,16,213,234,66,216,58,72,244,204,144,253,160,75,117,84],[139,125,239,36,129,42,5,12,164,45,148,22,86,213,107,147,196,159,140,180,37,220,150,61,250,214,21,222,63,141,75,42],[23,111,173,233,49,9,37,115,248,104,16,252,138,185,72,8,102,152,35,195,216,236,187,170,17,9,122,68,180,142,210,97]]",
              "sol": "[bytes(abi.encode(\"20,10,204,59,131,123,111,57,228,93,75,241,168,213,234,137,85,46,181,66,106,177,88,134,194,13,186,164,100,141,145,246\")),bytes(abi.encode(\"213,138,106,0,180,186,139,222,248,71,33,4,41,149,158,240,208,16,213,234,66,216,58,72,244,204,144,253,160,75,117,84\")),bytes(abi.encode(\"139,125,239,36,129,42,5,12,164,45,148,22,86,213,107,147,196,159,140,180,37,220,150,61,250,214,21,222,63,141,75,42\")),bytes(abi.encode(\"23,111,173,233,49,9,37,115,248,104,16,252,138,185,72,8,102,152,35,195,216,236,187,170,17,9,122,68,180,142,210,97\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.558ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "[[213,62,220,224,52,93,22,253,243,204,156,136,64,56,210,35,238,232,183,88,43,55,135,82,99,143,52,83,48,68,99,13],[145,196,95,238,215,254,232,24,197,53,100,134,107,164,241,6,119,99,4,147,224,172,9,12,167,224,86,130,146,151,167,22],[9,201,14,7,192,69,127,103,246,236,20,174,37,132,146,161,161,169,189,222,1,192,118,114,8,139,205,136,169,0,172,243],[22,231,201,217,111,181,234,128,14,63,54,121,139,181,168,215,157,135,185,157,18,52,44,42,171,79,66,229,138,113,31,56]]",
              "sol": "[bytes(abi.encode(\"213,62,220,224,52,93,22,253,243,204,156,136,64,56,210,35,238,232,183,88,43,55,135,82,99,143,52,83,48,68,99,13\")),bytes(abi.encode(\"145,196,95,238,215,254,232,24,197,53,100,134,107,164,241,6,119,99,4,147,224,172,9,12,167,224,86,130,146,151,167,22\")),bytes(abi.encode(\"9,201,14,7,192,69,127,103,246,236,20,174,37,132,146,161,161,169,189,222,1,192,118,114,8,139,205,136,169,0,172,243\")),bytes(abi.encode(\"22,231,201,217,111,181,234,128,14,63,54,121,139,181,168,215,157,135,185,157,18,52,44,42,171,79,66,229,138,113,31,56\"))]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.559ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"qs4sne\"",
              "sol": "\"qs4sne\""
            },
            {
              "js": "[[188,15,103,111,74,36,246,45,217,108,188,127,233,227,56,191,58,252,110,97,252,37,72,238,4,214,55,36,48,83,182,75],[153,115,88,232,179,185,233,62,156,89,222,127,143,124,169,221,164,133,18,9,81,15,88,49,10,139,156,98,223,147,145,11],[104,229,251,34,228,146,129,160,160,229,64,120,27,7,227,48,37,2,213,111,121,145,213,189,4,193,162,50,153,2,96,25],[100,169,83,232,92,36,221,202,252,97,93,58,197,94,44,213,92,55,2,151,204,103,223,242,239,20,103,3,71,130,97,113]]",
              "sol": "[bytes(abi.encode(\"188,15,103,111,74,36,246,45,217,108,188,127,233,227,56,191,58,252,110,97,252,37,72,238,4,214,55,36,48,83,182,75\")),bytes(abi.encode(\"153,115,88,232,179,185,233,62,156,89,222,127,143,124,169,221,164,133,18,9,81,15,88,49,10,139,156,98,223,147,145,11\")),bytes(abi.encode(\"104,229,251,34,228,146,129,160,160,229,64,120,27,7,227,48,37,2,213,111,121,145,213,189,4,193,162,50,153,2,96,25\")),bytes(abi.encode(\"100,169,83,232,92,36,221,202,252,97,93,58,197,94,44,213,92,55,2,151,204,103,223,242,239,20,103,3,71,130,97,113\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.560ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "[[137,56,82,197,35,41,34,233,88,201,109,242,37,202,176,43,143,99,216,48,40,137,28,110,209,93,186,57,112,170,141,58],[28,17,140,14,230,223,8,109,138,197,74,117,177,168,146,162,170,37,98,200,96,241,75,6,161,199,199,241,187,82,137,139],[12,117,253,86,79,25,4,198,59,237,240,140,142,48,208,179,173,160,172,120,136,113,127,73,98,84,57,42,168,42,55,154],[143,98,234,222,72,182,208,93,1,67,246,206,33,31,96,152,181,90,128,33,9,149,37,39,184,173,231,137,135,105,96,67],[17,226,223,181,212,214,157,239,101,112,239,63,81,208,171,4,251,191,83,112,8,248,111,212,121,138,41,104,250,90,254,245]]",
              "sol": "[bytes(abi.encode(\"137,56,82,197,35,41,34,233,88,201,109,242,37,202,176,43,143,99,216,48,40,137,28,110,209,93,186,57,112,170,141,58\")),bytes(abi.encode(\"28,17,140,14,230,223,8,109,138,197,74,117,177,168,146,162,170,37,98,200,96,241,75,6,161,199,199,241,187,82,137,139\")),bytes(abi.encode(\"12,117,253,86,79,25,4,198,59,237,240,140,142,48,208,179,173,160,172,120,136,113,127,73,98,84,57,42,168,42,55,154\")),bytes(abi.encode(\"143,98,234,222,72,182,208,93,1,67,246,206,33,31,96,152,181,90,128,33,9,149,37,39,184,173,231,137,135,105,96,67\")),bytes(abi.encode(\"17,226,223,181,212,214,157,239,101,112,239,63,81,208,171,4,251,191,83,112,8,248,111,212,121,138,41,104,250,90,254,245\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.560ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "[[65,62,84,1,113,255,218,34,166,171,153,183,64,50,130,124,40,96,129,64,138,83,121,102,42,100,41,149,166,113,97,117],[191,208,243,233,40,210,79,2,62,59,166,139,79,185,109,151,60,2,41,68,214,3,213,238,234,179,212,10,6,232,186,173],[91,175,173,13,171,92,71,18,213,50,104,20,63,102,247,179,59,238,215,234,237,184,34,28,220,218,106,171,115,141,227,108],[30,27,26,25,195,240,143,153,112,252,49,123,120,151,144,112,107,109,213,86,26,221,158,90,33,40,176,68,203,121,83,22],[114,78,134,82,116,104,54,114,124,89,250,252,91,89,114,61,207,181,15,247,82,20,124,181,31,230,88,253,194,181,209,241]]",
              "sol": "[bytes(abi.encode(\"65,62,84,1,113,255,218,34,166,171,153,183,64,50,130,124,40,96,129,64,138,83,121,102,42,100,41,149,166,113,97,117\")),bytes(abi.encode(\"191,208,243,233,40,210,79,2,62,59,166,139,79,185,109,151,60,2,41,68,214,3,213,238,234,179,212,10,6,232,186,173\")),bytes(abi.encode(\"91,175,173,13,171,92,71,18,213,50,104,20,63,102,247,179,59,238,215,234,237,184,34,28,220,218,106,171,115,141,227,108\")),bytes(abi.encode(\"30,27,26,25,195,240,143,153,112,252,49,123,120,151,144,112,107,109,213,86,26,221,158,90,33,40,176,68,203,121,83,22\")),bytes(abi.encode(\"114,78,134,82,116,104,54,114,124,89,250,252,91,89,114,61,207,181,15,247,82,20,124,181,31,230,88,253,194,181,209,241\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.561ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[91,176,123,36,0,139,144,34,121,15,23,106,54,151,187,76,63,224,57,37,219,112,251,223,109,123,148,117,34,157,203,151],[80,95,102,35,176,121,142,117,14,186,196,92,38,48,196,182,208,176,117,202,173,171,150,251,50,48,81,116,193,53,146,57],[69,143,201,145,29,46,178,86,19,76,31,24,42,61,231,209,193,107,36,9,247,206,178,2,171,4,46,53,94,125,72,139],[212,202,119,134,217,221,228,21,112,189,37,90,223,81,210,107,70,86,127,20,68,249,86,246,212,38,74,33,227,126,111,218],[60,195,193,83,212,127,31,47,221,89,6,99,188,79,135,38,9,29,136,220,38,94,76,100,224,110,201,95,36,142,148,46]]",
              "sol": "[bytes(abi.encode(\"91,176,123,36,0,139,144,34,121,15,23,106,54,151,187,76,63,224,57,37,219,112,251,223,109,123,148,117,34,157,203,151\")),bytes(abi.encode(\"80,95,102,35,176,121,142,117,14,186,196,92,38,48,196,182,208,176,117,202,173,171,150,251,50,48,81,116,193,53,146,57\")),bytes(abi.encode(\"69,143,201,145,29,46,178,86,19,76,31,24,42,61,231,209,193,107,36,9,247,206,178,2,171,4,46,53,94,125,72,139\")),bytes(abi.encode(\"212,202,119,134,217,221,228,21,112,189,37,90,223,81,210,107,70,86,127,20,68,249,86,246,212,38,74,33,227,126,111,218\")),bytes(abi.encode(\"60,195,193,83,212,127,31,47,221,89,6,99,188,79,135,38,9,29,136,220,38,94,76,100,224,110,201,95,36,142,148,46\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.563ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[18,105,8,240,172,112,223,63,64,123,2,117,221,78,33,142,9,85,68,182,197,6,155,150,223,72,9,214,110,233,62,187],[135,141,19,51,61,6,182,84,56,28,182,38,14,163,74,10,241,66,35,244,39,3,236,77,148,124,68,24,66,153,179,183],[79,134,55,181,3,193,255,63,184,170,1,3,190,123,183,117,44,80,187,76,174,189,102,80,2,232,220,177,107,228,251,2],[121,211,130,34,176,44,180,66,243,117,66,26,22,50,228,187,164,149,166,88,19,183,78,146,137,136,95,178,19,150,169,166],[94,156,31,226,146,86,38,213,198,60,22,65,57,171,83,169,151,8,29,158,97,35,113,169,45,96,69,22,29,192,131,75]]",
              "sol": "[bytes(abi.encode(\"18,105,8,240,172,112,223,63,64,123,2,117,221,78,33,142,9,85,68,182,197,6,155,150,223,72,9,214,110,233,62,187\")),bytes(abi.encode(\"135,141,19,51,61,6,182,84,56,28,182,38,14,163,74,10,241,66,35,244,39,3,236,77,148,124,68,24,66,153,179,183\")),bytes(abi.encode(\"79,134,55,181,3,193,255,63,184,170,1,3,190,123,183,117,44,80,187,76,174,189,102,80,2,232,220,177,107,228,251,2\")),bytes(abi.encode(\"121,211,130,34,176,44,180,66,243,117,66,26,22,50,228,187,164,149,166,88,19,183,78,146,137,136,95,178,19,150,169,166\")),bytes(abi.encode(\"94,156,31,226,146,86,38,213,198,60,22,65,57,171,83,169,151,8,29,158,97,35,113,169,45,96,69,22,29,192,131,75\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.565ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[72]",
              "sol": "bytes1(\"72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.565ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.566ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.567ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.567ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.572ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.573ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"j2nrfk\"",
              "sol": "\"j2nrfk\""
            },
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.573ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.574ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"j2nrfk\"",
              "sol": "\"j2nrfk\""
            },
            {
              "js": "\"jp1pgh\"",
              "sol": "\"jp1pgh\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.574ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "\"j2nrfk\"",
              "sol": "\"j2nrfk\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.574ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "\"jp1pgh\"",
              "sol": "\"jp1pgh\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.575ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"x1wbr\"",
              "sol": "\"x1wbr\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"mkzdal\"",
              "sol": "\"mkzdal\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.575ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"k9yyu\"",
              "sol": "\"k9yyu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.576ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.576ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.577ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.577ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.578ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"[\",\"L\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"nxwvz\"]",
              "sol": "[string(\"[\"),string(\"L\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"nxwvz\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.578ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[65,90,50,226,113,143,105,148,206,79,25,47,169,8,218,179,136,47,25,80,22,254,174,151,165,60,75,25,136,172,188,106],[27,57,93,225,56,99,201,219,116,199,122,128,253,69,108,115,26,232,93,245,173,83,6,235,80,38,58,236,81,233,150,46],[69,141,193,52,238,95,200,219,138,50,207,50,185,68,30,185,200,173,44,246,229,193,3,59,5,242,167,85,16,232,16,141],[211,36,89,178,132,26,125,159,129,143,154,155,43,157,66,28,94,96,7,72,166,137,46,79,26,233,158,17,117,81,6,207],[16,188,79,30,181,86,165,185,246,60,167,204,152,62,227,39,44,162,187,124,51,10,38,213,252,142,41,14,96,2,43,22],[131,58,159,12,212,130,86,109,158,192,244,172,137,81,214,74,220,222,248,106,164,31,28,177,43,155,100,91,170,26,255,161],[128,122,137,93,159,143,195,216,140,221,172,214,21,117,211,79,106,58,236,175,94,18,254,251,17,234,165,194,126,43,150,82],[80,147,238,30,168,39,75,214,109,43,233,119,227,161,12,14,244,166,191,247,161,20,27,127,24,79,87,174,121,113,130,213],[199,27,215,60,72,153,27,43,169,207,160,218,218,158,217,215,244,229,104,24,113,111,58,94,232,221,10,245,47,172,75,240],[136,202,167,169,212,76,141,188,207,98,88,212,242,226,193,58,226,207,130,217,236,16,61,145,28,219,51,188,122,56,95,211]]",
              "sol": "[bytes(abi.encode(\"65,90,50,226,113,143,105,148,206,79,25,47,169,8,218,179,136,47,25,80,22,254,174,151,165,60,75,25,136,172,188,106\")),bytes(abi.encode(\"27,57,93,225,56,99,201,219,116,199,122,128,253,69,108,115,26,232,93,245,173,83,6,235,80,38,58,236,81,233,150,46\")),bytes(abi.encode(\"69,141,193,52,238,95,200,219,138,50,207,50,185,68,30,185,200,173,44,246,229,193,3,59,5,242,167,85,16,232,16,141\")),bytes(abi.encode(\"211,36,89,178,132,26,125,159,129,143,154,155,43,157,66,28,94,96,7,72,166,137,46,79,26,233,158,17,117,81,6,207\")),bytes(abi.encode(\"16,188,79,30,181,86,165,185,246,60,167,204,152,62,227,39,44,162,187,124,51,10,38,213,252,142,41,14,96,2,43,22\")),bytes(abi.encode(\"131,58,159,12,212,130,86,109,158,192,244,172,137,81,214,74,220,222,248,106,164,31,28,177,43,155,100,91,170,26,255,161\")),bytes(abi.encode(\"128,122,137,93,159,143,195,216,140,221,172,214,21,117,211,79,106,58,236,175,94,18,254,251,17,234,165,194,126,43,150,82\")),bytes(abi.encode(\"80,147,238,30,168,39,75,214,109,43,233,119,227,161,12,14,244,166,191,247,161,20,27,127,24,79,87,174,121,113,130,213\")),bytes(abi.encode(\"199,27,215,60,72,153,27,43,169,207,160,218,218,158,217,215,244,229,104,24,113,111,58,94,232,221,10,245,47,172,75,240\")),bytes(abi.encode(\"136,202,167,169,212,76,141,188,207,98,88,212,242,226,193,58,226,207,130,217,236,16,61,145,28,219,51,188,122,56,95,211\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.579ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.580ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[132,35,147,156,254,220,188,199,125,223,239,197,12,126,97,48,101,206,107,132,212,114,148,139,237,112,184,192,74,43,88,232]",
              "sol": "stringToBytes32(\"132,35,147,156,254,220,188,199,125,223,239,197,12,126,97,48,101,206,107,132,212,114,148,139,237,112,184,192,74,43,88,232\")"
            },
            {
              "js": "[91,88,168,210,119,202,43,28,63,19,57,109,27,65,53,219,164,94,142,200,92,115,0,116,192,119,189,83,215,106,10,2]",
              "sol": "stringToBytes32(\"91,88,168,210,119,202,43,28,63,19,57,109,27,65,53,219,164,94,142,200,92,115,0,116,192,119,189,83,215,106,10,2\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.580ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[41,9,33,33,101,2,8,28,168,127,94,15,104,39,254,86,242,204,233,79,207,235,244,217,214,29,126,16,242,173,247,64]",
              "sol": "stringToBytes32(\"41,9,33,33,101,2,8,28,168,127,94,15,104,39,254,86,242,204,233,79,207,235,244,217,214,29,126,16,242,173,247,64\")"
            },
            {
              "js": "[137,46,6,1,91,197,192,191,192,108,142,253,76,46,138,176,68,64,97,201,49,43,35,87,228,232,252,244,103,239,255,133]",
              "sol": "abi.encode(\"137,46,6,1,91,197,192,191,192,108,142,253,76,46,138,176,68,64,97,201,49,43,35,87,228,232,252,244,103,239,255,133\")"
            },
            {
              "js": "[167,92,248,9,204,63,144,83,1,68,188,165,21,45,75,64,107,197,244,57,220,49,139,149,45,187,184,163,35,98,185,219]",
              "sol": "abi.encode(\"167,92,248,9,204,63,144,83,1,68,188,165,21,45,75,64,107,197,244,57,220,49,139,149,45,187,184,163,35,98,185,219\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.581ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[113,19,139,8,245,12,12,214,178,254,153,163,201,106,2,161,37,35,103,156,250,242,78,95,220,190,225,94,10,209,116,89]",
              "sol": "abi.encode(\"113,19,139,8,245,12,12,214,178,254,153,163,201,106,2,161,37,35,103,156,250,242,78,95,220,190,225,94,10,209,116,89\")"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[92,201,246,249,170,206,136,132,113,51,206,230,211,61,221,193,58,35,125,114,187,11,52,0,106,238,81,217,248,28,160,58]",
              "sol": "abi.encode(\"92,201,246,249,170,206,136,132,113,51,206,230,211,61,221,193,58,35,125,114,187,11,52,0,106,238,81,217,248,28,160,58\")"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.582ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[60,133,103,152,252,144,228,58,238,245,214,155,50,94,169,237,133,38,218,57,180,121,154,117,207,234,231,70,206,106,68,163]",
              "sol": "stringToBytes32(\"60,133,103,152,252,144,228,58,238,245,214,155,50,94,169,237,133,38,218,57,180,121,154,117,207,234,231,70,206,106,68,163\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[177,139,167,38,126,254,204,117,26,93,71,251,164,213,122,143,194,147,2,170,180,100,59,126,195,221,204,83,41,44,120,229]",
              "sol": "abi.encode(\"177,139,167,38,126,254,204,117,26,93,71,251,164,213,122,143,194,147,2,170,180,100,59,126,195,221,204,83,41,44,120,229\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[135,34,217,5,132,247,72,122,177,175,58,248,79,105,237,46,140,193,75,89,29,152,156,218,56,170,209,139,46,33,146,90]",
              "sol": "stringToBytes32(\"135,34,217,5,132,247,72,122,177,175,58,248,79,105,237,46,140,193,75,89,29,152,156,218,56,170,209,139,46,33,146,90\")"
            },
            {
              "js": "\"x1wbr\"",
              "sol": "\"x1wbr\""
            },
            {
              "js": "[196,72,190,93,28,245,76,93,90,239,26,199,10,150,3,162,114,71,217,155,131,251,120,161,121,167,63,64,122,19,199,161]",
              "sol": "abi.encode(\"196,72,190,93,28,245,76,93,90,239,26,199,10,150,3,162,114,71,217,155,131,251,120,161,121,167,63,64,122,19,199,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.583ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[250,115,192,108,61,120,147,58,60,146,92,151,8,85,60,74,30,178,84,104,112,49,147,241,176,69,0,174,5,133,19,200]",
              "sol": "stringToBytes32(\"250,115,192,108,61,120,147,58,60,146,92,151,8,85,60,74,30,178,84,104,112,49,147,241,176,69,0,174,5,133,19,200\")"
            },
            {
              "js": "[26,252,21,150,250,61,170,112,60,81,45,57,54,216,47,146,203,84,34,155,61,26,145,80,76,90,17,182,163,37,143,56]",
              "sol": "abi.encode(\"26,252,21,150,250,61,170,112,60,81,45,57,54,216,47,146,203,84,34,155,61,26,145,80,76,90,17,182,163,37,143,56\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[250,115,192,108,61,120,147,58,60,146,92,151,8,85,60,74,30,178,84,104,112,49,147,241,176,69,0,174,5,133,19,200]",
                "sol": "stringToBytes32(\"250,115,192,108,61,120,147,58,60,146,92,151,8,85,60,74,30,178,84,104,112,49,147,241,176,69,0,174,5,133,19,200\")"
              },
              {
                "js": "[158,184,125,100,29,62,1,235,62,226,170,216,61,72,218,15,219,226,82,201,95,167,81,60,18,176,207,182,223,99,177,19,84]",
                "sol": "bytes33(\"158,184,125,100,29,62,1,235,62,226,170,216,61,72,218,15,219,226,82,201,95,167,81,60,18,176,207,182,223,99,177,19,84\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.584ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[165,237,72,238,242,54,138,206,147,43,182,60,246,9,158,110,64,118,57,164,59,227,186,25,188,97,149,122,69,43,25,109]",
              "sol": "abi.encode(\"165,237,72,238,242,54,138,206,147,43,182,60,246,9,158,110,64,118,57,164,59,227,186,25,188,97,149,122,69,43,25,109\")"
            },
            {
              "js": "[200,88,170,203,59,144,121,254,72,117,161,168,100,196,119,224,3,185,67,68,60,91,120,26,220,2,20,94,222,155,95,49]",
              "sol": "stringToBytes32(\"200,88,170,203,59,144,121,254,72,117,161,168,100,196,119,224,3,185,67,68,60,91,120,26,220,2,20,94,222,155,95,49\")"
            },
            {
              "js": "[157,236,103,174,50,175,20,235,244,15,199,51,186,134,107,12,60,158,7,103,218,164,242,153,249,183,57,144,2,181,208,113]",
              "sol": "abi.encode(\"157,236,103,174,50,175,20,235,244,15,199,51,186,134,107,12,60,158,7,103,218,164,242,153,249,183,57,144,2,181,208,113\")"
            },
            {
              "js": "\"x1wbr\"",
              "sol": "\"x1wbr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[100,76,174,214,239,6,6,188,32,27,61,41,146,153,61,178,87,175,171,40,1,181,49,121,120,45,77,250,43,29,101,238]",
              "sol": "abi.encode(\"100,76,174,214,239,6,6,188,32,27,61,41,146,153,61,178,87,175,171,40,1,181,49,121,120,45,77,250,43,29,101,238\")"
            },
            {
              "js": "[223,182,49,70,52,120,57,201,120,128,170,253,215,87,92,53,10,208,179,223,176,28,20,20,173,168,225,10,196,61,27,226]",
              "sol": "stringToBytes32(\"223,182,49,70,52,120,57,201,120,128,170,253,215,87,92,53,10,208,179,223,176,28,20,20,173,168,225,10,196,61,27,226\")"
            },
            {
              "js": "[184,4,20,177,165,124,184,172,42,157,126,88,55,57,145,125,41,43,15,36,162,155,32,91,5,100,62,243,120,153,174,189]",
              "sol": "abi.encode(\"184,4,20,177,165,124,184,172,42,157,126,88,55,57,145,125,41,43,15,36,162,155,32,91,5,100,62,243,120,153,174,189\")"
            },
            {
              "js": "\"x4eljo\"",
              "sol": "\"x4eljo\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[180,250,6,65,2,135,201,205,14,217,221,20,185,35,146,168,28,70,142,225,170,114,241,66,141,234,217,133,187,26,42,89]",
              "sol": "abi.encode(\"180,250,6,65,2,135,201,205,14,217,221,20,185,35,146,168,28,70,142,225,170,114,241,66,141,234,217,133,187,26,42,89\")"
            },
            {
              "js": "[25,152,252,211,82,27,189,31,213,38,145,108,193,86,182,235,123,52,84,195,243,64,178,170,196,234,81,154,36,226,164,23]",
              "sol": "stringToBytes32(\"25,152,252,211,82,27,189,31,213,38,145,108,193,86,182,235,123,52,84,195,243,64,178,170,196,234,81,154,36,226,164,23\")"
            },
            {
              "js": "[76,227,126,62,110,135,63,65,148,113,238,66,78,216,152,108,78,193,72,251,229,192,222,53,63,252,4,233,2,214,92,206]",
              "sol": "abi.encode(\"76,227,126,62,110,135,63,65,148,113,238,66,78,216,152,108,78,193,72,251,229,192,222,53,63,252,4,233,2,214,92,206\")"
            },
            {
              "js": "\"nxwvz\"",
              "sol": "\"nxwvz\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[14,164,70,90,160,242,153,79,234,38,107,11,189,213,149,147,149,87,205,94,135,185,91,70,97,209,142,252,53,231,76,11]",
              "sol": "abi.encode(\"14,164,70,90,160,242,153,79,234,38,107,11,189,213,149,147,149,87,205,94,135,185,91,70,97,209,142,252,53,231,76,11\")"
            },
            {
              "js": "[70,75,152,178,211,106,20,37,100,3,188,68,182,54,196,21,108,26,15,148,41,211,88,63,232,128,51,192,156,212,174,213]",
              "sol": "stringToBytes32(\"70,75,152,178,211,106,20,37,100,3,188,68,182,54,196,21,108,26,15,148,41,211,88,63,232,128,51,192,156,212,174,213\")"
            },
            {
              "js": "[50,201,154,172,190,30,17,14,92,46,163,207,14,136,186,90,188,74,197,74,89,233,191,202,149,137,55,168,221,24,53,219]",
              "sol": "abi.encode(\"50,201,154,172,190,30,17,14,92,46,163,207,14,136,186,90,188,74,197,74,89,233,191,202,149,137,55,168,221,24,53,219\")"
            },
            {
              "js": "\"j2nrfk\"",
              "sol": "\"j2nrfk\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[253,184,253,43,104,165,84,46,53,136,173,81,77,97,162,188,107,187,32,71,112,114,138,70,197,71,3,220,45,54,83,106]",
              "sol": "abi.encode(\"253,184,253,43,104,165,84,46,53,136,173,81,77,97,162,188,107,187,32,71,112,114,138,70,197,71,3,220,45,54,83,106\")"
            },
            {
              "js": "[156,135,157,145,93,203,151,156,37,140,130,153,180,64,81,229,34,68,45,81,58,97,19,14,254,77,153,49,198,195,157,117]",
              "sol": "stringToBytes32(\"156,135,157,145,93,203,151,156,37,140,130,153,180,64,81,229,34,68,45,81,58,97,19,14,254,77,153,49,198,195,157,117\")"
            },
            {
              "js": "[137,16,113,68,186,199,22,151,115,176,71,181,73,30,124,151,128,241,198,243,220,139,113,2,137,20,168,176,242,153,143,33]",
              "sol": "abi.encode(\"137,16,113,68,186,199,22,151,115,176,71,181,73,30,124,151,128,241,198,243,220,139,113,2,137,20,168,176,242,153,143,33\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[167,68,156,66,30,84,19,107,234,54,107,169,167,52,53,174,78,186,82,238,199,185,27,190,136,204,26,76,196,159,239,24]",
              "sol": "abi.encode(\"167,68,156,66,30,84,19,107,234,54,107,169,167,52,53,174,78,186,82,238,199,185,27,190,136,204,26,76,196,159,239,24\")"
            },
            {
              "js": "[99,11,54,107,111,149,232,98,54,23,75,179,42,141,100,42,209,152,74,192,189,56,188,111,9,46,1,251,128,50,80,179]",
              "sol": "stringToBytes32(\"99,11,54,107,111,149,232,98,54,23,75,179,42,141,100,42,209,152,74,192,189,56,188,111,9,46,1,251,128,50,80,179\")"
            },
            {
              "js": "[15,208,153,77,202,145,58,200,141,83,39,14,102,244,254,199,231,99,182,66,146,31,224,168,142,174,74,211,52,59,70,31]",
              "sol": "abi.encode(\"15,208,153,77,202,145,58,200,141,83,39,14,102,244,254,199,231,99,182,66,146,31,224,168,142,174,74,211,52,59,70,31\")"
            },
            {
              "js": "\"k9yyu\"",
              "sol": "\"k9yyu\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[164,45,101,146,255,12,115,154,217,16,202,80,132,251,149,194,207,240,40,157,52,116,62,211,184,136,5,247,82,24,190,229]",
              "sol": "abi.encode(\"164,45,101,146,255,12,115,154,217,16,202,80,132,251,149,194,207,240,40,157,52,116,62,211,184,136,5,247,82,24,190,229\")"
            },
            {
              "js": "[213,134,112,194,91,40,82,6,156,247,229,115,5,250,111,201,20,66,45,99,255,184,222,156,172,241,127,229,19,88,178,14]",
              "sol": "stringToBytes32(\"213,134,112,194,91,40,82,6,156,247,229,115,5,250,111,201,20,66,45,99,255,184,222,156,172,241,127,229,19,88,178,14\")"
            },
            {
              "js": "[13,135,7,27,114,34,27,235,150,42,74,167,93,101,196,237,250,171,236,204,126,8,67,220,165,235,0,7,145,79,143,208]",
              "sol": "abi.encode(\"13,135,7,27,114,34,27,235,150,42,74,167,93,101,196,237,250,171,236,204,126,8,67,220,165,235,0,7,145,79,143,208\")"
            },
            {
              "js": "\"l87gno\"",
              "sol": "\"l87gno\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[112,188,213,223,45,251,57,42,124,108,228,162,83,91,107,159,241,196,222,247,244,162,27,173,100,34,248,33,100,179,148,206]",
              "sol": "abi.encode(\"112,188,213,223,45,251,57,42,124,108,228,162,83,91,107,159,241,196,222,247,244,162,27,173,100,34,248,33,100,179,148,206\")"
            },
            {
              "js": "[135,164,81,249,96,89,24,81,1,144,19,69,3,145,188,10,104,99,40,168,94,156,147,145,152,148,139,12,221,131,121,210]",
              "sol": "stringToBytes32(\"135,164,81,249,96,89,24,81,1,144,19,69,3,145,188,10,104,99,40,168,94,156,147,145,152,148,139,12,221,131,121,210\")"
            },
            {
              "js": "[14,159,77,182,161,178,126,37,137,61,213,188,104,125,215,100,174,70,186,151,189,153,167,106,145,114,119,42,3,23,144,45]",
              "sol": "abi.encode(\"14,159,77,182,161,178,126,37,137,61,213,188,104,125,215,100,174,70,186,151,189,153,167,106,145,114,119,42,3,23,144,45\")"
            },
            {
              "js": "\"w04rw\"",
              "sol": "\"w04rw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.594ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[109,89,95,149,49,117,132,16,53,146,3,98,162,122,152,165,254,88,178,40,149,10,29,42,238,102,98,22,154,226,252,35]",
              "sol": "abi.encode(\"109,89,95,149,49,117,132,16,53,146,3,98,162,122,152,165,254,88,178,40,149,10,29,42,238,102,98,22,154,226,252,35\")"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "[131,183,255,38,240,227,163,92,200,9,174,178,46,88,3,147,71,218,79,158,236,83,145,40,184,208,104,15,95,154,197,61]",
              "sol": "abi.encode(\"131,183,255,38,240,227,163,92,200,9,174,178,46,88,3,147,71,218,79,158,236,83,145,40,184,208,104,15,95,154,197,61\")"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.595ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[32,129,131,71,241,163,210,191,77,39,202,118,105,147,63,72,229,166,106,47,18,223,40,42,49,207,175,182,22,45,86,147]",
              "sol": "stringToBytes32(\"32,129,131,71,241,163,210,191,77,39,202,118,105,147,63,72,229,166,106,47,18,223,40,42,49,207,175,182,22,45,86,147\")"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "[183,123,148,102,117,133,221,27,153,160,142,154,127,223,219,235,139,135,124,76,215,227,40,216,29,135,211,230,226,109,218,72]",
              "sol": "stringToBytes32(\"183,123,148,102,117,133,221,27,153,160,142,154,127,223,219,235,139,135,124,76,215,227,40,216,29,135,211,230,226,109,218,72\")"
            },
            {
              "js": "[225,24,63,88,244,214,253,74,168,215,82,114,39,1,65,143,166,120,64,234,15,68,23,44,155,136,236,74,178,81,180,29]",
              "sol": "stringToBytes32(\"225,24,63,88,244,214,253,74,168,215,82,114,39,1,65,143,166,120,64,234,15,68,23,44,155,136,236,74,178,81,180,29\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.596ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[74,74,210,126,125,56,7,70,155,152,149,118,12,120,198,176,84,234,120,138,165,166,75,42,183,182,97,135,94,39,199,194]",
              "sol": "stringToBytes32(\"74,74,210,126,125,56,7,70,155,152,149,118,12,120,198,176,84,234,120,138,165,166,75,42,183,182,97,135,94,39,199,194\")"
            },
            {
              "js": "[111]",
              "sol": "abi.encode(\"111\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[93,21,70,173,215,117,104,237,234,247,195,109,185,173,187,96,42,51,7,168,71,126,120,64,18,41,96,22,78,211,135,135]",
              "sol": "stringToBytes32(\"93,21,70,173,215,117,104,237,234,247,195,109,185,173,187,96,42,51,7,168,71,126,120,64,18,41,96,22,78,211,135,135\")"
            },
            {
              "js": "[189,218,52,87,2,111,157,130,243,148,178,113,252,33,143,184,236,228,107,174,44,28,57,23,200,40,210,246,99,116,169,226,7,227,117,98,0,0,216,160,20,63,147,14,106,155,117,118,102,247,32,61,168,220,239,224,145,122,191,217,58,176,162,143,84]",
              "sol": "abi.encode(\"189,218,52,87,2,111,157,130,243,148,178,113,252,33,143,184,236,228,107,174,44,28,57,23,200,40,210,246,99,116,169,226,7,227,117,98,0,0,216,160,20,63,147,14,106,155,117,118,102,247,32,61,168,220,239,224,145,122,191,217,58,176,162,143,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.597ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.599ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[61,103]",
              "sol": "[uint(61),uint(103)]"
            },
            {
              "js": "[[254,61],[2014223715,0]]",
              "sol": "[[uint(254),uint(61)],[uint(2014223715),uint(0)]]"
            },
            {
              "js": "[8,48]",
              "sol": "[uint(8),uint(48)]"
            },
            {
              "js": "[33,6]",
              "sol": "[uint(33),uint(6)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.601ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.601ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[30,8,2014223715,161,6,21,20,63,128,2]",
              "sol": "[uint(30),uint(8),uint(2014223715),uint(161),uint(6),uint(21),uint(20),uint(63),uint(128),uint(2)]"
            },
            {
              "js": "{\"A\": {\"X\": 22,\"Y\": 5},\"B\": {\"X\": [9,0],\"Y\": [11,25]},\"C\": {\"X\": 10,\"Y\": 15}}",
              "sol": "Verifier.Proof(Pairing.G1Point(22,5),Pairing.G2Point([uint(9),uint(0)],[uint(11),uint(25)]),Pairing.G1Point(10,15))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[1532892064,64,30]",
              "sol": "[uint(1532892064),uint(64),uint(30)]"
            },
            {
              "js": "{\"A\": {\"X\": 0,\"Y\": 86},\"B\": {\"X\": [1024,2014223716],\"Y\": [47,33]},\"C\": {\"X\": 256,\"Y\": 1023}}",
              "sol": "Verifier.Proof(Pairing.G1Point(0,86),Pairing.G2Point([uint(1024),uint(2014223716)],[uint(47),uint(33)]),Pairing.G1Point(256,1023))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.604ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.605ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.605ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "98",
                "sol": "98"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"accounts[6]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.607ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.607ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "accounts[6]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[6]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.608ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.610ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.611ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.612ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "[249,163,1,143,207,17,182,239,157,213,254,218,134,252,38,89,222,150,160,205,228,236,111,92,83,21,108,176,62,59,131,46]",
              "sol": "abi.encode(\"249,163,1,143,207,17,182,239,157,213,254,218,134,252,38,89,222,150,160,205,228,236,111,92,83,21,108,176,62,59,131,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": "[249,163,1,143,207,17,182,239,157,213,254,218,134,252,38,89,222,150,160,205,228,236,111,92,83,21,108,176,62,59,131,46]",
                "sol": "abi.encode(\"249,163,1,143,207,17,182,239,157,213,254,218,134,252,38,89,222,150,160,205,228,236,111,92,83,21,108,176,62,59,131,46\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.614ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.615ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[11,247,53,12]",
              "sol": "bytes4(\"11,247,53,12\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.617ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.617ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.617ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.618ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.619ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[29,41,161,173,239,89,96,239,188,216,18,10,56,24,153,80,86,207,170,52,152,166,124,107,170,254,193,175,195,119,197,183]",
              "sol": "abi.encode(\"29,41,161,173,239,89,96,239,188,216,18,10,56,24,153,80,86,207,170,52,152,166,124,107,170,254,193,175,195,119,197,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "[200,255,142,22,51,164,155,117,39,71,42,153,7,3,8,205,105,148,251,98,217,226,167,55,100,212,238,96,57,247,26,151]",
              "sol": "abi.encode(\"200,255,142,22,51,164,155,117,39,71,42,153,7,3,8,205,105,148,251,98,217,226,167,55,100,212,238,96,57,247,26,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.620ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "58",
                "sol": "58"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.622ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[48,15]",
              "sol": "[uint(48),uint(15)]"
            },
            {
              "js": "[[55,162],[255,55]]",
              "sol": "[[uint(55),uint(162)],[uint(255),uint(55)]]"
            },
            {
              "js": "[162,66]",
              "sol": "[uint(162),uint(66)]"
            },
            {
              "js": "[254,254]",
              "sol": "[uint(254),uint(254)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.623ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.625ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.626ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.627ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.628ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.630ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.631ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.632ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.632ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.633ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "162",
                "sol": "162"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.634ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T01:31:16.636ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.636ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T01:31:16.637ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}