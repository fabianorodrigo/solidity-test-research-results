,{
  "2020-11-12T00:56:52.335ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:57:07.225ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:57:22.179ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:57:37.250ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:57:52.516ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:07.601ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.697ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [4,245,121,46,133,141,7,171,230,183,210,252,13,122,229,225,79,164,177,119,85,209,185,39,199,116,60,29,116,7,173,128],\"capacity\": 9}",
              "sol": "Buffer.buffer(abi.encode(\"4,245,121,46,133,141,7,171,230,183,210,252,13,122,229,225,79,164,177,119,85,209,185,39,199,116,60,29,116,7,173,128\"),9)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.699ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [212,6,48,104,12,76,204,156,247,11,231,243,193,25,139,233,78,164,247,144,221,68,245,233,177,136,135,191,125,233,138,26],\"capacity\": 29}",
              "sol": "Buffer.buffer(abi.encode(\"212,6,48,104,12,76,204,156,247,11,231,243,193,25,139,233,78,164,247,144,221,68,245,233,177,136,135,191,125,233,138,26\"),29)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [239,204,253,186,103,147,82,25,192,181,203,228,215,149,9,232,124,180,162,191,168,176,153,107,5,57,235,94,137,244,100,206],\"capacity\": 4}",
              "sol": "Buffer.buffer(abi.encode(\"239,204,253,186,103,147,82,25,192,181,203,228,215,149,9,232,124,180,162,191,168,176,153,107,5,57,235,94,137,244,100,206\"),4)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.701ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [84,36,215,250,166,168,50,205,105,45,116,17,234,103,4,11,249,144,191,225,12,41,99,252,238,195,23,54,183,123,157,88],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"84,36,215,250,166,168,50,205,105,45,116,17,234,103,4,11,249,144,191,225,12,41,99,252,238,195,23,54,183,123,157,88\"),24)"
            },
            {
              "js": "[73,29,145,255,12,73,63,25,47,234,43,168,177,27,235,245,163,238,16,138,75,216,166,214,89,65,2,118,107,92,175,16]",
              "sol": "abi.encode(\"73,29,145,255,12,73,63,25,47,234,43,168,177,27,235,245,163,238,16,138,75,216,166,214,89,65,2,118,107,92,175,16\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.702ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [140,250,109,55,183,28,165,252,147,34,130,8,162,249,70,108,139,209,197,250,128,88,11,206,72,91,136,47,145,97,96,143],\"capacity\": 19}",
              "sol": "Buffer.buffer(abi.encode(\"140,250,109,55,183,28,165,252,147,34,130,8,162,249,70,108,139,209,197,250,128,88,11,206,72,91,136,47,145,97,96,143\"),19)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.703ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [47,99,212,255,123,247,115,87,63,116,3,226,4,105,168,132,91,139,146,227,234,117,63,245,216,87,162,43,63,76,22,134],\"capacity\": 48}",
              "sol": "Buffer.buffer(abi.encode(\"47,99,212,255,123,247,115,87,63,116,3,226,4,105,168,132,91,139,146,227,234,117,63,245,216,87,162,43,63,76,22,134\"),48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.704ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [12,12,236,211,20,167,93,93,198,193,122,7,124,186,146,252,168,13,196,179,169,180,3,252,141,133,145,184,128,235,62,59],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"12,12,236,211,20,167,93,93,198,193,122,7,124,186,146,252,168,13,196,179,169,180,3,252,141,133,145,184,128,235,62,59\"),1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.705ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [61,113,252,21,140,94,11,235,182,167,78,150,116,217,6,33,238,44,122,70,200,102,88,32,107,234,172,63,182,73,7,19],\"capacity\": 161}",
              "sol": "Buffer.buffer(abi.encode(\"61,113,252,21,140,94,11,235,182,167,78,150,116,217,6,33,238,44,122,70,200,102,88,32,107,234,172,63,182,73,7,19\"),161)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.712ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.712ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.712ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 59,\"Y\": 257}",
              "sol": "Pairing.G1Point(59,257)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.713ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 256,\"Y\": 24}",
              "sol": "Pairing.G1Point(256,24)"
            },
            {
              "js": "{\"X\": 28,\"Y\": 23}",
              "sol": "Pairing.G1Point(28,23)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.714ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [6,257],\"Y\": [58,95]}",
              "sol": "Pairing.G2Point([uint(6),uint(257)],[uint(58),uint(95)])"
            },
            {
              "js": "{\"X\": [19,1],\"Y\": [1532892063,47]}",
              "sol": "Pairing.G2Point([uint(19),uint(1)],[uint(1532892063),uint(47)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.716ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 61,\"Y\": 161}",
              "sol": "Pairing.G1Point(61,161)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.717ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 127,\"Y\": 26},{\"X\": 102,\"Y\": 71},{\"X\": 86,\"Y\": 128},{\"X\": 162,\"Y\": 17},{\"X\": 6,\"Y\": 66},{\"X\": 63,\"Y\": 9},{\"X\": 96,\"Y\": 57}]",
              "sol": "[Pairing.G1Point(127,26),Pairing.G1Point(102,71),Pairing.G1Point(86,128),Pairing.G1Point(162,17),Pairing.G1Point(6,66),Pairing.G1Point(63,9),Pairing.G1Point(96,57)]"
            },
            {
              "js": "[{\"X\": [1024,46],\"Y\": [8,9]},{\"X\": [161,256],\"Y\": [71,60]},{\"X\": [2014223715,199999],\"Y\": [102,20]},{\"X\": [96,2014223715],\"Y\": [9,11]},{\"X\": [9,32],\"Y\": [8,2014223715]},{\"X\": [19,1023],\"Y\": [59,17]},{\"X\": [1023,160],\"Y\": [103,0]}]",
              "sol": "[Pairing.G2Point([uint(1024),uint(46)],[uint(8),uint(9)]),Pairing.G2Point([uint(161),uint(256)],[uint(71),uint(60)]),Pairing.G2Point([uint(2014223715),uint(199999)],[uint(102),uint(20)]),Pairing.G2Point([uint(96),uint(2014223715)],[uint(9),uint(11)]),Pairing.G2Point([uint(9),uint(32)],[uint(8),uint(2014223715)]),Pairing.G2Point([uint(19),uint(1023)],[uint(59),uint(17)]),Pairing.G2Point([uint(1023),uint(160)],[uint(103),uint(0)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 199999,\"Y\": 27},{\"X\": 45,\"Y\": 101},{\"X\": 47,\"Y\": 161},{\"X\": 32,\"Y\": 1023},{\"X\": 257,\"Y\": 61},{\"X\": 101,\"Y\": 2},{\"X\": 1025,\"Y\": 28},{\"X\": 161,\"Y\": 31}]",
                "sol": "[Pairing.G1Point(58,97),Pairing.G1Point(97,25),Pairing.G1Point(127,57),Pairing.G1Point(11,6),Pairing.G1Point(18,2),Pairing.G1Point(56,200000),Pairing.G1Point(26,3),Pairing.G1Point(29,60)]"
              },
              {
                "js": "[{\"X\": [1024,46],\"Y\": [8,9]},{\"X\": [161,256],\"Y\": [71,60]},{\"X\": [2014223715,199999],\"Y\": [102,20]},{\"X\": [96,2014223715],\"Y\": [9,11]},{\"X\": [9,32],\"Y\": [8,2014223715]},{\"X\": [19,1023],\"Y\": [59,17]},{\"X\": [1023,160],\"Y\": [103,0]}]",
                "sol": "[Pairing.G2Point([uint(1024),uint(46)],[uint(8),uint(9)]),Pairing.G2Point([uint(161),uint(256)],[uint(71),uint(60)]),Pairing.G2Point([uint(2014223715),uint(199999)],[uint(102),uint(20)]),Pairing.G2Point([uint(96),uint(2014223715)],[uint(9),uint(11)]),Pairing.G2Point([uint(9),uint(32)],[uint(8),uint(2014223715)]),Pairing.G2Point([uint(19),uint(1023)],[uint(59),uint(17)]),Pairing.G2Point([uint(1023),uint(160)],[uint(103),uint(0)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.724ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 129,\"Y\": 24}",
              "sol": "Pairing.G1Point(129,24)"
            },
            {
              "js": "{\"X\": [66,57],\"Y\": [87,255]}",
              "sol": "Pairing.G2Point([uint(66),uint(57)],[uint(87),uint(255)])"
            },
            {
              "js": "{\"X\": 11,\"Y\": 71}",
              "sol": "Pairing.G1Point(11,71)"
            },
            {
              "js": "{\"X\": [69,29],\"Y\": [19,9]}",
              "sol": "Pairing.G2Point([uint(69),uint(29)],[uint(19),uint(9)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.726ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 103,\"Y\": 56}",
              "sol": "Pairing.G1Point(103,56)"
            },
            {
              "js": "{\"X\": [1532892062,45],\"Y\": [49,17]}",
              "sol": "Pairing.G2Point([uint(1532892062),uint(45)],[uint(49),uint(17)])"
            },
            {
              "js": "{\"X\": 1532892063,\"Y\": 16}",
              "sol": "Pairing.G1Point(1532892063,16)"
            },
            {
              "js": "{\"X\": [56,25],\"Y\": [1532892064,66]}",
              "sol": "Pairing.G2Point([uint(56),uint(25)],[uint(1532892064),uint(66)])"
            },
            {
              "js": "{\"X\": 6,\"Y\": 128}",
              "sol": "Pairing.G1Point(6,128)"
            },
            {
              "js": "{\"X\": [98,1532892063],\"Y\": [127,127]}",
              "sol": "Pairing.G2Point([uint(98),uint(1532892063)],[uint(127),uint(127)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.733ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.734ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.734ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.735ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.736ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.736ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.737ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.739ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.739ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.740ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.740ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.746ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [149,185,231,95,153,116,76,184,123,238,191,71,202,194,13,49,108,16,18,98,255,242,228,3,236,197,9,210,198,215,204,139],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"149,185,231,95,153,116,76,184,123,238,191,71,202,194,13,49,108,16,18,98,255,242,228,3,236,197,9,210,198,215,204,139\"),16)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.746ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [73,191,55,11,23,77,143,79,84,36,46,156,181,105,172,54,101,250,32,196,73,39,163,198,252,253,227,105,242,16,223,156],\"capacity\": 1025}",
              "sol": "Buffer.buffer(abi.encode(\"73,191,55,11,23,77,143,79,84,36,46,156,181,105,172,54,101,250,32,196,73,39,163,198,252,253,227,105,242,16,223,156\"),1025)"
            },
            {
              "js": "[163,38,239,131,47,115,181,73,59,112,81,130,117,113,152,18,255,197,176,172,151,171,37,182,154,24,233,183,65,128,31,160]",
              "sol": "abi.encode(\"163,38,239,131,47,115,181,73,59,112,81,130,117,113,152,18,255,197,176,172,151,171,37,182,154,24,233,183,65,128,31,160\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.747ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [8,193,237,89,147,236,117,10,127,227,80,141,28,132,46,200,74,18,60,248,56,247,178,26,181,23,243,68,21,165,57,160],\"capacity\": 96}",
              "sol": "Buffer.buffer(abi.encode(\"8,193,237,89,147,236,117,10,127,227,80,141,28,132,46,200,74,18,60,248,56,247,178,26,181,23,243,68,21,165,57,160\"),96)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.747ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [76,254,231,78,95,132,178,126,89,209,231,217,92,82,95,95,240,194,126,206,155,211,149,200,236,101,248,86,7,217,38,47],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"76,254,231,78,95,132,178,126,89,209,231,217,92,82,95,95,240,194,126,206,155,211,149,200,236,101,248,86,7,217,38,47\"),24)"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.748ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[195,120,153,101,161,53,194,198,177,46,253,211,180,253,57,248,221,52,140,135,66,99,140,145,3,168,242,142,241,53,21,219]",
              "sol": "stringToBytes32(\"195,120,153,101,161,53,194,198,177,46,253,211,180,253,57,248,221,52,140,135,66,99,140,145,3,168,242,142,241,53,21,219\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.749ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[195,23,17,27,144,144,201,198,231,49,68,197,154,7,28,240,227,45,84,66,98,164,182,174,84,6,168,142,74,75,83,85]",
              "sol": "stringToBytes32(\"195,23,17,27,144,144,201,198,231,49,68,197,154,7,28,240,227,45,84,66,98,164,182,174,84,6,168,142,74,75,83,85\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[168,98,169,181,100,128,237,76,192,209,193,35,49,233,64,61,213,229,223,31,62,243,222,246,73,96,46,24,7,6,162,208]",
              "sol": "abi.encode(\"168,98,169,181,100,128,237,76,192,209,193,35,49,233,64,61,213,229,223,31,62,243,222,246,73,96,46,24,7,6,162,208\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.815ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.815ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.816ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.816ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.817ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.817ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.818ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"q0j2bv\"",
              "sol": "\"q0j2bv\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.818ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.818ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.819ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.820ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.820ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"q0j2bv\"",
              "sol": "\"q0j2bv\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.820ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.821ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"q0j2bv\"",
              "sol": "\"q0j2bv\""
            },
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.821ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"L\",\"\\x19Ethereum Signed Message:\\n32\",\"0\",\"0\",\"q0j2bv\",\"Capstones\",\"P\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"L\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\"),string(\"0\"),string(\"q0j2bv\"),string(\"Capstones\"),string(\"P\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.822ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"P\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\",\"Capstones\",\"0\"]",
              "sol": "[string(\"P\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Capstones\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.823ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"Capstones\",\"0\",\"L\",\"0\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"Capstones\"),string(\"0\"),string(\"L\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.823ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "[\"0\",\"q3xgd\",\"L\",\"[\",\"Transaction successfully verified.\",\"q0j2bv\",\"ERC1820_ACCEPT_MAGIC\",\"sdy38\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\"]",
              "sol": "[string(\"0\"),string(\"q3xgd\"),string(\"L\"),string(\"[\"),string(\"Transaction successfully verified.\"),string(\"q0j2bv\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"sdy38\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\")]"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.824ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.824ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"Transaction successfully verified.\"]",
              "sol": "[string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.825ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.826ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.826ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"0\",\"ucgnji\"]",
              "sol": "[string(\"0\"),string(\"ucgnji\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.827ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"ucgnji\",\"P\"]",
              "sol": "[string(\"ucgnji\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.827ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"q0j2bv\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"q0j2bv\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.828ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\",\"sdy38\"]",
              "sol": "[string(\"L\"),string(\"sdy38\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.829ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"P\",\"ucgnji\",\"q0j2bv\"]",
              "sol": "[string(\"P\"),string(\"ucgnji\"),string(\"q0j2bv\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.829ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"[\",\"Transaction successfully verified.\",\"ucgnji\"]",
              "sol": "[string(\"[\"),string(\"Transaction successfully verified.\"),string(\"ucgnji\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.830ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\",\"6jvwbc\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\"),string(\"6jvwbc\")]"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.830ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"P\",\"Capstones\",\"ucgnji\"]",
              "sol": "[string(\"P\"),string(\"Capstones\"),string(\"ucgnji\")]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.831ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"q3xgd\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\",\"0\"]",
              "sol": "[string(\"q3xgd\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.831ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ucgnji\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"ucgnji\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.832ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"q0j2bv\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"q0j2bv\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.833ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"q3xgd\"",
              "sol": "\"q3xgd\""
            },
            {
              "js": "[\"[\",\"0\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"sdy38\"]",
              "sol": "[string(\"[\"),string(\"0\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"sdy38\")]"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.833ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"ucgnji\"",
              "sol": "\"ucgnji\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"6jvwbc\",\"6jvwbc\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"6jvwbc\"),string(\"6jvwbc\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.834ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"6jvwbc\",\"6jvwbc\",\"sdy38\",\"[\",\"3px1e6\"]",
              "sol": "[string(\"6jvwbc\"),string(\"6jvwbc\"),string(\"sdy38\"),string(\"[\"),string(\"3px1e6\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.835ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"l2by4i\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"q0j2bv\",\"sdy38\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"l2by4i\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"q0j2bv\"),string(\"sdy38\")]"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.835ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "[\"ucgnji\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"P\",\"sdy38\"]",
              "sol": "[string(\"ucgnji\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"P\"),string(\"sdy38\")]"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.836ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"ucgnji\"",
              "sol": "\"ucgnji\""
            },
            {
              "js": "[[4,124,87,159,227,57,47,35,208,69,129,114,247,135,110,127,1,201,85,224,42,131,19,150,61,254,243,59,176,218,45,219],[84,63,139,25,55,239,141,174,17,71,124,245,225,236,9,128,62,80,121,150,0,149,242,16,1,149,227,250,215,138,113,83],[193,223,58,102,29,165,136,104,163,38,89,122,232,4,247,58,138,226,97,88,135,48,41,25,236,110,94,42,21,119,147,124],[121,120,34,16,59,251,192,57,124,153,41,149,130,80,136,53,14,63,206,135,113,127,131,167,145,178,84,209,228,150,200,150],[108,151,124,132,131,153,218,201,33,167,174,199,232,34,41,199,93,236,144,183,96,15,69,122,246,20,70,131,231,167,47,66],[184,164,240,252,39,22,227,138,250,142,55,57,247,114,72,1,11,228,116,78,221,21,191,169,20,147,67,76,52,142,255,168],[223,140,239,225,87,86,29,227,219,247,235,108,188,91,97,78,167,218,22,43,246,250,219,219,245,38,14,127,250,253,107,31]]",
              "sol": "[bytes(abi.encode(\"4,124,87,159,227,57,47,35,208,69,129,114,247,135,110,127,1,201,85,224,42,131,19,150,61,254,243,59,176,218,45,219\")),bytes(abi.encode(\"84,63,139,25,55,239,141,174,17,71,124,245,225,236,9,128,62,80,121,150,0,149,242,16,1,149,227,250,215,138,113,83\")),bytes(abi.encode(\"193,223,58,102,29,165,136,104,163,38,89,122,232,4,247,58,138,226,97,88,135,48,41,25,236,110,94,42,21,119,147,124\")),bytes(abi.encode(\"121,120,34,16,59,251,192,57,124,153,41,149,130,80,136,53,14,63,206,135,113,127,131,167,145,178,84,209,228,150,200,150\")),bytes(abi.encode(\"108,151,124,132,131,153,218,201,33,167,174,199,232,34,41,199,93,236,144,183,96,15,69,122,246,20,70,131,231,167,47,66\")),bytes(abi.encode(\"184,164,240,252,39,22,227,138,250,142,55,57,247,114,72,1,11,228,116,78,221,21,191,169,20,147,67,76,52,142,255,168\")),bytes(abi.encode(\"223,140,239,225,87,86,29,227,219,247,235,108,188,91,97,78,167,218,22,43,246,250,219,219,245,38,14,127,250,253,107,31\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.837ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[217,180,205,106,159,186,165,72,224,22,122,72,37,253,123,135,178,29,209,243,221,204,252,222,242,170,168,180,251,128,235,183],[152,142,0,171,54,101,227,232,78,113,42,80,55,52,214,20,104,20,45,199,109,242,83,167,183,58,161,151,252,244,206,50],[79,215,107,175,165,117,215,152,200,98,118,3,216,202,30,159,45,92,13,47,193,242,191,253,197,58,24,174,70,248,0,11],[194,108,141,181,171,83,205,142,63,181,251,192,180,24,96,92,56,6,206,226,46,97,117,18,105,201,115,96,81,253,33,124],[139,107,72,84,44,212,98,48,186,249,81,61,55,199,86,110,51,132,86,121,34,98,156,211,185,192,213,70,134,61,161,205],[249,107,40,91,125,207,163,131,63,70,31,102,223,181,185,78,215,87,156,76,33,18,184,140,167,92,55,16,53,186,15,4],[149,13,99,93,75,92,30,106,80,41,163,202,159,255,21,207,163,177,56,159,190,173,220,124,147,220,133,166,15,91,224,93]]",
              "sol": "[bytes(abi.encode(\"217,180,205,106,159,186,165,72,224,22,122,72,37,253,123,135,178,29,209,243,221,204,252,222,242,170,168,180,251,128,235,183\")),bytes(abi.encode(\"152,142,0,171,54,101,227,232,78,113,42,80,55,52,214,20,104,20,45,199,109,242,83,167,183,58,161,151,252,244,206,50\")),bytes(abi.encode(\"79,215,107,175,165,117,215,152,200,98,118,3,216,202,30,159,45,92,13,47,193,242,191,253,197,58,24,174,70,248,0,11\")),bytes(abi.encode(\"194,108,141,181,171,83,205,142,63,181,251,192,180,24,96,92,56,6,206,226,46,97,117,18,105,201,115,96,81,253,33,124\")),bytes(abi.encode(\"139,107,72,84,44,212,98,48,186,249,81,61,55,199,86,110,51,132,86,121,34,98,156,211,185,192,213,70,134,61,161,205\")),bytes(abi.encode(\"249,107,40,91,125,207,163,131,63,70,31,102,223,181,185,78,215,87,156,76,33,18,184,140,167,92,55,16,53,186,15,4\")),bytes(abi.encode(\"149,13,99,93,75,92,30,106,80,41,163,202,159,255,21,207,163,177,56,159,190,173,220,124,147,220,133,166,15,91,224,93\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.838ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"ucgnji\"",
              "sol": "\"ucgnji\""
            },
            {
              "js": "[[89,143,162,137,99,158,24,20,113,96,88,185,139,229,172,61,140,121,121,26,10,128,183,216,16,222,48,79,187,140,105,42],[243,78,146,8,161,254,120,87,115,95,38,73,190,69,164,249,117,122,24,224,4,205,253,222,181,211,30,153,147,255,197,83],[189,70,32,61,11,250,19,95,59,47,180,173,46,37,39,16,35,167,41,5,145,233,41,41,41,223,161,1,241,95,49,157],[4,44,138,129,18,146,196,81,62,148,142,207,100,241,103,63,51,87,202,255,136,238,38,17,241,209,237,177,206,189,208,165],[206,208,226,18,145,180,18,14,134,43,28,86,75,36,55,204,105,59,245,217,41,15,30,87,96,68,42,251,49,10,87,160],[235,115,27,188,151,216,230,155,43,42,225,2,127,87,119,173,128,252,89,126,60,226,99,37,33,30,61,211,236,143,186,125],[19,141,33,65,235,39,95,243,184,42,92,170,81,138,46,60,185,79,33,156,179,10,123,154,64,1,67,86,142,72,234,131],[34,108,219,164,104,108,228,92,12,66,116,97,143,187,205,149,224,181,197,149,197,109,93,180,19,45,20,53,238,167,83,250]]",
              "sol": "[bytes(abi.encode(\"89,143,162,137,99,158,24,20,113,96,88,185,139,229,172,61,140,121,121,26,10,128,183,216,16,222,48,79,187,140,105,42\")),bytes(abi.encode(\"243,78,146,8,161,254,120,87,115,95,38,73,190,69,164,249,117,122,24,224,4,205,253,222,181,211,30,153,147,255,197,83\")),bytes(abi.encode(\"189,70,32,61,11,250,19,95,59,47,180,173,46,37,39,16,35,167,41,5,145,233,41,41,41,223,161,1,241,95,49,157\")),bytes(abi.encode(\"4,44,138,129,18,146,196,81,62,148,142,207,100,241,103,63,51,87,202,255,136,238,38,17,241,209,237,177,206,189,208,165\")),bytes(abi.encode(\"206,208,226,18,145,180,18,14,134,43,28,86,75,36,55,204,105,59,245,217,41,15,30,87,96,68,42,251,49,10,87,160\")),bytes(abi.encode(\"235,115,27,188,151,216,230,155,43,42,225,2,127,87,119,173,128,252,89,126,60,226,99,37,33,30,61,211,236,143,186,125\")),bytes(abi.encode(\"19,141,33,65,235,39,95,243,184,42,92,170,81,138,46,60,185,79,33,156,179,10,123,154,64,1,67,86,142,72,234,131\")),bytes(abi.encode(\"34,108,219,164,104,108,228,92,12,66,116,97,143,187,205,149,224,181,197,149,197,109,93,180,19,45,20,53,238,167,83,250\"))]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.838ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "[[86,102,51,96,5,135,82,115,105,203,235,157,168,78,241,167,94,100,223,66,232,84,7,132,47,73,199,136,64,169,242,121],[53,42,210,155,105,87,71,31,216,212,68,92,149,30,51,244,38,198,56,28,53,129,74,173,121,221,36,99,89,119,54,188],[163,222,125,145,58,220,174,8,21,118,76,247,246,210,226,128,251,222,154,122,21,135,51,68,23,20,238,61,75,174,151,122],[227,2,36,159,165,187,230,243,98,174,28,198,201,186,67,195,12,180,54,177,195,4,75,44,111,7,97,24,212,4,236,192],[75,126,53,53,233,28,204,254,172,225,145,245,203,165,171,41,99,136,178,145,124,137,39,60,242,72,74,3,182,12,96,51],[18,185,154,236,207,49,194,131,179,41,157,97,170,189,191,215,189,173,64,254,85,23,155,172,206,118,99,241,147,41,145,104],[183,75,229,44,29,31,42,176,172,246,185,103,221,151,106,136,86,153,82,236,40,71,57,190,107,105,80,8,36,78,15,77],[78,102,80,11,178,65,170,128,135,137,76,8,3,145,35,72,72,74,62,229,30,181,213,172,135,199,184,204,158,13,236,169],[122,247,167,250,176,181,78,136,54,94,182,228,116,249,55,240,59,213,8,33,204,24,142,96,20,171,23,152,215,242,87,227]]",
              "sol": "[bytes(abi.encode(\"86,102,51,96,5,135,82,115,105,203,235,157,168,78,241,167,94,100,223,66,232,84,7,132,47,73,199,136,64,169,242,121\")),bytes(abi.encode(\"53,42,210,155,105,87,71,31,216,212,68,92,149,30,51,244,38,198,56,28,53,129,74,173,121,221,36,99,89,119,54,188\")),bytes(abi.encode(\"163,222,125,145,58,220,174,8,21,118,76,247,246,210,226,128,251,222,154,122,21,135,51,68,23,20,238,61,75,174,151,122\")),bytes(abi.encode(\"227,2,36,159,165,187,230,243,98,174,28,198,201,186,67,195,12,180,54,177,195,4,75,44,111,7,97,24,212,4,236,192\")),bytes(abi.encode(\"75,126,53,53,233,28,204,254,172,225,145,245,203,165,171,41,99,136,178,145,124,137,39,60,242,72,74,3,182,12,96,51\")),bytes(abi.encode(\"18,185,154,236,207,49,194,131,179,41,157,97,170,189,191,215,189,173,64,254,85,23,155,172,206,118,99,241,147,41,145,104\")),bytes(abi.encode(\"183,75,229,44,29,31,42,176,172,246,185,103,221,151,106,136,86,153,82,236,40,71,57,190,107,105,80,8,36,78,15,77\")),bytes(abi.encode(\"78,102,80,11,178,65,170,128,135,137,76,8,3,145,35,72,72,74,62,229,30,181,213,172,135,199,184,204,158,13,236,169\")),bytes(abi.encode(\"122,247,167,250,176,181,78,136,54,94,182,228,116,249,55,240,59,213,8,33,204,24,142,96,20,171,23,152,215,242,87,227\"))]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.839ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"ucgnji\"",
              "sol": "\"ucgnji\""
            },
            {
              "js": "[[208,88,69,243,134,131,59,19,135,255,218,49,25,43,132,92,93,42,163,57,5,169,36,117,89,21,162,169,174,214,52,243]]",
              "sol": "[bytes(abi.encode(\"208,88,69,243,134,131,59,19,135,255,218,49,25,43,132,92,93,42,163,57,5,169,36,117,89,21,162,169,174,214,52,243\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.840ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"l2by4i\"",
              "sol": "\"l2by4i\""
            },
            {
              "js": "[[230,135,3,162,166,173,239,201,197,130,117,233,106,161,110,237,14,172,212,215,241,246,82,87,7,87,240,103,131,229,123,162]]",
              "sol": "[bytes(abi.encode(\"230,135,3,162,166,173,239,201,197,130,117,233,106,161,110,237,14,172,212,215,241,246,82,87,7,87,240,103,131,229,123,162\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.843ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[138,53,253,115,108,147,199,82,185,25,40,91,113,247,48,184,58,124,138,41,211,212,43,145,218,164,30,21,93,162,85,157]]",
              "sol": "[bytes(abi.encode(\"138,53,253,115,108,147,199,82,185,25,40,91,113,247,48,184,58,124,138,41,211,212,43,145,218,164,30,21,93,162,85,157\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.845ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[156,207,93,109,59,34,167,11,253,114,151,73,79,253,44,2,127,94,202,187,240,57,168,92,175,208,22,92,124,198,249,118]]",
              "sol": "[bytes(abi.encode(\"156,207,93,109,59,34,167,11,253,114,151,73,79,253,44,2,127,94,202,187,240,57,168,92,175,208,22,92,124,198,249,118\"))]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.846ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[95,158,103,30,192,44,229,26,153,96,239,4,54,13,220,237,44,148,30,155,232,124,2,199,211,254,30,223,13,145,22,166],[160,231,136,206,122,25,153,235,13,75,247,66,197,246,144,239,15,99,153,204,140,87,139,236,53,6,181,16,49,58,126,216]]",
              "sol": "[bytes(abi.encode(\"95,158,103,30,192,44,229,26,153,96,239,4,54,13,220,237,44,148,30,155,232,124,2,199,211,254,30,223,13,145,22,166\")),bytes(abi.encode(\"160,231,136,206,122,25,153,235,13,75,247,66,197,246,144,239,15,99,153,204,140,87,139,236,53,6,181,16,49,58,126,216\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.847ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "\"ucgnji\"",
              "sol": "\"ucgnji\""
            },
            {
              "js": "[[150,127,14,21,183,139,115,100,128,156,59,188,45,203,193,222,222,186,7,71,33,121,78,168,103,223,204,141,147,241,138,41],[198,77,160,110,207,24,54,50,41,177,164,199,213,163,23,41,156,57,204,92,120,175,222,86,43,255,250,59,220,63,137,185]]",
              "sol": "[bytes(abi.encode(\"150,127,14,21,183,139,115,100,128,156,59,188,45,203,193,222,222,186,7,71,33,121,78,168,103,223,204,141,147,241,138,41\")),bytes(abi.encode(\"198,77,160,110,207,24,54,50,41,177,164,199,213,163,23,41,156,57,204,92,120,175,222,86,43,255,250,59,220,63,137,185\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.848ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "\"l2by4i\"",
              "sol": "\"l2by4i\""
            },
            {
              "js": "[[187,90,6,215,201,51,78,173,217,239,84,34,170,39,253,70,29,164,227,14,68,207,228,40,122,215,143,114,173,164,91,97],[28,209,85,138,155,55,210,30,18,73,151,142,228,60,171,193,83,123,230,7,68,134,26,250,215,1,214,47,14,81,237,218]]",
              "sol": "[bytes(abi.encode(\"187,90,6,215,201,51,78,173,217,239,84,34,170,39,253,70,29,164,227,14,68,207,228,40,122,215,143,114,173,164,91,97\")),bytes(abi.encode(\"28,209,85,138,155,55,210,30,18,73,151,142,228,60,171,193,83,123,230,7,68,134,26,250,215,1,214,47,14,81,237,218\"))]"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.850ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[119,62,119,75,177,238,146,26,61,240,74,115,128,248,15,75,215,236,122,27,142,204,71,2,234,74,90,167,50,139,231,70],[247,4,134,163,213,124,37,194,80,187,224,248,204,118,116,229,78,163,34,76,192,224,66,172,91,106,151,195,178,119,31,140]]",
              "sol": "[bytes(abi.encode(\"119,62,119,75,177,238,146,26,61,240,74,115,128,248,15,75,215,236,122,27,142,204,71,2,234,74,90,167,50,139,231,70\")),bytes(abi.encode(\"247,4,134,163,213,124,37,194,80,187,224,248,204,118,116,229,78,163,34,76,192,224,66,172,91,106,151,195,178,119,31,140\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.852ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[253,115,129,198,242,50,73,178,95,227,98,110,57,62,252,234,211,231,133,177,11,211,220,246,170,123,15,163,5,27,219,85],[110,86,187,175,203,161,244,212,217,246,61,79,36,12,228,220,233,173,126,135,42,207,144,162,212,238,57,251,57,214,210,112],[133,183,209,242,179,69,218,41,4,91,225,5,39,7,12,130,106,76,163,58,115,244,72,161,91,255,182,16,18,224,172,199]]",
              "sol": "[bytes(abi.encode(\"253,115,129,198,242,50,73,178,95,227,98,110,57,62,252,234,211,231,133,177,11,211,220,246,170,123,15,163,5,27,219,85\")),bytes(abi.encode(\"110,86,187,175,203,161,244,212,217,246,61,79,36,12,228,220,233,173,126,135,42,207,144,162,212,238,57,251,57,214,210,112\")),bytes(abi.encode(\"133,183,209,242,179,69,218,41,4,91,225,5,39,7,12,130,106,76,163,58,115,244,72,161,91,255,182,16,18,224,172,199\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.853ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[132,105,240,52,223,85,123,121,97,202,102,231,105,165,32,70,80,112,50,165,74,218,234,157,19,62,114,199,191,242,242,44],[241,68,170,54,47,103,143,150,29,2,93,3,144,222,101,189,74,68,194,16,234,240,70,0,200,191,43,113,185,35,15,29],[154,60,112,87,76,72,109,155,73,147,18,44,101,76,163,64,55,114,255,26,88,95,66,146,144,1,131,36,96,104,127,18]]",
              "sol": "[bytes(abi.encode(\"132,105,240,52,223,85,123,121,97,202,102,231,105,165,32,70,80,112,50,165,74,218,234,157,19,62,114,199,191,242,242,44\")),bytes(abi.encode(\"241,68,170,54,47,103,143,150,29,2,93,3,144,222,101,189,74,68,194,16,234,240,70,0,200,191,43,113,185,35,15,29\")),bytes(abi.encode(\"154,60,112,87,76,72,109,155,73,147,18,44,101,76,163,64,55,114,255,26,88,95,66,146,144,1,131,36,96,104,127,18\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.854ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[75,115,226,143,7,117,60,213,130,83,32,70,146,219,44,198,175,221,87,236,30,97,59,17,186,42,27,178,201,31,96,56],[34,113,125,155,146,192,157,189,66,134,20,118,217,113,176,168,247,29,222,226,250,106,54,116,138,244,111,29,104,87,199,53],[44,174,141,15,202,95,210,39,155,216,149,249,85,148,71,181,51,143,146,79,224,240,72,159,116,232,182,60,141,128,168,137]]",
              "sol": "[bytes(abi.encode(\"75,115,226,143,7,117,60,213,130,83,32,70,146,219,44,198,175,221,87,236,30,97,59,17,186,42,27,178,201,31,96,56\")),bytes(abi.encode(\"34,113,125,155,146,192,157,189,66,134,20,118,217,113,176,168,247,29,222,226,250,106,54,116,138,244,111,29,104,87,199,53\")),bytes(abi.encode(\"44,174,141,15,202,95,210,39,155,216,149,249,85,148,71,181,51,143,146,79,224,240,72,159,116,232,182,60,141,128,168,137\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.856ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"q3xgd\"",
              "sol": "\"q3xgd\""
            },
            {
              "js": "[[56,246,159,50,120,51,216,85,203,120,239,122,118,84,255,50,49,79,63,250,123,248,157,141,218,180,6,16,101,151,138,208],[187,76,224,237,106,216,61,95,164,31,134,141,33,221,232,52,83,121,100,255,145,92,185,45,198,105,32,198,53,2,61,122],[139,51,79,213,100,170,88,68,25,57,208,126,68,245,118,249,23,222,15,203,231,216,163,61,246,67,1,255,86,86,248,167]]",
              "sol": "[bytes(abi.encode(\"56,246,159,50,120,51,216,85,203,120,239,122,118,84,255,50,49,79,63,250,123,248,157,141,218,180,6,16,101,151,138,208\")),bytes(abi.encode(\"187,76,224,237,106,216,61,95,164,31,134,141,33,221,232,52,83,121,100,255,145,92,185,45,198,105,32,198,53,2,61,122\")),bytes(abi.encode(\"139,51,79,213,100,170,88,68,25,57,208,126,68,245,118,249,23,222,15,203,231,216,163,61,246,67,1,255,86,86,248,167\"))]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.857ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "[[86,40,29,96,241,129,227,132,255,190,153,55,91,239,244,12,17,91,165,83,247,47,179,150,238,118,148,64,132,109,228,94],[70,224,167,83,225,75,198,76,134,146,166,123,126,62,155,225,80,251,6,23,122,15,246,148,115,104,224,216,68,75,141,105],[124,174,171,246,252,79,159,53,48,71,168,48,98,101,129,18,188,255,142,177,53,81,93,205,159,142,31,233,133,124,35,78],[159,226,3,185,210,48,92,243,183,250,141,24,177,79,199,242,226,181,167,108,22,213,26,62,36,241,155,110,63,247,128,154]]",
              "sol": "[bytes(abi.encode(\"86,40,29,96,241,129,227,132,255,190,153,55,91,239,244,12,17,91,165,83,247,47,179,150,238,118,148,64,132,109,228,94\")),bytes(abi.encode(\"70,224,167,83,225,75,198,76,134,146,166,123,126,62,155,225,80,251,6,23,122,15,246,148,115,104,224,216,68,75,141,105\")),bytes(abi.encode(\"124,174,171,246,252,79,159,53,48,71,168,48,98,101,129,18,188,255,142,177,53,81,93,205,159,142,31,233,133,124,35,78\")),bytes(abi.encode(\"159,226,3,185,210,48,92,243,183,250,141,24,177,79,199,242,226,181,167,108,22,213,26,62,36,241,155,110,63,247,128,154\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.859ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[181,13,76,217,248,188,26,83,31,242,40,51,29,172,66,123,176,228,86,1,197,204,51,238,198,255,38,129,3,169,25,10],[197,105,237,32,189,238,193,149,44,133,142,117,17,153,241,40,197,48,111,32,17,100,158,24,176,45,168,119,238,243,210,107],[157,17,116,86,10,17,161,191,111,136,19,117,154,136,225,195,106,180,207,39,16,120,122,248,190,80,128,112,65,136,146,101],[164,249,0,23,27,216,198,215,14,119,59,148,180,184,24,90,140,44,142,129,129,174,98,137,78,127,110,147,150,112,57,101]]",
              "sol": "[bytes(abi.encode(\"181,13,76,217,248,188,26,83,31,242,40,51,29,172,66,123,176,228,86,1,197,204,51,238,198,255,38,129,3,169,25,10\")),bytes(abi.encode(\"197,105,237,32,189,238,193,149,44,133,142,117,17,153,241,40,197,48,111,32,17,100,158,24,176,45,168,119,238,243,210,107\")),bytes(abi.encode(\"157,17,116,86,10,17,161,191,111,136,19,117,154,136,225,195,106,180,207,39,16,120,122,248,190,80,128,112,65,136,146,101\")),bytes(abi.encode(\"164,249,0,23,27,216,198,215,14,119,59,148,180,184,24,90,140,44,142,129,129,174,98,137,78,127,110,147,150,112,57,101\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.860ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[158,102,182,162,236,23,73,59,155,216,45,113,245,91,67,96,8,8,71,248,170,94,185,91,210,251,255,229,4,156,175,119],[192,141,223,93,4,155,216,240,22,99,239,128,106,175,69,107,84,108,4,249,113,132,115,247,175,75,53,120,244,72,17,91],[82,109,14,195,255,176,117,203,153,114,202,77,159,50,120,116,181,230,150,89,114,12,92,174,202,46,109,237,44,3,31,216],[169,94,195,203,84,139,148,29,46,196,68,164,160,97,79,3,94,142,24,229,147,24,129,79,84,239,80,64,160,75,5,13]]",
              "sol": "[bytes(abi.encode(\"158,102,182,162,236,23,73,59,155,216,45,113,245,91,67,96,8,8,71,248,170,94,185,91,210,251,255,229,4,156,175,119\")),bytes(abi.encode(\"192,141,223,93,4,155,216,240,22,99,239,128,106,175,69,107,84,108,4,249,113,132,115,247,175,75,53,120,244,72,17,91\")),bytes(abi.encode(\"82,109,14,195,255,176,117,203,153,114,202,77,159,50,120,116,181,230,150,89,114,12,92,174,202,46,109,237,44,3,31,216\")),bytes(abi.encode(\"169,94,195,203,84,139,148,29,46,196,68,164,160,97,79,3,94,142,24,229,147,24,129,79,84,239,80,64,160,75,5,13\"))]"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.862ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[55,169,233,197,89,66,115,26,35,66,153,219,245,83,242,148,21,122,230,4,205,35,181,95,170,224,246,208,152,242,197,64],[233,150,110,182,116,141,55,74,129,184,79,114,160,93,238,26,1,52,223,116,19,94,24,143,187,208,47,70,79,81,33,56],[95,97,208,242,191,167,165,175,226,68,71,159,112,222,71,47,139,93,225,68,4,208,142,202,178,130,39,35,52,62,178,172],[93,82,176,181,61,2,55,152,189,40,255,112,217,38,143,7,150,152,14,30,6,145,105,196,121,182,91,32,120,232,38,45]]",
              "sol": "[bytes(abi.encode(\"55,169,233,197,89,66,115,26,35,66,153,219,245,83,242,148,21,122,230,4,205,35,181,95,170,224,246,208,152,242,197,64\")),bytes(abi.encode(\"233,150,110,182,116,141,55,74,129,184,79,114,160,93,238,26,1,52,223,116,19,94,24,143,187,208,47,70,79,81,33,56\")),bytes(abi.encode(\"95,97,208,242,191,167,165,175,226,68,71,159,112,222,71,47,139,93,225,68,4,208,142,202,178,130,39,35,52,62,178,172\")),bytes(abi.encode(\"93,82,176,181,61,2,55,152,189,40,255,112,217,38,143,7,150,152,14,30,6,145,105,196,121,182,91,32,120,232,38,45\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.863ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "[[68,9,97,41,4,55,220,83,159,166,51,114,18,172,102,0,72,190,26,128,251,20,35,227,194,72,149,39,114,1,190,157],[214,13,44,158,110,40,42,93,2,137,231,131,134,228,149,104,89,121,33,238,42,238,14,194,197,3,210,54,49,97,151,209],[166,115,118,11,184,14,87,138,106,246,184,207,73,86,18,234,171,90,73,199,13,73,219,200,198,135,119,188,130,186,79,102],[201,147,18,156,11,53,129,93,56,219,174,133,194,168,238,98,188,249,48,22,164,244,121,54,114,9,50,36,132,69,4,178],[150,185,235,5,123,108,246,37,251,4,54,43,229,143,54,123,153,166,235,61,175,55,94,246,186,115,156,243,203,54,154,60]]",
              "sol": "[bytes(abi.encode(\"68,9,97,41,4,55,220,83,159,166,51,114,18,172,102,0,72,190,26,128,251,20,35,227,194,72,149,39,114,1,190,157\")),bytes(abi.encode(\"214,13,44,158,110,40,42,93,2,137,231,131,134,228,149,104,89,121,33,238,42,238,14,194,197,3,210,54,49,97,151,209\")),bytes(abi.encode(\"166,115,118,11,184,14,87,138,106,246,184,207,73,86,18,234,171,90,73,199,13,73,219,200,198,135,119,188,130,186,79,102\")),bytes(abi.encode(\"201,147,18,156,11,53,129,93,56,219,174,133,194,168,238,98,188,249,48,22,164,244,121,54,114,9,50,36,132,69,4,178\")),bytes(abi.encode(\"150,185,235,5,123,108,246,37,251,4,54,43,229,143,54,123,153,166,235,61,175,55,94,246,186,115,156,243,203,54,154,60\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.865ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "[[109,123,232,153,202,213,134,211,140,137,93,251,47,202,148,131,200,211,217,54,114,62,240,248,74,115,173,205,104,114,120,74],[221,0,57,135,226,123,143,189,27,122,103,236,18,24,46,182,6,203,106,178,14,182,193,93,166,63,54,97,194,104,71,46],[251,11,120,60,92,7,116,194,141,222,69,36,46,175,207,232,243,208,254,175,11,122,141,6,245,101,93,93,52,117,216,149],[204,220,219,79,0,56,26,16,206,219,111,150,230,127,36,169,100,108,83,6,76,2,1,233,79,124,118,142,70,86,92,34],[1,30,206,212,38,91,159,196,31,237,35,15,88,175,48,195,96,238,178,107,217,122,198,52,67,5,10,8,44,123,34,239]]",
              "sol": "[bytes(abi.encode(\"109,123,232,153,202,213,134,211,140,137,93,251,47,202,148,131,200,211,217,54,114,62,240,248,74,115,173,205,104,114,120,74\")),bytes(abi.encode(\"221,0,57,135,226,123,143,189,27,122,103,236,18,24,46,182,6,203,106,178,14,182,193,93,166,63,54,97,194,104,71,46\")),bytes(abi.encode(\"251,11,120,60,92,7,116,194,141,222,69,36,46,175,207,232,243,208,254,175,11,122,141,6,245,101,93,93,52,117,216,149\")),bytes(abi.encode(\"204,220,219,79,0,56,26,16,206,219,111,150,230,127,36,169,100,108,83,6,76,2,1,233,79,124,118,142,70,86,92,34\")),bytes(abi.encode(\"1,30,206,212,38,91,159,196,31,237,35,15,88,175,48,195,96,238,178,107,217,122,198,52,67,5,10,8,44,123,34,239\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.866ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"l2by4i\"",
              "sol": "\"l2by4i\""
            },
            {
              "js": "[[210,153,200,60,99,171,52,15,177,186,138,129,5,29,110,242,190,184,21,18,64,247,10,103,53,251,38,185,178,217,228,219],[223,44,156,156,121,144,1,247,171,194,24,25,225,77,71,226,5,33,116,172,242,48,5,47,156,98,66,181,36,18,184,167],[46,237,13,40,85,140,239,21,166,129,133,74,241,176,116,69,184,228,14,3,83,73,116,20,155,174,255,99,87,221,148,11],[209,0,244,133,70,34,12,254,43,16,53,62,40,177,226,45,210,232,149,16,135,115,18,63,123,55,112,197,169,6,89,219],[199,70,154,16,192,27,23,73,184,116,60,208,79,138,177,44,255,140,38,50,42,128,35,237,238,197,6,5,147,129,127,142]]",
              "sol": "[bytes(abi.encode(\"210,153,200,60,99,171,52,15,177,186,138,129,5,29,110,242,190,184,21,18,64,247,10,103,53,251,38,185,178,217,228,219\")),bytes(abi.encode(\"223,44,156,156,121,144,1,247,171,194,24,25,225,77,71,226,5,33,116,172,242,48,5,47,156,98,66,181,36,18,184,167\")),bytes(abi.encode(\"46,237,13,40,85,140,239,21,166,129,133,74,241,176,116,69,184,228,14,3,83,73,116,20,155,174,255,99,87,221,148,11\")),bytes(abi.encode(\"209,0,244,133,70,34,12,254,43,16,53,62,40,177,226,45,210,232,149,16,135,115,18,63,123,55,112,197,169,6,89,219\")),bytes(abi.encode(\"199,70,154,16,192,27,23,73,184,116,60,208,79,138,177,44,255,140,38,50,42,128,35,237,238,197,6,5,147,129,127,142\"))]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.868ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "[[240,32,103,90,64,134,35,197,156,216,198,199,70,104,152,177,177,229,29,83,233,61,80,143,12,129,230,211,45,123,251,18],[186,154,139,122,52,118,69,71,174,186,161,118,105,84,231,111,75,191,168,88,85,195,206,86,102,83,53,88,157,204,231,106],[40,118,166,7,79,45,120,12,103,67,225,87,137,122,233,177,40,167,22,241,120,6,233,84,148,118,75,194,220,255,18,159],[206,239,241,151,114,230,202,39,110,51,221,119,90,204,156,125,85,60,231,168,155,23,34,83,168,169,66,213,211,188,140,92],[18,110,220,44,13,107,34,150,210,203,148,178,3,146,248,163,10,197,206,169,7,13,237,77,222,201,77,190,93,208,65,188]]",
              "sol": "[bytes(abi.encode(\"240,32,103,90,64,134,35,197,156,216,198,199,70,104,152,177,177,229,29,83,233,61,80,143,12,129,230,211,45,123,251,18\")),bytes(abi.encode(\"186,154,139,122,52,118,69,71,174,186,161,118,105,84,231,111,75,191,168,88,85,195,206,86,102,83,53,88,157,204,231,106\")),bytes(abi.encode(\"40,118,166,7,79,45,120,12,103,67,225,87,137,122,233,177,40,167,22,241,120,6,233,84,148,118,75,194,220,255,18,159\")),bytes(abi.encode(\"206,239,241,151,114,230,202,39,110,51,221,119,90,204,156,125,85,60,231,168,155,23,34,83,168,169,66,213,211,188,140,92\")),bytes(abi.encode(\"18,110,220,44,13,107,34,150,210,203,148,178,3,146,248,163,10,197,206,169,7,13,237,77,222,201,77,190,93,208,65,188\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.869ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[81]",
              "sol": "bytes1(\"81\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.870ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.871ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.872ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.873ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.874ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.875ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.876ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"q3xgd\"",
              "sol": "\"q3xgd\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.877ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"l2by4i\"",
              "sol": "\"l2by4i\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.878ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"sdy38\"",
              "sol": "\"sdy38\""
            },
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "\"l2by4i\"",
              "sol": "\"l2by4i\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.878ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.879ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.879ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.880ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"vnyt9q\"",
              "sol": "\"vnyt9q\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.882ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.882ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"q3xgd\"",
              "sol": "\"q3xgd\""
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.884ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.885ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"\\x19Ethereum Signed Message:\\n32\",\"[\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.886ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[45,246,87,114,65,97,94,52,49,169,9,177,20,252,152,96,228,90,254,33,79,42,20,187,237,209,216,56,115,144,43,112],[134,158,244,64,238,52,160,153,10,14,83,17,139,149,247,3,76,95,24,69,190,250,247,91,68,6,101,170,153,161,81,173],[35,165,26,26,134,179,236,114,195,220,26,209,191,63,189,30,143,205,39,117,143,116,95,30,65,240,177,118,71,230,152,61],[103,17,149,24,64,152,231,118,184,215,24,153,114,242,84,167,173,223,72,174,184,184,27,75,36,212,106,87,236,157,45,79],[240,104,230,192,130,141,82,253,80,71,11,171,6,125,76,26,30,238,241,98,120,96,230,248,126,111,115,65,208,26,123,4],[184,113,200,209,186,61,54,110,88,156,23,94,72,129,152,26,193,197,81,1,11,77,61,213,22,36,171,150,221,111,180,89],[31,80,218,122,66,149,115,90,179,68,146,21,15,130,248,67,24,38,211,67,115,29,19,85,59,52,5,217,26,116,114,128],[154,35,3,148,7,16,86,189,254,19,68,123,150,42,145,145,56,155,49,155,117,211,234,31,175,184,200,88,29,5,237,26],[193,14,88,35,95,87,250,200,30,6,104,14,208,2,0,16,43,196,99,168,56,140,237,241,20,197,20,64,14,241,91,65],[221,194,180,37,89,44,45,164,79,227,110,238,81,161,221,24,97,127,34,212,145,100,64,75,180,156,114,154,173,143,92,62]]",
              "sol": "[bytes(abi.encode(\"45,246,87,114,65,97,94,52,49,169,9,177,20,252,152,96,228,90,254,33,79,42,20,187,237,209,216,56,115,144,43,112\")),bytes(abi.encode(\"134,158,244,64,238,52,160,153,10,14,83,17,139,149,247,3,76,95,24,69,190,250,247,91,68,6,101,170,153,161,81,173\")),bytes(abi.encode(\"35,165,26,26,134,179,236,114,195,220,26,209,191,63,189,30,143,205,39,117,143,116,95,30,65,240,177,118,71,230,152,61\")),bytes(abi.encode(\"103,17,149,24,64,152,231,118,184,215,24,153,114,242,84,167,173,223,72,174,184,184,27,75,36,212,106,87,236,157,45,79\")),bytes(abi.encode(\"240,104,230,192,130,141,82,253,80,71,11,171,6,125,76,26,30,238,241,98,120,96,230,248,126,111,115,65,208,26,123,4\")),bytes(abi.encode(\"184,113,200,209,186,61,54,110,88,156,23,94,72,129,152,26,193,197,81,1,11,77,61,213,22,36,171,150,221,111,180,89\")),bytes(abi.encode(\"31,80,218,122,66,149,115,90,179,68,146,21,15,130,248,67,24,38,211,67,115,29,19,85,59,52,5,217,26,116,114,128\")),bytes(abi.encode(\"154,35,3,148,7,16,86,189,254,19,68,123,150,42,145,145,56,155,49,155,117,211,234,31,175,184,200,88,29,5,237,26\")),bytes(abi.encode(\"193,14,88,35,95,87,250,200,30,6,104,14,208,2,0,16,43,196,99,168,56,140,237,241,20,197,20,64,14,241,91,65\")),bytes(abi.encode(\"221,194,180,37,89,44,45,164,79,227,110,238,81,161,221,24,97,127,34,212,145,100,64,75,180,156,114,154,173,143,92,62\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.887ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.888ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[30,74,218,45,125,207,236,81,201,164,183,161,33,202,247,90,87,179,64,6,203,96,113,222,65,249,243,84,96,91,39,124]",
              "sol": "stringToBytes32(\"30,74,218,45,125,207,236,81,201,164,183,161,33,202,247,90,87,179,64,6,203,96,113,222,65,249,243,84,96,91,39,124\")"
            },
            {
              "js": "[77,52,242,163,177,23,155,130,148,29,188,232,250,154,57,113,202,75,13,199,251,164,147,95,91,46,244,77,188,176,170,75]",
              "sol": "stringToBytes32(\"77,52,242,163,177,23,155,130,148,29,188,232,250,154,57,113,202,75,13,199,251,164,147,95,91,46,244,77,188,176,170,75\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.889ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[236,187,80,20,247,252,104,150,196,54,82,106,137,164,252,84,253,198,200,34,94,234,219,194,253,127,159,18,15,221,111,181]",
              "sol": "stringToBytes32(\"236,187,80,20,247,252,104,150,196,54,82,106,137,164,252,84,253,198,200,34,94,234,219,194,253,127,159,18,15,221,111,181\")"
            },
            {
              "js": "[69,204,76,108,0,27,1,223,243,42,242,233,95,92,78,176,47,202,200,112,189,38,168,224,48,35,119,83,103,174,233,245]",
              "sol": "abi.encode(\"69,204,76,108,0,27,1,223,243,42,242,233,95,92,78,176,47,202,200,112,189,38,168,224,48,35,119,83,103,174,233,245\")"
            },
            {
              "js": "[159,138,113,131,101,213,187,156,174,3,229,240,70,131,8,148,200,79,51,1,104,222,98,175,162,144,110,148,109,187,79,185]",
              "sol": "abi.encode(\"159,138,113,131,101,213,187,156,174,3,229,240,70,131,8,148,200,79,51,1,104,222,98,175,162,144,110,148,109,187,79,185\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.890ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[245,59,128,134,239,182,186,19,53,43,181,60,126,165,68,4,219,61,19,137,194,119,130,88,75,124,143,48,154,55,138,68]",
              "sol": "abi.encode(\"245,59,128,134,239,182,186,19,53,43,181,60,126,165,68,4,219,61,19,137,194,119,130,88,75,124,143,48,154,55,138,68\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[129,54,189,209,173,16,149,166,19,116,127,75,149,249,239,186,0,210,68,15,130,80,7,66,140,46,253,189,83,35,254,81]",
              "sol": "abi.encode(\"129,54,189,209,173,16,149,166,19,116,127,75,149,249,239,186,0,210,68,15,130,80,7,66,140,46,253,189,83,35,254,81\")"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.894ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[217,17,178,33,82,250,169,226,73,139,81,30,234,11,142,205,5,155,124,141,87,50,122,183,52,158,179,214,19,121,243,205]",
              "sol": "stringToBytes32(\"217,17,178,33,82,250,169,226,73,139,81,30,234,11,142,205,5,155,124,141,87,50,122,183,52,158,179,214,19,121,243,205\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[0,202,242,75,206,81,41,39,253,91,95,95,128,60,76,181,202,81,90,103,54,57,56,226,136,252,67,139,57,189,154,196]",
              "sol": "abi.encode(\"0,202,242,75,206,81,41,39,253,91,95,95,128,60,76,181,202,81,90,103,54,57,56,226,136,252,67,139,57,189,154,196\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[115,124,58,81,92,198,150,166,143,123,74,237,81,245,183,109,216,44,27,216,155,16,113,27,194,96,229,57,26,200,84,47]",
              "sol": "stringToBytes32(\"115,124,58,81,92,198,150,166,143,123,74,237,81,245,183,109,216,44,27,216,155,16,113,27,194,96,229,57,26,200,84,47\")"
            },
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "[52,166,57,194,78,156,84,36,80,79,201,37,98,213,32,163,124,222,11,189,95,150,38,199,61,219,105,219,201,115,104,126]",
              "sol": "abi.encode(\"52,166,57,194,78,156,84,36,80,79,201,37,98,213,32,163,124,222,11,189,95,150,38,199,61,219,105,219,201,115,104,126\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.896ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[37,30,134,216,222,217,240,199,182,159,151,130,38,50,111,54,63,174,59,45,89,228,154,132,7,56,247,203,3,133,237,9]",
              "sol": "stringToBytes32(\"37,30,134,216,222,217,240,199,182,159,151,130,38,50,111,54,63,174,59,45,89,228,154,132,7,56,247,203,3,133,237,9\")"
            },
            {
              "js": "[95,211,73,2,8,205,59,22,253,228,121,32,73,127,154,85,255,98,229,205,241,135,67,201,170,79,54,76,4,131,237,241]",
              "sol": "abi.encode(\"95,211,73,2,8,205,59,22,253,228,121,32,73,127,154,85,255,98,229,205,241,135,67,201,170,79,54,76,4,131,237,241\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[37,30,134,216,222,217,240,199,182,159,151,130,38,50,111,54,63,174,59,45,89,228,154,132,7,56,247,203,3,133,237,9]",
                "sol": "stringToBytes32(\"37,30,134,216,222,217,240,199,182,159,151,130,38,50,111,54,63,174,59,45,89,228,154,132,7,56,247,203,3,133,237,9\")"
              },
              {
                "js": "[84,49,239,147,182,49,240,215,164,129,183,69,86,94,225,61,196,203,249,247,223,105,79,170,166,115,138,109,26,58,228,233,53]",
                "sol": "bytes33(\"84,49,239,147,182,49,240,215,164,129,183,69,86,94,225,61,196,203,249,247,223,105,79,170,166,115,138,109,26,58,228,233,53\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.904ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[72,226,108,253,188,193,167,25,175,198,108,153,71,76,184,55,121,233,208,94,94,52,80,190,121,176,147,171,145,154,198,34]",
              "sol": "abi.encode(\"72,226,108,253,188,193,167,25,175,198,108,153,71,76,184,55,121,233,208,94,94,52,80,190,121,176,147,171,145,154,198,34\")"
            },
            {
              "js": "[73,55,165,230,24,44,133,207,230,122,97,140,210,163,27,87,80,225,105,229,171,121,216,192,228,54,173,90,92,146,156,114]",
              "sol": "stringToBytes32(\"73,55,165,230,24,44,133,207,230,122,97,140,210,163,27,87,80,225,105,229,171,121,216,192,228,54,173,90,92,146,156,114\")"
            },
            {
              "js": "[105,211,66,202,235,122,193,74,68,164,140,46,150,6,104,115,12,16,76,60,125,235,216,43,84,178,224,48,38,134,140,57]",
              "sol": "abi.encode(\"105,211,66,202,235,122,193,74,68,164,140,46,150,6,104,115,12,16,76,60,125,235,216,43,84,178,224,48,38,134,140,57\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[224,87,248,79,182,232,22,236,101,48,1,172,134,250,239,11,142,92,254,224,226,166,85,10,10,176,50,34,94,149,243,28]",
              "sol": "abi.encode(\"224,87,248,79,182,232,22,236,101,48,1,172,134,250,239,11,142,92,254,224,226,166,85,10,10,176,50,34,94,149,243,28\")"
            },
            {
              "js": "[167,237,186,17,164,58,57,56,30,203,119,156,40,171,220,11,36,108,141,77,189,181,56,232,86,125,57,231,14,233,146,97]",
              "sol": "stringToBytes32(\"167,237,186,17,164,58,57,56,30,203,119,156,40,171,220,11,36,108,141,77,189,181,56,232,86,125,57,231,14,233,146,97\")"
            },
            {
              "js": "[104,67,105,172,139,14,42,12,240,2,209,13,32,23,97,84,213,189,132,225,33,73,5,226,18,108,105,154,243,35,132,249]",
              "sol": "abi.encode(\"104,67,105,172,139,14,42,12,240,2,209,13,32,23,97,84,213,189,132,225,33,73,5,226,18,108,105,154,243,35,132,249\")"
            },
            {
              "js": "\"6jvwbc\"",
              "sol": "\"6jvwbc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[191,182,178,232,26,22,245,198,81,160,166,168,143,239,165,240,254,124,54,123,168,172,183,18,191,43,217,105,181,151,144,130]",
              "sol": "abi.encode(\"191,182,178,232,26,22,245,198,81,160,166,168,143,239,165,240,254,124,54,123,168,172,183,18,191,43,217,105,181,151,144,130\")"
            },
            {
              "js": "[5,128,3,9,59,221,246,110,253,174,196,248,136,166,122,211,166,127,20,68,125,169,58,164,217,70,137,109,204,160,127,194]",
              "sol": "stringToBytes32(\"5,128,3,9,59,221,246,110,253,174,196,248,136,166,122,211,166,127,20,68,125,169,58,164,217,70,137,109,204,160,127,194\")"
            },
            {
              "js": "[31,74,223,43,196,64,186,68,166,110,208,199,213,28,204,169,220,60,94,150,108,90,198,229,21,29,90,119,104,166,251,177]",
              "sol": "abi.encode(\"31,74,223,43,196,64,186,68,166,110,208,199,213,28,204,169,220,60,94,150,108,90,198,229,21,29,90,119,104,166,251,177\")"
            },
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[16,189,6,34,164,230,156,170,117,174,241,73,223,156,90,81,119,225,117,102,100,84,147,23,72,97,97,192,231,164,78,148]",
              "sol": "abi.encode(\"16,189,6,34,164,230,156,170,117,174,241,73,223,156,90,81,119,225,117,102,100,84,147,23,72,97,97,192,231,164,78,148\")"
            },
            {
              "js": "[221,212,166,142,53,128,9,62,23,31,134,101,123,156,169,199,250,253,5,145,232,29,125,120,0,229,170,107,96,113,165,233]",
              "sol": "stringToBytes32(\"221,212,166,142,53,128,9,62,23,31,134,101,123,156,169,199,250,253,5,145,232,29,125,120,0,229,170,107,96,113,165,233\")"
            },
            {
              "js": "[213,238,152,211,250,85,74,85,32,223,13,198,40,92,105,114,145,58,159,47,14,45,203,190,219,206,123,89,195,12,219,34]",
              "sol": "abi.encode(\"213,238,152,211,250,85,74,85,32,223,13,198,40,92,105,114,145,58,159,47,14,45,203,190,219,206,123,89,195,12,219,34\")"
            },
            {
              "js": "\"q3xgd\"",
              "sol": "\"q3xgd\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[49,228,219,227,55,35,203,162,192,134,32,149,126,246,71,133,132,210,233,72,125,126,245,234,11,124,49,19,240,153,251,97]",
              "sol": "abi.encode(\"49,228,219,227,55,35,203,162,192,134,32,149,126,246,71,133,132,210,233,72,125,126,245,234,11,124,49,19,240,153,251,97\")"
            },
            {
              "js": "[206,6,73,138,211,139,165,79,240,233,88,157,44,225,4,209,142,127,98,16,157,39,98,69,89,208,101,178,24,9,32,81]",
              "sol": "stringToBytes32(\"206,6,73,138,211,139,165,79,240,233,88,157,44,225,4,209,142,127,98,16,157,39,98,69,89,208,101,178,24,9,32,81\")"
            },
            {
              "js": "[96,110,241,52,151,102,194,45,118,91,200,224,4,70,202,33,119,233,86,71,192,57,0,180,14,240,3,69,150,128,154,25]",
              "sol": "abi.encode(\"96,110,241,52,151,102,194,45,118,91,200,224,4,70,202,33,119,233,86,71,192,57,0,180,14,240,3,69,150,128,154,25\")"
            },
            {
              "js": "\"j8pjf\"",
              "sol": "\"j8pjf\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[254,210,32,192,164,163,194,158,243,14,118,229,5,150,110,129,130,227,198,96,230,146,80,159,32,180,227,201,183,17,27,155]",
              "sol": "abi.encode(\"254,210,32,192,164,163,194,158,243,14,118,229,5,150,110,129,130,227,198,96,230,146,80,159,32,180,227,201,183,17,27,155\")"
            },
            {
              "js": "[182,64,231,84,55,42,36,182,69,56,10,67,151,13,132,105,138,91,244,245,251,195,194,149,131,220,99,132,217,99,59,100]",
              "sol": "stringToBytes32(\"182,64,231,84,55,42,36,182,69,56,10,67,151,13,132,105,138,91,244,245,251,195,194,149,131,220,99,132,217,99,59,100\")"
            },
            {
              "js": "[146,44,103,109,168,241,44,174,229,109,51,75,23,118,107,37,26,202,232,240,176,224,162,91,123,158,180,115,100,9,163,189]",
              "sol": "abi.encode(\"146,44,103,109,168,241,44,174,229,109,51,75,23,118,107,37,26,202,232,240,176,224,162,91,123,158,180,115,100,9,163,189\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[119,135,164,67,48,147,130,46,219,153,163,197,192,148,80,169,8,66,24,251,216,186,153,254,132,149,229,181,103,247,245,246]",
              "sol": "abi.encode(\"119,135,164,67,48,147,130,46,219,153,163,197,192,148,80,169,8,66,24,251,216,186,153,254,132,149,229,181,103,247,245,246\")"
            },
            {
              "js": "[212,104,170,44,252,190,74,46,179,68,82,100,43,81,6,156,96,247,189,191,196,132,30,186,228,174,45,106,99,131,124,78]",
              "sol": "stringToBytes32(\"212,104,170,44,252,190,74,46,179,68,82,100,43,81,6,156,96,247,189,191,196,132,30,186,228,174,45,106,99,131,124,78\")"
            },
            {
              "js": "[71,50,123,215,76,249,55,233,88,156,199,57,211,237,253,89,18,111,78,164,41,162,124,14,221,188,76,68,76,156,237,235]",
              "sol": "abi.encode(\"71,50,123,215,76,249,55,233,88,156,199,57,211,237,253,89,18,111,78,164,41,162,124,14,221,188,76,68,76,156,237,235\")"
            },
            {
              "js": "\"3px1e6\"",
              "sol": "\"3px1e6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[138,86,62,214,198,192,215,126,22,96,151,119,174,239,49,143,237,233,75,139,85,54,214,116,194,200,140,204,37,44,253,96]",
              "sol": "abi.encode(\"138,86,62,214,198,192,215,126,22,96,151,119,174,239,49,143,237,233,75,139,85,54,214,116,194,200,140,204,37,44,253,96\")"
            },
            {
              "js": "[36,91,120,136,49,31,110,171,201,149,216,118,221,191,212,3,30,235,36,223,210,208,170,102,123,188,72,153,38,194,181,5]",
              "sol": "stringToBytes32(\"36,91,120,136,49,31,110,171,201,149,216,118,221,191,212,3,30,235,36,223,210,208,170,102,123,188,72,153,38,194,181,5\")"
            },
            {
              "js": "[139,47,10,162,1,243,154,157,219,144,77,79,220,13,12,156,85,32,95,122,161,17,155,143,82,237,129,186,93,238,66,212]",
              "sol": "abi.encode(\"139,47,10,162,1,243,154,157,219,144,77,79,220,13,12,156,85,32,95,122,161,17,155,143,82,237,129,186,93,238,66,212\")"
            },
            {
              "js": "\"j8pjf\"",
              "sol": "\"j8pjf\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.917ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[248,12,73,60,162,89,198,12,207,134,193,70,71,252,136,184,205,117,68,60,211,150,59,227,138,160,181,97,84,31,88,48]",
              "sol": "abi.encode(\"248,12,73,60,162,89,198,12,207,134,193,70,71,252,136,184,205,117,68,60,211,150,59,227,138,160,181,97,84,31,88,48\")"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "[130,113,78,227,249,91,120,195,151,134,40,25,1,130,113,78,203,27,171,235,101,46,52,99,89,118,162,154,134,77,105,107]",
              "sol": "abi.encode(\"130,113,78,227,249,91,120,195,151,134,40,25,1,130,113,78,203,27,171,235,101,46,52,99,89,118,162,154,134,77,105,107\")"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.918ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[42,152,147,91,200,125,20,38,142,105,228,159,248,70,8,238,177,120,134,54,122,2,19,121,54,186,247,139,46,232,112,115]",
              "sol": "stringToBytes32(\"42,152,147,91,200,125,20,38,142,105,228,159,248,70,8,238,177,120,134,54,122,2,19,121,54,186,247,139,46,232,112,115\")"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "[2,17,103,254,71,63,236,8,237,57,168,7,38,29,125,119,64,7,230,239,113,22,34,93,53,248,234,217,89,204,71,118]",
              "sol": "stringToBytes32(\"2,17,103,254,71,63,236,8,237,57,168,7,38,29,125,119,64,7,230,239,113,22,34,93,53,248,234,217,89,204,71,118\")"
            },
            {
              "js": "[221,59,83,218,178,128,20,215,121,248,51,7,249,230,82,198,170,83,119,138,234,9,162,8,180,157,205,14,131,87,30,141]",
              "sol": "stringToBytes32(\"221,59,83,218,178,128,20,215,121,248,51,7,249,230,82,198,170,83,119,138,234,9,162,8,180,157,205,14,131,87,30,141\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.920ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[102,9,181,92,105,73,171,157,144,1,143,220,96,188,248,47,159,80,14,107,227,187,245,210,43,127,69,180,229,172,184,201]",
              "sol": "stringToBytes32(\"102,9,181,92,105,73,171,157,144,1,143,220,96,188,248,47,159,80,14,107,227,187,245,210,43,127,69,180,229,172,184,201\")"
            },
            {
              "js": "[185,170,64,73,108,138,103,106,153,101,185,113,147,80,85,12,25,29,216,175,64,73,118,232,109,240,189]",
              "sol": "abi.encode(\"185,170,64,73,108,138,103,106,153,101,185,113,147,80,85,12,25,29,216,175,64,73,118,232,109,240,189\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[176,132,134,229,32,73,22,231,195,227,98,105,131,117,0,184,182,233,64,166,44,212,59,102,156,108,253,197,80,133,180,199]",
              "sol": "stringToBytes32(\"176,132,134,229,32,73,22,231,195,227,98,105,131,117,0,184,182,233,64,166,44,212,59,102,156,108,253,197,80,133,180,199\")"
            },
            {
              "js": "[201,225,16,98,121,79,24,147,94,79,0,102,134,48,19,123,167,170,238,156,91,198,50,35,47,48,180,63,7,183,24,135,17,201,9,72,124,235,201,173,193,76,83,230,119,39,175,169,77,124,50,82,171,49,45,226,244,95,168,41,68,255,21,19,82]",
              "sol": "abi.encode(\"201,225,16,98,121,79,24,147,94,79,0,102,134,48,19,123,167,170,238,156,91,198,50,35,47,48,180,63,7,183,24,135,17,201,9,72,124,235,201,173,193,76,83,230,119,39,175,169,77,124,50,82,171,49,45,226,244,95,168,41,68,255,21,19,82\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.923ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.926ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1532892062,11]",
              "sol": "[uint(1532892062),uint(11)]"
            },
            {
              "js": "[[45,59],[17,129]]",
              "sol": "[[uint(45),uint(59)],[uint(17),uint(129)]]"
            },
            {
              "js": "[61,129]",
              "sol": "[uint(61),uint(129)]"
            },
            {
              "js": "[66,46]",
              "sol": "[uint(66),uint(46)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.938ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.938ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[162,33,26,161,102,199999,32,24,47,23]",
              "sol": "[uint(162),uint(33),uint(26),uint(161),uint(102),uint(199999),uint(32),uint(24),uint(47),uint(23)]"
            },
            {
              "js": "{\"A\": {\"X\": 28,\"Y\": 95},\"B\": {\"X\": [255,1],\"Y\": [98,61]},\"C\": {\"X\": 1024,\"Y\": 26}}",
              "sol": "Verifier.Proof(Pairing.G1Point(28,95),Pairing.G2Point([uint(255),uint(1)],[uint(98),uint(61)]),Pairing.G1Point(1024,26))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[31]",
              "sol": "[uint(31)]"
            },
            {
              "js": "{\"A\": {\"X\": 28,\"Y\": 10},\"B\": {\"X\": [103,88],\"Y\": [5,160]},\"C\": {\"X\": 2014223714,\"Y\": 1532892063}}",
              "sol": "Verifier.Proof(Pairing.G1Point(28,10),Pairing.G2Point([uint(103),uint(88)],[uint(5),uint(160)]),Pairing.G1Point(2014223714,1532892063))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.944ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.944ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.945ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"accounts[3]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.946ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.947ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.947ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.947ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.948ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.949ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "[156,47,232,18,25,156,189,226,230,45,237,228,232,45,46,59,111,92,53,16,216,139,117,178,88,42,228,153,59,231,178,105]",
              "sol": "abi.encode(\"156,47,232,18,25,156,189,226,230,45,237,228,232,45,46,59,111,92,53,16,216,139,117,178,88,42,228,153,59,231,178,105\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "8",
                "sol": "8"
              },
              {
                "js": "[156,47,232,18,25,156,189,226,230,45,237,228,232,45,46,59,111,92,53,16,216,139,117,178,88,42,228,153,59,231,178,105]",
                "sol": "abi.encode(\"156,47,232,18,25,156,189,226,230,45,237,228,232,45,46,59,111,92,53,16,216,139,117,178,88,42,228,153,59,231,178,105\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.951ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.952ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[177,231,120,35]",
              "sol": "bytes4(\"177,231,120,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.955ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.955ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.956ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.956ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.957ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "[120,102,91,27,243,10,77,148,173,97,123,189,10,83,241,186,146,2,92,179,141,194,40,238,124,80,142,145,35,198,11,114]",
              "sol": "abi.encode(\"120,102,91,27,243,10,77,148,173,97,123,189,10,83,241,186,146,2,92,179,141,194,40,238,124,80,142,145,35,198,11,114\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[72,47,201,227,187,172,136,197,125,223,211,242,40,149,72,108,230,27,214,213,160,76,158,84,210,221,31,207,136,130,184,178]",
              "sol": "abi.encode(\"72,47,201,227,187,172,136,197,125,223,211,242,40,149,72,108,230,27,214,213,160,76,158,84,210,221,31,207,136,130,184,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.959ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.961ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[10,32]",
              "sol": "[uint(10),uint(32)]"
            },
            {
              "js": "[[33,0],[63,1025]]",
              "sol": "[[uint(33),uint(0)],[uint(63),uint(1025)]]"
            },
            {
              "js": "[1,60]",
              "sol": "[uint(1),uint(60)]"
            },
            {
              "js": "[11,66]",
              "sol": "[uint(11),uint(66)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.962ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.963ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.964ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.964ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.965ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.968ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.969ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.970ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.970ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.971ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.972ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "102",
                "sol": "102"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:58:22.973ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.974ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:58:22.974ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}