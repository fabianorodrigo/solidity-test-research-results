,{
  "2020-11-12T07:32:23.671ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:32:38.641ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:32:53.570ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:08.712ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:23.935ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:39.085ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.294ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [195,105,186,5,143,201,11,16,141,76,103,179,178,241,7,128,173,79,172,149,250,141,24,77,100,94,225,165,250,226,94,19],\"capacity\": 5}",
              "sol": "Buffer.buffer(abi.encode(\"195,105,186,5,143,201,11,16,141,76,103,179,178,241,7,128,173,79,172,149,250,141,24,77,100,94,225,165,250,226,94,19\"),5)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.295ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [231,63,15,30,81,4,14,132,255,108,179,70,143,74,250,56,204,248,88,163,104,183,193,39,101,229,169,19,152,233,221,165],\"capacity\": 0}",
              "sol": "Buffer.buffer(abi.encode(\"231,63,15,30,81,4,14,132,255,108,179,70,143,74,250,56,204,248,88,163,104,183,193,39,101,229,169,19,152,233,221,165\"),0)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [218,73,214,220,5,94,246,185,234,118,104,31,232,121,201,222,245,213,132,135,79,187,229,235,46,118,239,161,120,95,119,140],\"capacity\": 23}",
              "sol": "Buffer.buffer(abi.encode(\"218,73,214,220,5,94,246,185,234,118,104,31,232,121,201,222,245,213,132,135,79,187,229,235,46,118,239,161,120,95,119,140\"),23)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.296ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [17,147,220,246,219,75,194,126,38,170,189,144,22,75,3,200,126,10,142,14,123,132,230,130,207,248,57,161,228,20,54,53],\"capacity\": 59}",
              "sol": "Buffer.buffer(abi.encode(\"17,147,220,246,219,75,194,126,38,170,189,144,22,75,3,200,126,10,142,14,123,132,230,130,207,248,57,161,228,20,54,53\"),59)"
            },
            {
              "js": "[189,69,70,85,95,87,152,12,219,222,172,45,179,103,146,37,196,23,112,123,183,22,167,114,51,196,2,232,6,140,66,96]",
              "sol": "abi.encode(\"189,69,70,85,95,87,152,12,219,222,172,45,179,103,146,37,196,23,112,123,183,22,167,114,51,196,2,232,6,140,66,96\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.297ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [47,218,86,55,71,93,81,49,193,80,102,223,8,16,113,126,35,118,65,31,179,9,250,6,231,237,17,91,207,243,174,19],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"47,218,86,55,71,93,81,49,193,80,102,223,8,16,113,126,35,118,65,31,179,9,250,6,231,237,17,91,207,243,174,19\"),129)"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.297ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [195,211,111,138,175,127,38,148,194,140,110,37,89,113,191,156,167,13,124,165,3,194,194,81,102,141,200,96,145,247,110,102],\"capacity\": 25}",
              "sol": "Buffer.buffer(abi.encode(\"195,211,111,138,175,127,38,148,194,140,110,37,89,113,191,156,167,13,124,165,3,194,194,81,102,141,200,96,145,247,110,102\"),25)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.298ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [62,204,202,168,33,218,183,77,25,249,36,139,130,226,239,127,228,171,101,142,15,76,206,243,14,241,177,251,50,65,159,104],\"capacity\": 1}",
              "sol": "Buffer.buffer(abi.encode(\"62,204,202,168,33,218,183,77,25,249,36,139,130,226,239,127,228,171,101,142,15,76,206,243,14,241,177,251,50,65,159,104\"),1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.298ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [137,90,54,209,66,119,12,74,120,105,129,50,226,231,94,31,102,255,248,42,232,248,50,103,164,161,182,70,185,32,99,82],\"capacity\": 1024}",
              "sol": "Buffer.buffer(abi.encode(\"137,90,54,209,66,119,12,74,120,105,129,50,226,231,94,31,102,255,248,42,232,248,50,103,164,161,182,70,185,32,99,82\"),1024)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.302ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.302ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.302ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 2014223716,\"Y\": 16}",
              "sol": "Pairing.G1Point(2014223716,16)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.303ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 47,\"Y\": 16}",
              "sol": "Pairing.G1Point(47,16)"
            },
            {
              "js": "{\"X\": 65,\"Y\": 97}",
              "sol": "Pairing.G1Point(65,97)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.303ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [2014223714,21],\"Y\": [17,87]}",
              "sol": "Pairing.G2Point([uint(2014223714),uint(21)],[uint(17),uint(87)])"
            },
            {
              "js": "{\"X\": [19,57],\"Y\": [95,127]}",
              "sol": "Pairing.G2Point([uint(19),uint(57)],[uint(95),uint(127)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.304ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 54,\"Y\": 1532892064}",
              "sol": "Pairing.G1Point(54,1532892064)"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.305ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 103,\"Y\": 30},{\"X\": 3,\"Y\": 21},{\"X\": 60,\"Y\": 3},{\"X\": 17,\"Y\": 54},{\"X\": 11,\"Y\": 49},{\"X\": 2,\"Y\": 49},{\"X\": 57,\"Y\": 59},{\"X\": 58,\"Y\": 162},{\"X\": 49,\"Y\": 32}]",
              "sol": "[Pairing.G1Point(103,30),Pairing.G1Point(3,21),Pairing.G1Point(60,3),Pairing.G1Point(17,54),Pairing.G1Point(11,49),Pairing.G1Point(2,49),Pairing.G1Point(57,59),Pairing.G1Point(58,162),Pairing.G1Point(49,32)]"
            },
            {
              "js": "[{\"X\": [18,2014223716],\"Y\": [18,102]},{\"X\": [29,162],\"Y\": [33,3]},{\"X\": [45,19],\"Y\": [95,86]},{\"X\": [47,21],\"Y\": [2014223716,64]},{\"X\": [33,95],\"Y\": [45,1024]},{\"X\": [103,2014223714],\"Y\": [56,45]},{\"X\": [23,47],\"Y\": [20,29]},{\"X\": [30,64],\"Y\": [257,29]},{\"X\": [46,162],\"Y\": [2014223716,54]}]",
              "sol": "[Pairing.G2Point([uint(18),uint(2014223716)],[uint(18),uint(102)]),Pairing.G2Point([uint(29),uint(162)],[uint(33),uint(3)]),Pairing.G2Point([uint(45),uint(19)],[uint(95),uint(86)]),Pairing.G2Point([uint(47),uint(21)],[uint(2014223716),uint(64)]),Pairing.G2Point([uint(33),uint(95)],[uint(45),uint(1024)]),Pairing.G2Point([uint(103),uint(2014223714)],[uint(56),uint(45)]),Pairing.G2Point([uint(23),uint(47)],[uint(20),uint(29)]),Pairing.G2Point([uint(30),uint(64)],[uint(257),uint(29)]),Pairing.G2Point([uint(46),uint(162)],[uint(2014223716),uint(54)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 66,\"Y\": 21},{\"X\": 33,\"Y\": 71},{\"X\": 1532892064,\"Y\": 1532892062},{\"X\": 48,\"Y\": 27},{\"X\": 47,\"Y\": 5},{\"X\": 70,\"Y\": 15},{\"X\": 24,\"Y\": 2014223714},{\"X\": 255,\"Y\": 45},{\"X\": 200001,\"Y\": 64},{\"X\": 95,\"Y\": 2014223714}]",
                "sol": "[Pairing.G1Point(18,57),Pairing.G1Point(257,66),Pairing.G1Point(256,31),Pairing.G1Point(49,56),Pairing.G1Point(3,25),Pairing.G1Point(199999,200000),Pairing.G1Point(29,17),Pairing.G1Point(200001,255),Pairing.G1Point(70,10),Pairing.G1Point(7,46)]"
              },
              {
                "js": "[{\"X\": [18,2014223716],\"Y\": [18,102]},{\"X\": [29,162],\"Y\": [33,3]},{\"X\": [45,19],\"Y\": [95,86]},{\"X\": [47,21],\"Y\": [2014223716,64]},{\"X\": [33,95],\"Y\": [45,1024]},{\"X\": [103,2014223714],\"Y\": [56,45]},{\"X\": [23,47],\"Y\": [20,29]},{\"X\": [30,64],\"Y\": [257,29]},{\"X\": [46,162],\"Y\": [2014223716,54]}]",
                "sol": "[Pairing.G2Point([uint(18),uint(2014223716)],[uint(18),uint(102)]),Pairing.G2Point([uint(29),uint(162)],[uint(33),uint(3)]),Pairing.G2Point([uint(45),uint(19)],[uint(95),uint(86)]),Pairing.G2Point([uint(47),uint(21)],[uint(2014223716),uint(64)]),Pairing.G2Point([uint(33),uint(95)],[uint(45),uint(1024)]),Pairing.G2Point([uint(103),uint(2014223714)],[uint(56),uint(45)]),Pairing.G2Point([uint(23),uint(47)],[uint(20),uint(29)]),Pairing.G2Point([uint(30),uint(64)],[uint(257),uint(29)]),Pairing.G2Point([uint(46),uint(162)],[uint(2014223716),uint(54)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.316ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 27,\"Y\": 69}",
              "sol": "Pairing.G1Point(27,69)"
            },
            {
              "js": "{\"X\": [61,69],\"Y\": [97,70]}",
              "sol": "Pairing.G2Point([uint(61),uint(69)],[uint(97),uint(70)])"
            },
            {
              "js": "{\"X\": 95,\"Y\": 23}",
              "sol": "Pairing.G1Point(95,23)"
            },
            {
              "js": "{\"X\": [20,11],\"Y\": [46,61]}",
              "sol": "Pairing.G2Point([uint(20),uint(11)],[uint(46),uint(61)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.318ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 59,\"Y\": 5}",
              "sol": "Pairing.G1Point(59,5)"
            },
            {
              "js": "{\"X\": [66,127],\"Y\": [46,162]}",
              "sol": "Pairing.G2Point([uint(66),uint(127)],[uint(46),uint(162)])"
            },
            {
              "js": "{\"X\": 31,\"Y\": 59}",
              "sol": "Pairing.G1Point(31,59)"
            },
            {
              "js": "{\"X\": [60,45],\"Y\": [21,1]}",
              "sol": "Pairing.G2Point([uint(60),uint(45)],[uint(21),uint(1)])"
            },
            {
              "js": "{\"X\": 63,\"Y\": 28}",
              "sol": "Pairing.G1Point(63,28)"
            },
            {
              "js": "{\"X\": [19,2014223715],\"Y\": [69,1023]}",
              "sol": "Pairing.G2Point([uint(19),uint(2014223715)],[uint(69),uint(1023)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.323ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.324ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.324ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.325ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.325ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.326ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.326ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.327ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.327ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.328ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.328ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.332ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [73,209,54,54,173,104,121,212,248,8,125,221,172,156,31,72,37,8,44,146,43,136,250,244,61,124,16,99,90,230,143,160],\"capacity\": 2014223714}",
              "sol": "Buffer.buffer(abi.encode(\"73,209,54,54,173,104,121,212,248,8,125,221,172,156,31,72,37,8,44,146,43,136,250,244,61,124,16,99,90,230,143,160\"),2014223714)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.333ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [105,196,158,92,18,145,146,56,234,209,211,46,1,169,134,202,63,187,250,148,158,169,62,68,66,102,244,155,219,71,164,162],\"capacity\": 87}",
              "sol": "Buffer.buffer(abi.encode(\"105,196,158,92,18,145,146,56,234,209,211,46,1,169,134,202,63,187,250,148,158,169,62,68,66,102,244,155,219,71,164,162\"),87)"
            },
            {
              "js": "[89,48,167,99,227,50,145,107,78,109,114,213,128,12,113,60,249,216,94,147,0,194,77,189,113,32,164,236,17,50,118,107]",
              "sol": "abi.encode(\"89,48,167,99,227,50,145,107,78,109,114,213,128,12,113,60,249,216,94,147,0,194,77,189,113,32,164,236,17,50,118,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.333ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [241,81,108,2,68,193,65,224,253,120,99,56,230,114,60,94,123,164,112,238,7,81,71,241,166,97,38,216,59,193,215,177],\"capacity\": 20}",
              "sol": "Buffer.buffer(abi.encode(\"241,81,108,2,68,193,65,224,253,120,99,56,230,114,60,94,123,164,112,238,7,81,71,241,166,97,38,216,59,193,215,177\"),20)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.334ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [36,108,236,211,192,170,35,171,8,228,40,129,52,219,73,197,124,104,37,164,53,87,148,182,21,121,228,31,28,107,31,3],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"36,108,236,211,192,170,35,171,8,228,40,129,52,219,73,197,124,104,37,164,53,87,148,182,21,121,228,31,28,107,31,3\"),1532892063)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.335ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[4,109,200,103,164,78,85,106,74,178,92,6,62,179,100,97,118,198,137,144,35,248,254,2,168,30,53,202,253,63,50,253]",
              "sol": "stringToBytes32(\"4,109,200,103,164,78,85,106,74,178,92,6,62,179,100,97,118,198,137,144,35,248,254,2,168,30,53,202,253,63,50,253\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.335ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[151,148,32,119,24,224,144,84,67,125,191,107,115,249,156,19,4,53,212,148,48,135,132,59,97,24,223,115,91,212,101,18]",
              "sol": "stringToBytes32(\"151,148,32,119,24,224,144,84,67,125,191,107,115,249,156,19,4,53,212,148,48,135,132,59,97,24,223,115,91,212,101,18\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[104,35,170,137,205,198,141,32,1,16,190,247,41,47,96,219,218,67,122,198,0,212,115,48,99,78,54,38,60,167,209,232]",
              "sol": "abi.encode(\"104,35,170,137,205,198,141,32,1,16,190,247,41,47,96,219,218,67,122,198,0,212,115,48,99,78,54,38,60,167,209,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.376ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.377ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.377ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.377ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.378ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.378ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.379ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.381ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.381ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.382ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.382ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.383ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.383ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"vwxuc\"",
              "sol": "\"vwxuc\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.384ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.384ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"tmj0mc\",\"fzaykd\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"tmj0mc\"),string(\"fzaykd\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.385ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"P\",\"Capstones\",\"0\",\"Capstones\",\"P\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"P\"),string(\"Capstones\"),string(\"0\"),string(\"Capstones\"),string(\"P\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.385ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"vwxuc\",\"0azm4n\",\"ERC1820_ACCEPT_MAGIC\",\"0\",\"tmj0mc\",\"P\",\"fzaykd\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"vwxuc\"),string(\"0azm4n\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"0\"),string(\"tmj0mc\"),string(\"P\"),string(\"fzaykd\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.386ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"l6givg\"",
              "sol": "\"l6givg\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"L\",\"oklek\",\"fzaykd\",\"0\",\"kesa3b\",\"fzaykd\",\"vwxuc\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"L\"),string(\"oklek\"),string(\"fzaykd\"),string(\"0\"),string(\"kesa3b\"),string(\"fzaykd\"),string(\"vwxuc\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.387ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "[\"Capstones\"]",
              "sol": "[string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.387ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"l6givg\"]",
              "sol": "[string(\"l6givg\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.388ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"tmj0mc\"]",
              "sol": "[string(\"tmj0mc\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.388ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"L\"]",
              "sol": "[string(\"L\")]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.389ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "[\"l6givg\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"l6givg\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.389ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"fzaykd\",\"P\"]",
              "sol": "[string(\"fzaykd\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.390ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"[\",\"fzaykd\"]",
              "sol": "[string(\"[\"),string(\"fzaykd\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.390ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"kesa3b\"",
              "sol": "\"kesa3b\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"tmj0mc\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"tmj0mc\")]"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.391ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "[\"l6givg\",\"l6givg\",\"tmj0mc\"]",
              "sol": "[string(\"l6givg\"),string(\"l6givg\"),string(\"tmj0mc\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.391ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"0azm4n\",\"38ksx\",\"rp889\"]",
              "sol": "[string(\"0azm4n\"),string(\"38ksx\"),string(\"rp889\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.392ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"vwxuc\"",
              "sol": "\"vwxuc\""
            },
            {
              "js": "[\"oklek\",\"olfiwg\",\"l6givg\"]",
              "sol": "[string(\"oklek\"),string(\"olfiwg\"),string(\"l6givg\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.392ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"l6givg\",\"kesa3b\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"l6givg\"),string(\"kesa3b\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.393ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"fzaykd\",\"rp889\",\"P\",\"0\"]",
              "sol": "[string(\"fzaykd\"),string(\"rp889\"),string(\"P\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.393ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"oklek\",\"0azm4n\",\"z5hr64\",\"rp889\"]",
              "sol": "[string(\"oklek\"),string(\"0azm4n\"),string(\"z5hr64\"),string(\"rp889\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.395ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"vwxuc\"",
              "sol": "\"vwxuc\""
            },
            {
              "js": "[\"L\",\"kesa3b\",\"vwxuc\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"L\"),string(\"kesa3b\"),string(\"vwxuc\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.396ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"38ksx\"",
              "sol": "\"38ksx\""
            },
            {
              "js": "[\"tmj0mc\",\"L\",\"P\",\"[\"]",
              "sol": "[string(\"tmj0mc\"),string(\"L\"),string(\"P\"),string(\"[\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.397ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "[\"kesa3b\",\"nlek8c\",\"[\",\"dmtnn\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"kesa3b\"),string(\"nlek8c\"),string(\"[\"),string(\"dmtnn\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.397ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "\"l6givg\"",
              "sol": "\"l6givg\""
            },
            {
              "js": "[\"tmj0mc\",\"Capstones\",\"vwxuc\",\"ERC1820_ACCEPT_MAGIC\",\"Capstones\"]",
              "sol": "[string(\"tmj0mc\"),string(\"Capstones\"),string(\"vwxuc\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.398ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"L\",\"0\",\"38ksx\",\"0azm4n\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"L\"),string(\"0\"),string(\"38ksx\"),string(\"0azm4n\")]"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.399ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"rp889\",\"38ksx\",\"rp889\",\"gf66p\",\"nlek8c\"]",
              "sol": "[string(\"rp889\"),string(\"38ksx\"),string(\"rp889\"),string(\"gf66p\"),string(\"nlek8c\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.401ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"fzaykd\"",
              "sol": "\"fzaykd\""
            },
            {
              "js": "[[241,115,220,132,253,247,94,41,246,107,164,243,191,106,47,254,113,197,217,45,187,178,225,33,34,72,208,172,163,19,120,128],[95,17,196,215,83,218,162,2,103,3,115,42,250,233,138,33,217,67,236,50,164,226,47,244,167,41,98,70,146,99,25,253],[219,12,54,87,181,78,49,27,215,236,40,51,236,221,220,41,1,25,199,131,97,111,86,188,227,144,41,136,247,63,241,157],[189,105,61,127,72,65,220,11,104,2,188,235,213,138,165,100,100,103,183,215,173,152,58,139,212,113,62,187,11,148,40,29],[64,117,160,40,61,139,58,136,55,99,219,155,243,177,121,140,139,122,143,74,170,98,157,59,238,153,114,128,158,86,76,129],[53,24,113,201,68,219,131,182,121,238,54,215,246,218,32,125,201,144,104,49,73,25,155,118,24,184,53,125,3,160,124,155],[105,95,60,38,153,135,153,248,145,234,118,121,28,194,14,169,133,244,16,45,20,226,77,11,9,128,75,53,154,53,104,25],[172,65,21,63,238,92,232,235,1,236,20,195,39,26,158,68,254,254,151,67,210,77,240,218,30,105,134,215,60,85,228,95]]",
              "sol": "[bytes(abi.encode(\"241,115,220,132,253,247,94,41,246,107,164,243,191,106,47,254,113,197,217,45,187,178,225,33,34,72,208,172,163,19,120,128\")),bytes(abi.encode(\"95,17,196,215,83,218,162,2,103,3,115,42,250,233,138,33,217,67,236,50,164,226,47,244,167,41,98,70,146,99,25,253\")),bytes(abi.encode(\"219,12,54,87,181,78,49,27,215,236,40,51,236,221,220,41,1,25,199,131,97,111,86,188,227,144,41,136,247,63,241,157\")),bytes(abi.encode(\"189,105,61,127,72,65,220,11,104,2,188,235,213,138,165,100,100,103,183,215,173,152,58,139,212,113,62,187,11,148,40,29\")),bytes(abi.encode(\"64,117,160,40,61,139,58,136,55,99,219,155,243,177,121,140,139,122,143,74,170,98,157,59,238,153,114,128,158,86,76,129\")),bytes(abi.encode(\"53,24,113,201,68,219,131,182,121,238,54,215,246,218,32,125,201,144,104,49,73,25,155,118,24,184,53,125,3,160,124,155\")),bytes(abi.encode(\"105,95,60,38,153,135,153,248,145,234,118,121,28,194,14,169,133,244,16,45,20,226,77,11,9,128,75,53,154,53,104,25\")),bytes(abi.encode(\"172,65,21,63,238,92,232,235,1,236,20,195,39,26,158,68,254,254,151,67,210,77,240,218,30,105,134,215,60,85,228,95\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.401ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"olfiwg\"",
              "sol": "\"olfiwg\""
            },
            {
              "js": "[[205,16,41,42,207,171,62,141,27,185,169,255,101,180,88,219,31,37,35,207,71,179,147,144,160,163,66,83,42,76,47,68],[95,202,193,67,27,250,94,95,169,97,128,39,9,203,113,78,237,242,138,85,248,147,251,24,116,22,115,221,82,192,1,3],[141,122,132,138,16,148,159,161,144,154,98,7,93,128,254,127,120,140,103,76,167,202,195,100,88,112,119,44,98,193,18,114],[192,251,56,253,42,125,177,254,153,185,223,139,1,83,94,123,184,245,198,107,163,247,151,220,89,190,136,233,42,209,156,105],[102,124,201,94,155,50,120,72,24,194,212,29,16,196,58,55,35,232,23,203,255,190,148,106,53,0,21,85,116,94,54,52],[6,214,31,16,225,145,51,97,172,87,108,255,206,187,31,195,153,115,209,91,28,7,55,135,168,202,215,77,193,189,193,67]]",
              "sol": "[bytes(abi.encode(\"205,16,41,42,207,171,62,141,27,185,169,255,101,180,88,219,31,37,35,207,71,179,147,144,160,163,66,83,42,76,47,68\")),bytes(abi.encode(\"95,202,193,67,27,250,94,95,169,97,128,39,9,203,113,78,237,242,138,85,248,147,251,24,116,22,115,221,82,192,1,3\")),bytes(abi.encode(\"141,122,132,138,16,148,159,161,144,154,98,7,93,128,254,127,120,140,103,76,167,202,195,100,88,112,119,44,98,193,18,114\")),bytes(abi.encode(\"192,251,56,253,42,125,177,254,153,185,223,139,1,83,94,123,184,245,198,107,163,247,151,220,89,190,136,233,42,209,156,105\")),bytes(abi.encode(\"102,124,201,94,155,50,120,72,24,194,212,29,16,196,58,55,35,232,23,203,255,190,148,106,53,0,21,85,116,94,54,52\")),bytes(abi.encode(\"6,214,31,16,225,145,51,97,172,87,108,255,206,187,31,195,153,115,209,91,28,7,55,135,168,202,215,77,193,189,193,67\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.402ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[3,224,19,169,199,250,91,162,6,149,229,229,162,62,115,180,193,69,44,244,178,119,167,115,193,131,242,80,69,179,236,135],[30,198,235,199,28,149,100,19,88,136,22,106,170,213,188,138,34,74,46,83,61,26,98,171,235,208,79,117,20,190,12,78],[251,209,88,168,112,85,213,159,130,241,44,38,53,140,142,64,106,187,81,32,195,60,165,228,44,157,171,199,116,147,135,82],[171,91,76,120,116,186,14,163,228,132,3,12,109,132,150,218,106,42,64,185,125,194,84,148,184,61,65,99,203,66,154,254],[75,115,165,177,148,119,195,124,221,37,17,165,237,123,63,29,56,149,27,197,217,254,81,72,38,80,35,15,89,220,243,28],[40,139,151,141,113,86,250,249,46,148,41,179,36,79,39,158,76,210,124,43,199,161,215,255,16,110,233,214,16,22,118,188],[115,90,163,50,59,217,97,41,94,133,208,66,196,49,149,161,24,64,110,139,26,229,29,130,246,17,161,1,214,122,235,204],[167,196,235,2,93,139,211,24,162,21,15,45,124,11,188,48,141,245,188,83,247,209,191,179,8,84,75,171,72,70,148,7],[36,107,30,101,7,254,158,18,46,112,90,130,80,211,189,242,52,2,99,123,113,113,87,81,87,99,131,217,98,24,223,156]]",
              "sol": "[bytes(abi.encode(\"3,224,19,169,199,250,91,162,6,149,229,229,162,62,115,180,193,69,44,244,178,119,167,115,193,131,242,80,69,179,236,135\")),bytes(abi.encode(\"30,198,235,199,28,149,100,19,88,136,22,106,170,213,188,138,34,74,46,83,61,26,98,171,235,208,79,117,20,190,12,78\")),bytes(abi.encode(\"251,209,88,168,112,85,213,159,130,241,44,38,53,140,142,64,106,187,81,32,195,60,165,228,44,157,171,199,116,147,135,82\")),bytes(abi.encode(\"171,91,76,120,116,186,14,163,228,132,3,12,109,132,150,218,106,42,64,185,125,194,84,148,184,61,65,99,203,66,154,254\")),bytes(abi.encode(\"75,115,165,177,148,119,195,124,221,37,17,165,237,123,63,29,56,149,27,197,217,254,81,72,38,80,35,15,89,220,243,28\")),bytes(abi.encode(\"40,139,151,141,113,86,250,249,46,148,41,179,36,79,39,158,76,210,124,43,199,161,215,255,16,110,233,214,16,22,118,188\")),bytes(abi.encode(\"115,90,163,50,59,217,97,41,94,133,208,66,196,49,149,161,24,64,110,139,26,229,29,130,246,17,161,1,214,122,235,204\")),bytes(abi.encode(\"167,196,235,2,93,139,211,24,162,21,15,45,124,11,188,48,141,245,188,83,247,209,191,179,8,84,75,171,72,70,148,7\")),bytes(abi.encode(\"36,107,30,101,7,254,158,18,46,112,90,130,80,211,189,242,52,2,99,123,113,113,87,81,87,99,131,217,98,24,223,156\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.403ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[161,200,24,154,223,66,100,122,186,194,84,225,192,149,243,205,138,208,142,63,76,143,121,25,141,255,137,246,252,185,5,64],[156,168,22,228,190,134,196,181,117,137,251,255,22,164,99,142,90,233,88,215,18,63,233,183,178,93,154,207,85,87,171,149],[197,166,88,192,157,178,186,247,163,148,22,230,19,193,244,78,35,194,96,216,130,37,172,116,56,160,67,184,22,246,37,218],[235,57,156,229,194,10,123,68,226,34,72,63,22,103,26,208,0,43,192,238,167,198,254,42,230,126,2,32,223,237,140,14],[56,102,167,194,40,246,133,45,189,75,236,177,156,180,82,53,198,31,212,150,137,241,78,23,226,200,197,150,112,192,218,247],[226,250,23,194,112,96,193,24,180,66,231,6,45,0,223,183,229,13,37,84,189,162,134,101,30,97,226,236,37,127,110,207],[39,164,208,22,125,187,161,84,104,167,32,238,149,44,2,81,217,9,209,247,139,47,98,170,52,68,157,5,154,233,229,37],[198,253,115,218,139,62,19,70,134,104,197,21,85,180,93,18,132,103,2,244,73,31,177,42,164,198,220,193,186,45,8,112],[23,235,223,131,122,10,150,195,116,128,57,224,78,132,30,146,87,25,43,170,131,159,190,250,46,10,203,184,136,174,5,239],[142,140,138,212,27,100,110,205,9,72,84,212,88,56,60,173,76,83,43,182,191,46,76,137,233,9,20,130,77,159,215,130]]",
              "sol": "[bytes(abi.encode(\"161,200,24,154,223,66,100,122,186,194,84,225,192,149,243,205,138,208,142,63,76,143,121,25,141,255,137,246,252,185,5,64\")),bytes(abi.encode(\"156,168,22,228,190,134,196,181,117,137,251,255,22,164,99,142,90,233,88,215,18,63,233,183,178,93,154,207,85,87,171,149\")),bytes(abi.encode(\"197,166,88,192,157,178,186,247,163,148,22,230,19,193,244,78,35,194,96,216,130,37,172,116,56,160,67,184,22,246,37,218\")),bytes(abi.encode(\"235,57,156,229,194,10,123,68,226,34,72,63,22,103,26,208,0,43,192,238,167,198,254,42,230,126,2,32,223,237,140,14\")),bytes(abi.encode(\"56,102,167,194,40,246,133,45,189,75,236,177,156,180,82,53,198,31,212,150,137,241,78,23,226,200,197,150,112,192,218,247\")),bytes(abi.encode(\"226,250,23,194,112,96,193,24,180,66,231,6,45,0,223,183,229,13,37,84,189,162,134,101,30,97,226,236,37,127,110,207\")),bytes(abi.encode(\"39,164,208,22,125,187,161,84,104,167,32,238,149,44,2,81,217,9,209,247,139,47,98,170,52,68,157,5,154,233,229,37\")),bytes(abi.encode(\"198,253,115,218,139,62,19,70,134,104,197,21,85,180,93,18,132,103,2,244,73,31,177,42,164,198,220,193,186,45,8,112\")),bytes(abi.encode(\"23,235,223,131,122,10,150,195,116,128,57,224,78,132,30,146,87,25,43,170,131,159,190,250,46,10,203,184,136,174,5,239\")),bytes(abi.encode(\"142,140,138,212,27,100,110,205,9,72,84,212,88,56,60,173,76,83,43,182,191,46,76,137,233,9,20,130,77,159,215,130\"))]"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.404ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"0azm4n\"",
              "sol": "\"0azm4n\""
            },
            {
              "js": "[[147,135,207,95,66,205,64,253,89,114,119,178,18,28,11,242,51,99,171,208,60,3,40,210,205,177,207,228,150,78,142,20]]",
              "sol": "[bytes(abi.encode(\"147,135,207,95,66,205,64,253,89,114,119,178,18,28,11,242,51,99,171,208,60,3,40,210,205,177,207,228,150,78,142,20\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.405ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[180,121,51,45,120,144,90,149,83,43,156,182,205,94,181,179,122,21,184,237,27,106,209,131,170,241,209,166,128,119,63,46]]",
              "sol": "[bytes(abi.encode(\"180,121,51,45,120,144,90,149,83,43,156,182,205,94,181,179,122,21,184,237,27,106,209,131,170,241,209,166,128,119,63,46\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.405ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[194,32,179,189,237,1,55,141,21,16,116,186,45,121,119,3,171,199,179,209,65,88,116,167,68,2,68,100,185,75,41,44]]",
              "sol": "[bytes(abi.encode(\"194,32,179,189,237,1,55,141,21,16,116,186,45,121,119,3,171,199,179,209,65,88,116,167,68,2,68,100,185,75,41,44\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.406ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"kesa3b\"",
              "sol": "\"kesa3b\""
            },
            {
              "js": "[[39,0,108,150,127,41,253,32,57,36,79,125,1,51,204,0,171,75,160,137,156,128,60,222,178,146,245,107,170,48,177,217]]",
              "sol": "[bytes(abi.encode(\"39,0,108,150,127,41,253,32,57,36,79,125,1,51,204,0,171,75,160,137,156,128,60,222,178,146,245,107,170,48,177,217\"))]"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.407ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[145,57,158,141,222,81,57,109,206,34,163,114,166,89,24,127,1,140,15,28,148,109,203,63,18,6,198,19,187,190,53,22],[152,138,153,165,207,177,127,28,91,114,227,104,146,214,21,22,123,240,246,200,225,74,97,133,117,60,184,10,225,159,236,38]]",
              "sol": "[bytes(abi.encode(\"145,57,158,141,222,81,57,109,206,34,163,114,166,89,24,127,1,140,15,28,148,109,203,63,18,6,198,19,187,190,53,22\")),bytes(abi.encode(\"152,138,153,165,207,177,127,28,91,114,227,104,146,214,21,22,123,240,246,200,225,74,97,133,117,60,184,10,225,159,236,38\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.407ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[62,113,105,18,220,240,226,66,122,81,211,216,251,50,142,220,30,247,137,206,69,166,102,15,222,189,181,218,99,248,212,187],[146,167,209,64,195,220,103,83,143,39,182,22,24,1,199,24,247,36,201,187,150,121,229,164,150,229,108,74,116,99,240,238]]",
              "sol": "[bytes(abi.encode(\"62,113,105,18,220,240,226,66,122,81,211,216,251,50,142,220,30,247,137,206,69,166,102,15,222,189,181,218,99,248,212,187\")),bytes(abi.encode(\"146,167,209,64,195,220,103,83,143,39,182,22,24,1,199,24,247,36,201,187,150,121,229,164,150,229,108,74,116,99,240,238\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.408ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"nlek8c\"",
              "sol": "\"nlek8c\""
            },
            {
              "js": "[[35,4,191,64,85,42,139,230,76,249,11,225,0,77,184,17,73,210,213,109,104,117,212,119,109,8,4,142,223,19,72,110],[184,101,81,115,48,45,216,85,222,74,114,32,168,99,158,230,44,192,152,108,174,34,21,133,86,30,51,254,168,193,29,10]]",
              "sol": "[bytes(abi.encode(\"35,4,191,64,85,42,139,230,76,249,11,225,0,77,184,17,73,210,213,109,104,117,212,119,109,8,4,142,223,19,72,110\")),bytes(abi.encode(\"184,101,81,115,48,45,216,85,222,74,114,32,168,99,158,230,44,192,152,108,174,34,21,133,86,30,51,254,168,193,29,10\"))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.409ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "[[24,2,230,207,177,59,3,108,157,200,186,132,73,144,160,177,108,192,160,172,150,64,98,255,71,47,234,106,182,255,247,159],[69,207,103,50,120,141,237,177,107,221,21,140,88,68,42,91,27,18,202,116,89,0,219,58,161,140,151,32,111,191,62,191]]",
              "sol": "[bytes(abi.encode(\"24,2,230,207,177,59,3,108,157,200,186,132,73,144,160,177,108,192,160,172,150,64,98,255,71,47,234,106,182,255,247,159\")),bytes(abi.encode(\"69,207,103,50,120,141,237,177,107,221,21,140,88,68,42,91,27,18,202,116,89,0,219,58,161,140,151,32,111,191,62,191\"))]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.409ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[9,12,110,48,38,174,42,238,241,16,149,138,10,14,70,224,157,163,131,194,200,174,157,203,204,233,233,217,240,176,198,98],[236,118,110,220,217,249,138,184,168,209,125,8,64,18,169,205,48,36,75,56,192,95,232,106,198,111,154,147,20,204,18,196],[4,101,22,25,47,200,234,7,74,117,5,209,121,20,253,41,7,225,254,156,192,240,229,201,105,147,41,28,158,157,7,156]]",
              "sol": "[bytes(abi.encode(\"9,12,110,48,38,174,42,238,241,16,149,138,10,14,70,224,157,163,131,194,200,174,157,203,204,233,233,217,240,176,198,98\")),bytes(abi.encode(\"236,118,110,220,217,249,138,184,168,209,125,8,64,18,169,205,48,36,75,56,192,95,232,106,198,111,154,147,20,204,18,196\")),bytes(abi.encode(\"4,101,22,25,47,200,234,7,74,117,5,209,121,20,253,41,7,225,254,156,192,240,229,201,105,147,41,28,158,157,7,156\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.410ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"olfiwg\"",
              "sol": "\"olfiwg\""
            },
            {
              "js": "[[229,28,119,127,78,9,231,125,176,39,245,193,1,0,126,59,72,203,32,121,121,193,240,168,100,173,194,74,22,152,153,23],[237,214,234,151,13,57,193,114,223,13,70,26,211,142,204,73,122,167,65,38,210,53,0,119,57,194,47,29,62,45,205,245],[194,159,122,21,119,124,210,129,244,255,143,101,117,231,102,134,188,6,186,230,123,160,215,243,85,235,235,84,143,32,210,55]]",
              "sol": "[bytes(abi.encode(\"229,28,119,127,78,9,231,125,176,39,245,193,1,0,126,59,72,203,32,121,121,193,240,168,100,173,194,74,22,152,153,23\")),bytes(abi.encode(\"237,214,234,151,13,57,193,114,223,13,70,26,211,142,204,73,122,167,65,38,210,53,0,119,57,194,47,29,62,45,205,245\")),bytes(abi.encode(\"194,159,122,21,119,124,210,129,244,255,143,101,117,231,102,134,188,6,186,230,123,160,215,243,85,235,235,84,143,32,210,55\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.411ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"rp889\"",
              "sol": "\"rp889\""
            },
            {
              "js": "[[98,204,224,120,137,7,132,4,114,56,174,64,150,216,171,234,64,48,253,96,18,92,3,227,38,246,242,69,16,254,173,229],[55,113,229,59,244,119,75,96,74,19,227,31,129,167,174,13,215,39,14,155,94,5,77,173,204,248,101,74,36,225,197,119],[53,147,39,136,123,201,47,163,204,72,61,187,50,141,151,19,56,142,117,168,127,36,148,127,117,193,196,207,107,123,40,212]]",
              "sol": "[bytes(abi.encode(\"98,204,224,120,137,7,132,4,114,56,174,64,150,216,171,234,64,48,253,96,18,92,3,227,38,246,242,69,16,254,173,229\")),bytes(abi.encode(\"55,113,229,59,244,119,75,96,74,19,227,31,129,167,174,13,215,39,14,155,94,5,77,173,204,248,101,74,36,225,197,119\")),bytes(abi.encode(\"53,147,39,136,123,201,47,163,204,72,61,187,50,141,151,19,56,142,117,168,127,36,148,127,117,193,196,207,107,123,40,212\"))]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.411ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"38ksx\"",
              "sol": "\"38ksx\""
            },
            {
              "js": "[[46,58,119,223,180,45,144,87,131,245,168,20,248,110,157,226,48,214,186,189,247,38,59,135,96,17,96,139,220,1,132,199],[194,98,227,111,174,166,63,38,104,178,66,45,56,0,21,174,92,65,10,166,187,146,11,168,234,183,116,101,126,10,42,210],[241,129,194,163,49,160,249,108,13,173,158,168,73,108,83,49,67,117,42,177,13,118,99,83,33,99,119,29,28,172,201,39]]",
              "sol": "[bytes(abi.encode(\"46,58,119,223,180,45,144,87,131,245,168,20,248,110,157,226,48,214,186,189,247,38,59,135,96,17,96,139,220,1,132,199\")),bytes(abi.encode(\"194,98,227,111,174,166,63,38,104,178,66,45,56,0,21,174,92,65,10,166,187,146,11,168,234,183,116,101,126,10,42,210\")),bytes(abi.encode(\"241,129,194,163,49,160,249,108,13,173,158,168,73,108,83,49,67,117,42,177,13,118,99,83,33,99,119,29,28,172,201,39\"))]"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.412ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[64,113,26,125,204,221,9,236,189,99,22,97,131,148,107,113,99,93,202,221,160,6,235,65,197,58,202,128,152,235,49,176],[158,147,24,158,223,68,246,87,232,137,211,63,35,229,88,29,176,42,80,196,52,150,168,206,95,130,12,121,68,4,116,120],[58,174,116,20,29,211,218,34,244,248,65,175,252,177,249,61,194,76,165,219,182,168,198,142,28,105,197,184,218,200,85,231],[223,103,178,171,98,227,129,168,204,227,65,212,159,234,148,202,188,182,167,118,197,82,25,43,231,229,70,165,211,174,30,223]]",
              "sol": "[bytes(abi.encode(\"64,113,26,125,204,221,9,236,189,99,22,97,131,148,107,113,99,93,202,221,160,6,235,65,197,58,202,128,152,235,49,176\")),bytes(abi.encode(\"158,147,24,158,223,68,246,87,232,137,211,63,35,229,88,29,176,42,80,196,52,150,168,206,95,130,12,121,68,4,116,120\")),bytes(abi.encode(\"58,174,116,20,29,211,218,34,244,248,65,175,252,177,249,61,194,76,165,219,182,168,198,142,28,105,197,184,218,200,85,231\")),bytes(abi.encode(\"223,103,178,171,98,227,129,168,204,227,65,212,159,234,148,202,188,182,167,118,197,82,25,43,231,229,70,165,211,174,30,223\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.412ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"fzaykd\"",
              "sol": "\"fzaykd\""
            },
            {
              "js": "[[172,226,128,94,246,168,31,222,138,104,81,210,50,222,250,105,200,216,64,23,231,211,178,222,168,34,36,50,22,92,230,72],[212,129,24,109,229,212,185,242,169,35,18,253,82,177,14,117,169,25,100,7,17,25,202,171,246,186,142,16,61,157,72,204],[20,15,150,15,159,90,88,83,201,246,148,211,114,81,14,253,136,53,237,69,1,119,108,110,77,11,183,19,67,115,214,109],[89,27,204,97,127,151,187,116,32,104,138,246,218,3,177,198,204,127,56,226,35,210,209,62,47,92,156,249,16,78,89,166]]",
              "sol": "[bytes(abi.encode(\"172,226,128,94,246,168,31,222,138,104,81,210,50,222,250,105,200,216,64,23,231,211,178,222,168,34,36,50,22,92,230,72\")),bytes(abi.encode(\"212,129,24,109,229,212,185,242,169,35,18,253,82,177,14,117,169,25,100,7,17,25,202,171,246,186,142,16,61,157,72,204\")),bytes(abi.encode(\"20,15,150,15,159,90,88,83,201,246,148,211,114,81,14,253,136,53,237,69,1,119,108,110,77,11,183,19,67,115,214,109\")),bytes(abi.encode(\"89,27,204,97,127,151,187,116,32,104,138,246,218,3,177,198,204,127,56,226,35,210,209,62,47,92,156,249,16,78,89,166\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.413ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[140,217,59,225,66,61,218,132,52,212,238,162,94,112,84,53,173,28,253,171,229,200,34,235,126,146,70,132,192,51,191,215],[96,79,118,231,75,65,52,75,247,126,108,16,42,222,78,218,102,89,209,246,21,246,134,242,66,212,188,40,67,229,238,58],[175,156,102,217,162,60,207,86,181,218,243,146,240,60,34,174,242,26,210,179,17,196,180,122,38,166,160,152,154,240,63,229],[45,81,135,6,63,11,191,218,36,32,136,153,194,24,155,180,67,81,208,3,125,177,136,51,76,5,110,68,75,34,170,37]]",
              "sol": "[bytes(abi.encode(\"140,217,59,225,66,61,218,132,52,212,238,162,94,112,84,53,173,28,253,171,229,200,34,235,126,146,70,132,192,51,191,215\")),bytes(abi.encode(\"96,79,118,231,75,65,52,75,247,126,108,16,42,222,78,218,102,89,209,246,21,246,134,242,66,212,188,40,67,229,238,58\")),bytes(abi.encode(\"175,156,102,217,162,60,207,86,181,218,243,146,240,60,34,174,242,26,210,179,17,196,180,122,38,166,160,152,154,240,63,229\")),bytes(abi.encode(\"45,81,135,6,63,11,191,218,36,32,136,153,194,24,155,180,67,81,208,3,125,177,136,51,76,5,110,68,75,34,170,37\"))]"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.414ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[152,37,224,58,120,229,208,39,134,252,253,56,9,22,15,26,223,250,103,208,245,107,141,25,120,117,237,19,58,34,8,32],[25,88,184,183,53,246,158,62,62,88,160,142,8,247,62,151,174,111,178,58,113,243,174,121,97,110,120,108,23,175,136,68],[224,65,177,91,168,51,150,85,14,189,59,221,106,255,49,243,112,170,29,31,240,133,47,139,47,103,194,199,199,88,66,156],[10,224,243,146,196,81,5,23,97,248,213,118,166,179,46,183,215,131,120,26,0,252,206,63,233,91,3,174,48,165,114,53]]",
              "sol": "[bytes(abi.encode(\"152,37,224,58,120,229,208,39,134,252,253,56,9,22,15,26,223,250,103,208,245,107,141,25,120,117,237,19,58,34,8,32\")),bytes(abi.encode(\"25,88,184,183,53,246,158,62,62,88,160,142,8,247,62,151,174,111,178,58,113,243,174,121,97,110,120,108,23,175,136,68\")),bytes(abi.encode(\"224,65,177,91,168,51,150,85,14,189,59,221,106,255,49,243,112,170,29,31,240,133,47,139,47,103,194,199,199,88,66,156\")),bytes(abi.encode(\"10,224,243,146,196,81,5,23,97,248,213,118,166,179,46,183,215,131,120,26,0,252,206,63,233,91,3,174,48,165,114,53\"))]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.415ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "[[47,234,94,90,70,195,54,60,104,190,84,153,31,80,155,172,40,79,253,134,165,25,186,177,38,16,114,53,116,117,102,236],[114,176,3,178,60,121,195,173,108,184,215,151,54,165,252,217,241,181,210,183,229,135,24,15,174,49,233,235,237,183,151,20],[186,205,35,168,212,101,226,100,187,128,209,118,89,103,99,7,78,105,248,173,88,146,105,235,131,51,221,72,21,34,240,222],[162,244,97,228,220,140,218,252,37,255,42,138,235,205,183,76,29,73,72,61,145,200,166,153,217,233,61,68,93,31,69,147],[184,13,25,116,227,16,219,80,31,204,24,205,238,0,201,74,171,141,33,91,15,250,66,66,20,28,180,190,130,118,61,144]]",
              "sol": "[bytes(abi.encode(\"47,234,94,90,70,195,54,60,104,190,84,153,31,80,155,172,40,79,253,134,165,25,186,177,38,16,114,53,116,117,102,236\")),bytes(abi.encode(\"114,176,3,178,60,121,195,173,108,184,215,151,54,165,252,217,241,181,210,183,229,135,24,15,174,49,233,235,237,183,151,20\")),bytes(abi.encode(\"186,205,35,168,212,101,226,100,187,128,209,118,89,103,99,7,78,105,248,173,88,146,105,235,131,51,221,72,21,34,240,222\")),bytes(abi.encode(\"162,244,97,228,220,140,218,252,37,255,42,138,235,205,183,76,29,73,72,61,145,200,166,153,217,233,61,68,93,31,69,147\")),bytes(abi.encode(\"184,13,25,116,227,16,219,80,31,204,24,205,238,0,201,74,171,141,33,91,15,250,66,66,20,28,180,190,130,118,61,144\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.416ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"fzaykd\"",
              "sol": "\"fzaykd\""
            },
            {
              "js": "[[69,33,202,53,250,87,61,207,208,222,62,176,168,110,168,225,238,21,231,40,80,142,84,175,221,160,51,207,230,36,15,250],[37,238,68,77,191,77,103,5,43,217,120,175,145,247,194,249,70,149,217,51,177,17,4,201,132,148,206,209,126,206,76,151],[140,182,84,48,111,0,64,246,149,193,150,165,23,113,4,188,0,189,52,234,70,238,155,180,227,42,142,242,13,67,162,252],[167,139,126,147,127,65,25,90,32,124,114,168,49,224,134,43,82,222,218,228,98,12,107,4,84,72,221,247,226,128,29,231],[95,108,23,53,26,8,54,127,72,124,74,106,16,163,211,153,241,35,108,183,241,85,104,60,40,174,9,79,130,21,10,129]]",
              "sol": "[bytes(abi.encode(\"69,33,202,53,250,87,61,207,208,222,62,176,168,110,168,225,238,21,231,40,80,142,84,175,221,160,51,207,230,36,15,250\")),bytes(abi.encode(\"37,238,68,77,191,77,103,5,43,217,120,175,145,247,194,249,70,149,217,51,177,17,4,201,132,148,206,209,126,206,76,151\")),bytes(abi.encode(\"140,182,84,48,111,0,64,246,149,193,150,165,23,113,4,188,0,189,52,234,70,238,155,180,227,42,142,242,13,67,162,252\")),bytes(abi.encode(\"167,139,126,147,127,65,25,90,32,124,114,168,49,224,134,43,82,222,218,228,98,12,107,4,84,72,221,247,226,128,29,231\")),bytes(abi.encode(\"95,108,23,53,26,8,54,127,72,124,74,106,16,163,211,153,241,35,108,183,241,85,104,60,40,174,9,79,130,21,10,129\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.417ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[66,173,188,234,65,53,43,173,205,135,52,245,250,37,241,16,38,0,171,134,79,102,192,230,6,153,145,245,228,11,129,169],[40,231,152,113,223,197,67,134,123,103,187,70,96,28,193,168,16,128,95,100,153,38,200,158,90,122,155,210,152,63,21,205],[40,215,56,60,110,226,139,160,179,46,72,100,42,23,39,85,148,228,129,10,68,240,151,43,167,73,12,154,175,248,5,9],[167,221,137,119,82,139,190,225,1,131,139,63,209,95,98,72,11,151,195,243,141,131,141,212,93,138,223,167,223,145,222,212],[106,99,226,172,25,80,223,210,170,179,186,14,183,155,136,32,70,180,101,173,179,39,237,9,95,64,10,227,158,141,218,135]]",
              "sol": "[bytes(abi.encode(\"66,173,188,234,65,53,43,173,205,135,52,245,250,37,241,16,38,0,171,134,79,102,192,230,6,153,145,245,228,11,129,169\")),bytes(abi.encode(\"40,231,152,113,223,197,67,134,123,103,187,70,96,28,193,168,16,128,95,100,153,38,200,158,90,122,155,210,152,63,21,205\")),bytes(abi.encode(\"40,215,56,60,110,226,139,160,179,46,72,100,42,23,39,85,148,228,129,10,68,240,151,43,167,73,12,154,175,248,5,9\")),bytes(abi.encode(\"167,221,137,119,82,139,190,225,1,131,139,63,209,95,98,72,11,151,195,243,141,131,141,212,93,138,223,167,223,145,222,212\")),bytes(abi.encode(\"106,99,226,172,25,80,223,210,170,179,186,14,183,155,136,32,70,180,101,173,179,39,237,9,95,64,10,227,158,141,218,135\"))]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.418ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[90,251,22,45,253,6,207,185,86,223,91,144,204,192,211,196,235,169,233,195,175,199,77,43,17,251,124,225,209,168,243,230],[157,43,189,246,192,28,137,223,226,172,151,19,155,117,163,158,235,66,165,15,162,204,3,46,238,53,205,61,190,154,73,183],[64,66,19,248,217,155,148,180,100,34,83,103,23,192,75,240,231,230,101,100,4,90,91,32,245,91,110,53,235,177,129,8],[34,176,204,106,93,162,97,172,231,222,180,202,35,167,74,33,240,177,210,23,204,31,153,196,220,85,186,29,36,106,0,162],[230,161,252,43,67,61,197,137,219,60,132,209,148,251,100,45,73,86,219,191,95,112,106,149,220,39,18,192,247,225,167,138]]",
              "sol": "[bytes(abi.encode(\"90,251,22,45,253,6,207,185,86,223,91,144,204,192,211,196,235,169,233,195,175,199,77,43,17,251,124,225,209,168,243,230\")),bytes(abi.encode(\"157,43,189,246,192,28,137,223,226,172,151,19,155,117,163,158,235,66,165,15,162,204,3,46,238,53,205,61,190,154,73,183\")),bytes(abi.encode(\"64,66,19,248,217,155,148,180,100,34,83,103,23,192,75,240,231,230,101,100,4,90,91,32,245,91,110,53,235,177,129,8\")),bytes(abi.encode(\"34,176,204,106,93,162,97,172,231,222,180,202,35,167,74,33,240,177,210,23,204,31,153,196,220,85,186,29,36,106,0,162\")),bytes(abi.encode(\"230,161,252,43,67,61,197,137,219,60,132,209,148,251,100,45,73,86,219,191,95,112,106,149,220,39,18,192,247,225,167,138\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.419ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[123]",
              "sol": "bytes1(\"123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.419ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.420ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.420ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.420ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.421ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"gf66p\"",
              "sol": "\"gf66p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.421ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"vwxuc\"",
              "sol": "\"vwxuc\""
            },
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.421ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"fzaykd\"",
              "sol": "\"fzaykd\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.422ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"gf66p\"",
              "sol": "\"gf66p\""
            },
            {
              "js": "\"z5hr64\"",
              "sol": "\"z5hr64\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.422ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"nlek8c\"",
              "sol": "\"nlek8c\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.422ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0azm4n\"",
              "sol": "\"0azm4n\""
            },
            {
              "js": "\"gf66p\"",
              "sol": "\"gf66p\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.423ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"z5hr64\"",
              "sol": "\"z5hr64\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.423ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"olfiwg\"",
              "sol": "\"olfiwg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.423ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"38ksx\"",
              "sol": "\"38ksx\""
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"kesa3b\"",
              "sol": "\"kesa3b\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.424ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"rp889\"",
              "sol": "\"rp889\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.424ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"oklek\"",
              "sol": "\"oklek\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.425ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.426ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"tmj0mc\",\"[\",\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"gf66p\",\"fzaykd\",\"\\x19Ethereum Signed Message:\\n32\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"tmj0mc\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"gf66p\"),string(\"fzaykd\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.426ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[9,214,22,155,7,171,107,44,63,130,66,95,84,244,46,158,228,179,206,35,160,98,220,252,143,148,239,25,99,46,118,208],[144,117,113,64,149,196,174,75,148,60,135,164,142,195,34,57,104,236,75,247,19,112,3,145,5,151,117,156,169,30,111,24],[137,120,102,167,54,29,223,10,49,3,113,19,25,26,35,31,223,112,21,207,255,99,218,210,105,112,204,192,5,50,243,5],[67,76,48,220,151,218,13,24,178,211,197,96,162,113,128,68,68,225,52,50,46,35,143,167,109,110,128,77,202,166,1,5],[176,62,114,251,110,217,30,134,207,22,254,214,4,118,138,51,185,247,46,117,182,105,30,68,74,122,68,123,197,85,216,229],[245,50,177,49,49,163,113,242,52,245,218,121,75,178,13,17,33,215,47,96,251,30,31,241,221,179,5,237,242,21,113,18],[175,82,159,50,236,16,74,109,144,94,89,143,44,245,234,222,254,188,53,253,70,44,199,220,186,67,170,112,201,98,55,52],[111,56,179,80,70,127,104,33,0,43,17,171,9,91,127,83,42,239,38,112,0,81,209,198,236,151,221,254,22,216,23,249],[162,153,238,48,184,251,60,51,201,115,145,173,139,17,14,110,101,210,14,177,24,0,62,163,15,190,14,179,63,86,68,32],[129,160,21,95,190,51,47,33,188,158,64,229,197,109,99,28,183,146,255,46,182,99,123,250,246,215,50,73,37,47,163,187]]",
              "sol": "[bytes(abi.encode(\"9,214,22,155,7,171,107,44,63,130,66,95,84,244,46,158,228,179,206,35,160,98,220,252,143,148,239,25,99,46,118,208\")),bytes(abi.encode(\"144,117,113,64,149,196,174,75,148,60,135,164,142,195,34,57,104,236,75,247,19,112,3,145,5,151,117,156,169,30,111,24\")),bytes(abi.encode(\"137,120,102,167,54,29,223,10,49,3,113,19,25,26,35,31,223,112,21,207,255,99,218,210,105,112,204,192,5,50,243,5\")),bytes(abi.encode(\"67,76,48,220,151,218,13,24,178,211,197,96,162,113,128,68,68,225,52,50,46,35,143,167,109,110,128,77,202,166,1,5\")),bytes(abi.encode(\"176,62,114,251,110,217,30,134,207,22,254,214,4,118,138,51,185,247,46,117,182,105,30,68,74,122,68,123,197,85,216,229\")),bytes(abi.encode(\"245,50,177,49,49,163,113,242,52,245,218,121,75,178,13,17,33,215,47,96,251,30,31,241,221,179,5,237,242,21,113,18\")),bytes(abi.encode(\"175,82,159,50,236,16,74,109,144,94,89,143,44,245,234,222,254,188,53,253,70,44,199,220,186,67,170,112,201,98,55,52\")),bytes(abi.encode(\"111,56,179,80,70,127,104,33,0,43,17,171,9,91,127,83,42,239,38,112,0,81,209,198,236,151,221,254,22,216,23,249\")),bytes(abi.encode(\"162,153,238,48,184,251,60,51,201,115,145,173,139,17,14,110,101,210,14,177,24,0,62,163,15,190,14,179,63,86,68,32\")),bytes(abi.encode(\"129,160,21,95,190,51,47,33,188,158,64,229,197,109,99,28,183,146,255,46,182,99,123,250,246,215,50,73,37,47,163,187\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.427ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.428ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[126,152,191,90,180,40,10,99,38,84,150,0,76,180,72,10,38,162,193,25,184,168,13,137,58,77,196,135,224,65,191,118]",
              "sol": "stringToBytes32(\"126,152,191,90,180,40,10,99,38,84,150,0,76,180,72,10,38,162,193,25,184,168,13,137,58,77,196,135,224,65,191,118\")"
            },
            {
              "js": "[11,177,213,146,92,213,122,243,112,239,3,29,52,182,146,85,166,56,4,192,220,37,82,150,253,184,252,5,89,180,250,253]",
              "sol": "stringToBytes32(\"11,177,213,146,92,213,122,243,112,239,3,29,52,182,146,85,166,56,4,192,220,37,82,150,253,184,252,5,89,180,250,253\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.428ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[32,85,98,4,133,178,217,137,112,137,195,255,147,206,40,78,93,184,172,36,246,110,233,197,192,15,131,4,29,25,234,40]",
              "sol": "stringToBytes32(\"32,85,98,4,133,178,217,137,112,137,195,255,147,206,40,78,93,184,172,36,246,110,233,197,192,15,131,4,29,25,234,40\")"
            },
            {
              "js": "[157,126,170,4,157,39,71,122,177,149,108,190,91,108,245,190,160,206,76,107,162,40,15,223,47,75,20,148,122,97,240,9]",
              "sol": "abi.encode(\"157,126,170,4,157,39,71,122,177,149,108,190,91,108,245,190,160,206,76,107,162,40,15,223,47,75,20,148,122,97,240,9\")"
            },
            {
              "js": "[136,179,196,245,87,1,153,97,234,101,93,104,227,160,120,166,202,66,68,223,245,121,36,201,19,48,208,12,167,153,100,92]",
              "sol": "abi.encode(\"136,179,196,245,87,1,153,97,234,101,93,104,227,160,120,166,202,66,68,223,245,121,36,201,19,48,208,12,167,153,100,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.429ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[161,253,166,223,195,97,226,185,70,73,85,150,58,110,8,105,38,89,38,128,220,117,48,255,171,129,15,231,159,68,126,244]",
              "sol": "abi.encode(\"161,253,166,223,195,97,226,185,70,73,85,150,58,110,8,105,38,89,38,128,220,117,48,255,171,129,15,231,159,68,126,244\")"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[121,37,155,158,246,65,237,29,250,54,160,128,196,224,65,24,202,231,97,71,78,17,102,172,140,162,199,194,178,2,90,163]",
              "sol": "abi.encode(\"121,37,155,158,246,65,237,29,250,54,160,128,196,224,65,24,202,231,97,71,78,17,102,172,140,162,199,194,178,2,90,163\")"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.430ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[100,156,49,213,36,32,33,27,241,69,106,84,247,221,235,183,221,248,65,33,3,243,93,128,46,202,221,112,51,210,78,135]",
              "sol": "stringToBytes32(\"100,156,49,213,36,32,33,27,241,69,106,84,247,221,235,183,221,248,65,33,3,243,93,128,46,202,221,112,51,210,78,135\")"
            },
            {
              "js": "\"dmtnn\"",
              "sol": "\"dmtnn\""
            },
            {
              "js": "[239,63,231,32,151,186,224,213,47,22,30,100,2,22,114,11,120,219,168,226,194,240,22,3,168,88,197,56,109,130,226,208]",
              "sol": "abi.encode(\"239,63,231,32,151,186,224,213,47,22,30,100,2,22,114,11,120,219,168,226,194,240,22,3,168,88,197,56,109,130,226,208\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[24,175,249,146,203,81,208,43,55,234,248,74,96,185,95,7,93,196,224,204,242,52,22,49,59,195,106,89,53,20,24,7]",
              "sol": "stringToBytes32(\"24,175,249,146,203,81,208,43,55,234,248,74,96,185,95,7,93,196,224,204,242,52,22,49,59,195,106,89,53,20,24,7\")"
            },
            {
              "js": "\"0azm4n\"",
              "sol": "\"0azm4n\""
            },
            {
              "js": "[204,243,40,78,51,7,82,246,144,131,174,183,165,27,52,134,163,211,179,210,229,42,71,208,103,184,199,35,95,206,90,72]",
              "sol": "abi.encode(\"204,243,40,78,51,7,82,246,144,131,174,183,165,27,52,134,163,211,179,210,229,42,71,208,103,184,199,35,95,206,90,72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.431ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[185,57,177,144,99,245,77,220,197,211,71,227,87,177,240,110,65,50,165,157,243,175,107,118,67,117,111,210,37,49,133,199]",
              "sol": "stringToBytes32(\"185,57,177,144,99,245,77,220,197,211,71,227,87,177,240,110,65,50,165,157,243,175,107,118,67,117,111,210,37,49,133,199\")"
            },
            {
              "js": "[50,146,72,45,17,139,52,170,10,188,105,198,116,44,111,40,13,217,20,41,237,126,141,5,228,218,219,5,110,127,241,108]",
              "sol": "abi.encode(\"50,146,72,45,17,139,52,170,10,188,105,198,116,44,111,40,13,217,20,41,237,126,141,5,228,218,219,5,110,127,241,108\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[185,57,177,144,99,245,77,220,197,211,71,227,87,177,240,110,65,50,165,157,243,175,107,118,67,117,111,210,37,49,133,199]",
                "sol": "stringToBytes32(\"185,57,177,144,99,245,77,220,197,211,71,227,87,177,240,110,65,50,165,157,243,175,107,118,67,117,111,210,37,49,133,199\")"
              },
              {
                "js": "[3,146,7,197,144,136,111,9,6,216,33,112,88,57,91,75,95,197,175,100,128,224,105,87,48,35,126,74,232,159,125,248,156]",
                "sol": "bytes33(\"3,146,7,197,144,136,111,9,6,216,33,112,88,57,91,75,95,197,175,100,128,224,105,87,48,35,126,74,232,159,125,248,156\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.432ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[175,238,3,239,203,126,49,99,223,174,155,107,220,128,149,81,179,71,115,191,57,189,193,214,205,64,175,116,55,229,70,56]",
              "sol": "abi.encode(\"175,238,3,239,203,126,49,99,223,174,155,107,220,128,149,81,179,71,115,191,57,189,193,214,205,64,175,116,55,229,70,56\")"
            },
            {
              "js": "[242,228,178,111,112,140,166,130,105,209,223,127,218,33,135,236,51,5,171,242,76,251,223,186,14,101,116,106,119,5,97,141]",
              "sol": "stringToBytes32(\"242,228,178,111,112,140,166,130,105,209,223,127,218,33,135,236,51,5,171,242,76,251,223,186,14,101,116,106,119,5,97,141\")"
            },
            {
              "js": "[156,189,136,235,241,93,225,14,194,43,170,195,122,94,91,99,206,160,220,41,162,252,166,112,43,194,64,160,134,49,86,154]",
              "sol": "abi.encode(\"156,189,136,235,241,93,225,14,194,43,170,195,122,94,91,99,206,160,220,41,162,252,166,112,43,194,64,160,134,49,86,154\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[152,48,191,241,62,48,130,89,158,90,5,137,196,195,182,17,97,102,180,145,34,117,140,12,212,59,231,4,237,73,52,189]",
              "sol": "abi.encode(\"152,48,191,241,62,48,130,89,158,90,5,137,196,195,182,17,97,102,180,145,34,117,140,12,212,59,231,4,237,73,52,189\")"
            },
            {
              "js": "[110,232,30,130,98,141,247,79,248,193,182,104,77,254,176,223,158,38,52,255,250,203,94,21,60,142,151,145,171,66,94,163]",
              "sol": "stringToBytes32(\"110,232,30,130,98,141,247,79,248,193,182,104,77,254,176,223,158,38,52,255,250,203,94,21,60,142,151,145,171,66,94,163\")"
            },
            {
              "js": "[237,74,106,222,19,97,55,213,46,86,218,66,146,130,84,190,57,110,56,61,222,156,133,233,98,86,27,151,121,109,104,51]",
              "sol": "abi.encode(\"237,74,106,222,19,97,55,213,46,86,218,66,146,130,84,190,57,110,56,61,222,156,133,233,98,86,27,151,121,109,104,51\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[173,183,224,2,200,130,211,70,243,121,133,69,5,33,219,125,222,7,130,98,128,77,6,139,103,143,194,203,227,107,201,35]",
              "sol": "abi.encode(\"173,183,224,2,200,130,211,70,243,121,133,69,5,33,219,125,222,7,130,98,128,77,6,139,103,143,194,203,227,107,201,35\")"
            },
            {
              "js": "[147,126,42,255,236,192,72,88,100,129,5,194,118,209,145,168,253,220,151,207,166,184,247,8,139,250,228,31,80,234,88,202]",
              "sol": "stringToBytes32(\"147,126,42,255,236,192,72,88,100,129,5,194,118,209,145,168,253,220,151,207,166,184,247,8,139,250,228,31,80,234,88,202\")"
            },
            {
              "js": "[36,80,70,99,233,146,248,138,194,98,152,42,204,77,138,138,21,61,193,106,155,44,14,115,93,193,109,138,66,176,196,66]",
              "sol": "abi.encode(\"36,80,70,99,233,146,248,138,194,98,152,42,204,77,138,138,21,61,193,106,155,44,14,115,93,193,109,138,66,176,196,66\")"
            },
            {
              "js": "\"262huj\"",
              "sol": "\"262huj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[47,186,159,118,243,20,44,54,253,216,195,123,124,155,36,228,153,24,1,239,140,87,218,193,51,126,18,153,186,118,52,33]",
              "sol": "abi.encode(\"47,186,159,118,243,20,44,54,253,216,195,123,124,155,36,228,153,24,1,239,140,87,218,193,51,126,18,153,186,118,52,33\")"
            },
            {
              "js": "[5,31,29,135,96,199,36,27,70,222,168,13,6,14,17,19,231,197,120,107,101,12,64,121,201,85,235,189,205,250,190,57]",
              "sol": "stringToBytes32(\"5,31,29,135,96,199,36,27,70,222,168,13,6,14,17,19,231,197,120,107,101,12,64,121,201,85,235,189,205,250,190,57\")"
            },
            {
              "js": "[116,48,156,3,66,17,64,229,13,25,68,56,51,207,61,98,62,116,33,49,152,109,35,188,250,9,184,80,2,12,191,108]",
              "sol": "abi.encode(\"116,48,156,3,66,17,64,229,13,25,68,56,51,207,61,98,62,116,33,49,152,109,35,188,250,9,184,80,2,12,191,108\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[137,237,102,147,96,128,154,121,230,133,4,6,50,145,105,123,183,176,89,128,18,106,183,107,53,39,192,241,211,119,21,147]",
              "sol": "abi.encode(\"137,237,102,147,96,128,154,121,230,133,4,6,50,145,105,123,183,176,89,128,18,106,183,107,53,39,192,241,211,119,21,147\")"
            },
            {
              "js": "[225,152,250,130,220,86,251,47,17,182,28,237,252,251,49,202,148,209,190,57,238,171,174,13,55,37,169,94,36,42,62,209]",
              "sol": "stringToBytes32(\"225,152,250,130,220,86,251,47,17,182,28,237,252,251,49,202,148,209,190,57,238,171,174,13,55,37,169,94,36,42,62,209\")"
            },
            {
              "js": "[206,202,13,33,86,11,181,130,180,177,25,43,250,72,100,178,139,243,232,91,10,109,31,73,242,29,86,10,26,143,56,153]",
              "sol": "abi.encode(\"206,202,13,33,86,11,181,130,180,177,25,43,250,72,100,178,139,243,232,91,10,109,31,73,242,29,86,10,26,143,56,153\")"
            },
            {
              "js": "\"tmj0mc\"",
              "sol": "\"tmj0mc\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[120,71,35,50,228,32,254,215,251,236,209,108,26,191,73,77,205,138,20,22,103,208,87,235,152,175,179,132,213,248,90,104]",
              "sol": "abi.encode(\"120,71,35,50,228,32,254,215,251,236,209,108,26,191,73,77,205,138,20,22,103,208,87,235,152,175,179,132,213,248,90,104\")"
            },
            {
              "js": "[204,14,81,68,166,102,185,204,202,200,182,88,208,6,47,120,194,148,112,147,14,213,192,92,194,79,135,30,11,8,82,243]",
              "sol": "stringToBytes32(\"204,14,81,68,166,102,185,204,202,200,182,88,208,6,47,120,194,148,112,147,14,213,192,92,194,79,135,30,11,8,82,243\")"
            },
            {
              "js": "[140,132,2,194,243,214,208,245,2,218,127,217,228,33,169,37,232,60,61,189,164,164,130,129,226,122,93,168,249,201,201,47]",
              "sol": "abi.encode(\"140,132,2,194,243,214,208,245,2,218,127,217,228,33,169,37,232,60,61,189,164,164,130,129,226,122,93,168,249,201,201,47\")"
            },
            {
              "js": "\"0azm4n\"",
              "sol": "\"0azm4n\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[220,164,134,158,156,22,153,95,81,59,187,170,10,154,140,93,196,85,38,10,34,137,16,182,127,179,41,89,38,240,168,72]",
              "sol": "abi.encode(\"220,164,134,158,156,22,153,95,81,59,187,170,10,154,140,93,196,85,38,10,34,137,16,182,127,179,41,89,38,240,168,72\")"
            },
            {
              "js": "[75,84,101,91,192,87,69,230,52,84,156,151,167,252,93,10,62,111,237,249,93,247,18,38,174,54,191,191,213,192,169,122]",
              "sol": "stringToBytes32(\"75,84,101,91,192,87,69,230,52,84,156,151,167,252,93,10,62,111,237,249,93,247,18,38,174,54,191,191,213,192,169,122\")"
            },
            {
              "js": "[83,215,44,9,97,153,86,37,47,39,20,243,104,204,12,36,233,225,8,225,96,146,196,191,230,164,116,103,149,187,191,48]",
              "sol": "abi.encode(\"83,215,44,9,97,153,86,37,47,39,20,243,104,204,12,36,233,225,8,225,96,146,196,191,230,164,116,103,149,187,191,48\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[2,83,12,88,120,106,108,3,228,146,233,37,201,97,173,35,112,72,175,161,9,105,123,225,37,207,26,227,104,110,212,129]",
              "sol": "abi.encode(\"2,83,12,88,120,106,108,3,228,146,233,37,201,97,173,35,112,72,175,161,9,105,123,225,37,207,26,227,104,110,212,129\")"
            },
            {
              "js": "[14,102,181,125,81,150,130,46,169,102,91,183,91,143,177,187,58,226,126,78,234,1,145,106,129,151,185,68,61,223,41,121]",
              "sol": "stringToBytes32(\"14,102,181,125,81,150,130,46,169,102,91,183,91,143,177,187,58,226,126,78,234,1,145,106,129,151,185,68,61,223,41,121\")"
            },
            {
              "js": "[50,66,180,164,65,186,170,241,11,142,215,205,244,187,66,250,77,32,22,179,84,199,20,124,229,168,134,25,192,115,71,48]",
              "sol": "abi.encode(\"50,66,180,164,65,186,170,241,11,142,215,205,244,187,66,250,77,32,22,179,84,199,20,124,229,168,134,25,192,115,71,48\")"
            },
            {
              "js": "\"olfiwg\"",
              "sol": "\"olfiwg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.438ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[145,10,249,3,41,241,125,100,113,84,224,99,101,143,35,71,188,50,3,43,130,26,174,201,102,33,149,207,26,130,250,138]",
              "sol": "abi.encode(\"145,10,249,3,41,241,125,100,113,84,224,99,101,143,35,71,188,50,3,43,130,26,174,201,102,33,149,207,26,130,250,138\")"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "[239,180,138,76,98,97,79,35,172,204,137,92,221,134,159,211,159,161,181,118,63,198,234,89,224,122,168,212,177,47,88,25]",
              "sol": "abi.encode(\"239,180,138,76,98,97,79,35,172,204,137,92,221,134,159,211,159,161,181,118,63,198,234,89,224,122,168,212,177,47,88,25\")"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.438ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[123,67,187,199,88,91,43,69,146,39,160,134,195,186,206,232,101,242,177,123,87,19,195,134,131,150,102,94,86,124,58,165]",
              "sol": "stringToBytes32(\"123,67,187,199,88,91,43,69,146,39,160,134,195,186,206,232,101,242,177,123,87,19,195,134,131,150,102,94,86,124,58,165\")"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "[100,207,169,71,238,176,11,213,6,81,110,207,214,214,17,147,16,174,182,247,121,249,222,132,250,0,183,33,167,196,157,2]",
              "sol": "stringToBytes32(\"100,207,169,71,238,176,11,213,6,81,110,207,214,214,17,147,16,174,182,247,121,249,222,132,250,0,183,33,167,196,157,2\")"
            },
            {
              "js": "[185,85,74,104,41,3,240,205,120,28,207,46,167,240,16,165,248,242,139,23,126,112,203,139,108,140,151,182,113,7,135,225]",
              "sol": "stringToBytes32(\"185,85,74,104,41,3,240,205,120,28,207,46,167,240,16,165,248,242,139,23,126,112,203,139,108,140,151,182,113,7,135,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.439ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[73,146,57,186,115,247,161,65,245,150,2,73,220,69,4,3,188,224,155,223,30,191,72,159,231,59,105,254,60,28,85,189]",
              "sol": "stringToBytes32(\"73,146,57,186,115,247,161,65,245,150,2,73,220,69,4,3,188,224,155,223,30,191,72,159,231,59,105,254,60,28,85,189\")"
            },
            {
              "js": "[53,146,237,20,5,10,170,184,15,252,66,71,91,61,128,3,191,47,200,110,230,9,178,222,224,225,72,189,197,45,52,183,40,232,211,189,65,174,56,83,98,116,164,125,56,61,40,188,58,254,48,232,142,7,118,116,171,149,10,36,43,92,254,203,133,14]",
              "sol": "abi.encode(\"53,146,237,20,5,10,170,184,15,252,66,71,91,61,128,3,191,47,200,110,230,9,178,222,224,225,72,189,197,45,52,183,40,232,211,189,65,174,56,83,98,116,164,125,56,61,40,188,58,254,48,232,142,7,118,116,171,149,10,36,43,92,254,203,133,14\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[231,209,175,133,105,20,92,75,60,106,19,140,14,168,228,28,106,220,91,4,176,222,181,207,33,70,180,218,142,7,110,75]",
              "sol": "stringToBytes32(\"231,209,175,133,105,20,92,75,60,106,19,140,14,168,228,28,106,220,91,4,176,222,181,207,33,70,180,218,142,7,110,75\")"
            },
            {
              "js": "[243,173,106,242,55,29,146,89,22,237,115,223,38,176,217,35,150,105,149,11,207,173,44,61,238,199,206,32,151,156,110,139,159,18,91,89,121,139,139,119,70,40,30,149,55,190,164,156,128,33,109,35,252,247,3,143,62,87,77,155,34,246,36,229,240]",
              "sol": "abi.encode(\"243,173,106,242,55,29,146,89,22,237,115,223,38,176,217,35,150,105,149,11,207,173,44,61,238,199,206,32,151,156,110,139,159,18,91,89,121,139,139,119,70,40,30,149,55,190,164,156,128,33,109,35,252,247,3,143,62,87,77,155,34,246,36,229,240\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.444ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.445ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[48,48]",
              "sol": "[uint(48),uint(48)]"
            },
            {
              "js": "[[18,17],[200001,257]]",
              "sol": "[[uint(18),uint(17)],[uint(200001),uint(257)]]"
            },
            {
              "js": "[25,20]",
              "sol": "[uint(25),uint(20)]"
            },
            {
              "js": "[6,7]",
              "sol": "[uint(6),uint(7)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.448ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.448ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[161,25,102,1024,56,17,128,19,1532892062,28]",
              "sol": "[uint(161),uint(25),uint(102),uint(1024),uint(56),uint(17),uint(128),uint(19),uint(1532892062),uint(28)]"
            },
            {
              "js": "{\"A\": {\"X\": 1025,\"Y\": 1},\"B\": {\"X\": [160,64],\"Y\": [60,19]},\"C\": {\"X\": 65,\"Y\": 32}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1025,1),Pairing.G2Point([uint(160),uint(64)],[uint(60),uint(19)]),Pairing.G1Point(65,32))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[26,20,65,59,88,162,33,19,24]",
              "sol": "[uint(26),uint(20),uint(65),uint(59),uint(88),uint(162),uint(33),uint(19),uint(24)]"
            },
            {
              "js": "{\"A\": {\"X\": 96,\"Y\": 28},\"B\": {\"X\": [1,31],\"Y\": [59,1024]},\"C\": {\"X\": 11,\"Y\": 58}}",
              "sol": "Verifier.Proof(Pairing.G1Point(96,28),Pairing.G2Point([uint(1),uint(31)],[uint(59),uint(1024)]),Pairing.G1Point(11,58))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.451ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.452ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.453ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "127",
                "sol": "127"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.454ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.455ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "accounts[0]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.456ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.456ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "103",
                "sol": "103"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.457ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.459ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "[221,184,246,231,135,83,66,233,136,145,80,190,253,236,81,224,122,156,4,71,75,67,191,201,69,226,127,31,86,139,140,174]",
              "sol": "abi.encode(\"221,184,246,231,135,83,66,233,136,145,80,190,253,236,81,224,122,156,4,71,75,67,191,201,69,226,127,31,86,139,140,174\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "[221,184,246,231,135,83,66,233,136,145,80,190,253,236,81,224,122,156,4,71,75,67,191,201,69,226,127,31,86,139,140,174]",
                "sol": "abi.encode(\"221,184,246,231,135,83,66,233,136,145,80,190,253,236,81,224,122,156,4,71,75,67,191,201,69,226,127,31,86,139,140,174\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.460ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.461ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[147,20,20,95]",
              "sol": "bytes4(\"147,20,20,95\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.463ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.463ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.464ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.464ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.465ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "[215,173,219,95,85,69,142,150,252,117,157,35,43,97,76,123,69,9,197,0,196,131,53,134,205,86,45,179,187,210,225,45]",
              "sol": "abi.encode(\"215,173,219,95,85,69,142,150,252,117,157,35,43,97,76,123,69,9,197,0,196,131,53,134,205,86,45,179,187,210,225,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "[220,6,139,89,181,196,33,12,172,1,168,121,162,250,218,179,141,87,219,29,52,157,68,115,208,143,121,71,98,203,64,67]",
              "sol": "abi.encode(\"220,6,139,89,181,196,33,12,172,1,168,121,162,250,218,179,141,87,219,29,52,157,68,115,208,143,121,71,98,203,64,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.466ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.468ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[97,86]",
              "sol": "[uint(97),uint(86)]"
            },
            {
              "js": "[[161,56],[63,2014223716]]",
              "sol": "[[uint(161),uint(56)],[uint(63),uint(2014223716)]]"
            },
            {
              "js": "[101,46]",
              "sol": "[uint(101),uint(46)]"
            },
            {
              "js": "[128,1]",
              "sol": "[uint(128),uint(1)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.472ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.473ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.473ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.474ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.474ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.478ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.480ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.480ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.481ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.482ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "200000",
                "sol": "200000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.484ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "87",
                "sol": "87"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T07:33:54.485ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.486ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T07:33:54.486ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}