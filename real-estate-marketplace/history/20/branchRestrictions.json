,{
  "2020-11-12T05:28:35.329ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:28:50.523ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:29:05.696ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:29:20.607ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:29:35.662ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:29:50.882ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.093ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [130,4,64,162,114,92,195,5,188,183,194,123,104,252,217,150,251,78,64,78,187,165,69,6,247,190,177,133,142,149,159,98],\"capacity\": 1025}",
              "sol": "Buffer.buffer(abi.encode(\"130,4,64,162,114,92,195,5,188,183,194,123,104,252,217,150,251,78,64,78,187,165,69,6,247,190,177,133,142,149,159,98\"),1025)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.095ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [235,81,116,58,27,54,254,112,40,239,10,133,34,144,246,133,5,29,182,251,180,150,141,49,220,200,188,25,50,30,167,180],\"capacity\": 254}",
              "sol": "Buffer.buffer(abi.encode(\"235,81,116,58,27,54,254,112,40,239,10,133,34,144,246,133,5,29,182,251,180,150,141,49,220,200,188,25,50,30,167,180\"),254)"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [253,157,51,215,218,112,214,3,243,173,118,24,50,167,154,160,66,241,236,80,161,247,17,163,5,105,233,229,157,242,74,102],\"capacity\": 255}",
              "sol": "Buffer.buffer(abi.encode(\"253,157,51,215,218,112,214,3,243,173,118,24,50,167,154,160,66,241,236,80,161,247,17,163,5,105,233,229,157,242,74,102\"),255)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.096ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [187,146,236,84,115,232,237,23,51,168,117,215,225,55,31,180,51,143,181,183,212,131,14,149,91,111,145,85,166,21,227,20],\"capacity\": 58}",
              "sol": "Buffer.buffer(abi.encode(\"187,146,236,84,115,232,237,23,51,168,117,215,225,55,31,180,51,143,181,183,212,131,14,149,91,111,145,85,166,21,227,20\"),58)"
            },
            {
              "js": "[55,132,136,15,130,170,174,75,184,110,208,18,120,123,87,66,69,150,186,20,65,87,60,149,175,220,18,170,125,208,156,139]",
              "sol": "abi.encode(\"55,132,136,15,130,170,174,75,184,110,208,18,120,123,87,66,69,150,186,20,65,87,60,149,175,220,18,170,125,208,156,139\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.096ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [90,7,200,249,33,229,205,239,237,151,48,251,65,34,116,184,184,143,204,81,198,100,111,179,64,181,20,48,228,38,133,208],\"capacity\": 127}",
              "sol": "Buffer.buffer(abi.encode(\"90,7,200,249,33,229,205,239,237,151,48,251,65,34,116,184,184,143,204,81,198,100,111,179,64,181,20,48,228,38,133,208\"),127)"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.097ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [50,204,103,113,56,71,81,206,85,190,142,207,15,127,40,211,116,138,87,87,252,158,238,143,209,243,153,250,158,124,224,246],\"capacity\": 21}",
              "sol": "Buffer.buffer(abi.encode(\"50,204,103,113,56,71,81,206,85,190,142,207,15,127,40,211,116,138,87,87,252,158,238,143,209,243,153,250,158,124,224,246\"),21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.097ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [39,220,46,162,100,7,169,82,97,51,14,25,40,121,201,255,127,184,89,66,151,20,117,75,84,14,175,248,189,238,40,29],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"39,220,46,162,100,7,169,82,97,51,14,25,40,121,201,255,127,184,89,66,151,20,117,75,84,14,175,248,189,238,40,29\"),98)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.098ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [50,56,215,169,236,102,159,85,104,140,61,63,134,156,20,7,22,207,218,51,6,36,223,178,97,55,235,20,224,83,43,180],\"capacity\": 28}",
              "sol": "Buffer.buffer(abi.encode(\"50,56,215,169,236,102,159,85,104,140,61,63,134,156,20,7,22,207,218,51,6,36,223,178,97,55,235,20,224,83,43,180\"),28)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.101ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.101ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.102ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.Y != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.Y!=0",
          "parameters": [
            {
              "js": "{\"X\": 96,\"Y\": 1}",
              "sol": "Pairing.G1Point(96,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.103ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 1532892064,\"Y\": 54}",
              "sol": "Pairing.G1Point(1532892064,54)"
            },
            {
              "js": "{\"X\": 10,\"Y\": 19}",
              "sol": "Pairing.G1Point(10,19)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.104ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [17,3],\"Y\": [59,69]}",
              "sol": "Pairing.G2Point([uint(17),uint(3)],[uint(59),uint(69)])"
            },
            {
              "js": "{\"X\": [28,49],\"Y\": [128,71]}",
              "sol": "Pairing.G2Point([uint(28),uint(49)],[uint(128),uint(71)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.105ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 254,\"Y\": 2014223716}",
              "sol": "Pairing.G1Point(254,2014223716)"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.105ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 30,\"Y\": 129},{\"X\": 97,\"Y\": 161}]",
              "sol": "[Pairing.G1Point(30,129),Pairing.G1Point(97,161)]"
            },
            {
              "js": "[{\"X\": [28,254],\"Y\": [200001,95]},{\"X\": [1024,162],\"Y\": [15,58]}]",
              "sol": "[Pairing.G2Point([uint(28),uint(254)],[uint(200001),uint(95)]),Pairing.G2Point([uint(1024),uint(162)],[uint(15),uint(58)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 199999,\"Y\": 25},{\"X\": 97,\"Y\": 256},{\"X\": 61,\"Y\": 9}]",
                "sol": "[Pairing.G1Point(160,95),Pairing.G1Point(10,61),Pairing.G1Point(32,88)]"
              },
              {
                "js": "[{\"X\": [28,254],\"Y\": [200001,95]},{\"X\": [1024,162],\"Y\": [15,58]}]",
                "sol": "[Pairing.G2Point([uint(28),uint(254)],[uint(200001),uint(95)]),Pairing.G2Point([uint(1024),uint(162)],[uint(15),uint(58)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.107ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 2014223714,\"Y\": 2014223714}",
              "sol": "Pairing.G1Point(2014223714,2014223714)"
            },
            {
              "js": "{\"X\": [1025,46],\"Y\": [103,87]}",
              "sol": "Pairing.G2Point([uint(1025),uint(46)],[uint(103),uint(87)])"
            },
            {
              "js": "{\"X\": 60,\"Y\": 101}",
              "sol": "Pairing.G1Point(60,101)"
            },
            {
              "js": "{\"X\": [9,58],\"Y\": [55,2014223716]}",
              "sol": "Pairing.G2Point([uint(9),uint(58)],[uint(55),uint(2014223716)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.108ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 97,\"Y\": 97}",
              "sol": "Pairing.G1Point(97,97)"
            },
            {
              "js": "{\"X\": [96,5],\"Y\": [25,7]}",
              "sol": "Pairing.G2Point([uint(96),uint(5)],[uint(25),uint(7)])"
            },
            {
              "js": "{\"X\": 2,\"Y\": 30}",
              "sol": "Pairing.G1Point(2,30)"
            },
            {
              "js": "{\"X\": [101,86],\"Y\": [98,103]}",
              "sol": "Pairing.G2Point([uint(101),uint(86)],[uint(98),uint(103)])"
            },
            {
              "js": "{\"X\": 59,\"Y\": 63}",
              "sol": "Pairing.G1Point(59,63)"
            },
            {
              "js": "{\"X\": [46,200001],\"Y\": [33,48]}",
              "sol": "Pairing.G2Point([uint(46),uint(200001)],[uint(33),uint(48)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.113ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.113ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.114ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.115ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.115ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.116ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.116ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.117ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.117ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.118ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.118ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.122ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [119,243,223,163,22,15,109,137,155,11,58,42,109,28,157,17,71,245,13,59,212,212,191,23,171,209,183,71,145,2,199,3],\"capacity\": 7}",
              "sol": "Buffer.buffer(abi.encode(\"119,243,223,163,22,15,109,137,155,11,58,42,109,28,157,17,71,245,13,59,212,212,191,23,171,209,183,71,145,2,199,3\"),7)"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.123ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [83,113,221,131,241,229,108,202,20,134,225,78,230,144,133,200,158,113,68,243,60,249,154,243,58,124,115,178,25,183,167,137],\"capacity\": 2}",
              "sol": "Buffer.buffer(abi.encode(\"83,113,221,131,241,229,108,202,20,134,225,78,230,144,133,200,158,113,68,243,60,249,154,243,58,124,115,178,25,183,167,137\"),2)"
            },
            {
              "js": "[29,199,190,252,165,26,126,253,123,251,50,28,36,44,52,46,165,244,162,119,116,12,246,3,75,150,244,50,107,212,19,177]",
              "sol": "abi.encode(\"29,199,190,252,165,26,126,253,123,251,50,28,36,44,52,46,165,244,162,119,116,12,246,3,75,150,244,50,107,212,19,177\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.124ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [2,80,164,215,77,1,207,7,206,162,215,204,159,220,222,98,185,183,73,76,94,68,15,61,135,139,232,19,114,221,62,112],\"capacity\": 200001}",
              "sol": "Buffer.buffer(abi.encode(\"2,80,164,215,77,1,207,7,206,162,215,204,159,220,222,98,185,183,73,76,94,68,15,61,135,139,232,19,114,221,62,112\"),200001)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.124ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [244,172,168,45,189,54,82,14,107,75,19,149,33,208,230,27,37,230,170,207,132,188,254,109,247,217,201,147,83,112,79,216],\"capacity\": 103}",
              "sol": "Buffer.buffer(abi.encode(\"244,172,168,45,189,54,82,14,107,75,19,149,33,208,230,27,37,230,170,207,132,188,254,109,247,217,201,147,83,112,79,216\"),103)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.125ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[32,124,191,139,122,55,55,226,151,251,57,180,221,222,141,229,39,102,180,13,128,240,59,204,121,194,70,198,252,199,163,21]",
              "sol": "stringToBytes32(\"32,124,191,139,122,55,55,226,151,251,57,180,221,222,141,229,39,102,180,13,128,240,59,204,121,194,70,198,252,199,163,21\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.126ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[112,26,156,99,25,1,159,104,102,49,178,192,53,108,152,102,94,192,242,61,164,70,59,132,194,94,65,34,252,199,174,194]",
              "sol": "stringToBytes32(\"112,26,156,99,25,1,159,104,102,49,178,192,53,108,152,102,94,192,242,61,164,70,59,132,194,94,65,34,252,199,174,194\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[223,93,24,126,191,161,232,69,28,53,157,57,20,143,211,17,134,69,251,221,85,224,254,234,43,84,46,229,182,89,7,145]",
              "sol": "abi.encode(\"223,93,24,126,191,161,232,69,28,53,157,57,20,143,211,17,134,69,251,221,85,224,254,234,43,84,46,229,182,89,7,145\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.161ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.162ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.162ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.162ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.163ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.163ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.163ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.164ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.164ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"gujk7hp\"",
              "sol": "\"gujk7hp\""
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.165ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.165ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"gujk7hp\"",
              "sol": "\"gujk7hp\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.165ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.166ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.170ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.172ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "[\"L\",\"Capstones\",\"gujk7hp\",\"P\",\"[\",\"Transaction successfully verified.\",\"Capstones\",\"lonmys\"]",
              "sol": "[string(\"L\"),string(\"Capstones\"),string(\"gujk7hp\"),string(\"P\"),string(\"[\"),string(\"Transaction successfully verified.\"),string(\"Capstones\"),string(\"lonmys\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.173ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"Capstones\",\"[\",\"ERC1820_ACCEPT_MAGIC\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"gujk7hp\",\"q7wtkxj\",\"q7wtkxj\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"Capstones\"),string(\"[\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"gujk7hp\"),string(\"q7wtkxj\"),string(\"q7wtkxj\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.174ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "\"lonmys\"",
              "sol": "\"lonmys\""
            },
            {
              "js": "[\"gujk7hp\",\"lonmys\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\",\"q7wtkxj\",\"lonmys\",\"0\",\"[\",\"\\x19Ethereum Signed Message:\\n32\",\"lonmys\"]",
              "sol": "[string(\"gujk7hp\"),string(\"lonmys\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"q7wtkxj\"),string(\"lonmys\"),string(\"0\"),string(\"[\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"lonmys\")]"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.174ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\")]"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.175ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "[\"[\"]",
              "sol": "[string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.175ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"zfjgew\"]",
              "sol": "[string(\"zfjgew\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.176ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.177ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.177ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"lonmys\",\"P\"]",
              "sol": "[string(\"lonmys\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.178ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.178ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"gujk7hp\",\"q7wtkxj\"]",
              "sol": "[string(\"gujk7hp\"),string(\"q7wtkxj\")]"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.179ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"0\",\"lonmys\"]",
              "sol": "[string(\"0\"),string(\"lonmys\")]"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.179ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"[\",\"gtqvi\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"[\"),string(\"gtqvi\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.180ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "\"zfjgew\"",
              "sol": "\"zfjgew\""
            },
            {
              "js": "[\"q7wtkxj\",\"P\",\"zfjgew\"]",
              "sol": "[string(\"q7wtkxj\"),string(\"P\"),string(\"zfjgew\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.180ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "\"gtqvi\"",
              "sol": "\"gtqvi\""
            },
            {
              "js": "[\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"P\"]",
              "sol": "[string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"P\")]"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.181ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"gtqvi\",\"P\",\"L\"]",
              "sol": "[string(\"gtqvi\"),string(\"P\"),string(\"L\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.182ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"gujk7hp\",\"Transaction successfully verified.\",\"gujk7hp\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"gujk7hp\"),string(\"Transaction successfully verified.\"),string(\"gujk7hp\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.182ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"gujk7hp\",\"zfjgew\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"gujk7hp\"),string(\"zfjgew\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.183ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"L\",\"gtqvi\",\"Transaction successfully verified.\",\"q7wtkxj\"]",
              "sol": "[string(\"L\"),string(\"gtqvi\"),string(\"Transaction successfully verified.\"),string(\"q7wtkxj\")]"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.183ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"gtqvi\",\"q7wtkxj\",\"Transaction successfully verified.\",\"P\"]",
              "sol": "[string(\"gtqvi\"),string(\"q7wtkxj\"),string(\"Transaction successfully verified.\"),string(\"P\")]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.184ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"vjaug9\",\"vjaug9\",\"Capstones\",\"0\",\"[\"]",
              "sol": "[string(\"vjaug9\"),string(\"vjaug9\"),string(\"Capstones\"),string(\"0\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.184ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"Transaction successfully verified.\",\"0\",\"\\x19Ethereum Signed Message:\\n32\",\"Transaction successfully verified.\",\"q8tirn\"]",
              "sol": "[string(\"Transaction successfully verified.\"),string(\"0\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"Transaction successfully verified.\"),string(\"q8tirn\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.185ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"lonmys\",\"P\",\"Transaction successfully verified.\",\"[\",\"q7wtkxj\"]",
              "sol": "[string(\"lonmys\"),string(\"P\"),string(\"Transaction successfully verified.\"),string(\"[\"),string(\"q7wtkxj\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.185ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"gujk7hp\",\"vjaug9\",\"ERC1820_ACCEPT_MAGIC\",\"vjaug9\",\"q8tirn\"]",
              "sol": "[string(\"gujk7hp\"),string(\"vjaug9\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"vjaug9\"),string(\"q8tirn\")]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.186ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[65,157,107,186,167,220,106,51,13,41,1,245,126,178,223,19,0,177,236,161,118,145,71,102,201,187,58,20,179,210,27,229],[120,1,162,153,190,104,170,74,181,253,152,31,183,59,129,171,112,244,204,79,135,113,86,125,231,222,193,169,142,118,229,78],[59,153,80,239,109,39,240,49,140,17,45,99,171,8,90,174,52,205,249,222,223,109,28,217,139,71,225,192,129,186,162,184],[58,59,64,22,124,54,38,212,150,76,204,45,72,161,182,75,41,198,202,91,130,208,8,220,18,253,153,144,239,24,34,170],[16,83,91,160,182,22,102,173,243,20,43,143,59,201,82,78,245,125,163,170,42,112,121,86,121,192,172,52,172,154,162,193],[168,253,124,168,48,39,241,210,122,139,90,185,32,242,137,177,209,245,20,226,178,73,50,230,82,128,93,151,81,82,17,89]]",
              "sol": "[bytes(abi.encode(\"65,157,107,186,167,220,106,51,13,41,1,245,126,178,223,19,0,177,236,161,118,145,71,102,201,187,58,20,179,210,27,229\")),bytes(abi.encode(\"120,1,162,153,190,104,170,74,181,253,152,31,183,59,129,171,112,244,204,79,135,113,86,125,231,222,193,169,142,118,229,78\")),bytes(abi.encode(\"59,153,80,239,109,39,240,49,140,17,45,99,171,8,90,174,52,205,249,222,223,109,28,217,139,71,225,192,129,186,162,184\")),bytes(abi.encode(\"58,59,64,22,124,54,38,212,150,76,204,45,72,161,182,75,41,198,202,91,130,208,8,220,18,253,153,144,239,24,34,170\")),bytes(abi.encode(\"16,83,91,160,182,22,102,173,243,20,43,143,59,201,82,78,245,125,163,170,42,112,121,86,121,192,172,52,172,154,162,193\")),bytes(abi.encode(\"168,253,124,168,48,39,241,210,122,139,90,185,32,242,137,177,209,245,20,226,178,73,50,230,82,128,93,151,81,82,17,89\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.187ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[65,59,168,117,224,83,214,176,172,234,74,154,98,224,131,193,61,30,35,153,201,226,216,236,28,185,191,45,231,198,9,158],[15,2,56,171,160,128,24,225,216,47,145,91,176,75,7,25,115,96,209,159,150,176,155,214,114,74,94,160,213,6,52,233],[129,66,59,169,251,110,155,189,97,62,47,42,103,50,6,20,166,103,86,141,87,134,183,246,16,155,200,156,90,159,96,15]]",
              "sol": "[bytes(abi.encode(\"65,59,168,117,224,83,214,176,172,234,74,154,98,224,131,193,61,30,35,153,201,226,216,236,28,185,191,45,231,198,9,158\")),bytes(abi.encode(\"15,2,56,171,160,128,24,225,216,47,145,91,176,75,7,25,115,96,209,159,150,176,155,214,114,74,94,160,213,6,52,233\")),bytes(abi.encode(\"129,66,59,169,251,110,155,189,97,62,47,42,103,50,6,20,166,103,86,141,87,134,183,246,16,155,200,156,90,159,96,15\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.187ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "\"vjaug9\"",
              "sol": "\"vjaug9\""
            },
            {
              "js": "[[220,134,243,131,186,178,167,122,58,152,221,4,19,56,214,105,132,17,40,117,127,203,242,194,56,24,120,92,110,21,32,60],[241,103,135,102,93,9,127,198,135,161,34,85,173,212,143,241,170,132,206,33,3,228,57,252,124,174,255,252,155,60,187,72],[130,50,27,159,12,185,209,163,219,137,11,96,224,151,101,63,24,43,30,191,210,104,110,95,79,235,62,149,67,198,58,46]]",
              "sol": "[bytes(abi.encode(\"220,134,243,131,186,178,167,122,58,152,221,4,19,56,214,105,132,17,40,117,127,203,242,194,56,24,120,92,110,21,32,60\")),bytes(abi.encode(\"241,103,135,102,93,9,127,198,135,161,34,85,173,212,143,241,170,132,206,33,3,228,57,252,124,174,255,252,155,60,187,72\")),bytes(abi.encode(\"130,50,27,159,12,185,209,163,219,137,11,96,224,151,101,63,24,43,30,191,210,104,110,95,79,235,62,149,67,198,58,46\"))]"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.188ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"q8tirn\"",
              "sol": "\"q8tirn\""
            },
            {
              "js": "[[237,192,40,212,252,206,141,139,158,234,139,18,127,241,20,71,32,179,248,55,166,162,129,162,103,20,14,151,157,204,81,121],[163,80,28,64,197,70,139,114,25,170,58,46,167,196,120,48,131,71,172,252,233,6,107,170,111,60,72,193,33,151,190,26],[125,18,252,239,25,64,255,152,136,192,91,191,12,9,211,147,51,87,251,211,196,217,38,53,87,237,109,187,178,66,215,73],[153,30,47,66,36,191,44,177,14,205,31,36,64,145,245,223,241,32,46,19,35,190,69,244,138,233,189,128,97,94,146,205],[183,135,40,150,58,154,205,145,220,117,85,213,103,197,198,126,219,22,58,233,17,157,184,44,161,27,210,192,237,185,26,139]]",
              "sol": "[bytes(abi.encode(\"237,192,40,212,252,206,141,139,158,234,139,18,127,241,20,71,32,179,248,55,166,162,129,162,103,20,14,151,157,204,81,121\")),bytes(abi.encode(\"163,80,28,64,197,70,139,114,25,170,58,46,167,196,120,48,131,71,172,252,233,6,107,170,111,60,72,193,33,151,190,26\")),bytes(abi.encode(\"125,18,252,239,25,64,255,152,136,192,91,191,12,9,211,147,51,87,251,211,196,217,38,53,87,237,109,187,178,66,215,73\")),bytes(abi.encode(\"153,30,47,66,36,191,44,177,14,205,31,36,64,145,245,223,241,32,46,19,35,190,69,244,138,233,189,128,97,94,146,205\")),bytes(abi.encode(\"183,135,40,150,58,154,205,145,220,117,85,213,103,197,198,126,219,22,58,233,17,157,184,44,161,27,210,192,237,185,26,139\"))]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.189ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[222,27,104,33,62,234,49,136,239,23,94,207,143,43,177,89,178,250,252,63,167,189,179,83,13,62,180,176,67,196,18,229]]",
              "sol": "[bytes(abi.encode(\"222,27,104,33,62,234,49,136,239,23,94,207,143,43,177,89,178,250,252,63,167,189,179,83,13,62,180,176,67,196,18,229\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.189ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[165,152,87,161,254,244,59,192,101,32,207,44,190,7,99,20,27,145,14,93,158,207,130,126,184,102,84,77,49,82,62,139]]",
              "sol": "[bytes(abi.encode(\"165,152,87,161,254,244,59,192,101,32,207,44,190,7,99,20,27,145,14,93,158,207,130,126,184,102,84,77,49,82,62,139\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.190ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "\"lonmys\"",
              "sol": "\"lonmys\""
            },
            {
              "js": "[[35,175,250,187,151,159,58,234,230,166,11,244,124,84,106,211,105,236,194,221,111,220,241,202,229,200,144,250,124,250,91,193]]",
              "sol": "[bytes(abi.encode(\"35,175,250,187,151,159,58,234,230,166,11,244,124,84,106,211,105,236,194,221,111,220,241,202,229,200,144,250,124,250,91,193\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.190ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[81,223,95,171,7,163,11,64,0,33,106,20,202,157,91,241,47,99,32,63,226,89,174,20,54,91,8,137,9,71,223,145]]",
              "sol": "[bytes(abi.encode(\"81,223,95,171,7,163,11,64,0,33,106,20,202,157,91,241,47,99,32,63,226,89,174,20,54,91,8,137,9,71,223,145\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.191ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[251,223,153,34,57,227,224,147,252,125,225,233,233,94,222,30,198,218,242,189,66,84,146,20,246,70,22,74,111,89,200,105],[82,29,110,237,244,254,39,29,84,42,233,172,136,154,55,143,114,106,108,202,17,83,253,162,84,108,187,122,35,185,209,48]]",
              "sol": "[bytes(abi.encode(\"251,223,153,34,57,227,224,147,252,125,225,233,233,94,222,30,198,218,242,189,66,84,146,20,246,70,22,74,111,89,200,105\")),bytes(abi.encode(\"82,29,110,237,244,254,39,29,84,42,233,172,136,154,55,143,114,106,108,202,17,83,253,162,84,108,187,122,35,185,209,48\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.191ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[187,71,190,219,201,174,235,203,5,171,251,108,110,218,215,244,247,50,123,38,168,229,14,34,248,68,126,111,75,218,56,166],[183,181,158,227,219,240,15,145,71,115,1,128,60,253,97,65,207,239,189,79,140,221,254,5,67,105,99,42,105,123,13,204]]",
              "sol": "[bytes(abi.encode(\"187,71,190,219,201,174,235,203,5,171,251,108,110,218,215,244,247,50,123,38,168,229,14,34,248,68,126,111,75,218,56,166\")),bytes(abi.encode(\"183,181,158,227,219,240,15,145,71,115,1,128,60,253,97,65,207,239,189,79,140,221,254,5,67,105,99,42,105,123,13,204\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.192ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[[140,72,24,222,104,189,117,158,36,52,159,71,177,240,24,43,71,199,229,8,202,100,166,190,224,217,91,233,9,223,92,208],[122,211,72,68,12,104,63,21,131,69,235,9,140,0,219,87,246,80,224,178,200,29,211,249,192,110,107,107,44,41,203,43]]",
              "sol": "[bytes(abi.encode(\"140,72,24,222,104,189,117,158,36,52,159,71,177,240,24,43,71,199,229,8,202,100,166,190,224,217,91,233,9,223,92,208\")),bytes(abi.encode(\"122,211,72,68,12,104,63,21,131,69,235,9,140,0,219,87,246,80,224,178,200,29,211,249,192,110,107,107,44,41,203,43\"))]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.196ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"zfjgew\"",
              "sol": "\"zfjgew\""
            },
            {
              "js": "[[189,212,119,35,254,71,19,233,150,201,125,53,113,81,145,139,49,116,204,187,115,207,72,208,31,140,239,215,73,78,222,64],[91,144,126,163,186,198,170,108,171,153,133,96,84,88,208,106,23,13,174,71,66,116,187,213,86,186,124,133,144,104,42,152]]",
              "sol": "[bytes(abi.encode(\"189,212,119,35,254,71,19,233,150,201,125,53,113,81,145,139,49,116,204,187,115,207,72,208,31,140,239,215,73,78,222,64\")),bytes(abi.encode(\"91,144,126,163,186,198,170,108,171,153,133,96,84,88,208,106,23,13,174,71,66,116,187,213,86,186,124,133,144,104,42,152\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.197ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"zfjgew\"",
              "sol": "\"zfjgew\""
            },
            {
              "js": "[[132,210,185,75,154,193,72,135,28,247,214,85,80,77,172,32,46,130,203,56,3,189,106,244,166,169,223,57,80,102,122,160],[44,184,110,246,64,24,165,99,78,80,106,41,183,32,216,162,97,182,9,254,80,199,179,120,33,13,245,114,202,221,162,229],[24,251,51,223,169,119,114,103,135,18,37,137,186,29,155,124,45,71,137,93,230,59,175,250,137,180,12,141,65,146,236,61]]",
              "sol": "[bytes(abi.encode(\"132,210,185,75,154,193,72,135,28,247,214,85,80,77,172,32,46,130,203,56,3,189,106,244,166,169,223,57,80,102,122,160\")),bytes(abi.encode(\"44,184,110,246,64,24,165,99,78,80,106,41,183,32,216,162,97,182,9,254,80,199,179,120,33,13,245,114,202,221,162,229\")),bytes(abi.encode(\"24,251,51,223,169,119,114,103,135,18,37,137,186,29,155,124,45,71,137,93,230,59,175,250,137,180,12,141,65,146,236,61\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.197ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[198,88,169,28,244,186,231,85,59,9,241,2,195,199,27,167,236,213,244,78,94,42,30,253,106,134,17,7,224,137,210,44],[82,213,186,97,37,137,9,150,41,136,73,79,14,146,141,161,226,153,34,0,186,195,102,82,248,107,55,250,19,16,140,86],[129,59,109,185,85,105,32,184,98,115,249,230,202,245,83,51,78,199,103,23,196,222,90,168,0,192,26,229,30,21,33,110]]",
              "sol": "[bytes(abi.encode(\"198,88,169,28,244,186,231,85,59,9,241,2,195,199,27,167,236,213,244,78,94,42,30,253,106,134,17,7,224,137,210,44\")),bytes(abi.encode(\"82,213,186,97,37,137,9,150,41,136,73,79,14,146,141,161,226,153,34,0,186,195,102,82,248,107,55,250,19,16,140,86\")),bytes(abi.encode(\"129,59,109,185,85,105,32,184,98,115,249,230,202,245,83,51,78,199,103,23,196,222,90,168,0,192,26,229,30,21,33,110\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.198ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"m5csgr\"",
              "sol": "\"m5csgr\""
            },
            {
              "js": "[[13,178,181,6,83,251,126,139,91,234,178,233,231,74,59,194,144,44,65,228,145,235,223,188,65,191,44,61,66,111,64,86],[81,20,99,175,14,127,207,211,82,46,91,130,106,160,47,251,145,125,43,208,68,179,197,166,141,180,131,226,17,72,227,236],[110,191,230,108,220,33,205,9,255,167,155,45,32,109,150,213,218,126,162,6,160,9,178,20,90,241,67,122,86,37,140,103]]",
              "sol": "[bytes(abi.encode(\"13,178,181,6,83,251,126,139,91,234,178,233,231,74,59,194,144,44,65,228,145,235,223,188,65,191,44,61,66,111,64,86\")),bytes(abi.encode(\"81,20,99,175,14,127,207,211,82,46,91,130,106,160,47,251,145,125,43,208,68,179,197,166,141,180,131,226,17,72,227,236\")),bytes(abi.encode(\"110,191,230,108,220,33,205,9,255,167,155,45,32,109,150,213,218,126,162,6,160,9,178,20,90,241,67,122,86,37,140,103\"))]"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.200ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"gujk7hp\"",
              "sol": "\"gujk7hp\""
            },
            {
              "js": "[[118,252,1,153,15,182,184,105,129,210,53,251,49,55,171,44,75,145,9,250,37,15,62,241,133,187,138,116,202,250,251,220],[40,64,253,154,3,115,203,166,245,131,47,124,226,240,89,246,111,149,11,192,201,245,137,60,7,164,151,124,67,83,82,160],[135,5,20,87,35,37,41,164,120,211,128,148,159,111,124,33,193,95,214,90,179,76,208,2,236,140,188,99,169,170,11,35]]",
              "sol": "[bytes(abi.encode(\"118,252,1,153,15,182,184,105,129,210,53,251,49,55,171,44,75,145,9,250,37,15,62,241,133,187,138,116,202,250,251,220\")),bytes(abi.encode(\"40,64,253,154,3,115,203,166,245,131,47,124,226,240,89,246,111,149,11,192,201,245,137,60,7,164,151,124,67,83,82,160\")),bytes(abi.encode(\"135,5,20,87,35,37,41,164,120,211,128,148,159,111,124,33,193,95,214,90,179,76,208,2,236,140,188,99,169,170,11,35\"))]"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.200ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"vjaug9\"",
              "sol": "\"vjaug9\""
            },
            {
              "js": "[[45,101,25,179,218,133,20,106,36,30,198,57,136,198,100,173,133,61,199,70,38,22,229,185,246,70,125,83,202,241,108,130],[47,171,36,90,87,137,106,115,162,62,179,200,203,94,73,4,121,135,135,70,121,187,198,23,45,249,231,182,181,219,107,123],[58,169,245,56,36,204,197,119,199,102,4,25,81,235,63,164,19,143,247,113,84,79,211,59,89,138,33,7,23,249,113,138],[110,171,80,144,24,251,72,101,168,99,190,124,3,217,46,85,150,66,28,174,99,251,154,85,89,90,41,138,122,141,157,29]]",
              "sol": "[bytes(abi.encode(\"45,101,25,179,218,133,20,106,36,30,198,57,136,198,100,173,133,61,199,70,38,22,229,185,246,70,125,83,202,241,108,130\")),bytes(abi.encode(\"47,171,36,90,87,137,106,115,162,62,179,200,203,94,73,4,121,135,135,70,121,187,198,23,45,249,231,182,181,219,107,123\")),bytes(abi.encode(\"58,169,245,56,36,204,197,119,199,102,4,25,81,235,63,164,19,143,247,113,84,79,211,59,89,138,33,7,23,249,113,138\")),bytes(abi.encode(\"110,171,80,144,24,251,72,101,168,99,190,124,3,217,46,85,150,66,28,174,99,251,154,85,89,90,41,138,122,141,157,29\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.201ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[75,3,45,99,208,193,185,126,243,252,209,163,68,181,92,106,95,189,56,25,186,81,105,25,247,157,138,66,34,81,81,200],[51,83,107,50,42,48,10,213,83,216,162,104,254,114,166,16,21,75,31,89,103,187,5,66,75,150,171,129,180,84,57,24],[225,195,112,120,175,192,158,31,241,140,84,230,78,130,245,207,94,207,103,64,160,185,77,202,87,206,252,186,246,0,2,248],[29,181,218,183,81,73,73,218,61,217,234,52,172,212,87,105,20,234,59,35,102,1,139,130,3,2,160,88,214,78,213,107]]",
              "sol": "[bytes(abi.encode(\"75,3,45,99,208,193,185,126,243,252,209,163,68,181,92,106,95,189,56,25,186,81,105,25,247,157,138,66,34,81,81,200\")),bytes(abi.encode(\"51,83,107,50,42,48,10,213,83,216,162,104,254,114,166,16,21,75,31,89,103,187,5,66,75,150,171,129,180,84,57,24\")),bytes(abi.encode(\"225,195,112,120,175,192,158,31,241,140,84,230,78,130,245,207,94,207,103,64,160,185,77,202,87,206,252,186,246,0,2,248\")),bytes(abi.encode(\"29,181,218,183,81,73,73,218,61,217,234,52,172,212,87,105,20,234,59,35,102,1,139,130,3,2,160,88,214,78,213,107\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.202ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[253,132,171,199,125,36,226,132,60,76,61,82,248,158,243,148,242,172,111,106,11,20,73,110,55,113,69,18,218,141,92,168],[79,50,130,78,88,182,219,96,177,28,43,30,177,3,248,182,149,215,5,225,49,54,40,87,132,34,62,132,243,179,247,124],[192,56,110,165,118,168,47,73,71,120,26,246,219,24,146,166,201,115,224,202,99,114,124,69,158,194,6,111,87,212,100,99],[242,133,133,183,99,57,33,54,63,55,110,114,34,199,54,67,30,72,147,198,85,150,101,214,164,133,205,237,5,114,248,169]]",
              "sol": "[bytes(abi.encode(\"253,132,171,199,125,36,226,132,60,76,61,82,248,158,243,148,242,172,111,106,11,20,73,110,55,113,69,18,218,141,92,168\")),bytes(abi.encode(\"79,50,130,78,88,182,219,96,177,28,43,30,177,3,248,182,149,215,5,225,49,54,40,87,132,34,62,132,243,179,247,124\")),bytes(abi.encode(\"192,56,110,165,118,168,47,73,71,120,26,246,219,24,146,166,201,115,224,202,99,114,124,69,158,194,6,111,87,212,100,99\")),bytes(abi.encode(\"242,133,133,183,99,57,33,54,63,55,110,114,34,199,54,67,30,72,147,198,85,150,101,214,164,133,205,237,5,114,248,169\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.203ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "[[211,104,80,120,31,101,44,124,223,43,143,131,76,202,44,232,235,44,94,17,100,182,87,109,41,159,125,241,85,162,177,106],[55,54,54,172,130,245,85,87,254,252,133,153,78,192,161,29,239,42,44,136,136,11,94,183,101,30,84,203,251,20,159,225],[27,1,183,30,78,226,83,216,227,157,141,26,218,13,110,170,108,69,143,224,92,162,132,113,176,220,36,56,161,243,68,37],[29,150,75,94,72,99,188,182,193,55,71,11,47,57,154,163,20,19,146,218,206,222,30,111,172,182,18,130,184,194,129,102]]",
              "sol": "[bytes(abi.encode(\"211,104,80,120,31,101,44,124,223,43,143,131,76,202,44,232,235,44,94,17,100,182,87,109,41,159,125,241,85,162,177,106\")),bytes(abi.encode(\"55,54,54,172,130,245,85,87,254,252,133,153,78,192,161,29,239,42,44,136,136,11,94,183,101,30,84,203,251,20,159,225\")),bytes(abi.encode(\"27,1,183,30,78,226,83,216,227,157,141,26,218,13,110,170,108,69,143,224,92,162,132,113,176,220,36,56,161,243,68,37\")),bytes(abi.encode(\"29,150,75,94,72,99,188,182,193,55,71,11,47,57,154,163,20,19,146,218,206,222,30,111,172,182,18,130,184,194,129,102\"))]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.204ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[228,40,53,221,123,144,171,166,142,109,6,254,97,1,185,18,44,255,251,40,28,142,210,208,70,104,167,87,207,4,187,187],[157,161,81,191,80,219,250,118,126,108,85,20,39,166,108,211,99,36,12,109,4,201,36,91,114,194,240,88,203,101,224,62],[196,42,6,120,83,245,182,163,215,18,102,107,24,67,174,177,22,176,82,18,220,162,20,32,121,127,162,191,2,237,184,238],[69,187,70,154,165,143,101,98,187,88,43,155,254,49,236,255,208,224,75,60,120,37,132,151,148,245,73,183,184,23,236,76],[229,9,86,8,105,241,153,172,116,13,66,18,217,69,13,103,62,229,14,156,237,92,8,154,202,158,202,153,229,48,210,203]]",
              "sol": "[bytes(abi.encode(\"228,40,53,221,123,144,171,166,142,109,6,254,97,1,185,18,44,255,251,40,28,142,210,208,70,104,167,87,207,4,187,187\")),bytes(abi.encode(\"157,161,81,191,80,219,250,118,126,108,85,20,39,166,108,211,99,36,12,109,4,201,36,91,114,194,240,88,203,101,224,62\")),bytes(abi.encode(\"196,42,6,120,83,245,182,163,215,18,102,107,24,67,174,177,22,176,82,18,220,162,20,32,121,127,162,191,2,237,184,238\")),bytes(abi.encode(\"69,187,70,154,165,143,101,98,187,88,43,155,254,49,236,255,208,224,75,60,120,37,132,151,148,245,73,183,184,23,236,76\")),bytes(abi.encode(\"229,9,86,8,105,241,153,172,116,13,66,18,217,69,13,103,62,229,14,156,237,92,8,154,202,158,202,153,229,48,210,203\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.205ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "\"vjaug9\"",
              "sol": "\"vjaug9\""
            },
            {
              "js": "[[104,229,132,204,231,155,168,22,106,52,20,14,175,18,50,36,235,15,232,27,162,115,193,208,130,36,81,25,32,136,241,42],[157,81,243,143,148,202,55,2,35,114,118,187,221,56,15,141,202,119,173,177,152,236,197,35,220,121,174,40,105,88,63,176],[95,3,10,102,125,8,75,169,18,69,145,59,212,227,55,158,110,25,198,119,182,112,157,72,208,34,97,202,255,37,38,217],[48,88,215,216,43,189,16,210,183,103,18,139,129,227,242,121,253,146,91,59,124,122,124,117,3,147,198,192,110,173,4,125],[225,168,168,214,166,235,148,105,251,249,26,84,239,79,75,162,174,67,89,208,239,112,225,190,181,94,176,1,22,182,205,53]]",
              "sol": "[bytes(abi.encode(\"104,229,132,204,231,155,168,22,106,52,20,14,175,18,50,36,235,15,232,27,162,115,193,208,130,36,81,25,32,136,241,42\")),bytes(abi.encode(\"157,81,243,143,148,202,55,2,35,114,118,187,221,56,15,141,202,119,173,177,152,236,197,35,220,121,174,40,105,88,63,176\")),bytes(abi.encode(\"95,3,10,102,125,8,75,169,18,69,145,59,212,227,55,158,110,25,198,119,182,112,157,72,208,34,97,202,255,37,38,217\")),bytes(abi.encode(\"48,88,215,216,43,189,16,210,183,103,18,139,129,227,242,121,253,146,91,59,124,122,124,117,3,147,198,192,110,173,4,125\")),bytes(abi.encode(\"225,168,168,214,166,235,148,105,251,249,26,84,239,79,75,162,174,67,89,208,239,112,225,190,181,94,176,1,22,182,205,53\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.207ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"gtqvi\"",
              "sol": "\"gtqvi\""
            },
            {
              "js": "[[94,165,105,127,6,99,5,90,160,22,251,32,207,108,172,67,120,17,248,245,96,16,95,47,122,174,55,6,177,92,123,245],[18,93,10,211,247,191,86,119,169,251,251,203,21,83,114,87,252,136,131,5,230,127,130,45,48,89,133,19,152,176,14,150],[106,199,127,218,105,125,145,56,224,42,243,113,176,225,226,244,211,160,166,146,182,37,54,127,173,76,9,1,81,191,42,237],[14,212,93,17,188,64,9,80,57,15,148,103,242,173,19,35,58,169,89,181,203,159,61,128,99,10,64,133,62,198,132,143],[218,73,142,19,126,171,77,7,246,111,242,232,54,41,216,173,208,84,6,117,148,55,254,232,196,133,105,235,39,52,88,81]]",
              "sol": "[bytes(abi.encode(\"94,165,105,127,6,99,5,90,160,22,251,32,207,108,172,67,120,17,248,245,96,16,95,47,122,174,55,6,177,92,123,245\")),bytes(abi.encode(\"18,93,10,211,247,191,86,119,169,251,251,203,21,83,114,87,252,136,131,5,230,127,130,45,48,89,133,19,152,176,14,150\")),bytes(abi.encode(\"106,199,127,218,105,125,145,56,224,42,243,113,176,225,226,244,211,160,166,146,182,37,54,127,173,76,9,1,81,191,42,237\")),bytes(abi.encode(\"14,212,93,17,188,64,9,80,57,15,148,103,242,173,19,35,58,169,89,181,203,159,61,128,99,10,64,133,62,198,132,143\")),bytes(abi.encode(\"218,73,142,19,126,171,77,7,246,111,242,232,54,41,216,173,208,84,6,117,148,55,254,232,196,133,105,235,39,52,88,81\"))]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.207ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"lonmys\"",
              "sol": "\"lonmys\""
            },
            {
              "js": "[[9,228,59,198,213,149,247,48,95,112,253,119,59,196,137,110,246,196,100,9,139,227,69,180,187,233,152,48,119,17,13,251],[133,140,214,205,142,17,229,209,222,250,134,25,61,244,6,9,174,54,30,138,127,99,38,144,79,160,48,75,151,210,204,233],[152,11,190,62,76,101,235,129,66,242,215,254,223,254,202,80,61,241,48,50,49,247,35,225,53,212,253,181,152,20,15,133],[9,2,117,38,208,186,239,123,163,104,29,21,52,165,17,104,82,209,135,108,137,236,54,44,210,190,123,214,101,86,221,104],[237,71,186,156,235,45,21,108,24,45,26,126,42,41,142,54,224,148,32,64,15,195,170,36,87,146,197,187,195,22,98,46]]",
              "sol": "[bytes(abi.encode(\"9,228,59,198,213,149,247,48,95,112,253,119,59,196,137,110,246,196,100,9,139,227,69,180,187,233,152,48,119,17,13,251\")),bytes(abi.encode(\"133,140,214,205,142,17,229,209,222,250,134,25,61,244,6,9,174,54,30,138,127,99,38,144,79,160,48,75,151,210,204,233\")),bytes(abi.encode(\"152,11,190,62,76,101,235,129,66,242,215,254,223,254,202,80,61,241,48,50,49,247,35,225,53,212,253,181,152,20,15,133\")),bytes(abi.encode(\"9,2,117,38,208,186,239,123,163,104,29,21,52,165,17,104,82,209,135,108,137,236,54,44,210,190,123,214,101,86,221,104\")),bytes(abi.encode(\"237,71,186,156,235,45,21,108,24,45,26,126,42,41,142,54,224,148,32,64,15,195,170,36,87,146,197,187,195,22,98,46\"))]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.208ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[72]",
              "sol": "bytes1(\"72\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.208ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.209ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.209ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.209ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.210ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.210ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"gtqvi\"",
              "sol": "\"gtqvi\""
            },
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.210ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.211ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.211ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.211ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.212ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "\"lonmys\"",
              "sol": "\"lonmys\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"zfjgew\"",
              "sol": "\"zfjgew\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.212ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"gujk7hp\"",
              "sol": "\"gujk7hp\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.213ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"lonmys\"",
              "sol": "\"lonmys\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.214ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"zfjgew\"",
              "sol": "\"zfjgew\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.215ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.216ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.217ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"0\",\"q7wtkxj\",\"gujk7hp\",\"gujk7hp\",\"L\",\"zfjgew\"]",
              "sol": "[string(\"0\"),string(\"q7wtkxj\"),string(\"gujk7hp\"),string(\"gujk7hp\"),string(\"L\"),string(\"zfjgew\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.217ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[14,231,107,86,152,215,190,112,188,85,94,245,217,240,241,63,96,166,61,146,177,248,251,184,247,114,252,156,221,140,145,104],[180,145,101,18,175,209,41,112,38,34,180,76,115,34,227,191,186,21,70,178,112,214,17,238,27,33,178,165,198,130,89,183],[68,124,13,108,57,252,75,33,132,210,171,90,242,194,224,146,31,109,150,135,158,227,76,88,99,67,105,233,22,239,184,17],[189,29,176,92,98,228,179,86,174,34,50,149,218,48,29,2,69,44,224,214,139,76,158,60,116,41,46,153,49,116,132,89],[36,21,199,247,170,153,124,218,235,241,205,50,114,77,48,177,214,172,207,25,1,204,74,221,199,168,126,151,250,8,212,150],[34,213,98,51,116,78,74,91,221,156,28,75,214,171,156,187,170,94,200,152,110,45,196,19,62,229,39,230,14,110,252,43],[135,86,89,132,116,193,204,161,105,156,56,93,28,225,109,59,65,172,70,203,57,181,145,101,87,187,157,63,168,6,13,71]]",
              "sol": "[bytes(abi.encode(\"14,231,107,86,152,215,190,112,188,85,94,245,217,240,241,63,96,166,61,146,177,248,251,184,247,114,252,156,221,140,145,104\")),bytes(abi.encode(\"180,145,101,18,175,209,41,112,38,34,180,76,115,34,227,191,186,21,70,178,112,214,17,238,27,33,178,165,198,130,89,183\")),bytes(abi.encode(\"68,124,13,108,57,252,75,33,132,210,171,90,242,194,224,146,31,109,150,135,158,227,76,88,99,67,105,233,22,239,184,17\")),bytes(abi.encode(\"189,29,176,92,98,228,179,86,174,34,50,149,218,48,29,2,69,44,224,214,139,76,158,60,116,41,46,153,49,116,132,89\")),bytes(abi.encode(\"36,21,199,247,170,153,124,218,235,241,205,50,114,77,48,177,214,172,207,25,1,204,74,221,199,168,126,151,250,8,212,150\")),bytes(abi.encode(\"34,213,98,51,116,78,74,91,221,156,28,75,214,171,156,187,170,94,200,152,110,45,196,19,62,229,39,230,14,110,252,43\")),bytes(abi.encode(\"135,86,89,132,116,193,204,161,105,156,56,93,28,225,109,59,65,172,70,203,57,181,145,101,87,187,157,63,168,6,13,71\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.218ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.218ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[160,97,219,158,108,157,152,208,103,35,176,179,214,115,171,234,80,80,157,224,93,44,228,131,213,237,83,70,233,62,13,104]",
              "sol": "stringToBytes32(\"160,97,219,158,108,157,152,208,103,35,176,179,214,115,171,234,80,80,157,224,93,44,228,131,213,237,83,70,233,62,13,104\")"
            },
            {
              "js": "[19,153,155,178,227,67,184,93,58,23,204,221,158,22,227,236,55,219,152,24,139,120,54,91,46,190,10,59,173,68,118,110]",
              "sol": "stringToBytes32(\"19,153,155,178,227,67,184,93,58,23,204,221,158,22,227,236,55,219,152,24,139,120,54,91,46,190,10,59,173,68,118,110\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.219ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[72,46,244,7,146,211,9,221,167,21,207,71,7,81,26,43,187,226,46,2,236,54,99,60,117,131,51,73,44,87,57,34]",
              "sol": "stringToBytes32(\"72,46,244,7,146,211,9,221,167,21,207,71,7,81,26,43,187,226,46,2,236,54,99,60,117,131,51,73,44,87,57,34\")"
            },
            {
              "js": "[69,13,173,174,18,150,125,188,7,119,116,156,136,155,211,186,146,221,41,61,243,145,247,74,151,27,193,109,177,17,0,4]",
              "sol": "abi.encode(\"69,13,173,174,18,150,125,188,7,119,116,156,136,155,211,186,146,221,41,61,243,145,247,74,151,27,193,109,177,17,0,4\")"
            },
            {
              "js": "[251,199,191,119,23,27,115,195,30,62,11,240,192,222,143,50,192,59,175,151,63,202,133,49,52,132,224,206,139,75,25,99]",
              "sol": "abi.encode(\"251,199,191,119,23,27,115,195,30,62,11,240,192,222,143,50,192,59,175,151,63,202,133,49,52,132,224,206,139,75,25,99\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.219ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[76,42,132,64,252,24,144,171,235,33,102,255,140,17,208,112,176,31,154,152,143,20,57,218,126,233,231,80,162,36,200,165]",
              "sol": "abi.encode(\"76,42,132,64,252,24,144,171,235,33,102,255,140,17,208,112,176,31,154,152,143,20,57,218,126,233,231,80,162,36,200,165\")"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[201,173,168,203,61,199,91,247,102,176,24,239,154,98,197,193,230,117,178,224,210,65,200,123,52,112,114,97,183,99,22,59]",
              "sol": "abi.encode(\"201,173,168,203,61,199,91,247,102,176,24,239,154,98,197,193,230,117,178,224,210,65,200,123,52,112,114,97,183,99,22,59\")"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.221ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[165,27,237,203,55,101,249,61,30,77,47,228,137,197,61,170,181,144,123,177,37,14,194,164,196,102,249,56,251,53,69,22]",
              "sol": "stringToBytes32(\"165,27,237,203,55,101,249,61,30,77,47,228,137,197,61,170,181,144,123,177,37,14,194,164,196,102,249,56,251,53,69,22\")"
            },
            {
              "js": "\"q7wtkxj\"",
              "sol": "\"q7wtkxj\""
            },
            {
              "js": "[113,49,104,113,221,152,2,114,49,142,49,136,245,204,225,17,84,144,127,17,130,21,72,192,227,81,125,204,149,209,54,86]",
              "sol": "abi.encode(\"113,49,104,113,221,152,2,114,49,142,49,136,245,204,225,17,84,144,127,17,130,21,72,192,227,81,125,204,149,209,54,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[219,29,100,210,159,147,43,185,220,180,143,176,50,223,210,150,117,16,39,253,241,17,42,164,50,55,242,71,191,167,108,55]",
              "sol": "stringToBytes32(\"219,29,100,210,159,147,43,185,220,180,143,176,50,223,210,150,117,16,39,253,241,17,42,164,50,55,242,71,191,167,108,55\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[119,126,141,190,36,164,72,92,162,57,163,37,159,175,140,92,11,25,95,13,68,142,26,58,124,16,5,64,6,77,97,209]",
              "sol": "abi.encode(\"119,126,141,190,36,164,72,92,162,57,163,37,159,175,140,92,11,25,95,13,68,142,26,58,124,16,5,64,6,77,97,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.221ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[156,220,53,113,118,207,254,38,193,189,167,153,134,1,140,29,241,97,146,62,188,221,157,15,180,213,9,19,46,167,55,178]",
              "sol": "stringToBytes32(\"156,220,53,113,118,207,254,38,193,189,167,153,134,1,140,29,241,97,146,62,188,221,157,15,180,213,9,19,46,167,55,178\")"
            },
            {
              "js": "[4,191,77,243,128,246,196,53,137,116,247,222,110,23,38,34,224,198,128,191,174,220,68,23,149,248,155,246,173,50,188,207]",
              "sol": "abi.encode(\"4,191,77,243,128,246,196,53,137,116,247,222,110,23,38,34,224,198,128,191,174,220,68,23,149,248,155,246,173,50,188,207\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[156,220,53,113,118,207,254,38,193,189,167,153,134,1,140,29,241,97,146,62,188,221,157,15,180,213,9,19,46,167,55,178]",
                "sol": "stringToBytes32(\"156,220,53,113,118,207,254,38,193,189,167,153,134,1,140,29,241,97,146,62,188,221,157,15,180,213,9,19,46,167,55,178\")"
              },
              {
                "js": "[7,178,45,103,211,145,207,186,58,125,217,173,118,89,65,106,106,184,72,183,232,46,171,105,106,77,203,85,157,40,23,162,142]",
                "sol": "bytes33(\"7,178,45,103,211,145,207,186,58,125,217,173,118,89,65,106,106,184,72,183,232,46,171,105,106,77,203,85,157,40,23,162,142\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.223ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[109,213,164,206,107,131,86,38,107,32,240,30,158,27,217,151,128,192,184,76,9,61,44,58,36,217,121,209,5,36,181,213]",
              "sol": "abi.encode(\"109,213,164,206,107,131,86,38,107,32,240,30,158,27,217,151,128,192,184,76,9,61,44,58,36,217,121,209,5,36,181,213\")"
            },
            {
              "js": "[236,168,132,19,110,205,59,77,123,118,216,158,130,179,73,251,75,95,174,200,108,212,22,205,156,181,217,165,254,144,48,62]",
              "sol": "stringToBytes32(\"236,168,132,19,110,205,59,77,123,118,216,158,130,179,73,251,75,95,174,200,108,212,22,205,156,181,217,165,254,144,48,62\")"
            },
            {
              "js": "[95,94,116,93,183,138,202,171,172,172,99,19,76,61,118,210,2,163,112,172,139,182,145,199,31,205,187,52,133,37,189,187]",
              "sol": "abi.encode(\"95,94,116,93,183,138,202,171,172,172,99,19,76,61,118,210,2,163,112,172,139,182,145,199,31,205,187,52,133,37,189,187\")"
            },
            {
              "js": "\"gtqvi\"",
              "sol": "\"gtqvi\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[43,126,137,7,186,161,43,246,51,150,27,157,195,37,75,10,137,217,53,29,42,94,66,131,208,207,168,97,118,166,183,106]",
              "sol": "abi.encode(\"43,126,137,7,186,161,43,246,51,150,27,157,195,37,75,10,137,217,53,29,42,94,66,131,208,207,168,97,118,166,183,106\")"
            },
            {
              "js": "[145,159,201,238,117,49,90,128,160,234,117,185,159,190,176,80,194,7,6,89,160,17,66,50,186,139,153,110,24,221,34,132]",
              "sol": "stringToBytes32(\"145,159,201,238,117,49,90,128,160,234,117,185,159,190,176,80,194,7,6,89,160,17,66,50,186,139,153,110,24,221,34,132\")"
            },
            {
              "js": "[225,181,197,151,188,149,74,8,46,42,161,20,72,234,167,184,159,4,236,144,10,198,92,236,62,4,33,237,163,68,152,161]",
              "sol": "abi.encode(\"225,181,197,151,188,149,74,8,46,42,161,20,72,234,167,184,159,4,236,144,10,198,92,236,62,4,33,237,163,68,152,161\")"
            },
            {
              "js": "\"ajf24p\"",
              "sol": "\"ajf24p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[224,55,111,199,203,217,178,120,180,166,106,199,113,187,201,250,91,181,51,229,170,73,207,110,124,164,42,88,124,141,126,216]",
              "sol": "abi.encode(\"224,55,111,199,203,217,178,120,180,166,106,199,113,187,201,250,91,181,51,229,170,73,207,110,124,164,42,88,124,141,126,216\")"
            },
            {
              "js": "[72,158,85,38,202,28,208,135,8,133,183,184,3,23,71,116,0,136,18,154,219,3,190,21,127,105,71,185,237,246,52,175]",
              "sol": "stringToBytes32(\"72,158,85,38,202,28,208,135,8,133,183,184,3,23,71,116,0,136,18,154,219,3,190,21,127,105,71,185,237,246,52,175\")"
            },
            {
              "js": "[222,235,73,254,246,114,152,242,109,198,107,160,54,86,219,251,207,224,206,208,211,59,199,22,86,175,92,31,147,46,253,207]",
              "sol": "abi.encode(\"222,235,73,254,246,114,152,242,109,198,107,160,54,86,219,251,207,224,206,208,211,59,199,22,86,175,92,31,147,46,253,207\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[208,43,164,99,61,30,47,229,56,68,77,21,223,183,74,162,111,31,233,28,207,74,74,224,134,222,105,171,155,71,156,138]",
              "sol": "abi.encode(\"208,43,164,99,61,30,47,229,56,68,77,21,223,183,74,162,111,31,233,28,207,74,74,224,134,222,105,171,155,71,156,138\")"
            },
            {
              "js": "[245,158,201,220,55,78,231,145,138,136,102,163,140,6,155,228,139,174,109,163,127,221,66,216,91,252,38,102,44,40,255,17]",
              "sol": "stringToBytes32(\"245,158,201,220,55,78,231,145,138,136,102,163,140,6,155,228,139,174,109,163,127,221,66,216,91,252,38,102,44,40,255,17\")"
            },
            {
              "js": "[224,229,54,171,130,130,79,171,34,180,170,169,106,2,11,42,250,161,185,74,155,4,122,88,22,54,127,160,127,126,25,196]",
              "sol": "abi.encode(\"224,229,54,171,130,130,79,171,34,180,170,169,106,2,11,42,250,161,185,74,155,4,122,88,22,54,127,160,127,126,25,196\")"
            },
            {
              "js": "\"bmkc0o\"",
              "sol": "\"bmkc0o\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[29,125,248,221,35,210,85,117,222,210,176,87,126,232,122,115,22,135,167,46,152,201,187,58,209,186,30,215,114,173,156,235]",
              "sol": "abi.encode(\"29,125,248,221,35,210,85,117,222,210,176,87,126,232,122,115,22,135,167,46,152,201,187,58,209,186,30,215,114,173,156,235\")"
            },
            {
              "js": "[110,14,76,37,41,62,140,35,167,40,112,58,81,122,62,86,121,184,244,255,174,241,167,45,231,143,248,171,109,212,59,140]",
              "sol": "stringToBytes32(\"110,14,76,37,41,62,140,35,167,40,112,58,81,122,62,86,121,184,244,255,174,241,167,45,231,143,248,171,109,212,59,140\")"
            },
            {
              "js": "[201,140,133,4,204,74,225,190,209,40,77,54,77,147,64,95,25,241,190,72,81,69,61,246,215,251,161,33,200,234,103,153]",
              "sol": "abi.encode(\"201,140,133,4,204,74,225,190,209,40,77,54,77,147,64,95,25,241,190,72,81,69,61,246,215,251,161,33,200,234,103,153\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[228,179,210,201,243,133,133,191,250,194,137,177,122,38,247,114,78,63,165,214,154,32,156,177,178,43,255,98,203,130,176,210]",
              "sol": "abi.encode(\"228,179,210,201,243,133,133,191,250,194,137,177,122,38,247,114,78,63,165,214,154,32,156,177,178,43,255,98,203,130,176,210\")"
            },
            {
              "js": "[104,176,62,58,59,169,163,99,227,109,69,107,168,179,84,82,191,172,99,112,239,110,250,162,244,56,108,18,239,208,223,214]",
              "sol": "stringToBytes32(\"104,176,62,58,59,169,163,99,227,109,69,107,168,179,84,82,191,172,99,112,239,110,250,162,244,56,108,18,239,208,223,214\")"
            },
            {
              "js": "[245,204,111,88,232,34,242,206,81,59,194,10,151,242,73,6,1,32,139,193,73,143,202,67,63,121,192,124,104,189,42,72]",
              "sol": "abi.encode(\"245,204,111,88,232,34,242,206,81,59,194,10,151,242,73,6,1,32,139,193,73,143,202,67,63,121,192,124,104,189,42,72\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[172,44,186,99,69,0,26,222,215,202,239,173,205,133,91,156,162,178,177,221,73,83,214,31,116,220,207,239,75,101,213,156]",
              "sol": "abi.encode(\"172,44,186,99,69,0,26,222,215,202,239,173,205,133,91,156,162,178,177,221,73,83,214,31,116,220,207,239,75,101,213,156\")"
            },
            {
              "js": "[193,79,108,172,14,120,20,249,231,64,226,36,25,244,5,207,187,136,31,33,92,171,208,186,121,102,234,6,183,37,119,72]",
              "sol": "stringToBytes32(\"193,79,108,172,14,120,20,249,231,64,226,36,25,244,5,207,187,136,31,33,92,171,208,186,121,102,234,6,183,37,119,72\")"
            },
            {
              "js": "[174,31,27,16,124,225,140,245,47,138,232,131,87,145,106,181,201,30,68,85,151,173,105,4,154,11,7,66,139,186,224,178]",
              "sol": "abi.encode(\"174,31,27,16,124,225,140,245,47,138,232,131,87,145,106,181,201,30,68,85,151,173,105,4,154,11,7,66,139,186,224,178\")"
            },
            {
              "js": "\"m5csgr\"",
              "sol": "\"m5csgr\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[59,221,52,177,57,126,30,27,60,41,30,150,179,106,54,94,155,110,40,139,109,245,158,220,246,47,67,69,250,117,8,2]",
              "sol": "abi.encode(\"59,221,52,177,57,126,30,27,60,41,30,150,179,106,54,94,155,110,40,139,109,245,158,220,246,47,67,69,250,117,8,2\")"
            },
            {
              "js": "[101,124,240,94,91,200,79,255,56,103,39,118,161,77,243,22,140,33,183,213,64,71,45,114,121,94,2,0,180,4,86,19]",
              "sol": "stringToBytes32(\"101,124,240,94,91,200,79,255,56,103,39,118,161,77,243,22,140,33,183,213,64,71,45,114,121,94,2,0,180,4,86,19\")"
            },
            {
              "js": "[109,209,158,37,13,249,63,221,150,146,81,115,173,190,81,239,5,76,190,123,196,189,34,161,171,113,221,210,138,217,177,220]",
              "sol": "abi.encode(\"109,209,158,37,13,249,63,221,150,146,81,115,173,190,81,239,5,76,190,123,196,189,34,161,171,113,221,210,138,217,177,220\")"
            },
            {
              "js": "\"ajf24p\"",
              "sol": "\"ajf24p\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.234ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[19,245,89,204,167,189,181,106,55,182,214,55,128,19,17,201,212,0,167,235,121,139,188,182,181,65,63,82,89,66,73,213]",
              "sol": "abi.encode(\"19,245,89,204,167,189,181,106,55,182,214,55,128,19,17,201,212,0,167,235,121,139,188,182,181,65,63,82,89,66,73,213\")"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[116,67,203,191,218,92,226,32,232,164,114,84,125,107,75,43,188,102,199,115,136,65,255,237,120,250,123,201,189,133,32,187]",
              "sol": "abi.encode(\"116,67,203,191,218,92,226,32,232,164,114,84,125,107,75,43,188,102,199,115,136,65,255,237,120,250,123,201,189,133,32,187\")"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.235ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[224,249,175,203,222,96,80,141,177,248,194,180,211,199,189,60,78,205,55,64,17,161,52,252,114,198,181,14,204,61,160,30]",
              "sol": "stringToBytes32(\"224,249,175,203,222,96,80,141,177,248,194,180,211,199,189,60,78,205,55,64,17,161,52,252,114,198,181,14,204,61,160,30\")"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "[178,69,42,220,95,157,243,149,48,189,37,119,183,28,105,130,31,195,243,203,214,101,42,96,58,12,133,31,88,18,80,47]",
              "sol": "stringToBytes32(\"178,69,42,220,95,157,243,149,48,189,37,119,183,28,105,130,31,195,243,203,214,101,42,96,58,12,133,31,88,18,80,47\")"
            },
            {
              "js": "[198,196,120,125,215,233,144,50,70,55,109,50,197,30,173,212,173,160,134,55,97,12,147,111,134,193,174,76,165,47,253,67]",
              "sol": "stringToBytes32(\"198,196,120,125,215,233,144,50,70,55,109,50,197,30,173,212,173,160,134,55,97,12,147,111,134,193,174,76,165,47,253,67\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.237ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[39,231,207,191,239,87,88,21,157,117,228,187,60,245,174,120,164,55,160,11,28,59,113,196,152,121,235,165,158,182,206,245]",
              "sol": "stringToBytes32(\"39,231,207,191,239,87,88,21,157,117,228,187,60,245,174,120,164,55,160,11,28,59,113,196,152,121,235,165,158,182,206,245\")"
            },
            {
              "js": "[85,190,94,175,133,251,207,128,75,4,225,7,127,159,147,98,30,50,73,7,192,223,8,52,28,119,125,46,193,113,67,61,125,35,215,166,140,205,22,90,27,250,144,126,104,63,112,41,137,145,251,18,171,181,135,175,159,74,119,184,147,64,166,77,203,68,171,206,179,238,54,167,134,237,25,13,153,74,175,60,81,156,152,107,40,239,115,102,175,123,218,225,97,69,144,95,243,212,50,183,194,91,209,37,226,222,27,163,55,42,189,224,124,48,211,192,100,83,116,12,66,97,191,229,119,91,32,163,218,171,185,31,142,88,76,221,8,164,49,83,152,118,197,102,179,20,70,132,147,7,210,203,37,246,90,155,146,84,37,79,208,125]",
              "sol": "abi.encode(\"85,190,94,175,133,251,207,128,75,4,225,7,127,159,147,98,30,50,73,7,192,223,8,52,28,119,125,46,193,113,67,61,125,35,215,166,140,205,22,90,27,250,144,126,104,63,112,41,137,145,251,18,171,181,135,175,159,74,119,184,147,64,166,77,203,68,171,206,179,238,54,167,134,237,25,13,153,74,175,60,81,156,152,107,40,239,115,102,175,123,218,225,97,69,144,95,243,212,50,183,194,91,209,37,226,222,27,163,55,42,189,224,124,48,211,192,100,83,116,12,66,97,191,229,119,91,32,163,218,171,185,31,142,88,76,221,8,164,49,83,152,118,197,102,179,20,70,132,147,7,210,203,37,246,90,155,146,84,37,79,208,125\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[239,220,41,223,196,130,50,232,228,184,177,45,96,207,134,172,161,205,58,167,124,166,16,214,216,231,194,220,53,183,142,133]",
              "sol": "stringToBytes32(\"239,220,41,223,196,130,50,232,228,184,177,45,96,207,134,172,161,205,58,167,124,166,16,214,216,231,194,220,53,183,142,133\")"
            },
            {
              "js": "[70,75,180,252,132,174,239,128,118,132,251,72,115,98,64,202,33,37,243,114,3,148,151,220,153,247,184,216,167,111,221,90,217,3,15,15,61,164,154,178,142,94,233,45,7,251,215,245,82,85,245,174,234,20,124,57,80,108,162,141,28,14,130,21,66]",
              "sol": "abi.encode(\"70,75,180,252,132,174,239,128,118,132,251,72,115,98,64,202,33,37,243,114,3,148,151,220,153,247,184,216,167,111,221,90,217,3,15,15,61,164,154,178,142,94,233,45,7,251,215,245,82,85,245,174,234,20,124,57,80,108,162,141,28,14,130,21,66\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.241ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.243ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[2014223714,97]",
              "sol": "[uint(2014223714),uint(97)]"
            },
            {
              "js": "[[46,7],[49,54]]",
              "sol": "[[uint(46),uint(7)],[uint(49),uint(54)]]"
            },
            {
              "js": "[1,2014223714]",
              "sol": "[uint(1),uint(2014223714)]"
            },
            {
              "js": "[1532892064,71]",
              "sol": "[uint(1532892064),uint(71)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.247ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.248ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[102,56,24,63,54,257,162,15,129]",
              "sol": "[uint(102),uint(56),uint(24),uint(63),uint(54),uint(257),uint(162),uint(15),uint(129)]"
            },
            {
              "js": "{\"A\": {\"X\": 1024,\"Y\": 33},\"B\": {\"X\": [46,1025],\"Y\": [101,160]},\"C\": {\"X\": 59,\"Y\": 70}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1024,33),Pairing.G2Point([uint(46),uint(1025)],[uint(101),uint(160)]),Pairing.G1Point(59,70))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[95,200000,26,1,61,46]",
              "sol": "[uint(95),uint(200000),uint(26),uint(1),uint(61),uint(46)]"
            },
            {
              "js": "{\"A\": {\"X\": 57,\"Y\": 61},\"B\": {\"X\": [22,58],\"Y\": [22,64]},\"C\": {\"X\": 96,\"Y\": 1}}",
              "sol": "Verifier.Proof(Pairing.G1Point(57,61),Pairing.G2Point([uint(22),uint(58)],[uint(22),uint(64)]),Pairing.G1Point(96,1))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.255ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.255ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.256ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.259ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.259ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "accounts[3]"
              },
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.260ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.260ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.262ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "22",
                "sol": "22"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.263ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "[48,133,142,186,247,103,128,144,240,224,202,241,14,238,236,80,64,142,138,124,248,62,89,81,189,171,218,222,71,233,187,48]",
              "sol": "abi.encode(\"48,133,142,186,247,103,128,144,240,224,202,241,14,238,236,80,64,142,138,124,248,62,89,81,189,171,218,222,71,233,187,48\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "[48,133,142,186,247,103,128,144,240,224,202,241,14,238,236,80,64,142,138,124,248,62,89,81,189,171,218,222,71,233,187,48]",
                "sol": "abi.encode(\"48,133,142,186,247,103,128,144,240,224,202,241,14,238,236,80,64,142,138,124,248,62,89,81,189,171,218,222,71,233,187,48\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.266ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.268ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[56,199,52,92]",
              "sol": "bytes4(\"56,199,52,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.270ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.271ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.271ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.272ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.274ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "[114,20,161,183,202,126,165,235,29,59,115,234,93,67,132,175,191,246,222,244,203,65,146,100,191,111,155,218,50,159,236,71]",
              "sol": "abi.encode(\"114,20,161,183,202,126,165,235,29,59,115,234,93,67,132,175,191,246,222,244,203,65,146,100,191,111,155,218,50,159,236,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "[73,20,40,89,19,132,11,118,236,172,249,240,112,194,84,208,112,179,243,56,74,174,161,97,157,168,19,43,68,227,230,92]",
              "sol": "abi.encode(\"73,20,40,89,19,132,11,118,236,172,249,240,112,194,84,208,112,179,243,56,74,174,161,97,157,168,19,43,68,227,230,92\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.276ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.280ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[15,69]",
              "sol": "[uint(15),uint(69)]"
            },
            {
              "js": "[[98,25],[95,1532892063]]",
              "sol": "[[uint(98),uint(25)],[uint(95),uint(1532892063)]]"
            },
            {
              "js": "[1023,22]",
              "sol": "[uint(1023),uint(22)]"
            },
            {
              "js": "[11,1]",
              "sol": "[uint(11),uint(1)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.283ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.285ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.286ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.286ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.287ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.290ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.292ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.293ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.293ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.294ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "103",
                "sol": "103"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.295ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T05:30:06.296ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.297ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T05:30:06.297ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}