,{
  "2020-11-10T16:26:47.900ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:27:02.855ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:27:17.836ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:27:33.054ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:27:48.206ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:03.358ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.613ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [157,165,91,109,100,220,73,251,206,18,175,133,20,204,43,12,108,251,149,59,79,157,152,214,138,36,237,216,224,189,35,44],\"capacity\": 24}",
              "sol": "Buffer.buffer(abi.encode(\"157,165,91,109,100,220,73,251,206,18,175,133,20,204,43,12,108,251,149,59,79,157,152,214,138,36,237,216,224,189,35,44\"),24)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.614ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [158,77,139,148,148,148,15,143,112,183,22,17,244,72,184,50,73,52,50,18,191,228,11,242,71,143,141,17,68,194,139,3],\"capacity\": 98}",
              "sol": "Buffer.buffer(abi.encode(\"158,77,139,148,148,148,15,143,112,183,22,17,244,72,184,50,73,52,50,18,191,228,11,242,71,143,141,17,68,194,139,3\"),98)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [75,66,83,247,161,179,178,188,152,131,9,163,225,175,62,7,140,218,88,173,112,82,90,146,28,126,80,239,250,112,5,214],\"capacity\": 56}",
              "sol": "Buffer.buffer(abi.encode(\"75,66,83,247,161,179,178,188,152,131,9,163,225,175,62,7,140,218,88,173,112,82,90,146,28,126,80,239,250,112,5,214\"),56)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.616ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [68,173,22,245,137,240,134,31,115,28,60,139,4,204,6,249,74,15,165,110,251,50,46,164,88,245,234,100,129,31,82,240],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"68,173,22,245,137,240,134,31,115,28,60,139,4,204,6,249,74,15,165,110,251,50,46,164,88,245,234,100,129,31,82,240\"),66)"
            },
            {
              "js": "[31,243,36,196,124,131,240,245,59,124,156,35,173,114,139,164,239,167,147,33,0,162,104,241,184,218,23,188,186,227,109,109]",
              "sol": "abi.encode(\"31,243,36,196,124,131,240,245,59,124,156,35,173,114,139,164,239,167,147,33,0,162,104,241,184,218,23,188,186,227,109,109\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.616ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [239,176,59,173,44,178,55,37,96,157,137,235,83,180,63,193,16,4,79,252,204,193,56,100,19,30,24,104,112,110,108,248],\"capacity\": 71}",
              "sol": "Buffer.buffer(abi.encode(\"239,176,59,173,44,178,55,37,96,157,137,235,83,180,63,193,16,4,79,252,204,193,56,100,19,30,24,104,112,110,108,248\"),71)"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.617ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [75,239,163,61,104,17,18,129,59,134,228,200,152,231,204,13,60,54,19,32,212,11,11,55,83,94,133,99,71,110,75,76],\"capacity\": 63}",
              "sol": "Buffer.buffer(abi.encode(\"75,239,163,61,104,17,18,129,59,134,228,200,152,231,204,13,60,54,19,32,212,11,11,55,83,94,133,99,71,110,75,76\"),63)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.617ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [173,247,87,128,235,201,255,53,46,54,153,58,189,103,105,183,159,160,198,116,37,118,250,237,109,195,75,167,33,195,163,38],\"capacity\": 96}",
              "sol": "Buffer.buffer(abi.encode(\"173,247,87,128,235,201,255,53,46,54,153,58,189,103,105,183,159,160,198,116,37,118,250,237,109,195,75,167,33,195,163,38\"),96)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.618ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [181,114,81,205,183,89,72,213,124,44,197,219,214,3,78,148,45,150,116,136,161,206,72,21,69,54,126,232,115,213,115,196],\"capacity\": 46}",
              "sol": "Buffer.buffer(abi.encode(\"181,114,81,205,183,89,72,213,124,44,197,219,214,3,78,148,45,150,116,136,161,206,72,21,69,54,126,232,115,213,115,196\"),46)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.623ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.623ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.624ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 33,\"Y\": 256}",
              "sol": "Pairing.G1Point(33,256)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.625ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 7,\"Y\": 33}",
              "sol": "Pairing.G1Point(7,33)"
            },
            {
              "js": "{\"X\": 102,\"Y\": 71}",
              "sol": "Pairing.G1Point(102,71)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.625ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [95,127],\"Y\": [98,1023]}",
              "sol": "Pairing.G2Point([uint(95),uint(127)],[uint(98),uint(1023)])"
            },
            {
              "js": "{\"X\": [58,56],\"Y\": [1532892062,257]}",
              "sol": "Pairing.G2Point([uint(58),uint(56)],[uint(1532892062),uint(257)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.626ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 86,\"Y\": 56}",
              "sol": "Pairing.G1Point(86,56)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.627ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 102,\"Y\": 4},{\"X\": 61,\"Y\": 98},{\"X\": 2014223715,\"Y\": 8}]",
              "sol": "[Pairing.G1Point(102,4),Pairing.G1Point(61,98),Pairing.G1Point(2014223715,8)]"
            },
            {
              "js": "[{\"X\": [200001,19],\"Y\": [69,28]},{\"X\": [88,20],\"Y\": [32,31]},{\"X\": [71,60],\"Y\": [102,71]}]",
              "sol": "[Pairing.G2Point([uint(200001),uint(19)],[uint(69),uint(28)]),Pairing.G2Point([uint(88),uint(20)],[uint(32),uint(31)]),Pairing.G2Point([uint(71),uint(60)],[uint(102),uint(71)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 6,\"Y\": 66},{\"X\": 4,\"Y\": 97},{\"X\": 47,\"Y\": 27},{\"X\": 162,\"Y\": 257}]",
                "sol": "[Pairing.G1Point(46,25),Pairing.G1Point(1532892063,1025),Pairing.G1Point(70,25),Pairing.G1Point(31,57)]"
              },
              {
                "js": "[{\"X\": [200001,19],\"Y\": [69,28]},{\"X\": [88,20],\"Y\": [32,31]},{\"X\": [71,60],\"Y\": [102,71]}]",
                "sol": "[Pairing.G2Point([uint(200001),uint(19)],[uint(69),uint(28)]),Pairing.G2Point([uint(88),uint(20)],[uint(32),uint(31)]),Pairing.G2Point([uint(71),uint(60)],[uint(102),uint(71)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.631ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 2014223715,\"Y\": 48}",
              "sol": "Pairing.G1Point(2014223715,48)"
            },
            {
              "js": "{\"X\": [18,0],\"Y\": [65,65]}",
              "sol": "Pairing.G2Point([uint(18),uint(0)],[uint(65),uint(65)])"
            },
            {
              "js": "{\"X\": 46,\"Y\": 57}",
              "sol": "Pairing.G1Point(46,57)"
            },
            {
              "js": "{\"X\": [5,65],\"Y\": [63,127]}",
              "sol": "Pairing.G2Point([uint(5),uint(65)],[uint(63),uint(127)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.632ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 2014223714,\"Y\": 45}",
              "sol": "Pairing.G1Point(2014223714,45)"
            },
            {
              "js": "{\"X\": [45,2014223714],\"Y\": [27,2]}",
              "sol": "Pairing.G2Point([uint(45),uint(2014223714)],[uint(27),uint(2)])"
            },
            {
              "js": "{\"X\": 16,\"Y\": 5}",
              "sol": "Pairing.G1Point(16,5)"
            },
            {
              "js": "{\"X\": [15,103],\"Y\": [60,28]}",
              "sol": "Pairing.G2Point([uint(15),uint(103)],[uint(60),uint(28)])"
            },
            {
              "js": "{\"X\": 2014223716,\"Y\": 2014223715}",
              "sol": "Pairing.G1Point(2014223716,2014223715)"
            },
            {
              "js": "{\"X\": [98,20],\"Y\": [97,8]}",
              "sol": "Pairing.G2Point([uint(98),uint(20)],[uint(97),uint(8)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.636ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.637ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.637ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.639ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.639ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.640ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.641ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.641ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.642ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.643ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.643ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.648ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [153,104,193,76,193,23,192,35,213,23,234,68,235,221,87,254,92,75,219,251,25,65,36,49,136,119,164,203,109,187,248,66],\"capacity\": 17}",
              "sol": "Buffer.buffer(abi.encode(\"153,104,193,76,193,23,192,35,213,23,234,68,235,221,87,254,92,75,219,251,25,65,36,49,136,119,164,203,109,187,248,66\"),17)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.648ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [1,145,125,70,164,112,143,125,129,218,248,101,62,55,121,56,143,167,82,135,114,148,91,132,116,159,159,33,241,223,204,89],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"1,145,125,70,164,112,143,125,129,218,248,101,62,55,121,56,143,167,82,135,114,148,91,132,116,159,159,33,241,223,204,89\"),55)"
            },
            {
              "js": "[218,71,182,72,147,176,232,165,224,72,1,16,35,40,14,8,100,163,176,61,171,254,16,105,74,83,74,188,154,135,133,45]",
              "sol": "abi.encode(\"218,71,182,72,147,176,232,165,224,72,1,16,35,40,14,8,100,163,176,61,171,254,16,105,74,83,74,188,154,135,133,45\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.649ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [50,200,36,105,75,127,39,120,27,246,123,4,222,39,251,140,49,54,117,101,167,141,8,68,45,212,219,86,241,177,229,120],\"capacity\": 129}",
              "sol": "Buffer.buffer(abi.encode(\"50,200,36,105,75,127,39,120,27,246,123,4,222,39,251,140,49,54,117,101,167,141,8,68,45,212,219,86,241,177,229,120\"),129)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.649ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [73,6,60,198,14,7,119,97,95,176,2,71,9,115,28,215,105,159,21,174,33,67,214,70,58,34,175,204,15,187,162,190],\"capacity\": 70}",
              "sol": "Buffer.buffer(abi.encode(\"73,6,60,198,14,7,119,97,95,176,2,71,9,115,28,215,105,159,21,174,33,67,214,70,58,34,175,204,15,187,162,190\"),70)"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.650ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[12,230,169,216,209,90,8,143,53,67,58,118,71,210,196,56,62,121,3,239,170,125,73,178,70,31,237,230,119,252,225,103]",
              "sol": "stringToBytes32(\"12,230,169,216,209,90,8,143,53,67,58,118,71,210,196,56,62,121,3,239,170,125,73,178,70,31,237,230,119,252,225,103\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.651ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[229,208,187,195,91,104,137,4,90,47,97,122,153,1,208,239,12,79,10,241,71,7,69,149,21,168,148,32,30,205,113,55]",
              "sol": "stringToBytes32(\"229,208,187,195,91,104,137,4,90,47,97,122,153,1,208,239,12,79,10,241,71,7,69,149,21,168,148,32,30,205,113,55\")"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[30,187,103,206,250,21,15,8,29,226,139,201,6,231,47,215,205,140,133,176,230,36,231,107,8,162,211,215,28,199,136,234]",
              "sol": "abi.encode(\"30,187,103,206,250,21,15,8,29,226,139,201,6,231,47,215,205,140,133,176,230,36,231,107,8,162,211,215,28,199,136,234\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.692ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.692ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.693ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.693ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.694ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.694ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.694ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.695ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.695ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.696ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.696ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.697ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.697ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"jxewn6\"",
              "sol": "\"jxewn6\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.698ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"vxuvzt\"",
              "sol": "\"vxuvzt\""
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.698ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"P\",\"\\x19Ethereum Signed Message:\\n32\",\"L\",\"Capstones\"]",
              "sol": "[string(\"P\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"L\"),string(\"Capstones\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.699ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"06ews\",\"jgoxap\",\"vxuvzt\",\"pgu89g\",\"L\",\"ERC1820_ACCEPT_MAGIC\",\"P\"]",
              "sol": "[string(\"06ews\"),string(\"jgoxap\"),string(\"vxuvzt\"),string(\"pgu89g\"),string(\"L\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.699ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"[\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"[\")]"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.700ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Capstones\",\"vxuvzt\",\"jxewn6\",\"0\",\"0\",\"06ews\",\"0d7ifd\",\"vxuvzt\",\"vxuvzt\"]",
              "sol": "[string(\"Capstones\"),string(\"vxuvzt\"),string(\"jxewn6\"),string(\"0\"),string(\"0\"),string(\"06ews\"),string(\"0d7ifd\"),string(\"vxuvzt\"),string(\"vxuvzt\")]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.700ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "[\"jgoxap\"]",
              "sol": "[string(\"jgoxap\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.701ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "[\"jgoxap\"]",
              "sol": "[string(\"jgoxap\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.701ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"P\"]",
              "sol": "[string(\"P\")]"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.702ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"jxewn6\"]",
              "sol": "[string(\"jxewn6\")]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.702ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"7maqb\"",
              "sol": "\"7maqb\""
            },
            {
              "js": "[\"jgoxap\",\"06ews\"]",
              "sol": "[string(\"jgoxap\"),string(\"06ews\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.703ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"7maqb\",\"jgoxap\"]",
              "sol": "[string(\"7maqb\"),string(\"jgoxap\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.703ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"vxuvzt\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"vxuvzt\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.704ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[\"0d7ifd\",\"vxuvzt\"]",
              "sol": "[string(\"0d7ifd\"),string(\"vxuvzt\")]"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.704ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"jxewn6\",\"7maqb\",\"jxewn6\"]",
              "sol": "[string(\"jxewn6\"),string(\"7maqb\"),string(\"jxewn6\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.705ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"vxuvzt\"",
              "sol": "\"vxuvzt\""
            },
            {
              "js": "[\"0d7ifd\",\"0\",\"P\"]",
              "sol": "[string(\"0d7ifd\"),string(\"0\"),string(\"P\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.705ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.707ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"0\",\"0d7ifd\",\"Capstones\"]",
              "sol": "[string(\"0\"),string(\"0d7ifd\"),string(\"Capstones\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.708ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "[\"[\",\"P\",\"7maqb\",\"mkj5vr\"]",
              "sol": "[string(\"[\"),string(\"P\"),string(\"7maqb\"),string(\"mkj5vr\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.708ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"jgoxap\",\"mkj5vr\",\"0d7ifd\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"]",
              "sol": "[string(\"jgoxap\"),string(\"mkj5vr\"),string(\"0d7ifd\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.709ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"zjjeks\"",
              "sol": "\"zjjeks\""
            },
            {
              "js": "[\"vxuvzt\",\"pgu89g\",\"mkj5vr\",\"jxewn6\"]",
              "sol": "[string(\"vxuvzt\"),string(\"pgu89g\"),string(\"mkj5vr\"),string(\"jxewn6\")]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.709ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"thmghb\"",
              "sol": "\"thmghb\""
            },
            {
              "js": "[\"Capstones\",\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\",\"ke0g1b\"]",
              "sol": "[string(\"Capstones\"),string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\"),string(\"ke0g1b\")]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.710ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[\"06ews\",\"Capstones\",\"vxuvzt\",\"9s902\",\"[\"]",
              "sol": "[string(\"06ews\"),string(\"Capstones\"),string(\"vxuvzt\"),string(\"9s902\"),string(\"[\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.710ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "\"zjjeks\"",
              "sol": "\"zjjeks\""
            },
            {
              "js": "[\"0\",\"xud68y\",\"vxuvzt\",\"mkj5vr\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"0\"),string(\"xud68y\"),string(\"vxuvzt\"),string(\"mkj5vr\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.711ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "\"jgoxap\"",
              "sol": "\"jgoxap\""
            },
            {
              "js": "[\"9s902\",\"vxuvzt\",\"7maqb\",\"jxewn6\",\"thmghb\"]",
              "sol": "[string(\"9s902\"),string(\"vxuvzt\"),string(\"7maqb\"),string(\"jxewn6\"),string(\"thmghb\")]"
            },
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.711ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"thmghb\"",
              "sol": "\"thmghb\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\",\"xud68y\",\"pgu89g\",\"jxewn6\",\"jxewn6\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"xud68y\"),string(\"pgu89g\"),string(\"jxewn6\"),string(\"jxewn6\")]"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.712ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[171,129,233,23,235,87,144,237,38,14,172,26,92,159,246,44,203,10,42,17,93,0,2,16,180,42,71,185,157,61,160,214],[61,156,8,152,91,31,215,39,206,114,37,40,0,160,104,54,4,147,60,39,221,102,181,74,16,133,32,13,26,63,24,201],[236,214,88,80,56,42,42,54,197,125,25,179,144,6,102,56,186,140,0,1,225,16,241,161,174,255,204,78,150,33,196,130],[184,233,244,162,37,225,255,92,47,188,231,245,0,39,148,220,3,246,118,133,57,218,111,113,131,199,168,43,124,129,12,0],[75,121,15,87,51,194,33,121,218,122,213,245,179,165,74,128,64,86,235,129,41,94,109,212,165,163,200,24,122,181,141,44],[228,246,79,62,165,31,32,52,26,132,60,218,40,252,186,201,180,214,94,51,170,117,80,243,144,100,77,59,173,78,67,187],[124,78,83,124,157,69,223,216,9,12,77,30,160,46,230,169,56,53,34,179,0,148,208,14,212,136,237,132,115,38,159,93]]",
              "sol": "[bytes(abi.encode(\"171,129,233,23,235,87,144,237,38,14,172,26,92,159,246,44,203,10,42,17,93,0,2,16,180,42,71,185,157,61,160,214\")),bytes(abi.encode(\"61,156,8,152,91,31,215,39,206,114,37,40,0,160,104,54,4,147,60,39,221,102,181,74,16,133,32,13,26,63,24,201\")),bytes(abi.encode(\"236,214,88,80,56,42,42,54,197,125,25,179,144,6,102,56,186,140,0,1,225,16,241,161,174,255,204,78,150,33,196,130\")),bytes(abi.encode(\"184,233,244,162,37,225,255,92,47,188,231,245,0,39,148,220,3,246,118,133,57,218,111,113,131,199,168,43,124,129,12,0\")),bytes(abi.encode(\"75,121,15,87,51,194,33,121,218,122,213,245,179,165,74,128,64,86,235,129,41,94,109,212,165,163,200,24,122,181,141,44\")),bytes(abi.encode(\"228,246,79,62,165,31,32,52,26,132,60,218,40,252,186,201,180,214,94,51,170,117,80,243,144,100,77,59,173,78,67,187\")),bytes(abi.encode(\"124,78,83,124,157,69,223,216,9,12,77,30,160,46,230,169,56,53,34,179,0,148,208,14,212,136,237,132,115,38,159,93\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.712ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "[[74,52,214,244,9,178,147,44,176,47,216,102,220,57,70,38,187,177,174,73,85,218,79,239,22,167,90,146,56,76,73,151],[216,49,84,177,214,237,26,8,156,186,20,111,93,53,22,111,24,53,117,25,178,157,72,175,94,167,235,121,69,193,87,144]]",
              "sol": "[bytes(abi.encode(\"74,52,214,244,9,178,147,44,176,47,216,102,220,57,70,38,187,177,174,73,85,218,79,239,22,167,90,146,56,76,73,151\")),bytes(abi.encode(\"216,49,84,177,214,237,26,8,156,186,20,111,93,53,22,111,24,53,117,25,178,157,72,175,94,167,235,121,69,193,87,144\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.713ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[[30,90,219,84,164,86,223,245,205,56,221,128,109,194,244,88,209,165,44,48,222,63,151,120,36,232,120,177,35,233,19,0],[170,114,4,119,191,231,75,94,39,53,154,133,195,70,237,27,208,226,43,184,148,187,141,43,56,19,169,27,51,156,164,213],[127,67,144,11,54,190,221,106,106,17,216,237,199,141,40,45,131,1,238,148,43,93,153,190,94,40,229,18,69,136,62,56],[223,110,2,138,223,14,241,151,40,166,36,155,125,80,202,172,203,168,151,216,253,21,150,4,21,254,18,234,192,217,29,234],[254,155,66,234,32,107,143,67,189,191,255,81,75,210,230,79,43,140,73,47,74,189,202,149,211,143,9,82,54,31,219,196]]",
              "sol": "[bytes(abi.encode(\"30,90,219,84,164,86,223,245,205,56,221,128,109,194,244,88,209,165,44,48,222,63,151,120,36,232,120,177,35,233,19,0\")),bytes(abi.encode(\"170,114,4,119,191,231,75,94,39,53,154,133,195,70,237,27,208,226,43,184,148,187,141,43,56,19,169,27,51,156,164,213\")),bytes(abi.encode(\"127,67,144,11,54,190,221,106,106,17,216,237,199,141,40,45,131,1,238,148,43,93,153,190,94,40,229,18,69,136,62,56\")),bytes(abi.encode(\"223,110,2,138,223,14,241,151,40,166,36,155,125,80,202,172,203,168,151,216,253,21,150,4,21,254,18,234,192,217,29,234\")),bytes(abi.encode(\"254,155,66,234,32,107,143,67,189,191,255,81,75,210,230,79,43,140,73,47,74,189,202,149,211,143,9,82,54,31,219,196\"))]"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.713ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[25,66,74,6,60,106,49,236,59,190,98,17,82,236,15,131,52,243,27,254,56,53,113,71,165,80,156,141,205,126,97,142]]",
              "sol": "[bytes(abi.encode(\"25,66,74,6,60,106,49,236,59,190,98,17,82,236,15,131,52,243,27,254,56,53,113,71,165,80,156,141,205,126,97,142\"))]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.714ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[131,217,81,136,201,219,45,225,39,32,11,194,176,107,95,242,165,7,4,255,122,132,142,42,222,182,22,128,52,46,187,191]]",
              "sol": "[bytes(abi.encode(\"131,217,81,136,201,219,45,225,39,32,11,194,176,107,95,242,165,7,4,255,122,132,142,42,222,182,22,128,52,46,187,191\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.715ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[188,161,108,63,82,240,126,45,151,20,168,118,31,91,222,34,16,203,74,193,112,195,7,208,116,205,220,15,237,137,189,42]]",
              "sol": "[bytes(abi.encode(\"188,161,108,63,82,240,126,45,151,20,168,118,31,91,222,34,16,203,74,193,112,195,7,208,116,205,220,15,237,137,189,42\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.716ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "\"jgoxap\"",
              "sol": "\"jgoxap\""
            },
            {
              "js": "[[147,43,29,193,104,184,131,254,50,197,83,189,58,191,89,15,56,223,143,141,66,125,212,89,25,105,27,30,103,128,64,47]]",
              "sol": "[bytes(abi.encode(\"147,43,29,193,104,184,131,254,50,197,83,189,58,191,89,15,56,223,143,141,66,125,212,89,25,105,27,30,103,128,64,47\"))]"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.716ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"mkj5vr\"",
              "sol": "\"mkj5vr\""
            },
            {
              "js": "[[186,76,111,130,153,162,72,6,160,83,141,170,147,161,206,163,41,126,32,145,61,36,249,86,87,26,87,62,138,165,14,132]]",
              "sol": "[bytes(abi.encode(\"186,76,111,130,153,162,72,6,160,83,141,170,147,161,206,163,41,126,32,145,61,36,249,86,87,26,87,62,138,165,14,132\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.717ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"ke0g1b\"",
              "sol": "\"ke0g1b\""
            },
            {
              "js": "[[90,85,31,127,146,52,253,79,211,208,134,117,51,23,144,164,20,222,195,93,54,254,103,174,191,208,217,65,66,176,214,74],[87,128,128,175,115,147,149,199,253,75,55,155,2,36,31,125,244,164,184,17,221,194,226,47,101,3,153,243,138,68,185,198]]",
              "sol": "[bytes(abi.encode(\"90,85,31,127,146,52,253,79,211,208,134,117,51,23,144,164,20,222,195,93,54,254,103,174,191,208,217,65,66,176,214,74\")),bytes(abi.encode(\"87,128,128,175,115,147,149,199,253,75,55,155,2,36,31,125,244,164,184,17,221,194,226,47,101,3,153,243,138,68,185,198\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.717ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"xud68y\"",
              "sol": "\"xud68y\""
            },
            {
              "js": "[[180,66,3,151,137,240,254,30,50,212,154,73,54,243,246,141,83,230,231,143,75,110,133,37,86,29,178,132,227,249,199,86],[149,21,47,234,163,48,43,119,100,106,162,150,195,185,39,11,160,50,116,56,56,13,230,4,243,14,113,44,221,110,69,231]]",
              "sol": "[bytes(abi.encode(\"180,66,3,151,137,240,254,30,50,212,154,73,54,243,246,141,83,230,231,143,75,110,133,37,86,29,178,132,227,249,199,86\")),bytes(abi.encode(\"149,21,47,234,163,48,43,119,100,106,162,150,195,185,39,11,160,50,116,56,56,13,230,4,243,14,113,44,221,110,69,231\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.718ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"ke0g1b\"",
              "sol": "\"ke0g1b\""
            },
            {
              "js": "[[86,94,138,240,197,77,237,214,198,139,176,207,105,103,237,27,104,76,180,87,72,101,212,137,49,70,185,230,197,1,253,215],[91,220,202,83,74,174,35,159,202,35,182,42,166,195,188,25,243,159,89,125,203,161,29,81,233,61,25,43,139,41,42,3]]",
              "sol": "[bytes(abi.encode(\"86,94,138,240,197,77,237,214,198,139,176,207,105,103,237,27,104,76,180,87,72,101,212,137,49,70,185,230,197,1,253,215\")),bytes(abi.encode(\"91,220,202,83,74,174,35,159,202,35,182,42,166,195,188,25,243,159,89,125,203,161,29,81,233,61,25,43,139,41,42,3\"))]"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.719ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"mkj5vr\"",
              "sol": "\"mkj5vr\""
            },
            {
              "js": "[[214,24,8,81,88,32,235,115,69,58,46,75,17,185,184,86,191,231,30,70,91,227,173,81,80,149,2,174,248,204,207,19],[17,195,14,49,102,148,143,199,1,93,109,127,167,245,229,127,186,78,16,233,167,51,17,17,135,197,13,9,218,201,84,127]]",
              "sol": "[bytes(abi.encode(\"214,24,8,81,88,32,235,115,69,58,46,75,17,185,184,86,191,231,30,70,91,227,173,81,80,149,2,174,248,204,207,19\")),bytes(abi.encode(\"17,195,14,49,102,148,143,199,1,93,109,127,167,245,229,127,186,78,16,233,167,51,17,17,135,197,13,9,218,201,84,127\"))]"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.720ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[[33,30,172,76,239,160,183,68,216,69,198,149,244,16,218,86,195,6,58,229,223,211,86,136,242,176,235,97,104,192,164,152],[219,155,197,29,117,72,125,244,250,246,149,30,110,123,24,8,89,245,222,82,88,141,225,63,45,225,130,141,227,105,202,140],[227,214,16,105,206,197,109,80,138,220,5,146,145,222,247,150,140,141,73,197,146,144,7,221,130,87,6,217,177,222,199,92]]",
              "sol": "[bytes(abi.encode(\"33,30,172,76,239,160,183,68,216,69,198,149,244,16,218,86,195,6,58,229,223,211,86,136,242,176,235,97,104,192,164,152\")),bytes(abi.encode(\"219,155,197,29,117,72,125,244,250,246,149,30,110,123,24,8,89,245,222,82,88,141,225,63,45,225,130,141,227,105,202,140\")),bytes(abi.encode(\"227,214,16,105,206,197,109,80,138,220,5,146,145,222,247,150,140,141,73,197,146,144,7,221,130,87,6,217,177,222,199,92\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.720ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[169,194,190,177,63,166,42,103,34,23,129,135,35,47,96,77,240,93,251,63,150,206,240,197,247,52,61,92,10,232,16,25],[118,182,46,51,184,176,169,226,74,165,233,130,92,243,95,12,150,225,41,17,68,99,202,222,113,220,209,212,63,30,148,204],[193,87,65,41,245,183,92,173,204,217,99,96,117,210,129,183,199,24,78,246,137,66,70,152,234,188,223,2,156,124,113,86]]",
              "sol": "[bytes(abi.encode(\"169,194,190,177,63,166,42,103,34,23,129,135,35,47,96,77,240,93,251,63,150,206,240,197,247,52,61,92,10,232,16,25\")),bytes(abi.encode(\"118,182,46,51,184,176,169,226,74,165,233,130,92,243,95,12,150,225,41,17,68,99,202,222,113,220,209,212,63,30,148,204\")),bytes(abi.encode(\"193,87,65,41,245,183,92,173,204,217,99,96,117,210,129,183,199,24,78,246,137,66,70,152,234,188,223,2,156,124,113,86\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.721ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "\"vxuvzt\"",
              "sol": "\"vxuvzt\""
            },
            {
              "js": "[[50,242,54,234,213,88,232,37,155,152,102,44,49,105,87,164,60,112,253,38,126,45,83,241,10,199,50,169,74,153,219,61],[48,196,62,126,2,223,156,48,50,164,1,27,168,94,130,138,121,137,142,38,210,46,17,95,195,185,60,58,188,203,254,189],[243,176,190,170,237,140,98,103,134,113,90,20,26,202,151,158,147,61,180,228,15,137,53,252,84,120,210,242,14,212,101,243]]",
              "sol": "[bytes(abi.encode(\"50,242,54,234,213,88,232,37,155,152,102,44,49,105,87,164,60,112,253,38,126,45,83,241,10,199,50,169,74,153,219,61\")),bytes(abi.encode(\"48,196,62,126,2,223,156,48,50,164,1,27,168,94,130,138,121,137,142,38,210,46,17,95,195,185,60,58,188,203,254,189\")),bytes(abi.encode(\"243,176,190,170,237,140,98,103,134,113,90,20,26,202,151,158,147,61,180,228,15,137,53,252,84,120,210,242,14,212,101,243\"))]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.721ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "[[235,36,249,39,49,196,117,244,127,101,98,11,236,20,205,238,113,76,79,41,69,51,0,160,63,105,202,151,41,43,78,28],[192,220,108,177,109,255,81,254,150,2,1,67,4,77,39,235,5,198,194,203,205,46,250,122,94,131,0,110,241,69,92,236],[237,86,152,121,43,188,157,84,26,97,238,182,82,151,185,149,33,54,227,9,131,101,70,95,128,152,133,48,250,33,233,205]]",
              "sol": "[bytes(abi.encode(\"235,36,249,39,49,196,117,244,127,101,98,11,236,20,205,238,113,76,79,41,69,51,0,160,63,105,202,151,41,43,78,28\")),bytes(abi.encode(\"192,220,108,177,109,255,81,254,150,2,1,67,4,77,39,235,5,198,194,203,205,46,250,122,94,131,0,110,241,69,92,236\")),bytes(abi.encode(\"237,86,152,121,43,188,157,84,26,97,238,182,82,151,185,149,33,54,227,9,131,101,70,95,128,152,133,48,250,33,233,205\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.722ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[181,142,167,64,226,199,135,252,253,191,232,146,104,107,45,163,136,28,3,170,62,35,137,172,216,34,38,29,121,236,116,194],[205,99,192,155,32,115,182,15,104,163,43,144,116,201,97,180,108,51,137,139,170,191,99,149,114,251,242,63,51,220,20,47],[177,79,171,122,54,158,242,51,62,107,0,126,81,35,189,250,43,220,136,89,210,242,52,70,236,31,245,125,116,24,248,94],[9,143,108,222,185,239,12,110,247,229,175,53,37,107,158,39,254,69,216,165,202,40,182,17,127,199,205,121,44,219,165,59]]",
              "sol": "[bytes(abi.encode(\"181,142,167,64,226,199,135,252,253,191,232,146,104,107,45,163,136,28,3,170,62,35,137,172,216,34,38,29,121,236,116,194\")),bytes(abi.encode(\"205,99,192,155,32,115,182,15,104,163,43,144,116,201,97,180,108,51,137,139,170,191,99,149,114,251,242,63,51,220,20,47\")),bytes(abi.encode(\"177,79,171,122,54,158,242,51,62,107,0,126,81,35,189,250,43,220,136,89,210,242,52,70,236,31,245,125,116,24,248,94\")),bytes(abi.encode(\"9,143,108,222,185,239,12,110,247,229,175,53,37,107,158,39,254,69,216,165,202,40,182,17,127,199,205,121,44,219,165,59\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.723ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "\"0d7ifd\"",
              "sol": "\"0d7ifd\""
            },
            {
              "js": "[[229,210,38,190,215,191,28,93,50,105,215,156,191,169,70,120,218,95,203,17,208,101,75,108,99,225,189,194,19,197,213,132],[95,253,26,108,27,214,148,6,248,80,86,107,192,74,70,144,140,44,74,7,199,190,94,175,70,74,176,164,131,220,133,50],[219,168,192,192,185,245,153,129,130,144,240,174,158,107,70,9,97,35,170,87,66,70,139,99,96,31,39,135,82,102,182,28],[80,66,155,71,38,220,177,110,149,41,186,85,2,196,221,228,65,51,10,244,86,75,222,99,224,95,223,82,46,56,38,74]]",
              "sol": "[bytes(abi.encode(\"229,210,38,190,215,191,28,93,50,105,215,156,191,169,70,120,218,95,203,17,208,101,75,108,99,225,189,194,19,197,213,132\")),bytes(abi.encode(\"95,253,26,108,27,214,148,6,248,80,86,107,192,74,70,144,140,44,74,7,199,190,94,175,70,74,176,164,131,220,133,50\")),bytes(abi.encode(\"219,168,192,192,185,245,153,129,130,144,240,174,158,107,70,9,97,35,170,87,66,70,139,99,96,31,39,135,82,102,182,28\")),bytes(abi.encode(\"80,66,155,71,38,220,177,110,149,41,186,85,2,196,221,228,65,51,10,244,86,75,222,99,224,95,223,82,46,56,38,74\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.724ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"thmghb\"",
              "sol": "\"thmghb\""
            },
            {
              "js": "[[100,108,79,9,160,225,244,48,148,76,54,146,247,56,170,98,232,141,184,177,158,9,216,194,6,100,91,94,215,74,222,150],[189,200,242,104,173,185,143,228,119,88,153,44,18,0,237,151,71,134,233,178,45,96,179,197,195,90,38,224,36,153,171,144],[164,80,132,152,228,250,89,179,161,161,108,67,133,240,118,47,170,119,14,188,246,133,156,166,228,222,237,183,134,237,135,59],[219,230,25,101,151,93,10,152,98,207,228,32,121,37,47,193,222,132,24,247,120,61,23,114,171,102,20,113,213,56,193,86]]",
              "sol": "[bytes(abi.encode(\"100,108,79,9,160,225,244,48,148,76,54,146,247,56,170,98,232,141,184,177,158,9,216,194,6,100,91,94,215,74,222,150\")),bytes(abi.encode(\"189,200,242,104,173,185,143,228,119,88,153,44,18,0,237,151,71,134,233,178,45,96,179,197,195,90,38,224,36,153,171,144\")),bytes(abi.encode(\"164,80,132,152,228,250,89,179,161,161,108,67,133,240,118,47,170,119,14,188,246,133,156,166,228,222,237,183,134,237,135,59\")),bytes(abi.encode(\"219,230,25,101,151,93,10,152,98,207,228,32,121,37,47,193,222,132,24,247,120,61,23,114,171,102,20,113,213,56,193,86\"))]"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.726ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"zjjeks\"",
              "sol": "\"zjjeks\""
            },
            {
              "js": "[[193,165,42,176,50,219,224,208,223,111,243,125,101,62,97,136,156,208,91,23,241,1,178,207,21,32,105,187,13,154,41,173],[4,74,86,204,31,157,201,21,78,12,120,230,212,178,217,220,9,233,175,41,245,111,130,253,22,135,252,102,133,184,120,204],[59,249,99,186,124,4,220,29,217,75,162,88,62,75,87,149,232,200,14,178,189,145,233,13,217,31,60,67,95,235,78,46],[53,162,232,160,92,9,177,102,44,136,104,238,124,32,232,0,95,127,108,251,85,97,120,58,87,195,10,93,152,247,141,129]]",
              "sol": "[bytes(abi.encode(\"193,165,42,176,50,219,224,208,223,111,243,125,101,62,97,136,156,208,91,23,241,1,178,207,21,32,105,187,13,154,41,173\")),bytes(abi.encode(\"4,74,86,204,31,157,201,21,78,12,120,230,212,178,217,220,9,233,175,41,245,111,130,253,22,135,252,102,133,184,120,204\")),bytes(abi.encode(\"59,249,99,186,124,4,220,29,217,75,162,88,62,75,87,149,232,200,14,178,189,145,233,13,217,31,60,67,95,235,78,46\")),bytes(abi.encode(\"53,162,232,160,92,9,177,102,44,136,104,238,124,32,232,0,95,127,108,251,85,97,120,58,87,195,10,93,152,247,141,129\"))]"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.726ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"4d7kgg\"",
              "sol": "\"4d7kgg\""
            },
            {
              "js": "[[230,93,89,173,31,58,92,3,242,12,6,172,241,179,242,72,13,22,23,204,173,206,193,10,246,149,159,135,111,89,225,57],[27,19,198,232,216,165,45,130,205,176,132,255,210,146,4,26,143,98,65,165,202,15,45,166,132,92,213,15,67,5,232,106],[102,234,144,34,117,236,73,102,205,47,20,152,198,218,201,87,92,188,161,200,114,156,60,237,142,90,33,208,143,84,185,36],[13,175,136,21,149,85,72,240,9,32,22,94,172,16,108,70,221,232,124,189,131,207,114,157,148,239,45,183,173,5,183,172],[110,193,131,54,221,180,231,159,79,250,14,229,206,240,173,106,85,231,211,243,51,146,98,7,194,30,238,68,249,148,26,172]]",
              "sol": "[bytes(abi.encode(\"230,93,89,173,31,58,92,3,242,12,6,172,241,179,242,72,13,22,23,204,173,206,193,10,246,149,159,135,111,89,225,57\")),bytes(abi.encode(\"27,19,198,232,216,165,45,130,205,176,132,255,210,146,4,26,143,98,65,165,202,15,45,166,132,92,213,15,67,5,232,106\")),bytes(abi.encode(\"102,234,144,34,117,236,73,102,205,47,20,152,198,218,201,87,92,188,161,200,114,156,60,237,142,90,33,208,143,84,185,36\")),bytes(abi.encode(\"13,175,136,21,149,85,72,240,9,32,22,94,172,16,108,70,221,232,124,189,131,207,114,157,148,239,45,183,173,5,183,172\")),bytes(abi.encode(\"110,193,131,54,221,180,231,159,79,250,14,229,206,240,173,106,85,231,211,243,51,146,98,7,194,30,238,68,249,148,26,172\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.727ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "[[117,44,18,136,162,232,45,36,102,18,149,67,248,41,56,211,73,216,168,169,46,97,164,180,15,132,108,133,195,157,132,212],[57,238,223,109,120,93,115,88,101,198,41,168,179,139,236,208,218,148,33,36,216,132,141,39,13,64,243,35,110,20,59,128],[56,159,146,186,182,138,41,203,159,193,134,206,129,176,222,73,154,172,241,49,148,100,159,125,52,227,135,214,77,200,228,135],[83,12,25,100,64,242,23,169,26,90,89,66,85,213,205,26,80,46,212,138,83,5,117,79,9,31,11,144,23,22,34,159],[92,146,254,87,163,80,95,16,248,92,162,117,241,68,202,59,254,173,206,194,148,235,25,234,205,196,220,228,85,168,207,195]]",
              "sol": "[bytes(abi.encode(\"117,44,18,136,162,232,45,36,102,18,149,67,248,41,56,211,73,216,168,169,46,97,164,180,15,132,108,133,195,157,132,212\")),bytes(abi.encode(\"57,238,223,109,120,93,115,88,101,198,41,168,179,139,236,208,218,148,33,36,216,132,141,39,13,64,243,35,110,20,59,128\")),bytes(abi.encode(\"56,159,146,186,182,138,41,203,159,193,134,206,129,176,222,73,154,172,241,49,148,100,159,125,52,227,135,214,77,200,228,135\")),bytes(abi.encode(\"83,12,25,100,64,242,23,169,26,90,89,66,85,213,205,26,80,46,212,138,83,5,117,79,9,31,11,144,23,22,34,159\")),bytes(abi.encode(\"92,146,254,87,163,80,95,16,248,92,162,117,241,68,202,59,254,173,206,194,148,235,25,234,205,196,220,228,85,168,207,195\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.728ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "[[188,214,126,69,214,29,128,168,219,117,106,100,172,65,110,107,2,82,212,112,107,36,251,87,85,110,229,232,156,232,103,54],[254,221,207,0,87,252,180,80,155,98,17,234,221,84,147,203,138,17,165,93,8,198,211,228,160,84,159,147,62,39,188,53],[115,67,186,177,144,128,193,220,7,38,190,34,67,78,109,113,78,55,41,249,125,145,145,235,114,111,167,18,182,107,4,0],[81,100,224,162,149,108,76,191,108,83,152,21,67,176,21,43,111,129,228,67,231,33,168,164,75,222,113,159,117,227,149,233],[6,205,244,208,211,65,249,72,234,36,73,37,201,52,184,77,22,30,100,4,191,239,135,138,1,76,75,13,140,228,27,137]]",
              "sol": "[bytes(abi.encode(\"188,214,126,69,214,29,128,168,219,117,106,100,172,65,110,107,2,82,212,112,107,36,251,87,85,110,229,232,156,232,103,54\")),bytes(abi.encode(\"254,221,207,0,87,252,180,80,155,98,17,234,221,84,147,203,138,17,165,93,8,198,211,228,160,84,159,147,62,39,188,53\")),bytes(abi.encode(\"115,67,186,177,144,128,193,220,7,38,190,34,67,78,109,113,78,55,41,249,125,145,145,235,114,111,167,18,182,107,4,0\")),bytes(abi.encode(\"81,100,224,162,149,108,76,191,108,83,152,21,67,176,21,43,111,129,228,67,231,33,168,164,75,222,113,159,117,227,149,233\")),bytes(abi.encode(\"6,205,244,208,211,65,249,72,234,36,73,37,201,52,184,77,22,30,100,4,191,239,135,138,1,76,75,13,140,228,27,137\"))]"
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.728ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[254,73,116,206,229,70,34,194,8,82,88,207,189,162,103,196,25,156,117,85,158,33,97,219,251,31,251,124,210,112,249,81],[194,43,237,3,245,182,74,62,136,3,16,44,94,201,239,2,115,252,169,19,230,60,66,65,250,16,12,203,204,250,98,127],[176,248,26,132,110,173,14,212,185,81,145,168,178,174,108,60,39,135,251,123,150,226,94,251,71,249,228,76,198,233,49,109],[73,233,176,179,125,69,26,81,98,63,155,254,231,135,183,35,98,49,224,9,170,233,231,182,56,210,104,1,196,91,18,150],[215,229,179,188,238,246,27,92,152,249,0,135,155,155,172,21,119,177,213,59,158,60,71,4,164,189,195,110,93,172,159,1]]",
              "sol": "[bytes(abi.encode(\"254,73,116,206,229,70,34,194,8,82,88,207,189,162,103,196,25,156,117,85,158,33,97,219,251,31,251,124,210,112,249,81\")),bytes(abi.encode(\"194,43,237,3,245,182,74,62,136,3,16,44,94,201,239,2,115,252,169,19,230,60,66,65,250,16,12,203,204,250,98,127\")),bytes(abi.encode(\"176,248,26,132,110,173,14,212,185,81,145,168,178,174,108,60,39,135,251,123,150,226,94,251,71,249,228,76,198,233,49,109\")),bytes(abi.encode(\"73,233,176,179,125,69,26,81,98,63,155,254,231,135,183,35,98,49,224,9,170,233,231,182,56,210,104,1,196,91,18,150\")),bytes(abi.encode(\"215,229,179,188,238,246,27,92,152,249,0,135,155,155,172,21,119,177,213,59,158,60,71,4,164,189,195,110,93,172,159,1\"))]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.729ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[52]",
              "sol": "bytes1(\"52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.729ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.730ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.730ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.730ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.730ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"thmghb\"",
              "sol": "\"thmghb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.731ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.731ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.731ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"ke0g1b\"",
              "sol": "\"ke0g1b\""
            },
            {
              "js": "\"4d7kgg\"",
              "sol": "\"4d7kgg\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.732ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "\"vxuvzt\"",
              "sol": "\"vxuvzt\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.732ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"pgu89g\"",
              "sol": "\"pgu89g\""
            },
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.732ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "\"vxuvzt\"",
              "sol": "\"vxuvzt\""
            },
            {
              "js": "\"jxewn6\"",
              "sol": "\"jxewn6\""
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.733ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"jxewn6\"",
              "sol": "\"jxewn6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.733ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"9s902\"",
              "sol": "\"9s902\""
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"zjjeks\"",
              "sol": "\"zjjeks\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.734ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.734ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"jxewn6\"",
              "sol": "\"jxewn6\""
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"06ews\"",
              "sol": "\"06ews\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.735ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.736ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"zjjeks\",\"\\x19Ethereum Signed Message:\\n32\",\"0\"]",
              "sol": "[string(\"zjjeks\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.736ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[243,248,173,179,231,241,89,197,110,52,186,179,41,8,99,246,222,129,24,165,125,215,123,205,238,32,245,66,185,164,84,141]]",
              "sol": "[bytes(abi.encode(\"243,248,173,179,231,241,89,197,110,52,186,179,41,8,99,246,222,129,24,165,125,215,123,205,238,32,245,66,185,164,84,141\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.737ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.737ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[232,101,231,237,58,160,23,155,194,3,86,212,83,218,162,200,124,152,100,96,63,25,80,26,9,6,206,154,172,122,224,36]",
              "sol": "stringToBytes32(\"232,101,231,237,58,160,23,155,194,3,86,212,83,218,162,200,124,152,100,96,63,25,80,26,9,6,206,154,172,122,224,36\")"
            },
            {
              "js": "[144,50,133,56,169,121,141,211,213,45,211,129,231,211,197,226,198,50,203,97,145,238,73,67,102,100,133,236,193,16,229,57]",
              "sol": "stringToBytes32(\"144,50,133,56,169,121,141,211,213,45,211,129,231,211,197,226,198,50,203,97,145,238,73,67,102,100,133,236,193,16,229,57\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.738ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[247,72,183,230,145,153,221,229,78,46,162,40,35,68,190,26,144,205,238,29,127,205,86,131,95,175,2,222,108,212,203,221]",
              "sol": "stringToBytes32(\"247,72,183,230,145,153,221,229,78,46,162,40,35,68,190,26,144,205,238,29,127,205,86,131,95,175,2,222,108,212,203,221\")"
            },
            {
              "js": "[34,13,154,157,246,188,255,77,154,212,34,79,203,43,202,51,10,210,231,49,106,238,35,206,184,116,216,177,119,76,210,215]",
              "sol": "abi.encode(\"34,13,154,157,246,188,255,77,154,212,34,79,203,43,202,51,10,210,231,49,106,238,35,206,184,116,216,177,119,76,210,215\")"
            },
            {
              "js": "[16,53,6,114,5,118,90,50,103,132,166,153,241,46,170,65,72,125,151,238,3,7,125,0,235,36,227,82,67,136,200,46]",
              "sol": "abi.encode(\"16,53,6,114,5,118,90,50,103,132,166,153,241,46,170,65,72,125,151,238,3,7,125,0,235,36,227,82,67,136,200,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.738ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[94,39,13,66,139,231,81,1,255,40,239,77,159,30,16,68,111,173,227,102,114,239,206,170,50,86,6,134,221,40,140,104]",
              "sol": "abi.encode(\"94,39,13,66,139,231,81,1,255,40,239,77,159,30,16,68,111,173,227,102,114,239,206,170,50,86,6,134,221,40,140,104\")"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[236,46,144,63,69,17,73,18,189,101,233,228,153,130,81,171,56,64,6,129,190,166,3,99,194,139,27,78,206,28,56,87]",
              "sol": "abi.encode(\"236,46,144,63,69,17,73,18,189,101,233,228,153,130,81,171,56,64,6,129,190,166,3,99,194,139,27,78,206,28,56,87\")"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.740ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[226,75,175,125,226,43,198,41,235,70,160,50,15,38,160,243,192,225,239,97,181,233,139,218,204,40,61,213,225,32,86,251]",
              "sol": "stringToBytes32(\"226,75,175,125,226,43,198,41,235,70,160,50,15,38,160,243,192,225,239,97,181,233,139,218,204,40,61,213,225,32,86,251\")"
            },
            {
              "js": "\"4d7kgg\"",
              "sol": "\"4d7kgg\""
            },
            {
              "js": "[121,51,46,179,139,74,195,87,6,208,136,107,223,201,46,103,38,94,79,36,225,178,88,83,126,0,13,119,34,207,245,59]",
              "sol": "abi.encode(\"121,51,46,179,139,74,195,87,6,208,136,107,223,201,46,103,38,94,79,36,225,178,88,83,126,0,13,119,34,207,245,59\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[143,129,176,39,161,165,4,249,64,182,245,133,119,66,31,156,21,106,83,84,107,61,20,178,140,178,147,113,66,169,124,94]",
              "sol": "stringToBytes32(\"143,129,176,39,161,165,4,249,64,182,245,133,119,66,31,156,21,106,83,84,107,61,20,178,140,178,147,113,66,169,124,94\")"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[254,149,60,230,22,241,253,59,65,130,60,90,10,151,128,149,184,247,139,68,24,2,173,58,187,167,113,29,219,6,138,158]",
              "sol": "abi.encode(\"254,149,60,230,22,241,253,59,65,130,60,90,10,151,128,149,184,247,139,68,24,2,173,58,187,167,113,29,219,6,138,158\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.741ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[124,142,17,130,215,203,32,20,78,161,251,46,116,176,47,78,31,178,175,225,161,130,124,5,57,22,44,7,250,95,179,119]",
              "sol": "stringToBytes32(\"124,142,17,130,215,203,32,20,78,161,251,46,116,176,47,78,31,178,175,225,161,130,124,5,57,22,44,7,250,95,179,119\")"
            },
            {
              "js": "[128,116,83,0,21,233,140,14,78,188,53,125,148,213,93,67,240,161,71,68,102,145,96,39,218,126,241,141,157,225,207,156]",
              "sol": "abi.encode(\"128,116,83,0,21,233,140,14,78,188,53,125,148,213,93,67,240,161,71,68,102,145,96,39,218,126,241,141,157,225,207,156\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[124,142,17,130,215,203,32,20,78,161,251,46,116,176,47,78,31,178,175,225,161,130,124,5,57,22,44,7,250,95,179,119]",
                "sol": "stringToBytes32(\"124,142,17,130,215,203,32,20,78,161,251,46,116,176,47,78,31,178,175,225,161,130,124,5,57,22,44,7,250,95,179,119\")"
              },
              {
                "js": "[206,247,184,44,54,196,106,201,120,236,189,193,1,148,233,250,157,57,121,120,174,46,165,241,179,159,242,47,15,156,104,101,174]",
                "sol": "bytes33(\"206,247,184,44,54,196,106,201,120,236,189,193,1,148,233,250,157,57,121,120,174,46,165,241,179,159,242,47,15,156,104,101,174\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.742ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[156,86,228,146,182,66,240,33,116,169,242,187,103,144,195,129,9,150,207,205,30,205,164,194,168,255,192,243,4,112,206,113]",
              "sol": "abi.encode(\"156,86,228,146,182,66,240,33,116,169,242,187,103,144,195,129,9,150,207,205,30,205,164,194,168,255,192,243,4,112,206,113\")"
            },
            {
              "js": "[164,87,232,218,189,118,26,249,170,186,49,216,108,164,62,81,223,99,192,47,8,117,178,80,30,73,119,93,226,117,15,19]",
              "sol": "stringToBytes32(\"164,87,232,218,189,118,26,249,170,186,49,216,108,164,62,81,223,99,192,47,8,117,178,80,30,73,119,93,226,117,15,19\")"
            },
            {
              "js": "[131,247,108,98,28,112,197,162,31,55,32,215,153,92,218,99,1,59,204,44,115,150,254,169,10,125,199,240,112,226,108,126]",
              "sol": "abi.encode(\"131,247,108,98,28,112,197,162,31,55,32,215,153,92,218,99,1,59,204,44,115,150,254,169,10,125,199,240,112,226,108,126\")"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[247,162,245,152,23,158,127,180,38,120,132,209,16,179,28,158,210,176,222,34,96,186,169,143,248,36,72,216,220,203,86,89]",
              "sol": "abi.encode(\"247,162,245,152,23,158,127,180,38,120,132,209,16,179,28,158,210,176,222,34,96,186,169,143,248,36,72,216,220,203,86,89\")"
            },
            {
              "js": "[132,254,237,102,29,159,56,151,25,51,202,177,23,143,155,27,151,99,218,10,142,75,91,19,6,172,53,155,11,79,15,121]",
              "sol": "stringToBytes32(\"132,254,237,102,29,159,56,151,25,51,202,177,23,143,155,27,151,99,218,10,142,75,91,19,6,172,53,155,11,79,15,121\")"
            },
            {
              "js": "[152,177,10,117,91,232,0,228,65,100,23,81,119,223,52,99,211,54,107,163,210,199,65,105,13,39,115,163,28,150,178,7]",
              "sol": "abi.encode(\"152,177,10,117,91,232,0,228,65,100,23,81,119,223,52,99,211,54,107,163,210,199,65,105,13,39,115,163,28,150,178,7\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[87,113,235,174,27,55,98,228,221,237,96,184,18,61,226,181,212,16,63,219,40,249,251,226,156,68,68,217,21,222,18,230]",
              "sol": "abi.encode(\"87,113,235,174,27,55,98,228,221,237,96,184,18,61,226,181,212,16,63,219,40,249,251,226,156,68,68,217,21,222,18,230\")"
            },
            {
              "js": "[102,68,172,70,182,45,93,160,113,132,77,58,231,130,166,0,176,92,94,10,25,94,197,56,77,79,109,175,197,218,77,45]",
              "sol": "stringToBytes32(\"102,68,172,70,182,45,93,160,113,132,77,58,231,130,166,0,176,92,94,10,25,94,197,56,77,79,109,175,197,218,77,45\")"
            },
            {
              "js": "[95,248,160,116,174,27,21,163,134,79,125,243,200,147,128,226,229,83,255,198,82,164,222,2,6,113,124,225,3,176,232,125]",
              "sol": "abi.encode(\"95,248,160,116,174,27,21,163,134,79,125,243,200,147,128,226,229,83,255,198,82,164,222,2,6,113,124,225,3,176,232,125\")"
            },
            {
              "js": "\"zjjeks\"",
              "sol": "\"zjjeks\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[68,80,204,156,126,240,69,133,233,108,88,127,246,238,212,204,239,213,228,207,39,180,44,133,50,60,126,102,101,246,186,13]",
              "sol": "abi.encode(\"68,80,204,156,126,240,69,133,233,108,88,127,246,238,212,204,239,213,228,207,39,180,44,133,50,60,126,102,101,246,186,13\")"
            },
            {
              "js": "[60,206,8,42,33,67,20,204,201,15,118,176,170,142,24,150,248,98,141,230,213,43,185,238,108,193,234,150,205,93,173,217]",
              "sol": "stringToBytes32(\"60,206,8,42,33,67,20,204,201,15,118,176,170,142,24,150,248,98,141,230,213,43,185,238,108,193,234,150,205,93,173,217\")"
            },
            {
              "js": "[12,20,218,207,206,79,97,79,137,218,28,13,224,187,140,173,11,96,4,60,71,108,88,0,71,41,18,48,207,24,102,75]",
              "sol": "abi.encode(\"12,20,218,207,206,79,97,79,137,218,28,13,224,187,140,173,11,96,4,60,71,108,88,0,71,41,18,48,207,24,102,75\")"
            },
            {
              "js": "\"jxewn6\"",
              "sol": "\"jxewn6\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[25,51,249,83,117,94,227,191,59,117,104,79,60,138,28,102,251,149,81,183,144,58,235,24,205,117,215,82,217,247,86,57]",
              "sol": "abi.encode(\"25,51,249,83,117,94,227,191,59,117,104,79,60,138,28,102,251,149,81,183,144,58,235,24,205,117,215,82,217,247,86,57\")"
            },
            {
              "js": "[107,60,231,56,73,209,236,96,11,59,54,15,192,55,86,87,244,59,241,150,184,237,34,26,46,185,58,45,15,170,212,23]",
              "sol": "stringToBytes32(\"107,60,231,56,73,209,236,96,11,59,54,15,192,55,86,87,244,59,241,150,184,237,34,26,46,185,58,45,15,170,212,23\")"
            },
            {
              "js": "[91,229,218,68,72,252,193,219,104,184,114,187,237,81,72,55,121,82,133,73,17,243,33,132,13,147,156,211,216,6,110,112]",
              "sol": "abi.encode(\"91,229,218,68,72,252,193,219,104,184,114,187,237,81,72,55,121,82,133,73,17,243,33,132,13,147,156,211,216,6,110,112\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[47,223,125,227,61,198,214,200,38,242,92,93,113,253,168,210,187,224,124,69,240,239,40,15,85,91,22,88,26,72,231,115]",
              "sol": "abi.encode(\"47,223,125,227,61,198,214,200,38,242,92,93,113,253,168,210,187,224,124,69,240,239,40,15,85,91,22,88,26,72,231,115\")"
            },
            {
              "js": "[248,74,39,191,79,27,156,144,236,30,191,229,53,90,185,91,1,21,132,154,17,137,8,248,10,68,201,74,56,162,118,147]",
              "sol": "stringToBytes32(\"248,74,39,191,79,27,156,144,236,30,191,229,53,90,185,91,1,21,132,154,17,137,8,248,10,68,201,74,56,162,118,147\")"
            },
            {
              "js": "[69,214,105,167,140,148,73,15,154,221,85,100,88,160,220,139,160,106,15,247,38,165,236,77,14,118,238,186,139,91,148,252]",
              "sol": "abi.encode(\"69,214,105,167,140,148,73,15,154,221,85,100,88,160,220,139,160,106,15,247,38,165,236,77,14,118,238,186,139,91,148,252\")"
            },
            {
              "js": "\"dbtb6f\"",
              "sol": "\"dbtb6f\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[184,67,22,247,13,44,249,221,15,71,164,242,171,82,119,124,235,101,165,96,4,142,153,51,20,123,96,110,84,41,230,210]",
              "sol": "abi.encode(\"184,67,22,247,13,44,249,221,15,71,164,242,171,82,119,124,235,101,165,96,4,142,153,51,20,123,96,110,84,41,230,210\")"
            },
            {
              "js": "[215,200,134,148,208,177,245,164,206,148,140,210,185,211,119,117,93,166,171,185,186,118,212,233,175,201,69,81,70,137,102,100]",
              "sol": "stringToBytes32(\"215,200,134,148,208,177,245,164,206,148,140,210,185,211,119,117,93,166,171,185,186,118,212,233,175,201,69,81,70,137,102,100\")"
            },
            {
              "js": "[219,74,226,42,23,236,106,108,80,35,95,37,135,194,221,251,16,66,239,61,82,154,59,72,154,125,74,244,79,177,227,61]",
              "sol": "abi.encode(\"219,74,226,42,23,236,106,108,80,35,95,37,135,194,221,251,16,66,239,61,82,154,59,72,154,125,74,244,79,177,227,61\")"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[245,111,115,47,95,28,9,98,249,209,27,142,50,82,54,153,227,51,1,187,62,99,87,225,241,241,186,50,208,255,13,245]",
              "sol": "abi.encode(\"245,111,115,47,95,28,9,98,249,209,27,142,50,82,54,153,227,51,1,187,62,99,87,225,241,241,186,50,208,255,13,245\")"
            },
            {
              "js": "[114,101,187,141,220,195,167,207,209,113,114,77,103,73,127,237,232,228,149,197,238,48,235,184,141,207,243,202,41,84,83,85]",
              "sol": "stringToBytes32(\"114,101,187,141,220,195,167,207,209,113,114,77,103,73,127,237,232,228,149,197,238,48,235,184,141,207,243,202,41,84,83,85\")"
            },
            {
              "js": "[169,130,2,125,7,210,12,166,179,240,164,131,222,234,142,170,237,118,125,190,193,126,163,59,180,29,135,107,234,218,14,80]",
              "sol": "abi.encode(\"169,130,2,125,7,210,12,166,179,240,164,131,222,234,142,170,237,118,125,190,193,126,163,59,180,29,135,107,234,218,14,80\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.753ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[55,40,52,30,111,147,35,192,254,185,134,150,25,35,69,64,165,83,32,206,201,0,61,10,234,208,172,65,130,44,50,200]",
              "sol": "abi.encode(\"55,40,52,30,111,147,35,192,254,185,134,150,25,35,69,64,165,83,32,206,201,0,61,10,234,208,172,65,130,44,50,200\")"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[66,30,202,203,58,195,59,5,6,10,216,12,244,171,34,119,229,225,26,242,170,193,50,141,208,238,113,137,156,125,159,234]",
              "sol": "abi.encode(\"66,30,202,203,58,195,59,5,6,10,216,12,244,171,34,119,229,225,26,242,170,193,50,141,208,238,113,137,156,125,159,234\")"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.754ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[26,99,187,178,49,226,95,123,195,27,121,215,26,65,51,184,90,242,59,192,213,98,192,184,210,228,135,139,19,22,17,134]",
              "sol": "stringToBytes32(\"26,99,187,178,49,226,95,123,195,27,121,215,26,65,51,184,90,242,59,192,213,98,192,184,210,228,135,139,19,22,17,134\")"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "[77,73,97,154,21,10,130,174,92,7,33,174,121,75,153,118,159,250,167,186,232,209,13,2,120,112,17,54,231,2,157,240]",
              "sol": "stringToBytes32(\"77,73,97,154,21,10,130,174,92,7,33,174,121,75,153,118,159,250,167,186,232,209,13,2,120,112,17,54,231,2,157,240\")"
            },
            {
              "js": "[58,56,92,60,137,211,92,161,16,133,238,172,165,185,184,165,64,61,161,202,194,202,19,181,209,225,184,63,90,34,84,99]",
              "sol": "stringToBytes32(\"58,56,92,60,137,211,92,161,16,133,238,172,165,185,184,165,64,61,161,202,194,202,19,181,209,225,184,63,90,34,84,99\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.754ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[45,10,145,114,80,143,89,96,42,91,52,237,116,251,197,51,96,223,205,148,236,62,124,171,173,130,148,43,187,194,13,32]",
              "sol": "stringToBytes32(\"45,10,145,114,80,143,89,96,42,91,52,237,116,251,197,51,96,223,205,148,236,62,124,171,173,130,148,43,187,194,13,32\")"
            },
            {
              "js": "[152,99,178,59,142,102,216,211,163,10,228,47,54,212,29,78,254,164,26,72,96,151,85,0,82,228,20,123,187,174,213,50,169,219,79,14,42,153,151,152,240,248,255,151,202,254,211,212,183,169,116,232,199,99,90,213,8,95,123,161]",
              "sol": "abi.encode(\"152,99,178,59,142,102,216,211,163,10,228,47,54,212,29,78,254,164,26,72,96,151,85,0,82,228,20,123,187,174,213,50,169,219,79,14,42,153,151,152,240,248,255,151,202,254,211,212,183,169,116,232,199,99,90,213,8,95,123,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[65,232,221,91,19,47,12,212,120,24,23,64,222,68,99,233,45,100,120,98,153,233,32,192,18,49,44,93,11,189,218,177]",
              "sol": "stringToBytes32(\"65,232,221,91,19,47,12,212,120,24,23,64,222,68,99,233,45,100,120,98,153,233,32,192,18,49,44,93,11,189,218,177\")"
            },
            {
              "js": "[50,50,77,58,35,200,242,214,62,74,224,176,198,37,16,103,75,245,101,169,5,140,207,219,193,162,83,212,128,187,169,121,182,242,111,196,27,107,161,6,211,59,128,151,131,100,181,210,101,132,221,1,23,208,176,71,226,5,245,200,198,209,226,254,35]",
              "sol": "abi.encode(\"50,50,77,58,35,200,242,214,62,74,224,176,198,37,16,103,75,245,101,169,5,140,207,219,193,162,83,212,128,187,169,121,182,242,111,196,27,107,161,6,211,59,128,151,131,100,181,210,101,132,221,1,23,208,176,71,226,5,245,200,198,209,226,254,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.755ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.757ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[1532892064,15]",
              "sol": "[uint(1532892064),uint(15)]"
            },
            {
              "js": "[[59,160],[101,87]]",
              "sol": "[[uint(59),uint(160)],[uint(101),uint(87)]]"
            },
            {
              "js": "[16,101]",
              "sol": "[uint(16),uint(101)]"
            },
            {
              "js": "[200000,33]",
              "sol": "[uint(200000),uint(33)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.759ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.759ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[97,65,49,47,3,56,47,55]",
              "sol": "[uint(97),uint(65),uint(49),uint(47),uint(3),uint(56),uint(47),uint(55)]"
            },
            {
              "js": "{\"A\": {\"X\": 97,\"Y\": 200001},\"B\": {\"X\": [31,26],\"Y\": [59,69]},\"C\": {\"X\": 1532892064,\"Y\": 49}}",
              "sol": "Verifier.Proof(Pairing.G1Point(97,200001),Pairing.G2Point([uint(31),uint(26)],[uint(59),uint(69)]),Pairing.G1Point(1532892064,49))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[10,257]",
              "sol": "[uint(10),uint(257)]"
            },
            {
              "js": "{\"A\": {\"X\": 2,\"Y\": 1532892064},\"B\": {\"X\": [1025,47],\"Y\": [97,59]},\"C\": {\"X\": 1532892063,\"Y\": 254}}",
              "sol": "Verifier.Proof(Pairing.G1Point(2,1532892064),Pairing.G2Point([uint(1025),uint(47)],[uint(97),uint(59)]),Pairing.G1Point(1532892063,254))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.763ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.764ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.764ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[7]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "24",
                "sol": "24"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"accounts[4]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.766ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.766ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "accounts[5]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.767ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.767ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.768ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.771ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[17,243,115,90,1,109,0,90,24,192,36,13,43,131,209,61,94,150,230,162,38,69,94,85,239,89,119,138,157,187,240,217]",
              "sol": "abi.encode(\"17,243,115,90,1,109,0,90,24,192,36,13,43,131,209,61,94,150,230,162,38,69,94,85,239,89,119,138,157,187,240,217\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[17,243,115,90,1,109,0,90,24,192,36,13,43,131,209,61,94,150,230,162,38,69,94,85,239,89,119,138,157,187,240,217]",
                "sol": "abi.encode(\"17,243,115,90,1,109,0,90,24,192,36,13,43,131,209,61,94,150,230,162,38,69,94,85,239,89,119,138,157,187,240,217\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.774ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.775ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[160,132,218,38]",
              "sol": "bytes4(\"160,132,218,38\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.777ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.777ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.778ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.778ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.779ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "[1,113,129,90,25,49,172,40,27,35,124,182,93,68,150,188,116,202,96,129,84,128,235,121,165,10,3,68,113,175,21,24]",
              "sol": "abi.encode(\"1,113,129,90,25,49,172,40,27,35,124,182,93,68,150,188,116,202,96,129,84,128,235,121,165,10,3,68,113,175,21,24\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "[40,119,41,102,184,74,16,82,190,157,119,197,203,24,96,103,241,64,39,250,150,107,255,23,18,153,199,127,51,142,214,134]",
              "sol": "abi.encode(\"40,119,41,102,184,74,16,82,190,157,119,197,203,24,96,103,241,64,39,250,150,107,255,23,18,153,199,127,51,142,214,134\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.781ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.785ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[200001,9]",
              "sol": "[uint(200001),uint(9)]"
            },
            {
              "js": "[[97,16],[22,19]]",
              "sol": "[[uint(97),uint(16)],[uint(22),uint(19)]]"
            },
            {
              "js": "[98,98]",
              "sol": "[uint(98),uint(98)]"
            },
            {
              "js": "[161,1532892063]",
              "sol": "[uint(161),uint(1532892063)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.787ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.789ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.789ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.790ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.790ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.792ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.794ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.794ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.795ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.796ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "45",
                "sol": "45"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.797ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "127",
                "sol": "127"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T16:28:18.797ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.798ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T16:28:18.798ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}