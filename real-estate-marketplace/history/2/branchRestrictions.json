,{
  "2020-11-10T07:34:46.785ZSolnSquareVerifier.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:35:01.818ZERC721.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:35:17.371ZERC721MintableComplete.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:35:32.599ZERC721Metadata.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(string,string,string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:35:47.855ZERC721Enumerable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:03.371ZOwnable.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.717ZProxyCBOR.testencodeUInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeUInt(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [201,159,157,155,11,151,33,253,27,150,40,206,20,6,117,21,177,187,132,121,236,37,20,184,110,120,219,5,130,51,113,52],\"capacity\": 3}",
              "sol": "Buffer.buffer(abi.encode(\"201,159,157,155,11,151,33,253,27,150,40,206,20,6,117,21,177,187,132,121,236,37,20,184,110,120,219,5,130,51,113,52\"),3)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.718ZProxyCBOR.testencodeInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "238-242",
          "restrictions": [
            "_value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value>=0",
          "parameters": [
            {
              "js": "{\"buf\": [159,63,248,0,190,158,204,142,42,153,163,42,115,85,234,95,6,23,47,187,187,156,114,239,247,195,78,249,213,101,179,181],\"capacity\": 1532892063}",
              "sol": "Buffer.buffer(abi.encode(\"159,63,248,0,190,158,204,142,42,153,163,42,115,85,234,95,6,23,47,187,187,156,114,239,247,195,78,249,213,101,179,181\"),1532892063)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "240-242",
          "restrictions": [
            "_value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeInt(Buffer.buffer,int) WHEN _value<0",
          "parameters": [
            {
              "js": "{\"buf\": [175,200,116,53,243,90,240,114,74,132,237,168,94,39,160,86,118,84,18,66,28,174,212,199,46,25,204,239,115,173,62,25],\"capacity\": 160}",
              "sol": "Buffer.buffer(abi.encode(\"175,200,116,53,243,90,240,114,74,132,237,168,94,39,160,86,118,84,18,66,28,174,212,199,46,25,204,239,115,173,62,25\"),160)"
            },
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.719ZProxyCBOR.testencodeBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeBytes(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [199,74,96,127,138,247,103,127,158,150,181,253,188,131,134,154,168,179,6,152,93,208,4,148,16,222,75,104,156,171,18,34],\"capacity\": 55}",
              "sol": "Buffer.buffer(abi.encode(\"199,74,96,127,138,247,103,127,158,150,181,253,188,131,134,154,168,179,6,152,93,208,4,148,16,222,75,104,156,171,18,34\"),55)"
            },
            {
              "js": "[144,190,175,94,108,228,193,221,133,167,17,217,8,100,64,108,5,165,95,21,231,53,158,198,170,207,154,2,14,166,207,123]",
              "sol": "abi.encode(\"144,190,175,94,108,228,193,221,133,167,17,217,8,100,64,108,5,165,95,21,231,53,158,198,170,207,154,2,14,166,207,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.720ZProxyCBOR.testencodeString": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testencodeString(Buffer.buffer,string)",
          "parameters": [
            {
              "js": "{\"buf\": [197,195,215,122,129,66,203,12,63,191,43,46,29,126,155,250,197,240,106,9,227,4,0,27,249,76,78,143,178,84,27,163],\"capacity\": 47}",
              "sol": "Buffer.buffer(abi.encode(\"197,195,215,122,129,66,203,12,63,191,43,46,29,126,155,250,197,240,106,9,227,4,0,27,249,76,78,143,178,84,27,163\"),47)"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.720ZProxyCBOR.teststartArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartArray(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [101,164,227,101,189,39,115,41,142,200,20,26,95,122,142,70,234,4,234,115,208,50,3,129,75,67,129,231,148,139,16,242],\"capacity\": 1023}",
              "sol": "Buffer.buffer(abi.encode(\"101,164,227,101,189,39,115,41,142,200,20,26,95,122,142,70,234,4,234,115,208,50,3,129,75,67,129,231,148,139,16,242\"),1023)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.720ZProxyCBOR.teststartMap": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststartMap(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [244,165,31,58,147,64,102,225,144,77,132,189,251,232,110,39,5,16,118,46,229,224,251,155,171,98,106,144,125,75,89,104],\"capacity\": 48}",
              "sol": "Buffer.buffer(abi.encode(\"244,165,31,58,147,64,102,225,144,77,132,189,251,232,110,39,5,16,118,46,229,224,251,155,171,98,106,144,125,75,89,104\"),48)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.721ZProxyCBOR.testendSequence": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testendSequence(Buffer.buffer)",
          "parameters": [
            {
              "js": "{\"buf\": [30,200,73,98,146,228,89,101,0,26,62,119,80,202,114,109,205,107,68,35,250,174,184,216,20,9,23,108,223,131,244,13],\"capacity\": 95}",
              "sol": "Buffer.buffer(abi.encode(\"30,200,73,98,146,228,89,101,0,26,62,119,80,202,114,109,205,107,68,35,250,174,184,216,20,9,23,108,223,131,244,13\"),95)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.724ZProxyPairing.testP1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.724ZProxyPairing.testP2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testP2()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.725ZProxyPairing.testnegate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "427-428",
          "restrictions": [
            "p.X == 0",
            "p.Y == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X==0,p.Y==0",
          "parameters": [
            {
              "js": "{\"X\": 0,\"Y\": 0}",
              "sol": "Pairing.G1Point(0,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "p.X != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnegate(Pairing.G1Point) WHEN p.X!=0",
          "parameters": [
            {
              "js": "{\"X\": 55,\"Y\": 8}",
              "sol": "Pairing.G1Point(55,8)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.725ZProxyPairing.testaddition0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition0(Pairing.G1Point,Pairing.G1Point)",
          "parameters": [
            {
              "js": "{\"X\": 1,\"Y\": 87}",
              "sol": "Pairing.G1Point(1,87)"
            },
            {
              "js": "{\"X\": 18,\"Y\": 31}",
              "sol": "Pairing.G1Point(18,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.726ZProxyPairing.testaddition1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddition1(Pairing.G2Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": [26,11],\"Y\": [10,7]}",
              "sol": "Pairing.G2Point([uint(26),uint(11)],[uint(10),uint(7)])"
            },
            {
              "js": "{\"X\": [16,1532892063],\"Y\": [49,97]}",
              "sol": "Pairing.G2Point([uint(16),uint(1532892063)],[uint(49),uint(97)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.727ZProxyPairing.testscalar_mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testscalar_mul(Pairing.G1Point,uint)",
          "parameters": [
            {
              "js": "{\"X\": 1532892063,\"Y\": 66}",
              "sol": "Pairing.G1Point(1532892063,66)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.728ZProxyPairing.testpairing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairing(Pairing.G1Point[],Pairing.G2Point[]) WHEN p1.length==p2.length",
          "parameters": [
            {
              "js": "[{\"X\": 24,\"Y\": 25},{\"X\": 28,\"Y\": 200000},{\"X\": 86,\"Y\": 16},{\"X\": 162,\"Y\": 87},{\"X\": 57,\"Y\": 58},{\"X\": 1,\"Y\": 15}]",
              "sol": "[Pairing.G1Point(24,25),Pairing.G1Point(28,200000),Pairing.G1Point(86,16),Pairing.G1Point(162,87),Pairing.G1Point(57,58),Pairing.G1Point(1,15)]"
            },
            {
              "js": "[{\"X\": [31,128],\"Y\": [25,4]},{\"X\": [200000,15],\"Y\": [48,1532892062]},{\"X\": [257,1532892062],\"Y\": [1532892062,102]},{\"X\": [71,56],\"Y\": [1,200000]},{\"X\": [1024,98],\"Y\": [2,27]},{\"X\": [200000,200001],\"Y\": [11,49]}]",
              "sol": "[Pairing.G2Point([uint(31),uint(128)],[uint(25),uint(4)]),Pairing.G2Point([uint(200000),uint(15)],[uint(48),uint(1532892062)]),Pairing.G2Point([uint(257),uint(1532892062)],[uint(1532892062),uint(102)]),Pairing.G2Point([uint(71),uint(56)],[uint(1),uint(200000)]),Pairing.G2Point([uint(1024),uint(98)],[uint(2),uint(27)]),Pairing.G2Point([uint(200000),uint(200001)],[uint(11),uint(49)])]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpairing(Pairing.G1Point[],Pairing.G2Point[]) when NOT comply with: p1.length == p2.length",
            "parameters": [
              {
                "js": "[{\"X\": 97,\"Y\": 103},{\"X\": 30,\"Y\": 1025},{\"X\": 17,\"Y\": 257},{\"X\": 24,\"Y\": 58},{\"X\": 128,\"Y\": 1532892064},{\"X\": 97,\"Y\": 71},{\"X\": 97,\"Y\": 257}]",
                "sol": "[Pairing.G1Point(199999,17),Pairing.G1Point(49,66),Pairing.G1Point(199999,86),Pairing.G1Point(24,32),Pairing.G1Point(2014223715,1532892062),Pairing.G1Point(59,33),Pairing.G1Point(66,28)]"
              },
              {
                "js": "[{\"X\": [31,128],\"Y\": [25,4]},{\"X\": [200000,15],\"Y\": [48,1532892062]},{\"X\": [257,1532892062],\"Y\": [1532892062,102]},{\"X\": [71,56],\"Y\": [1,200000]},{\"X\": [1024,98],\"Y\": [2,27]},{\"X\": [200000,200001],\"Y\": [11,49]}]",
                "sol": "[Pairing.G2Point([uint(31),uint(128)],[uint(25),uint(4)]),Pairing.G2Point([uint(200000),uint(15)],[uint(48),uint(1532892062)]),Pairing.G2Point([uint(257),uint(1532892062)],[uint(1532892062),uint(102)]),Pairing.G2Point([uint(71),uint(56)],[uint(1),uint(200000)]),Pairing.G2Point([uint(1024),uint(98)],[uint(2),uint(27)]),Pairing.G2Point([uint(200000),uint(200001)],[uint(11),uint(49)])]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.737ZProxyPairing.testpairingProd2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd2(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 16,\"Y\": 18}",
              "sol": "Pairing.G1Point(16,18)"
            },
            {
              "js": "{\"X\": [26,200001],\"Y\": [254,71]}",
              "sol": "Pairing.G2Point([uint(26),uint(200001)],[uint(254),uint(71)])"
            },
            {
              "js": "{\"X\": 2014223716,\"Y\": 1532892064}",
              "sol": "Pairing.G1Point(2014223716,1532892064)"
            },
            {
              "js": "{\"X\": [59,60],\"Y\": [21,64]}",
              "sol": "Pairing.G2Point([uint(59),uint(60)],[uint(21),uint(64)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.739ZProxyPairing.testpairingProd3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpairingProd3(Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point,Pairing.G1Point,Pairing.G2Point)",
          "parameters": [
            {
              "js": "{\"X\": 19,\"Y\": 26}",
              "sol": "Pairing.G1Point(19,26)"
            },
            {
              "js": "{\"X\": [9,32],\"Y\": [98,15]}",
              "sol": "Pairing.G2Point([uint(9),uint(32)],[uint(98),uint(15)])"
            },
            {
              "js": "{\"X\": 257,\"Y\": 61}",
              "sol": "Pairing.G1Point(257,61)"
            },
            {
              "js": "{\"X\": [200001,161],\"Y\": [1532892062,33]}",
              "sol": "Pairing.G2Point([uint(200001),uint(161)],[uint(1532892062),uint(33)])"
            },
            {
              "js": "{\"X\": 2,\"Y\": 30}",
              "sol": "Pairing.G1Point(2,30)"
            },
            {
              "js": "{\"X\": [57,28],\"Y\": [46,256]}",
              "sol": "Pairing.G2Point([uint(57),uint(28)],[uint(46),uint(256)])"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.744ZProxyBN256G2.testGetFieldModulus": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testGetFieldModulus()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.744ZProxyBN256G2.testsubmod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubmod(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "103",
              "sol": "103"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.745ZProxyBN256G2.test_FQ2Mul": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Mul(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.746ZProxyBN256G2.test_FQ2Muc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Muc(uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.746ZProxyBN256G2.test_FQ2Add": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Add(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "57",
              "sol": "57"
            },
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.748ZProxyBN256G2.test_FQ2Sub": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Sub(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "199999",
              "sol": "199999"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.749ZProxyBN256G2.test_FQ2Div": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Div(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.749ZProxyBN256G2.test_FQ2Inv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_FQ2Inv(uint256,uint256)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.750ZProxyBN256G2.test_isOnCurve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isOnCurve(uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.750ZProxyBN256G2.test_modInv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_modInv(uint256,uint256)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.751ZProxyBN256G2.test_ECTwistMulJacobian": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_ECTwistMulJacobian(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.753ZProxyBuffer.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Buffer.buffer,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [138,5,183,206,51,211,129,15,154,236,48,156,204,223,27,30,110,22,86,95,191,142,136,118,171,60,250,0,21,72,246,248],\"capacity\": 66}",
              "sol": "Buffer.buffer(abi.encode(\"138,5,183,206,51,211,129,15,154,236,48,156,204,223,27,30,110,22,86,95,191,142,136,118,171,60,250,0,21,72,246,248\"),66)"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.755ZProxyBuffer.testappend0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend0(Buffer.buffer,bytes)",
          "parameters": [
            {
              "js": "{\"buf\": [112,16,48,162,150,193,47,169,194,122,251,96,145,223,81,22,210,231,148,127,196,80,181,188,151,14,34,63,60,135,116,181],\"capacity\": 20}",
              "sol": "Buffer.buffer(abi.encode(\"112,16,48,162,150,193,47,169,194,122,251,96,145,223,81,22,210,231,148,127,196,80,181,188,151,14,34,63,60,135,116,181\"),20)"
            },
            {
              "js": "[196,248,156,188,60,73,217,33,76,251,169,130,169,170,236,55,22,146,158,163,24,92,137,28,116,218,4,132,16,79,238,86]",
              "sol": "abi.encode(\"196,248,156,188,60,73,217,33,76,251,169,130,169,170,236,55,22,146,158,163,24,92,137,28,116,218,4,132,16,79,238,86\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.755ZProxyBuffer.testappend1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappend1(Buffer.buffer,uint8)",
          "parameters": [
            {
              "js": "{\"buf\": [180,106,169,114,68,43,90,115,90,89,146,67,36,108,170,127,160,226,185,173,25,156,140,181,76,98,146,218,55,152,190,24],\"capacity\": 16}",
              "sol": "Buffer.buffer(abi.encode(\"180,106,169,114,68,43,90,115,90,89,146,67,36,108,170,127,160,226,185,173,25,156,140,181,76,98,146,218,55,152,190,24\"),16)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.756ZProxyBuffer.testappendInt": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testappendInt(Buffer.buffer,uint,uint)",
          "parameters": [
            {
              "js": "{\"buf\": [39,119,202,129,60,20,213,232,222,164,1,156,71,222,160,169,70,25,16,189,46,137,13,106,21,127,131,22,88,142,116,40],\"capacity\": 1532892062}",
              "sol": "Buffer.buffer(abi.encode(\"39,119,202,129,60,20,213,232,222,164,1,156,71,222,160,169,70,25,16,189,46,137,13,106,21,127,131,22,88,142,116,40\"),1532892062)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "1024",
              "sol": "1024"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.757ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string)",
          "parameters": [
            {
              "js": "[215,88,107,189,74,250,198,133,135,127,103,31,15,183,130,45,113,86,108,152,90,130,55,10,68,242,75,255,0,8,75,105]",
              "sol": "stringToBytes32(\"215,88,107,189,74,250,198,133,135,127,103,31,15,183,130,45,113,86,108,152,90,130,55,10,68,242,75,255,0,8,75,105\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.758ZusingOraclize.__callback": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute __callback(bytes32,string,bytes)",
          "parameters": [
            {
              "js": "[180,103,133,206,171,100,139,116,58,40,255,84,220,69,13,196,86,112,208,101,210,36,168,196,228,202,54,75,236,163,60,179]",
              "sol": "stringToBytes32(\"180,103,133,206,171,100,139,116,58,40,255,84,220,69,13,196,86,112,208,101,210,36,168,196,228,202,54,75,236,163,60,179\")"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[228,12,202,52,241,32,148,90,9,238,3,125,203,82,247,66,236,180,142,211,141,188,182,200,229,132,125,96,144,209,76,74]",
              "sol": "abi.encode(\"228,12,202,52,241,32,148,90,9,238,3,125,203,82,247,66,236,180,142,211,141,188,182,200,229,132,125,96,144,209,76,74\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.799ZProxyusingOraclize.testoraclize_setNetwork0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork0(uint8)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.800ZProxyusingOraclize.testoraclize_setNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetworkName(string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.800ZProxyusingOraclize.testoraclize_getNetworkName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getNetworkName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.800ZProxyusingOraclize.testoraclize_setNetwork1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setNetwork1()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.801ZProxyusingOraclize.testoraclize_getPrice0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice0(string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.801ZProxyusingOraclize.testoraclize_getPrice1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_getPrice1(string,uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.801ZProxyusingOraclize.testoraclize_query0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query0(string,string)",
          "parameters": [
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.802ZProxyusingOraclize.testoraclize_query1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query1(uint,string,string)",
          "parameters": [
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.802ZProxyusingOraclize.testoraclize_query2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query2(uint,string,string,uint)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.803ZProxyusingOraclize.testoraclize_query3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query3(string,string,uint)",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.803ZProxyusingOraclize.testoraclize_query4": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query4(string,string,string)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.804ZProxyusingOraclize.testoraclize_query5": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query5(uint,string,string,string)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.804ZProxyusingOraclize.testoraclize_query6": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query6(uint,string,string,string,uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"0ttfam\"",
              "sol": "\"0ttfam\""
            },
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.806ZProxyusingOraclize.testoraclize_query7": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query7(string,string,string,uint)",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.806ZProxyusingOraclize.testoraclize_query8": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query8(string,string[])",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"P\",\"Capstones\",\"L\",\"ipkqsw\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"P\"),string(\"Capstones\"),string(\"L\"),string(\"ipkqsw\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.807ZProxyusingOraclize.testoraclize_query9": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query9(uint,string,string[])",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[\"P\",\"L\",\"ipkqsw\",\"0\",\"0\",\"bofzyb\",\"0\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"P\"),string(\"L\"),string(\"ipkqsw\"),string(\"0\"),string(\"0\"),string(\"bofzyb\"),string(\"0\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.807ZProxyusingOraclize.testoraclize_query10": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query10(uint,string,string[],uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"0\",\"ERC1820_ACCEPT_MAGIC\",\"Transaction successfully verified.\",\"ipkqsw\",\"ipkqsw\"]",
              "sol": "[string(\"0\"),string(\"ERC1820_ACCEPT_MAGIC\"),string(\"Transaction successfully verified.\"),string(\"ipkqsw\"),string(\"ipkqsw\")]"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.808ZProxyusingOraclize.testoraclize_query11": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query11(string,string[],uint)",
          "parameters": [
            {
              "js": "\"jy9vyf\"",
              "sol": "\"jy9vyf\""
            },
            {
              "js": "[\"0\",\"f58xqj\"]",
              "sol": "[string(\"0\"),string(\"f58xqj\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.808ZProxyusingOraclize.testoraclize_query12": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query12(string,string[1])",
          "parameters": [
            {
              "js": "\"bofzyb\"",
              "sol": "\"bofzyb\""
            },
            {
              "js": "[\"bofzyb\"]",
              "sol": "[string(\"bofzyb\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.809ZProxyusingOraclize.testoraclize_query13": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query13(uint,string,string[1])",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.809ZProxyusingOraclize.testoraclize_query14": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query14(uint,string,string[1],uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"0\"]",
              "sol": "[string(\"0\")]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.810ZProxyusingOraclize.testoraclize_query15": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query15(string,string[1],uint)",
          "parameters": [
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[\"jy9vyf\"]",
              "sol": "[string(\"jy9vyf\")]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.810ZProxyusingOraclize.testoraclize_query16": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query16(string,string[2])",
          "parameters": [
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"Capstones\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"Capstones\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.811ZProxyusingOraclize.testoraclize_query17": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query17(uint,string,string[2])",
          "parameters": [
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "\"bofzyb\"",
              "sol": "\"bofzyb\""
            },
            {
              "js": "[\"L\",\"0\"]",
              "sol": "[string(\"L\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.811ZProxyusingOraclize.testoraclize_query18": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query18(uint,string,string[2],uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[\"0\",\"L\"]",
              "sol": "[string(\"0\"),string(\"L\")]"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.812ZProxyusingOraclize.testoraclize_query19": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query19(string,string[2],uint)",
          "parameters": [
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "[\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\",\"Capstones\"]",
              "sol": "[string(\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"),string(\"Capstones\")]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.812ZProxyusingOraclize.testoraclize_query20": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query20(string,string[3])",
          "parameters": [
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "[\"2873r9\",\"\\x19Ethereum Signed Message:\\n32\",\"ERC1820_ACCEPT_MAGIC\"]",
              "sol": "[string(\"2873r9\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ERC1820_ACCEPT_MAGIC\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.813ZProxyusingOraclize.testoraclize_query21": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query21(uint,string,string[3])",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "\"0\"",
              "sol": "\"0\""
            },
            {
              "js": "[\"bofzyb\",\"Capstones\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"bofzyb\"),string(\"Capstones\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.813ZProxyusingOraclize.testoraclize_query22": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query22(uint,string,string[3],uint)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"0ttfam\"",
              "sol": "\"0ttfam\""
            },
            {
              "js": "[\"f58xqj\",\"0ttfam\",\"0\"]",
              "sol": "[string(\"f58xqj\"),string(\"0ttfam\"),string(\"0\")]"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.814ZProxyusingOraclize.testoraclize_query23": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query23(string,string[3],uint)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "[\"P\",\"[\",\"f58xqj\"]",
              "sol": "[string(\"P\"),string(\"[\"),string(\"f58xqj\")]"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.814ZProxyusingOraclize.testoraclize_query24": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query24(string,string[4])",
          "parameters": [
            {
              "js": "\"jy9vyf\"",
              "sol": "\"jy9vyf\""
            },
            {
              "js": "[\"0\",\"[\",\"0\",\"0\"]",
              "sol": "[string(\"0\"),string(\"[\"),string(\"0\"),string(\"0\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.815ZProxyusingOraclize.testoraclize_query25": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query25(uint,string,string[4])",
          "parameters": [
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "[\"ipkqsw\",\"0\",\"L\",\"L\"]",
              "sol": "[string(\"ipkqsw\"),string(\"0\"),string(\"L\"),string(\"L\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.815ZProxyusingOraclize.testoraclize_query26": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query26(uint,string,string[4],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "[\"Capstones\",\"Capstones\",\"ipkqsw\",\"[\"]",
              "sol": "[string(\"Capstones\"),string(\"Capstones\"),string(\"ipkqsw\"),string(\"[\")]"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.816ZProxyusingOraclize.testoraclize_query27": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query27(string,string[4],uint)",
          "parameters": [
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "[\"L\",\"ipkqsw\",\"Capstones\",\"\\x19Ethereum Signed Message:\\n32\"]",
              "sol": "[string(\"L\"),string(\"ipkqsw\"),string(\"Capstones\"),string(\"\\x19Ethereum Signed Message:\\n32\")]"
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.816ZProxyusingOraclize.testoraclize_query28": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query28(string,string[5])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[\"ERC1820_ACCEPT_MAGIC\",\"[\",\"2873r9\",\"jy9vyf\",\"0ttfam\"]",
              "sol": "[string(\"ERC1820_ACCEPT_MAGIC\"),string(\"[\"),string(\"2873r9\"),string(\"jy9vyf\"),string(\"0ttfam\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.817ZProxyusingOraclize.testoraclize_query29": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query29(uint,string,string[5])",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "\"f58xqj\"",
              "sol": "\"f58xqj\""
            },
            {
              "js": "[\"f58xqj\",\"2i02go\",\"ipkqsw\",\"0\",\"Transaction successfully verified.\"]",
              "sol": "[string(\"f58xqj\"),string(\"2i02go\"),string(\"ipkqsw\"),string(\"0\"),string(\"Transaction successfully verified.\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.817ZProxyusingOraclize.testoraclize_query30": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query30(uint,string,string[5],uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "\"f58xqj\"",
              "sol": "\"f58xqj\""
            },
            {
              "js": "[\"0ra89w\",\"\\x19Ethereum Signed Message:\\n32\",\"ipkqsw\",\"2i02go\",\"0yjdnu\"]",
              "sol": "[string(\"0ra89w\"),string(\"\\x19Ethereum Signed Message:\\n32\"),string(\"ipkqsw\"),string(\"2i02go\"),string(\"0yjdnu\")]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.818ZProxyusingOraclize.testoraclize_query31": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query31(string,string[5],uint)",
          "parameters": [
            {
              "js": "\"0ra89w\"",
              "sol": "\"0ra89w\""
            },
            {
              "js": "[\"ipkqsw\",\"[\",\"9sbed\",\"Capstones\",\"l51da\"]",
              "sol": "[string(\"ipkqsw\"),string(\"[\"),string(\"9sbed\"),string(\"Capstones\"),string(\"l51da\")]"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.819ZProxyusingOraclize.testoraclize_query32": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query32(string,bytes[])",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[[238,240,235,254,191,2,54,187,14,12,41,21,220,62,133,222,182,83,198,126,39,83,237,28,220,33,42,89,5,227,32,253],[46,25,190,201,12,223,231,23,144,147,246,200,38,148,139,229,230,94,22,43,252,59,118,192,162,66,80,139,38,155,175,222],[207,85,56,75,14,78,121,190,45,230,35,254,82,161,133,43,58,19,47,143,5,163,12,64,74,210,51,154,126,191,247,96],[229,242,97,184,164,225,215,121,184,107,96,80,153,136,168,60,226,100,110,162,3,148,16,243,100,13,180,154,55,230,110,104],[25,106,40,42,129,226,27,158,96,186,209,12,85,234,198,7,103,232,46,157,235,129,182,73,139,121,113,150,121,107,195,214],[243,19,22,236,1,130,135,186,247,105,157,88,198,160,134,6,152,5,130,249,168,133,103,154,49,110,81,54,193,104,46,251],[245,41,11,224,6,91,243,150,235,122,83,142,187,224,138,234,118,50,30,44,172,65,232,240,41,218,10,105,116,202,88,54],[120,154,140,114,181,46,216,247,118,49,161,46,179,244,169,74,213,255,36,140,144,254,44,48,115,85,53,186,4,30,93,134],[198,3,25,75,153,195,121,239,71,37,154,213,248,104,122,58,74,118,103,44,218,76,61,230,240,249,100,56,155,95,62,118]]",
              "sol": "[bytes(abi.encode(\"238,240,235,254,191,2,54,187,14,12,41,21,220,62,133,222,182,83,198,126,39,83,237,28,220,33,42,89,5,227,32,253\")),bytes(abi.encode(\"46,25,190,201,12,223,231,23,144,147,246,200,38,148,139,229,230,94,22,43,252,59,118,192,162,66,80,139,38,155,175,222\")),bytes(abi.encode(\"207,85,56,75,14,78,121,190,45,230,35,254,82,161,133,43,58,19,47,143,5,163,12,64,74,210,51,154,126,191,247,96\")),bytes(abi.encode(\"229,242,97,184,164,225,215,121,184,107,96,80,153,136,168,60,226,100,110,162,3,148,16,243,100,13,180,154,55,230,110,104\")),bytes(abi.encode(\"25,106,40,42,129,226,27,158,96,186,209,12,85,234,198,7,103,232,46,157,235,129,182,73,139,121,113,150,121,107,195,214\")),bytes(abi.encode(\"243,19,22,236,1,130,135,186,247,105,157,88,198,160,134,6,152,5,130,249,168,133,103,154,49,110,81,54,193,104,46,251\")),bytes(abi.encode(\"245,41,11,224,6,91,243,150,235,122,83,142,187,224,138,234,118,50,30,44,172,65,232,240,41,218,10,105,116,202,88,54\")),bytes(abi.encode(\"120,154,140,114,181,46,216,247,118,49,161,46,179,244,169,74,213,255,36,140,144,254,44,48,115,85,53,186,4,30,93,134\")),bytes(abi.encode(\"198,3,25,75,153,195,121,239,71,37,154,213,248,104,122,58,74,118,103,44,218,76,61,230,240,249,100,56,155,95,62,118\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.819ZProxyusingOraclize.testoraclize_query33": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query33(uint,string,bytes[])",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "[[215,205,89,211,149,168,13,208,110,113,118,44,201,172,113,47,204,147,242,9,247,72,31,110,53,55,191,67,50,244,64,239],[215,9,49,228,52,67,148,10,14,203,134,253,139,186,232,28,253,56,114,213,212,149,1,80,189,43,129,129,141,225,62,255],[124,134,14,244,106,70,104,207,29,171,117,112,68,183,77,44,85,254,8,223,188,82,34,84,221,194,237,230,33,157,147,89],[247,128,68,181,147,138,83,181,151,237,143,179,109,53,228,72,179,115,7,144,213,79,212,169,58,35,17,9,181,146,114,65],[117,142,0,34,39,74,27,98,45,201,35,196,146,58,2,142,90,40,45,173,195,137,106,23,219,69,33,149,232,135,50,113],[189,123,142,243,107,154,10,196,210,147,79,125,105,7,156,38,192,251,77,66,227,209,149,6,22,5,220,7,181,195,225,172],[125,204,52,88,164,35,223,179,149,206,40,178,122,70,3,226,69,66,31,75,13,159,246,22,2,202,1,224,134,17,196,252],[254,248,0,10,192,238,19,16,149,45,209,205,70,186,174,175,255,156,24,4,181,198,42,218,167,28,191,142,0,78,207,200]]",
              "sol": "[bytes(abi.encode(\"215,205,89,211,149,168,13,208,110,113,118,44,201,172,113,47,204,147,242,9,247,72,31,110,53,55,191,67,50,244,64,239\")),bytes(abi.encode(\"215,9,49,228,52,67,148,10,14,203,134,253,139,186,232,28,253,56,114,213,212,149,1,80,189,43,129,129,141,225,62,255\")),bytes(abi.encode(\"124,134,14,244,106,70,104,207,29,171,117,112,68,183,77,44,85,254,8,223,188,82,34,84,221,194,237,230,33,157,147,89\")),bytes(abi.encode(\"247,128,68,181,147,138,83,181,151,237,143,179,109,53,228,72,179,115,7,144,213,79,212,169,58,35,17,9,181,146,114,65\")),bytes(abi.encode(\"117,142,0,34,39,74,27,98,45,201,35,196,146,58,2,142,90,40,45,173,195,137,106,23,219,69,33,149,232,135,50,113\")),bytes(abi.encode(\"189,123,142,243,107,154,10,196,210,147,79,125,105,7,156,38,192,251,77,66,227,209,149,6,22,5,220,7,181,195,225,172\")),bytes(abi.encode(\"125,204,52,88,164,35,223,179,149,206,40,178,122,70,3,226,69,66,31,75,13,159,246,22,2,202,1,224,134,17,196,252\")),bytes(abi.encode(\"254,248,0,10,192,238,19,16,149,45,209,205,70,186,174,175,255,156,24,4,181,198,42,218,167,28,191,142,0,78,207,200\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.820ZProxyusingOraclize.testoraclize_query34": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query34(uint,string,bytes[],uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[246,16,3,181,43,11,83,40,132,137,79,225,34,133,66,203,182,117,102,115,13,54,209,84,25,245,248,139,177,65,162,27],[246,82,9,36,96,31,23,248,119,0,162,111,181,165,153,175,34,126,35,47,144,112,120,94,26,217,47,133,242,252,236,112],[51,161,235,100,60,31,212,135,34,131,80,156,161,21,225,146,183,84,114,19,58,176,80,12,11,30,167,24,1,89,14,194],[83,112,153,138,244,47,242,18,160,5,123,60,11,161,136,110,195,202,73,30,25,196,184,110,214,152,115,249,93,80,140,63],[138,189,98,31,36,215,34,209,13,125,138,190,116,40,190,81,116,197,74,28,193,8,125,131,13,76,2,62,79,3,93,251],[200,71,172,178,218,166,114,229,11,178,225,62,219,203,211,250,163,145,45,19,113,19,67,35,1,96,158,131,211,10,134,167],[86,188,245,22,87,86,104,165,114,95,77,140,81,216,86,183,113,104,116,50,191,145,85,34,235,34,96,39,150,20,178,77]]",
              "sol": "[bytes(abi.encode(\"246,16,3,181,43,11,83,40,132,137,79,225,34,133,66,203,182,117,102,115,13,54,209,84,25,245,248,139,177,65,162,27\")),bytes(abi.encode(\"246,82,9,36,96,31,23,248,119,0,162,111,181,165,153,175,34,126,35,47,144,112,120,94,26,217,47,133,242,252,236,112\")),bytes(abi.encode(\"51,161,235,100,60,31,212,135,34,131,80,156,161,21,225,146,183,84,114,19,58,176,80,12,11,30,167,24,1,89,14,194\")),bytes(abi.encode(\"83,112,153,138,244,47,242,18,160,5,123,60,11,161,136,110,195,202,73,30,25,196,184,110,214,152,115,249,93,80,140,63\")),bytes(abi.encode(\"138,189,98,31,36,215,34,209,13,125,138,190,116,40,190,81,116,197,74,28,193,8,125,131,13,76,2,62,79,3,93,251\")),bytes(abi.encode(\"200,71,172,178,218,166,114,229,11,178,225,62,219,203,211,250,163,145,45,19,113,19,67,35,1,96,158,131,211,10,134,167\")),bytes(abi.encode(\"86,188,245,22,87,86,104,165,114,95,77,140,81,216,86,183,113,104,116,50,191,145,85,34,235,34,96,39,150,20,178,77\"))]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.821ZProxyusingOraclize.testoraclize_query35": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query35(string,bytes[],uint)",
          "parameters": [
            {
              "js": "\"0ttfam\"",
              "sol": "\"0ttfam\""
            },
            {
              "js": "[[50,110,70,72,203,64,69,183,0,68,65,14,175,129,213,164,224,71,204,172,202,197,129,212,68,100,155,79,225,164,99,55]]",
              "sol": "[bytes(abi.encode(\"50,110,70,72,203,64,69,183,0,68,65,14,175,129,213,164,224,71,204,172,202,197,129,212,68,100,155,79,225,164,99,55\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.821ZProxyusingOraclize.testoraclize_query36": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query36(string,bytes[1])",
          "parameters": [
            {
              "js": "\"2i02go\"",
              "sol": "\"2i02go\""
            },
            {
              "js": "[[152,205,92,181,119,213,167,48,218,162,156,31,52,21,1,40,56,108,88,32,191,17,38,142,243,163,35,71,28,237,112,52]]",
              "sol": "[bytes(abi.encode(\"152,205,92,181,119,213,167,48,218,162,156,31,52,21,1,40,56,108,88,32,191,17,38,142,243,163,35,71,28,237,112,52\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.823ZProxyusingOraclize.testoraclize_query37": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query37(uint,string,bytes[1])",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "\"9sbed\"",
              "sol": "\"9sbed\""
            },
            {
              "js": "[[80,23,169,101,181,39,187,107,200,247,86,153,234,116,125,214,231,14,1,95,86,251,46,8,255,77,0,152,249,81,42,132]]",
              "sol": "[bytes(abi.encode(\"80,23,169,101,181,39,187,107,200,247,86,153,234,116,125,214,231,14,1,95,86,251,46,8,255,77,0,152,249,81,42,132\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.824ZProxyusingOraclize.testoraclize_query38": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query38(uint,string,bytes[1],uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[114,52,90,139,217,191,21,44,140,247,169,91,48,16,97,255,19,20,96,26,250,229,216,223,57,107,40,25,211,246,47,13]]",
              "sol": "[bytes(abi.encode(\"114,52,90,139,217,191,21,44,140,247,169,91,48,16,97,255,19,20,96,26,250,229,216,223,57,107,40,25,211,246,47,13\"))]"
            },
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.825ZProxyusingOraclize.testoraclize_query39": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query39(string,bytes[1],uint)",
          "parameters": [
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[93,221,219,205,139,252,28,108,25,22,112,24,119,79,247,160,158,158,166,2,243,220,161,152,16,189,67,193,232,22,143,236]]",
              "sol": "[bytes(abi.encode(\"93,221,219,205,139,252,28,108,25,22,112,24,119,79,247,160,158,158,166,2,243,220,161,152,16,189,67,193,232,22,143,236\"))]"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.826ZProxyusingOraclize.testoraclize_query40": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query40(string,bytes[2])",
          "parameters": [
            {
              "js": "\"jy9vyf\"",
              "sol": "\"jy9vyf\""
            },
            {
              "js": "[[41,216,159,178,79,70,40,122,62,52,40,37,90,75,224,58,127,2,201,45,212,46,78,63,14,184,90,137,241,41,106,85],[196,253,162,206,116,162,252,63,117,248,99,228,164,44,251,133,21,60,229,87,235,48,175,83,44,156,87,189,145,147,185,119]]",
              "sol": "[bytes(abi.encode(\"41,216,159,178,79,70,40,122,62,52,40,37,90,75,224,58,127,2,201,45,212,46,78,63,14,184,90,137,241,41,106,85\")),bytes(abi.encode(\"196,253,162,206,116,162,252,63,117,248,99,228,164,44,251,133,21,60,229,87,235,48,175,83,44,156,87,189,145,147,185,119\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.827ZProxyusingOraclize.testoraclize_query41": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query41(uint,string,bytes[2])",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "\"l51da\"",
              "sol": "\"l51da\""
            },
            {
              "js": "[[72,249,233,10,83,60,236,169,8,175,255,21,195,222,0,79,251,22,169,37,111,79,82,57,156,107,245,217,186,99,55,30],[135,152,113,36,252,221,122,228,254,230,65,253,176,66,31,149,15,163,49,82,38,105,66,156,184,5,243,124,194,210,125,189]]",
              "sol": "[bytes(abi.encode(\"72,249,233,10,83,60,236,169,8,175,255,21,195,222,0,79,251,22,169,37,111,79,82,57,156,107,245,217,186,99,55,30\")),bytes(abi.encode(\"135,152,113,36,252,221,122,228,254,230,65,253,176,66,31,149,15,163,49,82,38,105,66,156,184,5,243,124,194,210,125,189\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.828ZProxyusingOraclize.testoraclize_query42": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query42(uint,string,bytes[2],uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[[145,235,31,250,118,254,11,7,36,96,195,121,42,177,136,79,18,116,116,52,166,42,84,222,4,175,214,159,65,202,128,129],[21,95,55,43,43,11,88,42,66,146,233,208,33,8,159,215,89,137,156,76,134,43,76,226,62,48,6,196,183,91,86,214]]",
              "sol": "[bytes(abi.encode(\"145,235,31,250,118,254,11,7,36,96,195,121,42,177,136,79,18,116,116,52,166,42,84,222,4,175,214,159,65,202,128,129\")),bytes(abi.encode(\"21,95,55,43,43,11,88,42,66,146,233,208,33,8,159,215,89,137,156,76,134,43,76,226,62,48,6,196,183,91,86,214\"))]"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.829ZProxyusingOraclize.testoraclize_query43": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query43(string,bytes[2],uint)",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[[90,255,41,32,85,50,87,161,167,239,2,23,94,137,127,165,133,79,242,135,145,167,206,212,82,237,236,146,41,41,2,202],[176,5,78,163,10,187,189,158,131,174,254,72,214,194,161,206,207,236,166,225,215,158,41,33,150,154,228,58,78,103,13,166]]",
              "sol": "[bytes(abi.encode(\"90,255,41,32,85,50,87,161,167,239,2,23,94,137,127,165,133,79,242,135,145,167,206,212,82,237,236,146,41,41,2,202\")),bytes(abi.encode(\"176,5,78,163,10,187,189,158,131,174,254,72,214,194,161,206,207,236,166,225,215,158,41,33,150,154,228,58,78,103,13,166\"))]"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.830ZProxyusingOraclize.testoraclize_query44": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query44(string,bytes[3])",
          "parameters": [
            {
              "js": "\"0ttfam\"",
              "sol": "\"0ttfam\""
            },
            {
              "js": "[[109,116,251,85,65,105,81,59,79,161,3,206,235,166,205,223,36,220,189,102,10,18,92,69,186,209,178,161,75,188,83,220],[206,128,170,242,33,175,242,87,60,233,139,71,127,199,154,144,133,213,134,10,214,252,202,194,63,247,57,72,137,32,136,169],[165,168,192,218,16,227,90,169,247,199,35,15,44,191,26,252,249,44,12,129,10,25,199,1,152,140,68,82,166,101,192,77]]",
              "sol": "[bytes(abi.encode(\"109,116,251,85,65,105,81,59,79,161,3,206,235,166,205,223,36,220,189,102,10,18,92,69,186,209,178,161,75,188,83,220\")),bytes(abi.encode(\"206,128,170,242,33,175,242,87,60,233,139,71,127,199,154,144,133,213,134,10,214,252,202,194,63,247,57,72,137,32,136,169\")),bytes(abi.encode(\"165,168,192,218,16,227,90,169,247,199,35,15,44,191,26,252,249,44,12,129,10,25,199,1,152,140,68,82,166,101,192,77\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.831ZProxyusingOraclize.testoraclize_query45": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query45(uint,string,bytes[3])",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "\"i9ita\"",
              "sol": "\"i9ita\""
            },
            {
              "js": "[[129,161,85,130,254,35,54,19,231,40,2,21,194,59,92,72,153,201,145,5,231,116,212,199,73,231,137,9,32,129,138,156],[213,1,84,119,159,92,183,39,66,4,110,128,222,250,72,18,106,29,27,4,188,118,11,93,117,210,79,237,154,246,5,204],[154,84,68,128,229,69,153,47,175,249,106,217,161,204,83,82,69,134,95,31,223,226,233,133,79,89,254,115,118,155,240,126]]",
              "sol": "[bytes(abi.encode(\"129,161,85,130,254,35,54,19,231,40,2,21,194,59,92,72,153,201,145,5,231,116,212,199,73,231,137,9,32,129,138,156\")),bytes(abi.encode(\"213,1,84,119,159,92,183,39,66,4,110,128,222,250,72,18,106,29,27,4,188,118,11,93,117,210,79,237,154,246,5,204\")),bytes(abi.encode(\"154,84,68,128,229,69,153,47,175,249,106,217,161,204,83,82,69,134,95,31,223,226,233,133,79,89,254,115,118,155,240,126\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.832ZProxyusingOraclize.testoraclize_query46": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query46(uint,string,bytes[3],uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "[[22,186,195,18,55,247,112,172,174,35,55,154,189,25,25,236,7,85,139,214,20,27,190,170,54,137,154,143,140,240,199,197],[75,109,228,209,40,213,38,15,21,93,161,29,231,60,46,109,74,51,73,5,207,244,147,40,76,0,246,81,126,65,183,177],[47,52,94,66,234,129,8,69,3,56,130,251,28,209,95,120,8,240,214,43,125,77,54,217,111,144,84,208,255,234,119,165]]",
              "sol": "[bytes(abi.encode(\"22,186,195,18,55,247,112,172,174,35,55,154,189,25,25,236,7,85,139,214,20,27,190,170,54,137,154,143,140,240,199,197\")),bytes(abi.encode(\"75,109,228,209,40,213,38,15,21,93,161,29,231,60,46,109,74,51,73,5,207,244,147,40,76,0,246,81,126,65,183,177\")),bytes(abi.encode(\"47,52,94,66,234,129,8,69,3,56,130,251,28,209,95,120,8,240,214,43,125,77,54,217,111,144,84,208,255,234,119,165\"))]"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.833ZProxyusingOraclize.testoraclize_query47": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query47(string,bytes[3],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[236,78,97,46,28,54,199,83,224,244,224,90,96,140,126,1,8,159,204,88,126,200,24,44,89,227,119,107,64,187,230,25],[153,101,48,78,78,22,166,0,59,128,207,91,234,161,177,182,198,160,243,232,61,160,28,80,239,210,152,164,148,58,41,107],[46,88,76,74,166,31,173,55,10,179,90,123,162,39,100,160,154,217,24,210,239,38,116,54,31,179,66,219,57,157,198,74]]",
              "sol": "[bytes(abi.encode(\"236,78,97,46,28,54,199,83,224,244,224,90,96,140,126,1,8,159,204,88,126,200,24,44,89,227,119,107,64,187,230,25\")),bytes(abi.encode(\"153,101,48,78,78,22,166,0,59,128,207,91,234,161,177,182,198,160,243,232,61,160,28,80,239,210,152,164,148,58,41,107\")),bytes(abi.encode(\"46,88,76,74,166,31,173,55,10,179,90,123,162,39,100,160,154,217,24,210,239,38,116,54,31,179,66,219,57,157,198,74\"))]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.834ZProxyusingOraclize.testoraclize_query48": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query48(string,bytes[4])",
          "parameters": [
            {
              "js": "\"i9ita\"",
              "sol": "\"i9ita\""
            },
            {
              "js": "[[175,56,240,173,5,21,89,152,76,37,168,129,81,209,218,77,48,150,114,166,41,114,182,123,215,216,6,50,231,188,157,207],[24,30,64,214,189,92,79,136,111,247,150,169,184,87,129,99,86,95,205,117,110,55,95,20,195,171,94,143,200,218,216,132],[5,31,1,1,239,234,162,135,75,12,249,110,115,143,112,8,124,39,61,47,79,156,59,105,108,104,126,168,111,153,85,29],[53,203,155,37,156,201,231,91,142,81,29,125,226,190,239,223,107,127,199,23,67,16,73,110,41,207,76,80,204,18,181,151]]",
              "sol": "[bytes(abi.encode(\"175,56,240,173,5,21,89,152,76,37,168,129,81,209,218,77,48,150,114,166,41,114,182,123,215,216,6,50,231,188,157,207\")),bytes(abi.encode(\"24,30,64,214,189,92,79,136,111,247,150,169,184,87,129,99,86,95,205,117,110,55,95,20,195,171,94,143,200,218,216,132\")),bytes(abi.encode(\"5,31,1,1,239,234,162,135,75,12,249,110,115,143,112,8,124,39,61,47,79,156,59,105,108,104,126,168,111,153,85,29\")),bytes(abi.encode(\"53,203,155,37,156,201,231,91,142,81,29,125,226,190,239,223,107,127,199,23,67,16,73,110,41,207,76,80,204,18,181,151\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.834ZProxyusingOraclize.testoraclize_query49": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query49(uint,string,bytes[4])",
          "parameters": [
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "\"Transaction successfully verified.\"",
              "sol": "\"Transaction successfully verified.\""
            },
            {
              "js": "[[211,50,180,65,171,150,131,145,35,45,234,156,114,50,144,15,177,67,16,6,253,89,31,239,80,100,243,69,220,79,104,224],[131,239,201,15,218,113,42,7,240,32,194,112,230,189,208,143,242,248,98,242,162,25,225,26,253,207,2,81,73,139,101,17],[16,249,202,86,168,35,107,243,181,14,107,208,170,40,171,153,66,90,69,7,135,189,145,96,212,242,96,117,216,163,96,71],[94,254,91,49,88,76,240,75,129,109,151,82,88,10,241,36,12,233,65,57,175,255,157,130,216,194,195,219,21,120,167,34]]",
              "sol": "[bytes(abi.encode(\"211,50,180,65,171,150,131,145,35,45,234,156,114,50,144,15,177,67,16,6,253,89,31,239,80,100,243,69,220,79,104,224\")),bytes(abi.encode(\"131,239,201,15,218,113,42,7,240,32,194,112,230,189,208,143,242,248,98,242,162,25,225,26,253,207,2,81,73,139,101,17\")),bytes(abi.encode(\"16,249,202,86,168,35,107,243,181,14,107,208,170,40,171,153,66,90,69,7,135,189,145,96,212,242,96,117,216,163,96,71\")),bytes(abi.encode(\"94,254,91,49,88,76,240,75,129,109,151,82,88,10,241,36,12,233,65,57,175,255,157,130,216,194,195,219,21,120,167,34\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.835ZProxyusingOraclize.testoraclize_query50": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query50(uint,string,bytes[4],uint)",
          "parameters": [
            {
              "js": "200000",
              "sol": "200000"
            },
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[123,253,84,119,49,109,119,89,124,140,31,192,40,153,113,1,209,79,72,222,16,165,187,24,103,189,45,6,241,170,239,131],[191,56,138,210,74,89,113,175,132,228,214,93,92,156,32,174,225,187,45,107,88,77,11,92,220,206,64,101,26,145,228,112],[22,210,125,27,192,61,209,38,252,98,226,224,26,78,4,229,0,69,119,97,110,34,40,227,38,219,197,28,86,164,215,5],[8,108,147,125,59,125,153,93,16,251,166,40,39,25,148,247,112,135,173,77,130,218,12,55,227,66,10,82,33,199,233,222]]",
              "sol": "[bytes(abi.encode(\"123,253,84,119,49,109,119,89,124,140,31,192,40,153,113,1,209,79,72,222,16,165,187,24,103,189,45,6,241,170,239,131\")),bytes(abi.encode(\"191,56,138,210,74,89,113,175,132,228,214,93,92,156,32,174,225,187,45,107,88,77,11,92,220,206,64,101,26,145,228,112\")),bytes(abi.encode(\"22,210,125,27,192,61,209,38,252,98,226,224,26,78,4,229,0,69,119,97,110,34,40,227,38,219,197,28,86,164,215,5\")),bytes(abi.encode(\"8,108,147,125,59,125,153,93,16,251,166,40,39,25,148,247,112,135,173,77,130,218,12,55,227,66,10,82,33,199,233,222\"))]"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.836ZProxyusingOraclize.testoraclize_query51": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query51(string,bytes[4],uint)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "[[105,159,89,76,85,97,230,186,216,197,188,89,206,169,20,120,243,120,223,185,30,234,138,81,70,30,39,189,132,203,123,252],[227,247,161,53,165,205,147,105,139,23,238,152,35,14,139,73,181,85,190,136,89,17,199,40,108,237,229,250,175,194,109,251],[207,194,67,86,198,218,108,78,221,248,40,126,158,149,1,160,216,227,152,160,70,200,82,100,67,235,216,150,11,110,146,68],[103,251,22,50,56,41,57,65,10,153,181,141,5,161,159,82,99,11,88,117,148,10,211,209,218,78,125,74,69,174,228,74]]",
              "sol": "[bytes(abi.encode(\"105,159,89,76,85,97,230,186,216,197,188,89,206,169,20,120,243,120,223,185,30,234,138,81,70,30,39,189,132,203,123,252\")),bytes(abi.encode(\"227,247,161,53,165,205,147,105,139,23,238,152,35,14,139,73,181,85,190,136,89,17,199,40,108,237,229,250,175,194,109,251\")),bytes(abi.encode(\"207,194,67,86,198,218,108,78,221,248,40,126,158,149,1,160,216,227,152,160,70,200,82,100,67,235,216,150,11,110,146,68\")),bytes(abi.encode(\"103,251,22,50,56,41,57,65,10,153,181,141,5,161,159,82,99,11,88,117,148,10,211,209,218,78,125,74,69,174,228,74\"))]"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.837ZProxyusingOraclize.testoraclize_query52": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query52(string,bytes[5])",
          "parameters": [
            {
              "js": "\"i9ita\"",
              "sol": "\"i9ita\""
            },
            {
              "js": "[[143,82,145,72,47,186,235,23,204,194,182,57,31,139,205,43,150,155,205,21,171,91,90,171,124,93,77,5,107,251,65,233],[142,5,121,203,120,9,172,37,117,235,114,22,106,254,191,50,17,32,253,68,59,82,47,236,139,110,144,29,121,65,66,159],[72,149,242,243,107,186,229,17,8,245,33,35,153,71,0,77,65,100,246,81,58,5,31,224,135,134,217,125,246,60,15,253],[100,121,211,98,174,98,91,148,242,91,40,229,243,230,97,152,14,89,211,206,243,220,189,185,211,29,183,6,141,93,106,72],[10,182,126,228,226,211,252,69,39,114,171,220,52,102,48,233,54,65,198,16,123,192,153,255,253,192,130,239,168,118,230,186]]",
              "sol": "[bytes(abi.encode(\"143,82,145,72,47,186,235,23,204,194,182,57,31,139,205,43,150,155,205,21,171,91,90,171,124,93,77,5,107,251,65,233\")),bytes(abi.encode(\"142,5,121,203,120,9,172,37,117,235,114,22,106,254,191,50,17,32,253,68,59,82,47,236,139,110,144,29,121,65,66,159\")),bytes(abi.encode(\"72,149,242,243,107,186,229,17,8,245,33,35,153,71,0,77,65,100,246,81,58,5,31,224,135,134,217,125,246,60,15,253\")),bytes(abi.encode(\"100,121,211,98,174,98,91,148,242,91,40,229,243,230,97,152,14,89,211,206,243,220,189,185,211,29,183,6,141,93,106,72\")),bytes(abi.encode(\"10,182,126,228,226,211,252,69,39,114,171,220,52,102,48,233,54,65,198,16,123,192,153,255,253,192,130,239,168,118,230,186\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.838ZProxyusingOraclize.testoraclize_query53": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query53(uint,string,bytes[5])",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "\"0ra89w\"",
              "sol": "\"0ra89w\""
            },
            {
              "js": "[[88,125,75,6,4,228,110,19,76,97,126,119,174,239,124,99,133,156,236,210,173,111,109,149,169,42,156,178,236,179,21,164],[62,194,209,98,176,242,6,108,76,220,247,69,99,205,140,157,43,150,76,17,135,166,219,49,94,239,83,51,179,220,185,22],[151,155,164,174,48,41,181,136,136,176,14,234,94,56,218,241,194,42,41,229,199,232,186,178,31,154,7,52,57,156,246,133],[122,199,185,9,61,145,53,125,128,181,74,135,242,197,67,38,100,22,232,27,205,101,145,84,21,241,68,192,111,120,150,224],[175,117,108,107,18,12,19,189,120,41,43,190,32,121,24,52,175,105,34,179,250,236,179,19,231,55,251,23,112,131,95,147]]",
              "sol": "[bytes(abi.encode(\"88,125,75,6,4,228,110,19,76,97,126,119,174,239,124,99,133,156,236,210,173,111,109,149,169,42,156,178,236,179,21,164\")),bytes(abi.encode(\"62,194,209,98,176,242,6,108,76,220,247,69,99,205,140,157,43,150,76,17,135,166,219,49,94,239,83,51,179,220,185,22\")),bytes(abi.encode(\"151,155,164,174,48,41,181,136,136,176,14,234,94,56,218,241,194,42,41,229,199,232,186,178,31,154,7,52,57,156,246,133\")),bytes(abi.encode(\"122,199,185,9,61,145,53,125,128,181,74,135,242,197,67,38,100,22,232,27,205,101,145,84,21,241,68,192,111,120,150,224\")),bytes(abi.encode(\"175,117,108,107,18,12,19,189,120,41,43,190,32,121,24,52,175,105,34,179,250,236,179,19,231,55,251,23,112,131,95,147\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.839ZProxyusingOraclize.testoraclize_query54": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query54(uint,string,bytes[5],uint)",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "\"0ra89w\"",
              "sol": "\"0ra89w\""
            },
            {
              "js": "[[50,146,223,146,177,49,23,185,10,135,121,185,253,126,238,27,145,225,96,132,120,229,24,49,250,217,226,94,140,170,87,230],[95,202,58,196,139,158,210,164,87,106,107,26,24,116,11,153,250,25,235,189,158,165,128,217,143,81,155,233,84,46,235,246],[31,106,26,78,149,244,71,31,54,26,200,103,61,190,116,96,24,77,140,180,196,58,1,113,231,250,51,36,154,208,78,90],[178,231,93,51,16,8,11,93,247,101,175,106,96,121,8,150,11,132,76,64,19,5,137,209,240,237,62,216,149,241,84,33],[0,75,244,168,62,249,231,125,60,121,137,216,14,161,51,75,210,48,206,216,175,70,146,47,170,73,244,32,76,227,216,54]]",
              "sol": "[bytes(abi.encode(\"50,146,223,146,177,49,23,185,10,135,121,185,253,126,238,27,145,225,96,132,120,229,24,49,250,217,226,94,140,170,87,230\")),bytes(abi.encode(\"95,202,58,196,139,158,210,164,87,106,107,26,24,116,11,153,250,25,235,189,158,165,128,217,143,81,155,233,84,46,235,246\")),bytes(abi.encode(\"31,106,26,78,149,244,71,31,54,26,200,103,61,190,116,96,24,77,140,180,196,58,1,113,231,250,51,36,154,208,78,90\")),bytes(abi.encode(\"178,231,93,51,16,8,11,93,247,101,175,106,96,121,8,150,11,132,76,64,19,5,137,209,240,237,62,216,149,241,84,33\")),bytes(abi.encode(\"0,75,244,168,62,249,231,125,60,121,137,216,14,161,51,75,210,48,206,216,175,70,146,47,170,73,244,32,76,227,216,54\"))]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.839ZProxyusingOraclize.testoraclize_query55": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_query55(string,bytes[5],uint)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "[[162,34,191,72,28,78,224,62,62,90,159,220,87,105,17,15,218,116,222,208,5,228,40,2,220,119,216,177,254,249,62,84],[105,23,173,131,135,2,198,236,35,52,137,30,187,72,177,157,31,9,76,93,148,243,119,115,36,30,93,87,248,247,188,72],[221,198,73,132,121,76,146,81,45,35,199,44,68,185,215,224,106,93,218,13,117,170,45,176,8,138,66,0,246,14,26,250],[152,103,241,247,197,38,84,217,62,195,237,233,27,155,139,140,180,211,214,177,10,75,237,219,234,125,148,38,95,233,223,91],[93,110,2,205,213,239,137,162,80,199,112,182,6,210,17,90,37,80,122,237,25,25,100,245,99,115,206,188,111,46,42,145]]",
              "sol": "[bytes(abi.encode(\"162,34,191,72,28,78,224,62,62,90,159,220,87,105,17,15,218,116,222,208,5,228,40,2,220,119,216,177,254,249,62,84\")),bytes(abi.encode(\"105,23,173,131,135,2,198,236,35,52,137,30,187,72,177,157,31,9,76,93,148,243,119,115,36,30,93,87,248,247,188,72\")),bytes(abi.encode(\"221,198,73,132,121,76,146,81,45,35,199,44,68,185,215,224,106,93,218,13,117,170,45,176,8,138,66,0,246,14,26,250\")),bytes(abi.encode(\"152,103,241,247,197,38,84,217,62,195,237,233,27,155,139,140,180,211,214,177,10,75,237,219,234,125,148,38,95,233,223,91\")),bytes(abi.encode(\"93,110,2,205,213,239,137,162,80,199,112,182,6,210,17,90,37,80,122,237,25,25,100,245,99,115,206,188,111,46,42,145\"))]"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.840ZProxyusingOraclize.testoraclize_setProof": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setProof(byte)",
          "parameters": [
            {
              "js": "[56]",
              "sol": "bytes1(\"56\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.840ZProxyusingOraclize.testoraclize_cbAddress": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_cbAddress()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.841ZProxyusingOraclize.testgetCodeSize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetCodeSize(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.841ZProxyusingOraclize.testoraclize_setCustomGasPrice": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_setCustomGasPrice(uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.841ZProxyusingOraclize.testoraclize_randomDS_getSessionPubKeyHash": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_getSessionPubKeyHash()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.842ZProxyusingOraclize.testparseAddr": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseAddr(string)",
          "parameters": [
            {
              "js": "\"0ttfam\"",
              "sol": "\"0ttfam\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.842ZProxyusingOraclize.teststrCompare": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrCompare(string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.842ZProxyusingOraclize.testindexOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testindexOf(string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.843ZProxyusingOraclize.teststrConcat0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat0(string,string)",
          "parameters": [
            {
              "js": "\"9sbed\"",
              "sol": "\"9sbed\""
            },
            {
              "js": "\"2i02go\"",
              "sol": "\"2i02go\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.843ZProxyusingOraclize.teststrConcat1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat1(string,string,string)",
          "parameters": [
            {
              "js": "\"ipkqsw\"",
              "sol": "\"ipkqsw\""
            },
            {
              "js": "\"bofzyb\"",
              "sol": "\"bofzyb\""
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.843ZProxyusingOraclize.teststrConcat2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat2(string,string,string,string)",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "\"l51da\"",
              "sol": "\"l51da\""
            },
            {
              "js": "\"f58xqj\"",
              "sol": "\"f58xqj\""
            },
            {
              "js": "\"jy9vyf\"",
              "sol": "\"jy9vyf\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.844ZProxyusingOraclize.teststrConcat3": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststrConcat3(string,string,string,string,string)",
          "parameters": [
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "\"l51da\"",
              "sol": "\"l51da\""
            },
            {
              "js": "\"bofzyb\"",
              "sol": "\"bofzyb\""
            },
            {
              "js": "\"i9ita\"",
              "sol": "\"i9ita\""
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.845ZProxyusingOraclize.testsafeParseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt0(string)",
          "parameters": [
            {
              "js": "\"pcalb\"",
              "sol": "\"pcalb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.846ZProxyusingOraclize.testsafeParseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1001-1003",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeParseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"2873r9\"",
              "sol": "\"2873r9\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.847ZProxyusingOraclize.testparseInt0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt0(string)",
          "parameters": [
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.847ZProxyusingOraclize.testparseInt1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1030-1032",
          "restrictions": [
            "_b > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b>0",
          "parameters": [
            {
              "js": "\"2i02go\"",
              "sol": "\"2i02go\""
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_b <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testparseInt1(string,uint) WHEN _b<=0",
          "parameters": [
            {
              "js": "\"P\"",
              "sol": "\"P\""
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.848ZProxyusingOraclize.testuint2str": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1037-1039",
          "restrictions": [
            "_i == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i==0",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_i != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testuint2str(uint) WHEN _i!=0",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.849ZProxyusingOraclize.teststra2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute teststra2cbor(string[])",
          "parameters": [
            {
              "js": "[\"l51da\",\"0ttfam\",\"i9ita\"]",
              "sol": "[string(\"l51da\"),string(\"0ttfam\"),string(\"i9ita\")]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.850ZProxyusingOraclize.testba2cbor": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testba2cbor(bytes[])",
          "parameters": [
            {
              "js": "[[11,69,221,104,155,13,116,153,218,246,153,183,109,130,255,60,156,169,33,162,198,200,139,161,223,215,11,190,161,70,56,122],[36,19,134,143,61,194,36,255,199,100,8,196,135,199,220,123,73,96,55,120,121,222,153,154,71,252,147,196,232,94,78,20],[164,228,176,229,176,44,177,96,42,62,87,146,70,90,238,44,180,222,181,118,109,217,244,181,107,58,73,75,251,235,106,202]]",
              "sol": "[bytes(abi.encode(\"11,69,221,104,155,13,116,153,218,246,153,183,109,130,255,60,156,169,33,162,198,200,139,161,223,215,11,190,161,70,56,122\")),bytes(abi.encode(\"36,19,134,143,61,194,36,255,199,100,8,196,135,199,220,123,73,96,55,120,121,222,153,154,71,252,147,196,232,94,78,20\")),bytes(abi.encode(\"164,228,176,229,176,44,177,96,42,62,87,146,70,90,238,44,180,222,181,118,109,217,244,181,107,58,73,75,251,235,106,202\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.851ZProxyusingOraclize.testoraclize_newRandomDSQuery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_newRandomDSQuery(uint,uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.851ZProxyusingOraclize.testoraclize_randomDS_setCommitment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_setCommitment(bytes32,bytes32)",
          "parameters": [
            {
              "js": "[254,147,81,1,173,214,248,198,95,77,226,140,56,42,249,138,189,226,216,96,172,28,33,196,163,22,169,87,197,160,19,235]",
              "sol": "stringToBytes32(\"254,147,81,1,173,214,248,198,95,77,226,140,56,42,249,138,189,226,216,96,172,28,33,196,163,22,169,87,197,160,19,235\")"
            },
            {
              "js": "[116,28,59,79,83,0,216,55,216,132,239,183,162,159,213,102,254,74,98,72,72,135,224,24,232,37,139,159,94,132,14,61]",
              "sol": "stringToBytes32(\"116,28,59,79,83,0,216,55,216,132,239,183,162,159,213,102,254,74,98,72,72,135,224,24,232,37,139,159,94,132,14,61\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.852ZProxyusingOraclize.testverifySig": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifySig(bytes32,bytes,bytes)",
          "parameters": [
            {
              "js": "[167,42,161,81,140,50,84,144,173,151,128,49,79,216,153,169,135,165,111,91,183,168,239,210,35,217,218,152,102,80,25,218]",
              "sol": "stringToBytes32(\"167,42,161,81,140,50,84,144,173,151,128,49,79,216,153,169,135,165,111,91,183,168,239,210,35,217,218,152,102,80,25,218\")"
            },
            {
              "js": "[182,115,192,227,164,70,7,224,219,217,140,77,108,42,45,90,164,134,160,144,244,81,71,212,165,28,86,108,109,129,249,58]",
              "sol": "abi.encode(\"182,115,192,227,164,70,7,224,219,217,140,77,108,42,45,90,164,134,160,144,244,81,71,212,165,28,86,108,109,129,249,58\")"
            },
            {
              "js": "[104,206,60,55,119,72,47,213,193,81,28,157,154,67,124,31,162,145,19,181,66,213,52,82,40,206,28,102,76,217,20,153]",
              "sol": "abi.encode(\"104,206,60,55,119,72,47,213,193,81,28,157,154,67,124,31,162,145,19,181,66,213,52,82,40,206,28,102,76,217,20,153\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.852ZProxyusingOraclize.testoraclize_randomDS_proofVerify__sessionKeyValidity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1163-1165",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[135,4,30,27,159,108,117,26,236,39,9,194,197,109,145,171,151,111,30,234,121,46,112,252,71,100,3,180,3,157,223,80]",
              "sol": "abi.encode(\"135,4,30,27,159,108,117,26,236,39,9,194,197,109,145,171,151,111,30,234,121,46,112,252,71,100,3,180,3,157,223,80\")"
            },
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__sessionKeyValidity(bytes,uint) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[74,147,170,64,145,136,140,234,2,188,106,229,141,69,61,57,167,216,166,148,247,163,111,129,23,222,137,106,12,106,155,39]",
              "sol": "abi.encode(\"74,147,170,64,145,136,140,234,2,188,106,229,141,69,61,57,167,216,166,148,247,163,111,129,23,222,137,106,12,106,155,39\")"
            },
            {
              "js": "1025",
              "sol": "1025"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.854ZProxyusingOraclize.testoraclize_randomDS_proofVerify__returnCode": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1183-1185",
          "restrictions": [
            "Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier!=true",
          "parameters": [
            {
              "js": "[80,129,13,144,142,142,104,191,51,162,138,212,161,137,195,55,38,9,162,154,248,39,3,199,210,199,58,254,252,45,187,165]",
              "sol": "stringToBytes32(\"80,129,13,144,142,142,104,191,51,162,138,212,161,137,195,55,38,9,162,154,248,39,3,199,210,199,58,254,252,45,187,165\")"
            },
            {
              "js": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\"",
              "sol": "\"https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/\""
            },
            {
              "js": "[145,42,152,233,246,11,127,246,150,139,243,231,135,13,128,94,77,39,196,205,69,201,3,148,220,113,213,91,118,175,82,29]",
              "sol": "abi.encode(\"145,42,152,233,246,11,127,246,150,139,243,231,135,13,128,94,77,39,196,205,69,201,3,148,220,113,213,91,118,175,82,29\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__returnCode(bytes32,string,bytes) WHEN Identifier==true",
          "parameters": [
            {
              "js": "[3,147,146,31,21,242,81,27,237,153,119,49,85,219,129,68,144,229,43,251,61,201,100,92,93,228,232,35,230,19,17,216]",
              "sol": "stringToBytes32(\"3,147,146,31,21,242,81,27,237,153,119,49,85,219,129,68,144,229,43,251,61,201,100,92,93,228,232,35,230,19,17,216\")"
            },
            {
              "js": "\"L\"",
              "sol": "\"L\""
            },
            {
              "js": "[254,107,61,150,67,159,58,154,89,65,83,189,160,131,148,145,128,217,206,181,38,253,148,135,71,104,152,160,123,25,218,71]",
              "sol": "abi.encode(\"254,107,61,150,67,159,58,154,89,65,83,189,160,131,148,145,128,217,206,181,38,253,148,135,71,104,152,160,123,25,218,71\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.854ZProxyusingOraclize.testmatchBytes32Prefix": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testmatchBytes32Prefix(bytes32,bytes,uint) WHEN _prefix.length==_nRandomBytes",
          "parameters": [
            {
              "js": "[219,28,165,219,82,107,244,91,118,130,3,29,74,167,152,227,51,40,242,248,206,60,83,71,194,27,64,7,60,93,43,242]",
              "sol": "stringToBytes32(\"219,28,165,219,82,107,244,91,118,130,3,29,74,167,152,227,51,40,242,248,206,60,83,71,194,27,64,7,60,93,43,242\")"
            },
            {
              "js": "[79,137,101,245,9,12,178,185,178,5,32,191,97,146,63,219,227,243,77,196,19,220,21,190,187,177,167,137,88,38,180,122]",
              "sol": "abi.encode(\"79,137,101,245,9,12,178,185,178,5,32,191,97,146,63,219,227,243,77,196,19,220,21,190,187,177,167,137,88,38,180,122\")"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testmatchBytes32Prefix(bytes32,bytes,uint) when NOT comply with: _prefix.length == _nRandomBytes",
            "parameters": [
              {
                "js": "[219,28,165,219,82,107,244,91,118,130,3,29,74,167,152,227,51,40,242,248,206,60,83,71,194,27,64,7,60,93,43,242]",
                "sol": "stringToBytes32(\"219,28,165,219,82,107,244,91,118,130,3,29,74,167,152,227,51,40,242,248,206,60,83,71,194,27,64,7,60,93,43,242\")"
              },
              {
                "js": "[33,57,27,79,57,174,242,86,58,77,156,191,138,122,155,191,223,120,40,196,160,6,206,52,93,101,181,69,244,103,71,162,117]",
                "sol": "bytes33(\"33,57,27,79,57,174,242,86,58,77,156,191,138,122,155,191,223,120,40,196,160,6,206,52,93,101,181,69,244,103,71,162,117\")"
              },
              {
                "js": "32",
                "sol": "32"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.855ZProxyusingOraclize.testoraclize_randomDS_proofVerify__main": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1205-1207",
          "restrictions": [
            "FunctionCall == FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall!=true",
          "parameters": [
            {
              "js": "[185,94,42,92,158,210,147,93,70,192,115,113,172,226,169,105,101,27,242,186,91,76,212,155,153,196,27,58,37,242,107,171]",
              "sol": "abi.encode(\"185,94,42,92,158,210,147,93,70,192,115,113,172,226,169,105,101,27,242,186,91,76,212,155,153,196,27,58,37,242,107,171\")"
            },
            {
              "js": "[70,238,104,246,139,187,99,111,111,225,208,48,0,172,149,208,215,229,208,184,236,142,175,196,47,79,67,221,201,115,97,182]",
              "sol": "stringToBytes32(\"70,238,104,246,139,187,99,111,111,225,208,48,0,172,149,208,215,229,208,184,236,142,175,196,47,79,67,221,201,115,97,182\")"
            },
            {
              "js": "[67,161,185,240,19,127,184,29,5,234,75,203,210,45,101,107,26,180,172,113,131,212,30,215,50,219,23,57,102,124,214,60]",
              "sol": "abi.encode(\"67,161,185,240,19,127,184,29,5,234,75,203,210,45,101,107,26,180,172,113,131,212,30,215,50,219,23,57,102,124,214,60\")"
            },
            {
              "js": "\"0ra89w\"",
              "sol": "\"0ra89w\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall == FunctionCall==true",
          "parameters": [
            {
              "js": "[237,187,139,88,100,203,202,28,181,49,253,71,92,224,106,80,246,152,168,118,82,9,222,41,47,31,89,239,185,124,211,230]",
              "sol": "abi.encode(\"237,187,139,88,100,203,202,28,181,49,253,71,92,224,106,80,246,152,168,118,82,9,222,41,47,31,89,239,185,124,211,230\")"
            },
            {
              "js": "[60,7,115,236,192,23,100,108,10,32,219,138,23,166,252,37,167,90,35,225,71,79,216,150,187,134,251,135,62,225,189,62]",
              "sol": "stringToBytes32(\"60,7,115,236,192,23,100,108,10,32,219,138,23,166,252,37,167,90,35,225,71,79,216,150,187,134,251,135,62,225,189,62\")"
            },
            {
              "js": "[69,34,236,54,180,135,110,11,43,168,215,181,78,157,246,58,219,191,240,82,62,167,182,150,47,159,118,173,55,207,168,117]",
              "sol": "abi.encode(\"69,34,236,54,180,135,110,11,43,168,215,181,78,157,246,58,219,191,240,82,62,167,182,150,47,159,118,173,55,207,168,117\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "1211-1213",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[35,237,98,139,147,48,115,110,67,225,29,233,72,168,111,182,65,244,30,126,241,166,182,82,87,242,110,115,63,88,111,167]",
              "sol": "abi.encode(\"35,237,98,139,147,48,115,110,67,225,29,233,72,168,111,182,65,244,30,126,241,166,182,82,87,242,110,115,63,88,111,167\")"
            },
            {
              "js": "[97,147,132,250,105,157,238,30,97,127,1,0,109,138,194,122,107,166,77,183,83,183,132,111,199,176,102,162,195,184,202,185]",
              "sol": "stringToBytes32(\"97,147,132,250,105,157,238,30,97,127,1,0,109,138,194,122,107,166,77,183,83,183,132,111,199,176,102,162,195,184,202,185\")"
            },
            {
              "js": "[179,65,72,83,0,227,19,253,8,4,65,86,179,42,47,171,94,29,202,201,217,157,233,145,9,49,143,200,168,58,161,56]",
              "sol": "abi.encode(\"179,65,72,83,0,227,19,253,8,4,65,86,179,42,47,171,94,29,202,201,217,157,233,145,9,49,143,200,168,58,161,56\")"
            },
            {
              "js": "\"bofzyb\"",
              "sol": "\"bofzyb\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[231,123,6,139,50,24,149,115,164,146,154,206,193,139,180,160,106,91,217,141,124,220,176,244,142,196,30,1,233,130,52,153]",
              "sol": "abi.encode(\"231,123,6,139,50,24,149,115,164,146,154,206,193,139,180,160,106,91,217,141,124,220,176,244,142,196,30,1,233,130,52,153\")"
            },
            {
              "js": "[29,250,45,36,148,186,130,102,245,136,144,199,210,189,92,96,127,236,32,208,83,55,66,98,79,96,215,189,63,184,12,58]",
              "sol": "stringToBytes32(\"29,250,45,36,148,186,130,102,245,136,144,199,210,189,92,96,127,236,32,208,83,55,66,98,79,96,215,189,63,184,12,58\")"
            },
            {
              "js": "[126,56,76,169,71,30,134,96,28,132,226,236,133,136,231,103,155,250,231,41,103,4,191,230,164,139,139,143,246,19,63,235]",
              "sol": "abi.encode(\"126,56,76,169,71,30,134,96,28,132,226,236,133,136,231,103,155,250,231,41,103,4,191,230,164,139,139,143,246,19,63,235\")"
            },
            {
              "js": "\"0ra89w\"",
              "sol": "\"0ra89w\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "1228-1230",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[11,196,165,233,151,222,161,55,238,31,8,107,71,205,151,150,26,175,97,111,185,22,146,75,79,185,122,98,8,226,205,0]",
              "sol": "abi.encode(\"11,196,165,233,151,222,161,55,238,31,8,107,71,205,151,150,26,175,97,111,185,22,146,75,79,185,122,98,8,226,205,0\")"
            },
            {
              "js": "[200,84,203,31,22,28,67,135,94,100,181,69,111,183,31,57,52,105,135,248,11,113,251,132,172,49,109,108,243,110,39,101]",
              "sol": "stringToBytes32(\"200,84,203,31,22,28,67,135,94,100,181,69,111,183,31,57,52,105,135,248,11,113,251,132,172,49,109,108,243,110,39,101\")"
            },
            {
              "js": "[107,205,184,99,101,26,196,139,231,100,65,24,209,80,19,133,46,90,145,55,2,48,176,95,132,120,44,129,232,218,6,177]",
              "sol": "abi.encode(\"107,205,184,99,101,26,196,139,231,100,65,24,209,80,19,133,46,90,145,55,2,48,176,95,132,120,44,129,232,218,6,177\")"
            },
            {
              "js": "\"f58xqj\"",
              "sol": "\"f58xqj\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[202,75,67,176,120,184,245,221,208,224,141,233,223,150,141,142,252,148,146,194,161,201,20,137,181,155,176,131,146,57,180,145]",
              "sol": "abi.encode(\"202,75,67,176,120,184,245,221,208,224,141,233,223,150,141,142,252,148,146,194,161,201,20,137,181,155,176,131,146,57,180,145\")"
            },
            {
              "js": "[227,138,211,130,101,116,199,204,231,125,216,37,239,65,64,216,173,50,211,3,56,192,234,192,163,215,243,101,119,235,151,218]",
              "sol": "stringToBytes32(\"227,138,211,130,101,116,199,204,231,125,216,37,239,65,64,216,173,50,211,3,56,192,234,192,163,215,243,101,119,235,151,218\")"
            },
            {
              "js": "[100,87,202,248,88,214,234,191,191,114,3,47,4,146,232,171,71,24,193,28,154,198,168,41,254,36,200,94,150,43,196,202]",
              "sol": "abi.encode(\"100,87,202,248,88,214,234,191,191,114,3,47,4,146,232,171,71,24,193,28,154,198,168,41,254,36,200,94,150,43,196,202\")"
            },
            {
              "js": "\"[\"",
              "sol": "\"[\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "1232-1234",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified!=true",
          "parameters": [
            {
              "js": "[51,210,223,235,25,208,190,174,53,97,103,162,99,223,123,230,135,32,107,36,245,110,220,38,240,67,167,169,189,151,132,51]",
              "sol": "abi.encode(\"51,210,223,235,25,208,190,174,53,97,103,162,99,223,123,230,135,32,107,36,245,110,220,38,240,67,167,169,189,151,132,51\")"
            },
            {
              "js": "[224,40,121,57,91,64,245,75,90,54,83,37,43,11,36,139,32,210,193,117,39,238,102,217,235,237,236,148,96,211,20,71]",
              "sol": "stringToBytes32(\"224,40,121,57,91,64,245,75,90,54,83,37,43,11,36,139,32,210,193,117,39,238,102,217,235,237,236,148,96,211,20,71\")"
            },
            {
              "js": "[13,129,243,168,98,74,248,79,16,154,113,129,225,92,236,220,0,91,213,154,187,65,14,249,181,52,193,97,41,121,20,196]",
              "sol": "abi.encode(\"13,129,243,168,98,74,248,79,16,154,113,129,225,92,236,220,0,91,213,154,187,65,14,249,181,52,193,97,41,121,20,196\")"
            },
            {
              "js": "\"l51da\"",
              "sol": "\"l51da\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "oraclize_randomDS_sessionKeysHashVerified == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoraclize_randomDS_proofVerify__main(bytes,bytes32,bytes,string) WHEN oraclize_randomDS_sessionKeysHashVerified==true",
          "parameters": [
            {
              "js": "[90,41,121,79,114,159,128,247,78,120,209,229,149,255,39,63,37,11,216,25,11,112,246,227,215,216,144,113,43,85,6,74]",
              "sol": "abi.encode(\"90,41,121,79,114,159,128,247,78,120,209,229,149,255,39,63,37,11,216,25,11,112,246,227,215,216,144,113,43,85,6,74\")"
            },
            {
              "js": "[192,215,164,249,162,148,248,6,8,6,97,29,134,200,103,86,166,108,10,245,50,81,68,240,15,45,12,225,118,141,73,142]",
              "sol": "stringToBytes32(\"192,215,164,249,162,148,248,6,8,6,97,29,134,200,103,86,166,108,10,245,50,81,68,240,15,45,12,225,118,141,73,142\")"
            },
            {
              "js": "[222,191,44,15,237,6,88,106,216,165,139,190,223,182,132,145,86,242,30,194,174,220,143,1,212,24,167,10,79,215,98,191]",
              "sol": "abi.encode(\"222,191,44,15,237,6,88,106,216,165,139,190,223,182,132,145,86,242,30,194,174,220,143,1,212,24,167,10,79,215,98,191\")"
            },
            {
              "js": "\"Capstones\"",
              "sol": "\"Capstones\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.862ZProxyusingOraclize.testcopyBytes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcopyBytes(bytes,uint,uint,bytes,uint)",
          "parameters": [
            {
              "js": "[116,2,135,230,134,48,213,26,179,192,249,134,100,137,215,241,203,139,23,235,69,26,51,119,64,136,183,190,223,241,119,37]",
              "sol": "abi.encode(\"116,2,135,230,134,48,213,26,179,192,249,134,100,137,215,241,203,139,23,235,69,26,51,119,64,136,183,190,223,241,119,37\")"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[211,53,157,13,54,117,215,10,193,18,187,122,58,97,199,142,58,31,147,19,175,230,36,62,252,238,181,254,46,237,167,47]",
              "sol": "abi.encode(\"211,53,157,13,54,117,215,10,193,18,187,122,58,97,199,142,58,31,147,19,175,230,36,62,252,238,181,254,46,237,167,47\")"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.863ZProxyusingOraclize.testsafer_ecrecover": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafer_ecrecover(bytes32,uint8,bytes32,bytes32)",
          "parameters": [
            {
              "js": "[119,119,155,159,140,103,149,252,213,81,125,177,53,117,124,237,245,132,211,218,39,139,157,60,86,84,16,190,241,29,150,226]",
              "sol": "stringToBytes32(\"119,119,155,159,140,103,149,252,213,81,125,177,53,117,124,237,245,132,211,218,39,139,157,60,86,84,16,190,241,29,150,226\")"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "[160,10,68,1,131,228,104,111,118,220,228,194,32,33,185,190,223,217,60,185,103,2,50,254,183,118,66,230,247,126,40,224]",
              "sol": "stringToBytes32(\"160,10,68,1,131,228,104,111,118,220,228,194,32,33,185,190,223,217,60,185,103,2,50,254,183,118,66,230,247,126,40,224\")"
            },
            {
              "js": "[136,59,159,94,140,8,22,141,150,71,50,35,230,248,244,107,21,172,121,35,84,139,20,27,91,229,244,178,154,245,26,129]",
              "sol": "stringToBytes32(\"136,59,159,94,140,8,22,141,150,71,50,35,230,248,244,107,21,172,121,35,84,139,20,27,91,229,244,178,154,245,26,129\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.863ZProxyusingOraclize.testecrecovery": {
    "branches": {
      "0": {
        "branch": {
          "loc": "1288-1290",
          "restrictions": [
            "_sig.length != 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length!=65",
          "parameters": [
            {
              "js": "[49,221,210,176,140,47,186,99,28,209,12,206,124,89,228,212,5,140,234,57,62,212,234,108,232,88,198,183,2,184,17,236]",
              "sol": "stringToBytes32(\"49,221,210,176,140,47,186,99,28,209,12,206,124,89,228,212,5,140,234,57,62,212,234,108,232,88,198,183,2,184,17,236\")"
            },
            {
              "js": "[166,92,131,209,142,229,174,45,116,20,253,116,118,87,52,210,200,102,171,20,2,106,12,189,103,124,37,20,26,198,114,124,15,172,5,210,77,170,106,122,181,135,93,131,176,55,248,212,127]",
              "sol": "abi.encode(\"166,92,131,209,142,229,174,45,116,20,253,116,118,87,52,210,200,102,171,20,2,106,12,189,103,124,37,20,26,198,114,124,15,172,5,210,77,170,106,122,181,135,93,131,176,55,248,212,127\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sig.length == 65"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testecrecovery(bytes32,bytes) WHEN _sig.length==65",
          "parameters": [
            {
              "js": "[102,73,59,203,155,136,27,81,40,252,45,52,8,152,106,8,89,122,45,64,54,178,86,213,165,101,53,169,238,61,29,181]",
              "sol": "stringToBytes32(\"102,73,59,203,155,136,27,81,40,252,45,52,8,152,106,8,89,122,45,64,54,178,86,213,165,101,53,169,238,61,29,181\")"
            },
            {
              "js": "[217,217,239,185,101,233,150,136,21,155,28,173,248,114,175,144,75,98,89,175,74,212,71,185,164,205,74,121,206,72,102,250,113,195,165,130,57,66,143,57,229,109,131,215,101,67,119,26,145,95,205,160,115,137,248,240,38,120,89,10,59,250,179,206,213]",
              "sol": "abi.encode(\"217,217,239,185,101,233,150,136,21,155,28,173,248,114,175,144,75,98,89,175,74,212,71,185,164,205,74,121,206,72,102,250,113,195,165,130,57,66,143,57,229,109,131,215,101,67,119,26,145,95,205,160,115,137,248,240,38,120,89,10,59,250,179,206,213\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.864ZProxyusingOraclize.testsafeMemoryCleaner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsafeMemoryCleaner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.866ZVerifier.verifyTx": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute verifyTx(uint[2],uint[2][2],uint[2],uint[2])",
          "parameters": [
            {
              "js": "[23,1532892063]",
              "sol": "[uint(23),uint(1532892063)]"
            },
            {
              "js": "[[255,65],[16,66]]",
              "sol": "[[uint(255),uint(65)],[uint(16),uint(66)]]"
            },
            {
              "js": "[24,10]",
              "sol": "[uint(24),uint(10)]"
            },
            {
              "js": "[1025,27]",
              "sol": "[uint(1025),uint(27)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.868ZProxyVerifier.testverifyingKey": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverifyingKey()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.869ZProxyVerifier.testverify": {
    "branches": {
      "0": {
        "branch": {
          "loc": "572-576",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "[46,2]",
              "sol": "[uint(46),uint(2)]"
            },
            {
              "js": "{\"A\": {\"X\": 1532892062,\"Y\": 20},\"B\": {\"X\": [59,3],\"Y\": [64,54]},\"C\": {\"X\": 23,\"Y\": 3}}",
              "sol": "Verifier.Proof(Pairing.G1Point(1532892062,20),Pairing.G2Point([uint(59),uint(3)],[uint(64),uint(54)]),Pairing.G1Point(23,3))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testverify(uint[],Verifier.Proof) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "[60,24,60]",
              "sol": "[uint(60),uint(24),uint(60)]"
            },
            {
              "js": "{\"A\": {\"X\": 2014223714,\"Y\": 127},\"B\": {\"X\": [127,7],\"Y\": [17,1532892062]},\"C\": {\"X\": 71,\"Y\": 21}}",
              "sol": "Verifier.Proof(Pairing.G1Point(2014223714,127),Pairing.G2Point([uint(127),uint(7)],[uint(17),uint(1532892062)]),Pairing.G1Point(71,21))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.871ZERC721.balanceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute balanceOf(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.871ZERC721.ownerOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute ownerOf(uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.871ZERC721.approve": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute approve(address,uint256) WHEN to!=_tokenOwner,msg.sender!=_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail approve(address,uint256) when NOT comply with: msg.sender != _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "45",
                "sol": "45"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"accounts[1]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.873ZERC721.getApproved": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getApproved(uint256)",
          "parameters": [
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.873ZERC721.setApprovalForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setApprovalForAll(address,bool) WHEN to!=msg.sender",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setApprovalForAll(address,bool) when NOT comply with: to != msg.sender",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "accounts[8]"
              },
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.874ZERC721.isApprovedForAll": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isApprovedForAll(address,address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.874ZERC721.transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "48",
                "sol": "48"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.880ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.882ZERC721.safeTransferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute safeTransferFrom(address,address,uint256,bytes) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "[12,143,220,63,188,190,161,238,135,54,178,17,176,155,234,126,127,244,176,174,80,161,135,9,212,126,218,18,144,108,193,130]",
              "sol": "abi.encode(\"12,143,220,63,188,190,161,238,135,54,178,17,176,155,234,126,127,244,176,174,80,161,135,9,212,126,218,18,144,108,193,130\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail safeTransferFrom(address,address,uint256,bytes) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "17",
                "sol": "17"
              },
              {
                "js": "[12,143,220,63,188,190,161,238,135,54,178,17,176,155,234,126,127,244,176,174,80,161,135,9,212,126,218,18,144,108,193,130]",
                "sol": "abi.encode(\"12,143,220,63,188,190,161,238,135,54,178,17,176,155,234,126,127,244,176,174,80,161,135,9,212,126,218,18,144,108,193,130\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.885ZERC721.setPaused": {
    "branches": {
      "0": {
        "branch": {
          "loc": "50-53",
          "restrictions": [
            "_paused == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused==true,msg.sender==_owner",
          "parameters": [
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "false",
                "sol": "false"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "_paused != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setPaused(bool) WHEN _paused!=true,msg.sender==_owner",
          "parameters": [
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setPaused(bool) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "true",
                "sol": "true"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.886ZERC721.supportsInterface": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute supportsInterface(bytes4)",
          "parameters": [
            {
              "js": "[5,71,229,46]",
              "sol": "bytes4(\"5,71,229,46\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.888ZProxyERC721.test_exists": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_exists(uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.888ZProxyERC721.test_isApprovedOrOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isApprovedOrOwner(address,uint256)",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.888ZProxyERC721.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.889ZProxyERC721.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "22",
              "sol": "22"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "22",
                "sol": "22"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.890ZProxyERC721.test_checkOnERC721Received": {
    "branches": {
      "0": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[31,240,38,171,218,219,165,254,224,136,221,224,150,178,68,216,152,80,121,39,107,35,203,195,132,106,201,147,166,94,203,232]",
              "sol": "abi.encode(\"31,240,38,171,218,219,165,254,224,136,221,224,150,178,68,216,152,80,121,39,107,35,203,195,132,106,201,147,166,94,203,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_checkOnERC721Received(address,address,uint256,bytes) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "[93,37,182,76,247,41,20,204,91,132,187,131,172,203,236,189,48,170,217,68,173,215,217,18,149,220,233,123,245,138,114,133]",
              "sol": "abi.encode(\"93,37,182,76,247,41,20,204,91,132,187,131,172,203,236,189,48,170,217,68,173,215,217,18,149,220,233,123,245,138,114,133\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.891ZERC721MintableComplete.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256) WHEN msg.sender==_owner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.893ZSolnSquareVerifier.addSolution": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addSolution(uint256,address,uint[2],uint[2][2],uint[2],uint[2]) WHEN solutionKeyToSubmissionStatus!=true",
          "parameters": [
            {
              "js": "162",
              "sol": "162"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[1024,71]",
              "sol": "[uint(1024),uint(71)]"
            },
            {
              "js": "[[1,19],[96,63]]",
              "sol": "[[uint(1),uint(19)],[uint(96),uint(63)]]"
            },
            {
              "js": "[17,255]",
              "sol": "[uint(17),uint(255)]"
            },
            {
              "js": "[127,55]",
              "sol": "[uint(127),uint(55)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.895ZSolnSquareVerifier.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(address,uint256)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.896ZERC721Metadata.getName": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getName()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.897ZERC721Metadata.getSymbol": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getSymbol()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.897ZERC721Metadata.getBaseTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getBaseTokenURI()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.898ZERC721Metadata.tokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenURI(uint256)",
          "parameters": [
            {
              "js": "1023",
              "sol": "1023"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.899ZProxyERC721Metadata.testsetTokenURI": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsetTokenURI(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.902ZERC721Enumerable.tokenOfOwnerByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenOfOwnerByIndex(address,uint256)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.903ZERC721Enumerable.totalSupply": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute totalSupply()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.903ZERC721Enumerable.tokenByIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute tokenByIndex(uint256)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.904ZProxyERC721Enumerable.test_transferFrom": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_transferFrom(address,address,uint256) WHEN from==_tokenOwner,to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_transferFrom(address,address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.905ZProxyERC721Enumerable.test_mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_mint(address,uint256) WHEN to!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "200001",
              "sol": "200001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_mint(address,uint256) when NOT comply with: to != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "200001",
                "sol": "200001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T07:36:18.906ZProxyERC721Enumerable.test_tokensOfOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_tokensOfOwner(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.907ZOwnable.getOwner": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getOwner()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T07:36:18.908ZOwnable.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN msg.sender==_owner,newOwner!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}