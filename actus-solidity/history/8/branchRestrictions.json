,{
  "2020-11-11T07:18:49.092ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "1969",
                "sol": "1969"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.094ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.094ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.095ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.095ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.096ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.098ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.100ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.101ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.102ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.102ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.102ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.102ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.115ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.119ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.120ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.120ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.121ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.121ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.121ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.122ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.122ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.123ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.123ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.124ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.124ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.125ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.125ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.125ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.126ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.126ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.127ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.127ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.127ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.128ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 121,
                "sol": 121
              },
              {
                "js": "120",
                "sol": "120"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.129ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 111,
                "sol": 111
              },
              {
                "js": "110",
                "sol": "110"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.129ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.130ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.130ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.137ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.138ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.140ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.146ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 3,
                "sol": 3
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": 1532892062,
                "sol": 1532892062
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "901",
                "sol": "901"
              },
              {
                "js": 900,
                "sol": 900
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "90",
                "sol": "90"
              },
              {
                "js": 89,
                "sol": 89
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 3,
                "sol": 3
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T07:18:49.150ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.152ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.152ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.152ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.154ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{\"i\": 2014223714,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223714,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 95,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(95,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{\"i\": 2014223715,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223715,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{\"i\": 51,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(51,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.156ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.157ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.158ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.162ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.165ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.169ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.169ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.174ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1461002,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461002,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(63,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(68570,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 81,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(81,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 71,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(71,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 11,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(11,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 4001,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.181ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{\"i\": 2440589,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2440589,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{\"i\": 5,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(5,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{\"i\": 1969,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1969,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{\"i\": 4899,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4899,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{\"i\": 151,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(151,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{\"i\": 49,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(49,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{\"i\": 119,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(119,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{\"i\": 359,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(359,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{\"i\": 364,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(364,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.191ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 65,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(65,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 4800,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4800,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 16,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(16,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 365,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(365,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 950,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(950,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 70,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(70,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.193ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 21,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 2014223716,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 89,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 1336,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 146098,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 91,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 15},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 39,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 150,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 10,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 1462,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 64,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 368,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 359,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 97,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 12},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1532892063,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 27,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 14,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 4801,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 4800,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 79,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 1532892063,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 86401,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 2440589,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 4901,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 95,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 13},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 4001,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 2440588,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 0},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 26,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 91,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 32076,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1461001,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 366,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 3999,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 68570,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 2446,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 66,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 79,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 4801,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 109,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 17,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 4801,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 80,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 2448,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 71,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 8},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 4,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 1338,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 359,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 951,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 2446,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 360,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 366,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 141,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 141,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 81,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 51,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 9999,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 4799,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 1,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 254,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 951,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 120,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 10},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 27,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 159,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 6}]",
              "sol": "[Definitions.ProtoEvent(32074,15,21,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(23,4901,2014223716,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(900,2014223716,89,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(31,159,1336,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(20,59,146098,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(59,3,91,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.CD),Definitions.ProtoEvent(4800,6,39,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(255,0,150,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(256,1970,10,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(254,4899,1462,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(140,17,64,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(20,9,368,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(100,146097,359,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(4801,129,97,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RR),Definitions.ProtoEvent(18,2446,1532892063,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(2,121,27,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(86400,59,14,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(26,3999,4801,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(61,365,4800,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(1461000,368,79,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(366,2448,1532892063,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(97,1461001,86401,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4901,151,2440589,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(81,86399,4901,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(1,900,95,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RRY),Definitions.ProtoEvent(400,32076,4001,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(10,131,2440588,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SD),Definitions.ProtoEvent(64,29,26,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(2014223715,399,91,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(2,50,32076,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(255,140,1461001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(48,0,366,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,51,3999,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(25,367,68570,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(86401,399,2446,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(366,4001,66,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(80,41,79,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(360,1461002,4801,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(151,140,109,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1338,96,17,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(79,368,4801,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(1532892064,64,80,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(68570,1337,2448,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(16,2014223716,71,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.FP),Definitions.ProtoEvent(30,2447,4,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(60,4901,1338,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(899,1461000,359,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(23,15,951,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(139,1971,2446,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(97,950,360,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(24,65,366,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(24,1461,141,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(159,60,141,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(1532892063,4801,81,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(150,3999,51,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(11,4801,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(89,21,9999,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(1971,1532892063,4799,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(68568,901,1,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(30,150,254,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(3999,48,951,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(256,1461000,120,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.TD),Definitions.ProtoEvent(3,1970,27,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(100,32,159,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP)]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.210ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 64,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 4901,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 25,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 66,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 9,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 23,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 28,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 1461002,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 4801,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 2448,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 159,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 39,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 360,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 901,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 63,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1532892063,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 255,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 1461001,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 4801,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 17},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 26,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 7},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 2014223714,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 151,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 86401,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1532892064,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 32,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 13},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 7,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 48,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 13,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 1462,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 26,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 401,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 359,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 3999,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 95,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 8,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 16,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 71,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 32075,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 15},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 900,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 64,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 32,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 7,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 1460,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 2448,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 27,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 4899,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 9999,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 5,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 1532892064,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 15},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1969,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 26,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 366,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 81,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 64,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 0},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 366,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 364,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 30,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 131,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 950,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 254,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 25,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 7,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 5}]",
              "sol": "[Definitions.ProtoEvent(159,367,64,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(160,1461002,4901,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(91,86401,25,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(1338,32076,66,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(4001,131,9,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(7,86400,23,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(256,89,28,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(4801,109,1461002,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(119,361,4801,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(10000,257,2448,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(95,0,159,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(1461002,96,39,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(139,24,360,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(32,146096,901,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(3,1461002,63,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(146096,140,1532892063,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(18,2440587,255,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(160,3,1461001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(360,100,4801,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MR),Definitions.ProtoEvent(30,63,26,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PY),Definitions.ProtoEvent(100,949,2014223714,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(12,139,151,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(110,49,86401,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(10001,0,1532892064,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(1338,100,32,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RRY),Definitions.ProtoEvent(68569,150,7,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2440589,16,48,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(39,13,13,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(69,1460,1462,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(3999,0,26,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(3,69,401,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(366,16,359,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(28,146097,3999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(27,31,95,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(19,68569,8,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(399,99,16,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(150,14,71,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(359,255,32075,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD),Definitions.ProtoEvent(159,68570,900,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(5,1971,64,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(64,900,1,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(86401,101,32,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(86400,1532892062,7,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(151,20,1460,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(4,129,2448,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(1532892063,4001,27,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(2,29,4899,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(101,1532892064,9999,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(29,96,5,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(4,255,1532892064,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD),Definitions.ProtoEvent(59,0,1969,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(69,150,26,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(71,1336,366,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(8,96,81,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(4801,110,64,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SD),Definitions.ProtoEvent(368,109,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(4901,4000,366,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(899,50,364,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(89,1338,30,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(68569,7,131,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(146097,51,950,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(86399,79,254,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(91,63,25,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(26,365,7,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR)]"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.228ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.230ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [36,203,175,152,27,203,227,87,164,35,215,240,254,102,199,222,170,95,173,246,180,181,3,80,148,159,26,168,143,2,62,43],\"legalEntityIdCounterparty\": [169,160,8,249,0,206,114,55,225,83,235,98,211,25,226,0,168,201,232,175,183,184,113,99,78,149,100,12,93,206,240,16],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1532892063,\"statusDate\": 4800,\"initialExchangeDate\": 141,\"maturityDate\": 64,\"terminationDate\": 2440587,\"purchaseDate\": 49,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 2446,\"nominalInterestRate\": 1971,\"feeAccrued\": 1462,\"accruedInterest\": 111,\"rateMultiplier\": 1461002,\"rateSpread\": 159,\"feeRate\": 89,\"nextResetRate\": 130,\"penaltyRate\": 1970,\"premiumDiscountAtIED\": 120,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 11,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 109,\"lifeFloor\": 28,\"periodCap\": 149,\"periodFloor\": 70}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"36,203,175,152,27,203,227,87,164,35,215,240,254,102,199,222,170,95,173,246,180,181,3,80,148,159,26,168,143,2,62,43\"),stringToBytes32(\"169,160,8,249,0,206,114,55,225,83,235,98,211,25,226,0,168,201,232,175,183,184,113,99,78,149,100,12,93,206,240,16\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1532892063,4800,141,64,2440587,49,86401,2014223714,32074,120,365,2446,1971,1462,111,1461002,159,89,130,1970,120,9,Definitions.IPS(8,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(11,Definitions.P.Q,Definitions.S.LONG,false),109,28,149,70)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.233ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [20,100,69,47,224,80,106,119,26,156,145,71,184,128,1,161,245,3,97,47,90,96,80,15,248,185,38,84,213,201,220,1],\"legalEntityIdCounterparty\": [144,64,209,84,95,195,65,92,238,146,146,80,88,141,252,50,205,226,199,109,15,1,35,206,190,110,129,117,106,163,223,110],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 7,\"statusDate\": 1338,\"initialExchangeDate\": 146097,\"maturityDate\": 360,\"terminationDate\": 15,\"purchaseDate\": 81,\"capitalizationEndDate\": 360,\"cycleAnchorDateOfInterestPayment\": 0,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 27,\"cycleAnchorDateOfFee\": 10000,\"notionalPrincipal\": 3,\"nominalInterestRate\": 1971,\"feeAccrued\": 1970,\"accruedInterest\": -1,\"rateMultiplier\": 39,\"rateSpread\": 21,\"feeRate\": 4900,\"nextResetRate\": 139,\"penaltyRate\": 16,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 69,\"cycleOfInterestPayment\": {\"i\": 146097,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 64,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461001,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 255,\"lifeFloor\": 364,\"periodCap\": 4000,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"20,100,69,47,224,80,106,119,26,156,145,71,184,128,1,161,245,3,97,47,90,96,80,15,248,185,38,84,213,201,220,1\"),stringToBytes32(\"144,64,209,84,95,195,65,92,238,146,146,80,88,141,252,50,205,226,199,109,15,1,35,206,190,110,129,117,106,163,223,110\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,7,1338,146097,360,15,81,360,0,401,27,10000,3,1971,1970,-1,39,21,4900,139,16,86401,69,Definitions.IPS(146097,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(64,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.LONG,false),255,364,4000,0)"
            },
            {
              "js": "{\"lastEventTime\": 89,\"contractStatus\": 3,\"timeFromLastEvent\": 146096,\"nominalValue\": 4799,\"nominalAccrued\": 95,\"feeAccrued\": 32,\"nominalRate\": 71,\"interestScalingMultiplier\": 64,\"nominalScalingMultiplier\": 2447,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(89,Definitions.ContractStatus.DF,146096,4799,95,32,71,64,2447,Definitions.ContractRole.GUA)"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.236ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [37,242,105,210,224,193,70,243,248,124,120,142,56,88,207,217,191,42,169,30,135,38,178,95,7,63,0,67,211,120,27,121],\"legalEntityIdCounterparty\": [41,228,61,128,1,30,74,223,32,179,23,237,34,234,69,108,176,196,227,0,191,225,173,163,138,78,241,234,242,5,65,70],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4799,\"statusDate\": 1,\"initialExchangeDate\": 899,\"maturityDate\": 89,\"terminationDate\": 6,\"purchaseDate\": 86401,\"capitalizationEndDate\": 64,\"cycleAnchorDateOfInterestPayment\": 1461001,\"cycleAnchorDateOfRateReset\": 15,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 3,\"notionalPrincipal\": 159,\"nominalInterestRate\": 21,\"feeAccrued\": 146096,\"accruedInterest\": 24,\"rateMultiplier\": 1971,\"rateSpread\": 27,\"feeRate\": 2440588,\"nextResetRate\": 150,\"penaltyRate\": 4901,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 79,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 68569,\"lifeFloor\": 4900,\"periodCap\": 1336,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"37,242,105,210,224,193,70,243,248,124,120,142,56,88,207,217,191,42,169,30,135,38,178,95,7,63,0,67,211,120,27,121\"),stringToBytes32(\"41,228,61,128,1,30,74,223,32,179,23,237,34,234,69,108,176,196,227,0,191,225,173,163,138,78,241,234,242,5,65,70\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4799,1,899,89,6,86401,64,1461001,15,2448,3,159,21,146096,24,1971,27,2440588,150,4901,1337,3,Definitions.IPS(254,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(2,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(79,Definitions.P.W,Definitions.S.LONG,false),68569,4900,1336,949)"
            },
            {
              "js": "{\"lastEventTime\": 146097,\"contractStatus\": 3,\"timeFromLastEvent\": 7,\"nominalValue\": 146096,\"nominalAccrued\": 6,\"feeAccrued\": 66,\"nominalRate\": 51,\"interestScalingMultiplier\": 15,\"nominalScalingMultiplier\": 24,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(146097,Definitions.ContractStatus.DF,7,146096,6,66,51,15,24,Definitions.ContractRole.SEL)"
            },
            {
              "js": "{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 40,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 15}",
              "sol": "Definitions.ProtoEvent(254,68570,40,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD)"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.243ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [90,214,148,51,160,13,128,17,99,100,16,123,117,16,33,123,62,30,80,132,138,130,5,247,81,86,197,162,213,249,31,73],\"legalEntityIdCounterparty\": [44,176,5,48,64,102,209,83,61,187,25,29,218,224,240,195,206,201,51,59,168,122,53,67,10,219,235,201,207,75,179,181],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 32,\"statusDate\": 61,\"initialExchangeDate\": 7,\"maturityDate\": 121,\"terminationDate\": 2,\"purchaseDate\": 111,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 141,\"cycleAnchorDateOfRateReset\": 7,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 100,\"nominalInterestRate\": 79,\"feeAccrued\": 140,\"accruedInterest\": 68568,\"rateMultiplier\": 2,\"rateSpread\": -1,\"feeRate\": 26,\"nextResetRate\": 32,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 49,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223714,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 4901,\"lifeFloor\": 20,\"periodCap\": 10001,\"periodFloor\": 20}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"90,214,148,51,160,13,128,17,99,100,16,123,117,16,33,123,62,30,80,132,138,130,5,247,81,86,197,162,213,249,31,73\"),stringToBytes32(\"44,176,5,48,64,102,209,83,61,187,25,29,218,224,240,195,206,201,51,59,168,122,53,67,10,219,235,201,207,75,179,181\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,32,61,7,121,2,111,24,141,7,10001,13,100,79,140,68568,2,-1,26,32,1460,49,3,Definitions.IPS(25,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32074,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(61,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(2014223714,Definitions.P.Y,Definitions.S.LONG,false),4901,20,10001,20)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [186,192,71,174,214,115,75,42,101,140,71,92,58,252,80,171,127,252,41,254,108,103,239,24,38,137,151,162,196,101,75,244],\"legalEntityIdCounterparty\": [146,13,194,82,77,27,166,205,4,196,0,62,57,213,172,61,96,120,79,113,232,245,52,208,36,54,3,64,147,222,220,247],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1971,\"statusDate\": 399,\"initialExchangeDate\": 27,\"maturityDate\": 29,\"terminationDate\": 4901,\"purchaseDate\": 61,\"capitalizationEndDate\": 2014223716,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 9,\"cycleAnchorDateOfFee\": 10001,\"notionalPrincipal\": 51,\"nominalInterestRate\": 4799,\"feeAccrued\": 255,\"accruedInterest\": 139,\"rateMultiplier\": 71,\"rateSpread\": 90,\"feeRate\": 80,\"nextResetRate\": 95,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 0,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10001,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 86399,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 6,\"lifeFloor\": 99,\"periodCap\": 16,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"186,192,71,174,214,115,75,42,101,140,71,92,58,252,80,171,127,252,41,254,108,103,239,24,38,137,151,162,196,101,75,244\"),stringToBytes32(\"146,13,194,82,77,27,166,205,4,196,0,62,57,213,172,61,96,120,79,113,232,245,52,208,36,54,3,64,147,222,220,247\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1971,399,27,29,4901,61,2014223716,1532892062,1532892063,9,10001,51,4799,255,139,71,90,80,95,100,0,32074,Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(10001,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(86399,Definitions.P.W,Definitions.S.LONG,true),6,99,16,80)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [220,62,94,199,220,105,229,126,91,202,197,123,30,1,44,20,194,190,87,193,237,8,198,169,174,37,79,88,72,191,104,195],\"legalEntityIdCounterparty\": [136,60,231,24,109,88,179,205,210,76,124,94,212,195,39,182,14,91,202,6,222,186,14,58,196,168,199,45,217,179,197,206],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 8,\"statusDate\": 10000,\"initialExchangeDate\": 30,\"maturityDate\": 255,\"terminationDate\": 12,\"purchaseDate\": 15,\"capitalizationEndDate\": 1971,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 66,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 2014223714,\"notionalPrincipal\": 368,\"nominalInterestRate\": 4,\"feeAccrued\": 359,\"accruedInterest\": 1532892062,\"rateMultiplier\": 121,\"rateSpread\": 359,\"feeRate\": 91,\"nextResetRate\": 109,\"penaltyRate\": 255,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 99,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 360,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 7,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 17,\"lifeFloor\": 121,\"periodCap\": 65,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"220,62,94,199,220,105,229,126,91,202,197,123,30,1,44,20,194,190,87,193,237,8,198,169,174,37,79,88,72,191,104,195\"),stringToBytes32(\"136,60,231,24,109,88,179,205,210,76,124,94,212,195,39,182,14,91,202,6,222,186,14,58,196,168,199,45,217,179,197,206\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,8,10000,30,255,12,15,1971,951,66,159,2014223714,368,4,359,1532892062,121,359,91,109,255,1532892062,129,Definitions.IPS(99,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(360,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(256,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(7,Definitions.P.M,Definitions.S.SHORT,false),17,121,65,950)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [146,76,225,172,44,192,104,154,218,65,76,147,63,181,163,107,58,12,213,162,207,48,204,172,108,37,59,97,113,104,184,21],\"legalEntityIdCounterparty\": [224,67,11,170,109,232,107,96,41,163,33,31,195,146,229,236,201,76,78,193,176,215,125,243,138,121,167,213,164,136,194,250],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 10000,\"statusDate\": 256,\"initialExchangeDate\": 256,\"maturityDate\": 4000,\"terminationDate\": 2448,\"purchaseDate\": 17,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 901,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 9,\"nominalInterestRate\": 64,\"feeAccrued\": 12,\"accruedInterest\": 4000,\"rateMultiplier\": 141,\"rateSpread\": 91,\"feeRate\": 79,\"nextResetRate\": 3999,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 90,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 86401,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 7,\"lifeFloor\": 146098,\"periodCap\": 68568,\"periodFloor\": 91}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"146,76,225,172,44,192,104,154,218,65,76,147,63,181,163,107,58,12,213,162,207,48,204,172,108,37,59,97,113,104,184,21\"),stringToBytes32(\"224,67,11,170,109,232,107,96,41,163,33,31,195,146,229,236,201,76,78,193,176,215,125,243,138,121,167,213,164,136,194,250\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,10000,256,256,4000,2448,17,7,121,63,901,2447,9,64,12,4000,141,91,79,3999,80,32,130,Definitions.IPS(365,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(59,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(86401,Definitions.P.Q,Definitions.S.LONG,true),7,146098,68568,91)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [106,122,112,100,159,40,80,29,14,116,154,152,96,237,93,110,121,34,211,23,186,156,160,14,28,229,23,3,140,155,228,141],\"legalEntityIdCounterparty\": [177,149,30,223,35,180,243,129,5,14,104,41,136,34,101,79,64,167,36,180,154,241,2,246,22,18,76,31,232,223,226,124],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1336,\"statusDate\": 2014223714,\"initialExchangeDate\": 14,\"maturityDate\": 16,\"terminationDate\": 257,\"purchaseDate\": 0,\"capitalizationEndDate\": 10001,\"cycleAnchorDateOfInterestPayment\": 81,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 13,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 24,\"nominalInterestRate\": 2,\"feeAccrued\": 32074,\"accruedInterest\": 2014223715,\"rateMultiplier\": 66,\"rateSpread\": 150,\"feeRate\": 130,\"nextResetRate\": 2440587,\"penaltyRate\": 368,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 2014223715,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 151,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 91,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 14,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 129,\"lifeFloor\": 364,\"periodCap\": 97,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"106,122,112,100,159,40,80,29,14,116,154,152,96,237,93,110,121,34,211,23,186,156,160,14,28,229,23,3,140,155,228,141\"),stringToBytes32(\"177,149,30,223,35,180,243,129,5,14,104,41,136,34,101,79,64,167,36,180,154,241,2,246,22,18,76,31,232,223,226,124\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1336,2014223714,14,16,257,0,10001,81,5,13,39,24,2,32074,2014223715,66,150,130,2440587,368,1532892063,2014223715,Definitions.IPS(111,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(91,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(14,Definitions.P.H,Definitions.S.LONG,false),129,364,97,2448)"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [184,124,33,74,143,12,142,78,164,255,215,16,39,36,60,28,30,171,165,18,85,237,164,128,99,188,184,59,23,54,160,203],\"legalEntityIdCounterparty\": [142,63,18,6,228,208,29,76,121,91,24,41,67,29,241,146,199,117,50,140,177,209,150,240,57,233,198,131,102,111,90,238],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 360,\"statusDate\": 2447,\"initialExchangeDate\": 41,\"maturityDate\": 120,\"terminationDate\": 2014223715,\"purchaseDate\": 3,\"capitalizationEndDate\": 10001,\"cycleAnchorDateOfInterestPayment\": 49,\"cycleAnchorDateOfRateReset\": 59,\"cycleAnchorDateOfScalingIndex\": 2440589,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 86401,\"nominalInterestRate\": 25,\"feeAccrued\": -1,\"accruedInterest\": 2014223716,\"rateMultiplier\": 61,\"rateSpread\": 13,\"feeRate\": 13,\"nextResetRate\": 31,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 1532892062,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 29,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 359,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4801,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892062,\"lifeFloor\": 2014223715,\"periodCap\": 66,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"184,124,33,74,143,12,142,78,164,255,215,16,39,36,60,28,30,171,165,18,85,237,164,128,99,188,184,59,23,54,160,203\"),stringToBytes32(\"142,63,18,6,228,208,29,76,121,91,24,41,67,29,241,146,199,117,50,140,177,209,150,240,57,233,198,131,102,111,90,238\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,360,2447,41,120,2014223715,3,10001,49,59,2440589,400,86401,25,-1,2014223716,61,13,13,31,901,1336,1532892062,Definitions.IPS(140,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(29,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(359,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.D,Definitions.S.LONG,false),1532892062,2014223715,66,24)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [59,252,46,16,247,203,69,125,136,30,141,3,4,104,87,100,67,19,229,67,23,211,140,167,60,216,213,44,180,138,224,7],\"legalEntityIdCounterparty\": [101,183,209,66,32,247,144,22,214,134,15,217,32,252,220,191,191,136,227,211,55,14,178,174,248,81,152,96,140,85,248,211],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 2448,\"statusDate\": 7,\"initialExchangeDate\": 14,\"maturityDate\": 1338,\"terminationDate\": 146096,\"purchaseDate\": 901,\"capitalizationEndDate\": 1461002,\"cycleAnchorDateOfInterestPayment\": 140,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 86400,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 2440589,\"nominalInterestRate\": 68569,\"feeAccrued\": 146096,\"accruedInterest\": 951,\"rateMultiplier\": 16,\"rateSpread\": 1532892064,\"feeRate\": 949,\"nextResetRate\": 159,\"penaltyRate\": 400,\"premiumDiscountAtIED\": 7,\"priceAtPurchaseDate\": 11,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 367,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 111,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 151,\"lifeFloor\": 400,\"periodCap\": 24,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"59,252,46,16,247,203,69,125,136,30,141,3,4,104,87,100,67,19,229,67,23,211,140,167,60,216,213,44,180,138,224,7\"),stringToBytes32(\"101,183,209,66,32,247,144,22,214,134,15,217,32,252,220,191,191,136,227,211,55,14,178,174,248,81,152,96,140,85,248,211\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,2448,7,14,1338,146096,901,1461002,140,1532892064,86400,1969,2440589,68569,146096,951,16,1532892064,949,159,400,7,11,Definitions.IPS(9999,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.Q,Definitions.S.SHORT,true),151,400,24,64)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [238,249,41,56,85,136,185,9,47,154,146,242,64,25,124,214,103,11,223,228,73,79,227,107,130,53,186,118,30,117,214,187],\"legalEntityIdCounterparty\": [166,27,144,29,215,191,172,246,23,108,237,120,116,25,2,99,63,195,153,232,115,40,162,71,209,75,240,109,230,81,19,101],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 9,\"statusDate\": 255,\"initialExchangeDate\": 68569,\"maturityDate\": 13,\"terminationDate\": 64,\"purchaseDate\": 97,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 120,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 950,\"nominalInterestRate\": 12,\"feeAccrued\": 29,\"accruedInterest\": 50,\"rateMultiplier\": 66,\"rateSpread\": 151,\"feeRate\": 17,\"nextResetRate\": 19,\"penaltyRate\": 27,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 901,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 119,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 12,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 59,\"lifeFloor\": 367,\"periodCap\": 359,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"238,249,41,56,85,136,185,9,47,154,146,242,64,25,124,214,103,11,223,228,73,79,227,107,130,53,186,118,30,117,214,187\"),stringToBytes32(\"166,27,144,29,215,191,172,246,23,108,237,120,116,25,2,99,63,195,153,232,115,40,162,71,209,75,240,109,230,81,19,101\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,9,255,68569,13,64,97,0,10001,4001,120,901,950,12,29,50,66,151,17,19,27,26,2,Definitions.IPS(901,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(12,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.W,Definitions.S.LONG,true),59,367,359,1532892064)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [195,0,128,65,136,240,226,21,14,97,143,247,127,253,143,7,140,51,155,7,17,142,92,242,16,170,79,27,19,31,98,203],\"legalEntityIdCounterparty\": [120,116,19,119,87,107,120,158,166,150,167,139,169,130,137,19,111,82,34,131,248,110,127,62,155,53,68,42,113,229,186,128],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 367,\"statusDate\": 1969,\"initialExchangeDate\": 16,\"maturityDate\": 1336,\"terminationDate\": 4899,\"purchaseDate\": 69,\"capitalizationEndDate\": 50,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 29,\"cycleAnchorDateOfFee\": 99,\"notionalPrincipal\": 256,\"nominalInterestRate\": 4899,\"feeAccrued\": 255,\"accruedInterest\": 254,\"rateMultiplier\": 4000,\"rateSpread\": 40,\"feeRate\": 9999,\"nextResetRate\": 100,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 79,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 121,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4800,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 97,\"lifeFloor\": 111,\"periodCap\": 256,\"periodFloor\": 7}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"195,0,128,65,136,240,226,21,14,97,143,247,127,253,143,7,140,51,155,7,17,142,92,242,16,170,79,27,19,31,98,203\"),stringToBytes32(\"120,116,19,119,87,107,120,158,166,150,167,139,169,130,137,19,111,82,34,131,248,110,127,62,155,53,68,42,113,229,186,128\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,367,1969,16,1336,4899,69,50,359,79,29,99,256,4899,255,254,4000,40,9999,100,20,1532892062,79,Definitions.IPS(1461001,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(121,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1970,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4800,Definitions.P.Q,Definitions.S.SHORT,false),97,111,256,7)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [47,193,213,212,94,118,138,251,240,102,236,131,111,226,97,38,20,67,6,176,210,204,223,134,7,9,24,180,177,78,185,117],\"legalEntityIdCounterparty\": [223,133,128,65,9,62,146,64,128,156,230,59,202,123,26,158,57,196,244,126,208,200,202,195,44,16,172,111,20,142,33,202],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 950,\"statusDate\": 89,\"initialExchangeDate\": 51,\"maturityDate\": 64,\"terminationDate\": 131,\"purchaseDate\": 359,\"capitalizationEndDate\": 255,\"cycleAnchorDateOfInterestPayment\": 0,\"cycleAnchorDateOfRateReset\": 61,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 121,\"nominalInterestRate\": 951,\"feeAccrued\": 10001,\"accruedInterest\": 2014223715,\"rateMultiplier\": 901,\"rateSpread\": 1462,\"feeRate\": 365,\"nextResetRate\": 1970,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 96,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 15,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 159,\"lifeFloor\": 95,\"periodCap\": 4799,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"47,193,213,212,94,118,138,251,240,102,236,131,111,226,97,38,20,67,6,176,210,204,223,134,7,9,24,180,177,78,185,117\"),stringToBytes32(\"223,133,128,65,9,62,146,64,128,156,230,59,202,123,26,158,57,196,244,126,208,200,202,195,44,16,172,111,20,142,33,202\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,950,89,51,64,131,359,255,0,61,3999,13,121,951,10001,2014223715,901,1462,365,1970,13,91,64,Definitions.IPS(2440589,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(15,Definitions.P.W,Definitions.S.SHORT,false),159,95,4799,24)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [241,200,65,229,129,16,52,88,20,85,0,106,226,59,98,126,16,103,28,137,253,59,79,128,104,27,86,105,131,170,106,123],\"legalEntityIdCounterparty\": [8,23,64,43,53,18,44,3,173,50,146,71,123,226,20,116,172,137,197,172,79,16,166,27,81,12,109,187,17,6,49,16],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 119,\"statusDate\": 2,\"initialExchangeDate\": 80,\"maturityDate\": 5,\"terminationDate\": 4899,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 255,\"cycleAnchorDateOfFee\": 399,\"notionalPrincipal\": 149,\"nominalInterestRate\": 0,\"feeAccrued\": 48,\"accruedInterest\": 71,\"rateMultiplier\": 21,\"rateSpread\": 0,\"feeRate\": 60,\"nextResetRate\": 65,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 48,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 101,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223715,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 29,\"lifeFloor\": 66,\"periodCap\": 4800,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"241,200,65,229,129,16,52,88,20,85,0,106,226,59,98,126,16,103,28,137,253,59,79,128,104,27,86,105,131,170,106,123\"),stringToBytes32(\"8,23,64,43,53,18,44,3,173,50,146,71,123,226,20,116,172,137,197,172,79,16,166,27,81,12,109,187,17,6,49,16\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,119,2,80,5,4899,0,0,949,151,255,399,149,0,48,71,21,0,60,65,119,950,48,Definitions.IPS(68569,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1969,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(101,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.M,Definitions.S.LONG,false),29,66,4800,17)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [54,72,190,85,3,14,245,165,85,85,84,156,100,122,6,169,201,85,22,247,4,208,137,205,146,170,247,41,169,133,135,192],\"legalEntityIdCounterparty\": [4,213,109,229,124,39,8,104,127,83,95,85,50,61,216,251,109,236,148,70,27,145,56,96,76,115,36,102,253,179,179,103],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 149,\"statusDate\": 951,\"initialExchangeDate\": 4801,\"maturityDate\": 80,\"terminationDate\": 255,\"purchaseDate\": 6,\"capitalizationEndDate\": 2440588,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 21,\"cycleAnchorDateOfScalingIndex\": 13,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 99,\"feeAccrued\": 29,\"accruedInterest\": 10001,\"rateMultiplier\": 150,\"rateSpread\": 95,\"feeRate\": 60,\"nextResetRate\": 255,\"penaltyRate\": 365,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 20,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86401,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 15,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 901,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 146097,\"lifeFloor\": 13,\"periodCap\": 2440587,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"54,72,190,85,3,14,245,165,85,85,84,156,100,122,6,169,201,85,22,247,4,208,137,205,146,170,247,41,169,133,135,192\"),stringToBytes32(\"4,213,109,229,124,39,8,104,127,83,95,85,50,61,216,251,109,236,148,70,27,145,56,96,76,115,36,102,253,179,179,103\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,149,951,4801,80,255,6,2440588,360,21,13,18,32074,99,29,10001,150,95,60,255,365,12,900,Definitions.IPS(20,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(86401,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(15,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(901,Definitions.P.H,Definitions.S.LONG,true),146097,13,2440587,4899)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [41,170,232,31,87,147,81,93,194,225,162,93,227,104,240,67,97,83,231,21,245,138,46,153,176,208,86,79,79,36,101,42],\"legalEntityIdCounterparty\": [52,208,188,172,76,167,73,20,14,144,118,207,104,100,178,131,118,164,8,48,87,159,102,6,65,183,155,158,33,61,150,61],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86400,\"statusDate\": 3,\"initialExchangeDate\": 150,\"maturityDate\": 2440588,\"terminationDate\": 146098,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 10000,\"notionalPrincipal\": 400,\"nominalInterestRate\": 0,\"feeAccrued\": 3,\"accruedInterest\": 1462,\"rateMultiplier\": 359,\"rateSpread\": 11,\"feeRate\": 399,\"nextResetRate\": -1,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 27,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 28,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892064,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 400,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 4799,\"lifeFloor\": 1461002,\"periodCap\": 950,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"41,170,232,31,87,147,81,93,194,225,162,93,227,104,240,67,97,83,231,21,245,138,46,153,176,208,86,79,79,36,101,42\"),stringToBytes32(\"52,208,188,172,76,167,73,20,14,144,118,207,104,100,178,131,118,164,8,48,87,159,102,6,65,183,155,158,33,61,150,61\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86400,3,150,2440588,146098,0,0,1532892062,0,1,10000,400,0,3,1462,359,11,399,-1,14,1532892062,4799,Definitions.IPS(27,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(28,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1532892064,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.Y,Definitions.S.LONG,true),4799,1461002,950,64)"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [244,204,223,123,3,33,201,181,228,84,49,174,119,136,63,162,74,61,222,48,168,224,76,70,163,63,235,169,101,11,59,46],\"legalEntityIdCounterparty\": [46,159,54,113,162,232,195,66,226,166,11,224,56,143,187,59,151,166,179,202,187,182,156,130,60,61,101,60,226,39,46,50],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2014223715,\"statusDate\": 366,\"initialExchangeDate\": 3,\"maturityDate\": 59,\"terminationDate\": 146096,\"purchaseDate\": 901,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 68568,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 901,\"nominalInterestRate\": 16,\"feeAccrued\": 30,\"accruedInterest\": 9,\"rateMultiplier\": 68570,\"rateSpread\": 110,\"feeRate\": 254,\"nextResetRate\": 12,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 401,\"cycleOfInterestPayment\": {\"i\": 28,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 19,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 400,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 29,\"lifeFloor\": 17,\"periodCap\": 63,\"periodFloor\": 79}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"244,204,223,123,3,33,201,181,228,84,49,174,119,136,63,162,74,61,222,48,168,224,76,70,163,63,235,169,101,11,59,46\"),stringToBytes32(\"46,159,54,113,162,232,195,66,226,166,11,224,56,143,187,59,151,166,179,202,187,182,156,130,60,61,101,60,226,39,46,50\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2014223715,366,3,59,146096,901,8,1462,4001,68568,140,901,16,30,9,68570,110,254,12,71,25,401,Definitions.IPS(28,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(9,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.Q,Definitions.S.LONG,true),29,17,63,79)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [250,171,112,213,24,190,42,159,249,39,112,2,241,242,205,29,240,194,199,97,7,29,165,57,189,24,36,90,71,198,184,255],\"legalEntityIdCounterparty\": [209,133,234,241,202,159,230,186,165,233,12,12,99,101,168,152,139,208,158,171,9,96,178,206,94,40,124,22,10,52,13,122],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 89,\"statusDate\": 32075,\"initialExchangeDate\": 901,\"maturityDate\": 364,\"terminationDate\": 365,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 9,\"cycleAnchorDateOfRateReset\": 12,\"cycleAnchorDateOfScalingIndex\": 101,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 64,\"nominalInterestRate\": 0,\"feeAccrued\": 2014223715,\"accruedInterest\": 139,\"rateMultiplier\": 141,\"rateSpread\": 0,\"feeRate\": 140,\"nextResetRate\": 86400,\"penaltyRate\": 68570,\"premiumDiscountAtIED\": 14,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 41,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 400,\"lifeFloor\": 9999,\"periodCap\": 1532892064,\"periodFloor\": 2440587}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"250,171,112,213,24,190,42,159,249,39,112,2,241,242,205,29,240,194,199,97,7,29,165,57,189,24,36,90,71,198,184,255\"),stringToBytes32(\"209,133,234,241,202,159,230,186,165,233,12,12,99,101,168,152,139,208,158,171,9,96,178,206,94,40,124,22,10,52,13,122\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,89,32075,901,364,365,0,0,9,12,101,0,64,0,2014223715,139,141,0,140,86400,68570,14,64,Definitions.IPS(41,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(68568,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(28,Definitions.P.Y,Definitions.S.LONG,true),400,9999,1532892064,2440587)"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [156,137,124,11,87,186,54,80,10,144,160,113,135,252,40,170,162,71,105,230,229,7,233,147,62,1,198,30,246,19,128,186],\"legalEntityIdCounterparty\": [154,150,141,182,238,186,88,202,29,222,233,35,76,62,210,108,140,201,125,73,225,28,126,220,128,85,38,218,142,27,124,115],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 129,\"statusDate\": 4900,\"initialExchangeDate\": 110,\"maturityDate\": 401,\"terminationDate\": 255,\"purchaseDate\": 10,\"capitalizationEndDate\": 71,\"cycleAnchorDateOfInterestPayment\": 141,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 80,\"nominalInterestRate\": 1461000,\"feeAccrued\": 15,\"accruedInterest\": 80,\"rateMultiplier\": 95,\"rateSpread\": 255,\"feeRate\": 48,\"nextResetRate\": 1460,\"penaltyRate\": 255,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 3999,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146096,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892063,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68570,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 39,\"lifeFloor\": 4900,\"periodCap\": 951,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"156,137,124,11,87,186,54,80,10,144,160,113,135,252,40,170,162,71,105,230,229,7,233,147,62,1,198,30,246,19,128,186\"),stringToBytes32(\"154,150,141,182,238,186,88,202,29,222,233,35,76,62,210,108,140,201,125,73,225,28,126,220,128,85,38,218,142,27,124,115\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,129,4900,110,401,255,10,71,141,17,159,151,80,1461000,15,80,95,255,48,1460,255,10001,160,Definitions.IPS(3999,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(146096,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1532892063,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(68570,Definitions.P.H,Definitions.S.LONG,true),39,4900,951,10)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [132,114,143,43,17,150,123,74,99,79,250,5,13,119,127,153,184,75,45,219,149,20,12,126,189,164,126,197,115,201,67,155],\"legalEntityIdCounterparty\": [65,149,162,64,59,75,247,174,123,26,11,50,169,93,179,30,135,133,60,252,90,108,136,10,68,230,248,176,229,185,181,8],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2448,\"statusDate\": 32,\"initialExchangeDate\": 29,\"maturityDate\": 129,\"terminationDate\": 61,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4,\"cycleAnchorDateOfRateReset\": 50,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 2440588,\"nominalInterestRate\": 0,\"feeAccrued\": 257,\"accruedInterest\": 14,\"rateMultiplier\": 1338,\"rateSpread\": 64,\"feeRate\": 59,\"nextResetRate\": 95,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 1969,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 91,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461002,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440587,\"lifeFloor\": 86400,\"periodCap\": 31,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"132,114,143,43,17,150,123,74,99,79,250,5,13,119,127,153,184,75,45,219,149,20,12,126,189,164,126,197,115,201,67,155\"),stringToBytes32(\"65,149,162,64,59,75,247,174,123,26,11,50,169,93,179,30,135,133,60,252,90,108,136,10,68,230,248,176,229,185,181,8\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2448,32,29,129,61,0,0,4,50,0,111,2440588,0,257,14,1338,64,59,95,256,1969,4899,Definitions.IPS(30,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(91,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(150,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461002,Definitions.P.Y,Definitions.S.LONG,true),2440587,86400,31,951)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [170,218,125,243,254,152,148,59,213,75,232,82,56,16,52,53,22,127,98,148,181,170,17,150,188,41,75,232,12,174,60,149],\"legalEntityIdCounterparty\": [168,141,254,156,24,135,55,251,24,54,80,177,63,192,107,215,94,116,221,170,148,24,94,1,244,243,177,152,242,151,189,141],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 70,\"statusDate\": 64,\"initialExchangeDate\": 950,\"maturityDate\": 368,\"terminationDate\": 1969,\"purchaseDate\": 95,\"capitalizationEndDate\": 131,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 951,\"notionalPrincipal\": 4,\"nominalInterestRate\": 68569,\"feeAccrued\": 950,\"accruedInterest\": 26,\"rateMultiplier\": 7,\"rateSpread\": 4800,\"feeRate\": 86401,\"nextResetRate\": 61,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 360,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10000,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 159,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440589,\"lifeFloor\": 15,\"periodCap\": 255,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"170,218,125,243,254,152,148,59,213,75,232,82,56,16,52,53,22,127,98,148,181,170,17,150,188,41,75,232,12,174,60,149\"),stringToBytes32(\"168,141,254,156,24,135,55,251,24,54,80,177,63,192,107,215,94,116,221,170,148,24,94,1,244,243,177,152,242,151,189,141\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,70,64,950,368,1969,95,131,27,110,161,951,4,68569,950,26,7,4800,86401,61,14,1971,360,Definitions.IPS(140,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(10000,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(949,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.Y,Definitions.S.LONG,true),2440589,15,255,31)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [26,123,92,91,175,191,180,196,6,5,130,5,203,19,23,178,190,58,69,73,105,220,196,152,188,195,1,49,184,53,229,157],\"legalEntityIdCounterparty\": [66,226,204,51,242,15,127,134,21,81,212,94,143,230,152,191,178,0,182,19,210,31,164,7,206,187,138,20,114,194,125,119],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 151,\"statusDate\": 68568,\"initialExchangeDate\": 366,\"maturityDate\": 68570,\"terminationDate\": 1461000,\"purchaseDate\": 40,\"capitalizationEndDate\": 129,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 86399,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 100,\"nominalInterestRate\": 96,\"feeAccrued\": 951,\"accruedInterest\": 8,\"rateMultiplier\": 64,\"rateSpread\": 901,\"feeRate\": 1336,\"nextResetRate\": -1,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 146098,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 951,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 99,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 21,\"lifeFloor\": 41,\"periodCap\": 899,\"periodFloor\": 2440588}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"26,123,92,91,175,191,180,196,6,5,130,5,203,19,23,178,190,58,69,73,105,220,196,152,188,195,1,49,184,53,229,157\"),stringToBytes32(\"66,226,204,51,242,15,127,134,21,81,212,94,143,230,152,191,178,0,182,19,210,31,164,7,206,187,138,20,114,194,125,119\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,151,68568,366,68570,1461000,40,129,360,86399,1461001,7,100,96,951,8,64,901,1336,-1,901,146098,21,Definitions.IPS(25,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(951,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(3999,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.M,Definitions.S.LONG,true),21,41,899,2440588)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [230,118,3,234,196,49,96,8,249,233,77,42,173,215,112,215,62,123,101,98,6,223,193,30,12,219,13,153,86,167,229,82],\"legalEntityIdCounterparty\": [135,53,228,108,164,234,95,40,66,118,82,113,167,51,201,150,225,199,57,62,89,77,11,101,55,215,163,150,11,171,106,249],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 51,\"statusDate\": 26,\"initialExchangeDate\": 146096,\"maturityDate\": 130,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 28,\"cycleAnchorDateOfRateReset\": 900,\"cycleAnchorDateOfScalingIndex\": 146096,\"cycleAnchorDateOfFee\": 1461000,\"notionalPrincipal\": 21,\"nominalInterestRate\": 0,\"feeAccrued\": 2440589,\"accruedInterest\": 66,\"rateMultiplier\": 255,\"rateSpread\": 2448,\"feeRate\": 401,\"nextResetRate\": 25,\"penaltyRate\": 364,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 401,\"cycleOfInterestPayment\": {\"i\": 255,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 60,\"lifeFloor\": 96,\"periodCap\": 949,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"230,118,3,234,196,49,96,8,249,233,77,42,173,215,112,215,62,123,101,98,6,223,193,30,12,219,13,153,86,167,229,82\"),stringToBytes32(\"135,53,228,108,164,234,95,40,66,118,82,113,167,51,201,150,225,199,57,62,89,77,11,101,55,215,163,150,11,171,106,249\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,51,26,146096,130,0,0,0,28,900,146096,1461000,21,0,2440589,66,255,2448,401,25,364,21,401,Definitions.IPS(255,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(120,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,true),60,96,949,68568)"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [108,134,79,35,157,120,67,70,16,251,212,216,54,217,230,243,20,165,160,67,174,226,201,204,198,166,163,248,152,71,180,229],\"legalEntityIdCounterparty\": [122,138,108,80,242,239,210,89,57,199,196,43,153,22,159,223,89,88,50,24,2,90,60,24,67,213,115,177,5,218,103,74],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 30,\"statusDate\": 361,\"initialExchangeDate\": 8,\"maturityDate\": 100,\"terminationDate\": 2447,\"purchaseDate\": 95,\"capitalizationEndDate\": 4001,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 109,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 1532892062,\"notionalPrincipal\": 3,\"nominalInterestRate\": 10001,\"feeAccrued\": 9999,\"accruedInterest\": 39,\"rateMultiplier\": 32075,\"rateSpread\": 1460,\"feeRate\": 120,\"nextResetRate\": 15,\"penaltyRate\": 101,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 4801,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32075,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 140,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 4801,\"lifeFloor\": 14,\"periodCap\": 4,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"108,134,79,35,157,120,67,70,16,251,212,216,54,217,230,243,20,165,160,67,174,226,201,204,198,166,163,248,152,71,180,229\"),stringToBytes32(\"122,138,108,80,242,239,210,89,57,199,196,43,153,22,159,223,89,88,50,24,2,90,60,24,67,213,115,177,5,218,103,74\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,30,361,8,100,2447,95,4001,2448,109,11,1532892062,3,10001,9999,39,32075,1460,120,15,101,19,59,Definitions.IPS(4801,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32075,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(255,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(140,Definitions.P.Q,Definitions.S.SHORT,false),4801,14,4,4801)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [17,252,64,235,167,211,169,125,220,255,102,29,4,247,42,115,44,121,5,94,246,225,129,190,33,37,6,48,196,91,242,13],\"legalEntityIdCounterparty\": [62,179,62,225,120,94,223,155,189,216,89,120,241,231,6,132,245,106,55,67,155,54,104,47,168,246,201,80,216,148,108,173],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 146097,\"statusDate\": 69,\"initialExchangeDate\": 29,\"maturityDate\": 7,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 256,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 365,\"nominalInterestRate\": 0,\"feeAccrued\": 951,\"accruedInterest\": 1532892062,\"rateMultiplier\": 64,\"rateSpread\": 899,\"feeRate\": 256,\"nextResetRate\": 4800,\"penaltyRate\": 2448,\"premiumDiscountAtIED\": 66,\"priceAtPurchaseDate\": 1461001,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 61,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461002,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 139,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 111,\"lifeFloor\": 61,\"periodCap\": 2014223715,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"17,252,64,235,167,211,169,125,220,255,102,29,4,247,42,115,44,121,5,94,246,225,129,190,33,37,6,48,196,91,242,13\"),stringToBytes32(\"62,179,62,225,120,94,223,155,189,216,89,120,241,231,6,132,245,106,55,67,155,54,104,47,168,246,201,80,216,148,108,173\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,146097,69,29,7,0,0,0,1,256,2448,4901,365,0,951,1532892062,64,899,256,4800,2448,66,1461001,Definitions.IPS(4800,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(61,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461002,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(139,Definitions.P.H,Definitions.S.SHORT,true),111,61,2014223715,400)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.311ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T07:18:49.333ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}