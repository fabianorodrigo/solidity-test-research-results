,{
  "2020-11-11T19:51:54.078ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.080ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.080ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.081ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.081ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.082ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.082ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.086ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.089ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.089ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.089ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.090ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.090ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.092ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.095ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.096ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.096ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.096ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.097ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.097ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.097ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.098ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.098ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.100ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.100ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.101ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.101ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.102ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.102ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.103ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.103ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.103ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.104ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.104ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 142,
                "sol": 142
              },
              {
                "js": "141",
                "sol": "141"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.105ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1462,
                "sol": 1462
              },
              {
                "js": "1461",
                "sol": "1461"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.106ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.106ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10000,
                "sol": 10000
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.108ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1338,
                "sol": 1338
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.108ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 162,
                "sol": 162
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.111ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.112ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.114ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.120ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "9",
                "sol": "9"
              },
              {
                "js": 8,
                "sol": 8
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4799",
                "sol": "4799"
              },
              {
                "js": 4798,
                "sol": 4798
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": 48,
                "sol": 48
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "86399",
                "sol": "86399"
              },
              {
                "js": 86398,
                "sol": 86398
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T19:51:54.126ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.127ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.127ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.127ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.129ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{\"i\": 14,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(14,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{\"i\": 95,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(95,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{\"i\": 160,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(160,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{\"i\": 360,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(360,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.133ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.134ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.135ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.139ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.143ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.146ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.146ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.152ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 4800,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4800,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(6,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 2440588,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 361,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(361,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 4800,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.158ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{\"i\": 21,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(21,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 19,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(19,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{\"i\": 361,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(361,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 361,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(361,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{\"i\": 4800,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4800,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{\"i\": 146098,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146098,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{\"i\": 949,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(949,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{\"i\": 146097,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146097,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{\"i\": 139,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(139,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.167ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 20,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(20,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 48,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(48,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 23,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(23,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 8,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 40,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(40,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 86401,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86401,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 900,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.173ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 4800,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 26,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 19,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 26,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 950,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 899,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 6,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 3},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 9999,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 141,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 150,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 1462,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 141,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 86400,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 97,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 4001,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 359,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 2440587,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 21,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 70,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 40,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 49,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 90,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 2014223716,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 901,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 3},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 14,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 80,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 10,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 9999,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 1970,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 79,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 2440588,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 3999,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 19,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 400,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 23,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 61,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 1336,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 8,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 950,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 109,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 19,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 13},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 6,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 49,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 141,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 6,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 141,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 49,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 59,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 64,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 359,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 14},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 32075,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 100,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 12},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 32076,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 10,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 1461000,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 1532892062,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 66,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 6},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 29,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 4001,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 10,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 8,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 368,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 5}]",
              "sol": "[Definitions.ProtoEvent(7,28,4800,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(28,361,26,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(24,901,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461001,2,19,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(3999,151,26,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(81,159,950,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(101,48,899,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(254,27,6,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IED),Definitions.ProtoEvent(119,4800,9999,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(2,367,141,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(25,160,150,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(80,39,1462,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(2447,4799,141,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(130,254,86400,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(68568,10,97,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(256,5,4001,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(99,149,359,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(21,25,2440587,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(1970,109,21,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(68568,31,70,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(2,359,40,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(365,151,49,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(81,1532892063,90,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(141,9999,2014223716,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(1970,6,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(4900,32074,901,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IED),Definitions.ProtoEvent(2014223714,149,14,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(110,1462,80,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(1462,90,10,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(256,365,9999,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(27,12,1970,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(900,12,79,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(86400,96,2440588,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(21,90,3999,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(49,95,19,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(89,40,400,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(86399,40,23,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(150,949,61,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(364,4000,1336,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(366,51,8,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(32076,899,950,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(32,109,109,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(9999,2447,19,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RRY),Definitions.ProtoEvent(86401,80,6,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(161,1971,49,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(1336,101,141,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(7,1338,6,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(101,95,141,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(4799,9999,49,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(1336,2,59,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(140,19,64,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(150,401,359,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SC),Definitions.ProtoEvent(79,2447,32075,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(5,69,100,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RR),Definitions.ProtoEvent(4901,41,32076,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(120,64,10,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(4000,2440589,1461000,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(51,1336,1532892062,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(25,64,66,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PP),Definitions.ProtoEvent(950,2440587,29,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(80,31,4001,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(119,4,10,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(90,16,8,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(32074,360,368,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR)]"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.197ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 10001,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 951,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 19,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 40,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 399,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 4900,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 66,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 100,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 64,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 97,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 131,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1461002,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 1461002,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 68570,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 11},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 4800,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1460,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 25,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 899,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 1461,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1532892063,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 21,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 129,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 367,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 50,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 109,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 399,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 68568,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 15,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 10},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 400,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 366,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 1336,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 950,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 30,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 12},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 23,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 1532892063,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 0,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 12},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 10,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 400,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 129,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 41,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 64,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 361,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 0},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 29,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 4800,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 130,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 149,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 1,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 6},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 89,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 79,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 1532892064,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 68569,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 0},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 50,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 3,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 140,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 24,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 100,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 1461001,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 365,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 2448,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 20},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 16,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1532892063,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 364,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 18,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 9}]",
              "sol": "[Definitions.ProtoEvent(1336,24,10001,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(10,50,951,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(111,39,19,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1460,399,40,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(399,1971,399,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(1461001,59,4900,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(101,1970,66,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(1532892064,70,100,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(25,4799,64,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(4,68570,97,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(24,4900,131,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(25,4801,1461002,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(23,79,1461002,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(60,4001,68570,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4001,7,4800,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(79,4801,1460,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(69,899,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(950,255,25,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(254,71,899,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(4000,2440587,1461,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(8,1338,1532892063,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(255,359,21,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(140,146098,129,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(11,40,367,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(254,32,50,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(368,110,109,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(139,16,399,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(360,30,68568,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(7,146096,15,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.TD),Definitions.ProtoEvent(1971,1970,400,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(24,10000,366,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(4,2014223714,1336,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(6,97,950,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(101,2014223716,30,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RR),Definitions.ProtoEvent(131,64,23,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(1969,1337,1532892063,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(367,4000,0,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR),Definitions.ProtoEvent(23,149,10,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(899,364,400,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(121,901,129,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(1532892064,400,41,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(130,11,64,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(71,2014223714,361,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SD),Definitions.ProtoEvent(255,366,29,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(26,31,4800,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(4799,367,130,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(96,21,149,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(9,2440588,1,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PP),Definitions.ProtoEvent(364,15,89,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(49,51,79,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(1532892062,32075,1532892064,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(69,30,68569,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SD),Definitions.ProtoEvent(131,68568,50,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(149,111,3,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(160,146096,140,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(61,86400,24,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(27,254,100,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(18,359,1461001,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(95,59,365,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(111,2440588,2448,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.Child),Definitions.ProtoEvent(2014223715,139,16,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(359,0,1532892063,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(140,1461,364,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(30,130,18,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD)]"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.214ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.216ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [237,62,6,212,212,157,22,7,172,125,189,71,168,81,86,254,204,101,238,61,205,58,40,110,117,51,195,2,235,6,96,204],\"legalEntityIdCounterparty\": [59,221,86,100,241,175,85,33,28,103,125,84,238,250,135,200,46,153,79,185,112,222,235,51,78,222,46,1,30,12,135,209],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 71,\"statusDate\": 15,\"initialExchangeDate\": 1336,\"maturityDate\": 41,\"terminationDate\": 101,\"purchaseDate\": 2446,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 120,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 1,\"nominalInterestRate\": 60,\"feeAccrued\": 3999,\"accruedInterest\": 109,\"rateMultiplier\": 31,\"rateSpread\": 1532892064,\"feeRate\": 49,\"nextResetRate\": 3,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 1461000,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 63,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 2440589,\"lifeFloor\": 131,\"periodCap\": 6,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"237,62,6,212,212,157,22,7,172,125,189,71,168,81,86,254,204,101,238,61,205,58,40,110,117,51,195,2,235,6,96,204\"),stringToBytes32(\"59,221,86,100,241,175,85,33,28,103,125,84,238,250,135,200,46,153,79,185,112,222,235,51,78,222,46,1,30,12,135,209\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,71,15,1336,41,101,2446,1532892062,86401,120,3999,86399,1,60,3999,109,31,1532892064,49,3,96,1461000,130,Definitions.IPS(19,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(28,Definitions.P.Q,Definitions.S.LONG,false),2440589,131,6,24)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.218ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [119,141,185,55,163,158,183,250,14,124,101,196,180,71,229,167,203,179,8,242,253,74,250,165,187,17,102,176,56,251,63,148],\"legalEntityIdCounterparty\": [88,188,206,55,244,223,135,253,174,17,72,173,246,11,149,253,214,19,218,1,126,130,217,193,147,239,26,150,66,75,60,122],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 360,\"statusDate\": 80,\"initialExchangeDate\": 361,\"maturityDate\": 139,\"terminationDate\": 81,\"purchaseDate\": 364,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 146096,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 100,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": -1,\"nominalInterestRate\": 10,\"feeAccrued\": 32076,\"accruedInterest\": 364,\"rateMultiplier\": 119,\"rateSpread\": 15,\"feeRate\": 41,\"nextResetRate\": 8,\"penaltyRate\": 131,\"premiumDiscountAtIED\": 61,\"priceAtPurchaseDate\": 2446,\"cycleOfInterestPayment\": {\"i\": 101,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 9999,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 361,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 9,\"periodCap\": 949,\"periodFloor\": 1969}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"119,141,185,55,163,158,183,250,14,124,101,196,180,71,229,167,203,179,8,242,253,74,250,165,187,17,102,176,56,251,63,148\"),stringToBytes32(\"88,188,206,55,244,223,135,253,174,17,72,173,246,11,149,253,214,19,218,1,126,130,217,193,147,239,26,150,66,75,60,122\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,360,80,361,139,81,364,11,146096,129,100,110,-1,10,32076,364,119,15,41,8,131,61,2446,Definitions.IPS(101,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1532892063,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(9999,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(361,Definitions.P.Y,Definitions.S.SHORT,true),1461002,9,949,1969)"
            },
            {
              "js": "{\"lastEventTime\": 401,\"contractStatus\": 3,\"timeFromLastEvent\": 1461001,\"nominalValue\": 4801,\"nominalAccrued\": 399,\"feeAccrued\": 1970,\"nominalRate\": 2014223716,\"interestScalingMultiplier\": 27,\"nominalScalingMultiplier\": 4899,\"contractRoleSign\": 3}",
              "sol": "Definitions.ContractState(401,Definitions.ContractStatus.DF,1461001,4801,399,1970,2014223716,27,4899,Definitions.ContractRole.ST)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.220ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [87,72,63,205,16,235,53,195,12,62,183,69,118,236,141,251,151,87,56,236,81,69,190,139,119,11,87,133,230,99,18,153],\"legalEntityIdCounterparty\": [50,77,4,179,198,219,1,233,20,217,183,178,91,4,68,197,53,234,187,162,55,203,158,39,142,49,92,151,67,130,237,150],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 32,\"statusDate\": 159,\"initialExchangeDate\": 101,\"maturityDate\": 361,\"terminationDate\": 160,\"purchaseDate\": 1338,\"capitalizationEndDate\": 1461000,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 61,\"cycleAnchorDateOfScalingIndex\": 25,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 7,\"nominalInterestRate\": 359,\"feeAccrued\": 0,\"accruedInterest\": 4800,\"rateMultiplier\": 4,\"rateSpread\": 1970,\"feeRate\": 89,\"nextResetRate\": 359,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 366,\"cycleOfInterestPayment\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 11,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4801,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": -1,\"lifeFloor\": 151,\"periodCap\": 149,\"periodFloor\": 146098}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"87,72,63,205,16,235,53,195,12,62,183,69,118,236,141,251,151,87,56,236,81,69,190,139,119,11,87,133,230,99,18,153\"),stringToBytes32(\"50,77,4,179,198,219,1,233,20,217,183,178,91,4,68,197,53,234,187,162,55,203,158,39,142,49,92,151,67,130,237,150\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,32,159,101,361,160,1338,1461000,60,61,25,254,7,359,0,4800,4,1970,89,359,69,1532892063,366,Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(11,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(4801,Definitions.P.D,Definitions.S.LONG,true),-1,151,149,146098)"
            },
            {
              "js": "{\"lastEventTime\": 86400,\"contractStatus\": 0,\"timeFromLastEvent\": 359,\"nominalValue\": 9,\"nominalAccrued\": 2446,\"feeAccrued\": 159,\"nominalRate\": 2447,\"interestScalingMultiplier\": 139,\"nominalScalingMultiplier\": 119,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(86400,Definitions.ContractStatus.PF,359,9,2446,159,2447,139,119,Definitions.ContractRole.RPA)"
            },
            {
              "js": "{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 2014223714,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 13}",
              "sol": "Definitions.ProtoEvent(60,1461001,2014223714,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.226ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [246,79,123,133,9,136,195,138,128,114,120,70,54,152,109,182,98,225,27,130,100,189,230,5,76,207,178,58,5,37,82,96],\"legalEntityIdCounterparty\": [84,195,19,200,222,144,24,242,181,101,213,119,97,116,93,144,160,60,41,139,209,149,245,140,157,201,221,226,85,25,62,107],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1532892063,\"statusDate\": 1969,\"initialExchangeDate\": 70,\"maturityDate\": 399,\"terminationDate\": 361,\"purchaseDate\": 28,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 901,\"cycleAnchorDateOfRateReset\": 400,\"cycleAnchorDateOfScalingIndex\": 101,\"cycleAnchorDateOfFee\": 1461000,\"notionalPrincipal\": 95,\"nominalInterestRate\": 81,\"feeAccrued\": 41,\"accruedInterest\": 4000,\"rateMultiplier\": 1970,\"rateSpread\": 32076,\"feeRate\": 1460,\"nextResetRate\": 64,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 1462,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 79,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 160,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 96,\"lifeFloor\": 1532892064,\"periodCap\": 71,\"periodFloor\": 1969}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"246,79,123,133,9,136,195,138,128,114,120,70,54,152,109,182,98,225,27,130,100,189,230,5,76,207,178,58,5,37,82,96\"),stringToBytes32(\"84,195,19,200,222,144,24,242,181,101,213,119,97,116,93,144,160,60,41,139,209,149,245,140,157,201,221,226,85,25,62,107\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1532892063,1969,70,399,361,28,96,901,400,101,1461000,95,81,41,4000,1970,32076,1460,64,1461,1971,1462,Definitions.IPS(401,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(79,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(160,Definitions.P.Y,Definitions.S.SHORT,false),96,1532892064,71,1969)"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [59,194,196,155,50,6,254,103,161,135,46,41,100,159,57,209,232,70,155,231,22,135,157,65,153,217,196,135,62,59,185,70],\"legalEntityIdCounterparty\": [148,147,216,92,203,74,29,60,253,38,41,229,74,48,126,223,181,107,60,228,249,116,142,72,109,240,178,4,129,126,94,111],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86401,\"statusDate\": 4799,\"initialExchangeDate\": 4900,\"maturityDate\": 367,\"terminationDate\": 68570,\"purchaseDate\": 1970,\"capitalizationEndDate\": 95,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 130,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 4799,\"nominalInterestRate\": 28,\"feeAccrued\": 2440589,\"accruedInterest\": 4,\"rateMultiplier\": 360,\"rateSpread\": 139,\"feeRate\": 27,\"nextResetRate\": 10001,\"penaltyRate\": 2014223715,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 1970,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 70,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 15,\"lifeFloor\": 9999,\"periodCap\": 4799,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"59,194,196,155,50,6,254,103,161,135,46,41,100,159,57,209,232,70,155,231,22,135,157,65,153,217,196,135,62,59,185,70\"),stringToBytes32(\"148,147,216,92,203,74,29,60,253,38,41,229,74,48,126,223,181,107,60,228,249,116,142,72,109,240,178,4,129,126,94,111\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86401,4799,4900,367,68570,1970,95,18,2446,130,110,4799,28,2440589,4,360,139,27,10001,2014223715,51,1970,Definitions.IPS(140,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(129,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.Q,Definitions.S.SHORT,true),15,9999,4799,19)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [100,253,174,196,56,110,75,221,174,6,243,71,40,162,89,106,182,125,29,186,103,3,181,92,5,68,92,213,70,94,24,219],\"legalEntityIdCounterparty\": [88,106,181,126,69,196,41,159,111,122,37,46,247,38,114,190,80,138,68,171,0,37,148,1,52,186,75,29,52,241,24,67],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 90,\"statusDate\": 68570,\"initialExchangeDate\": 367,\"maturityDate\": 951,\"terminationDate\": 14,\"purchaseDate\": 4799,\"capitalizationEndDate\": 59,\"cycleAnchorDateOfInterestPayment\": 81,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 24,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 39,\"nominalInterestRate\": 364,\"feeAccrued\": 1461000,\"accruedInterest\": 86401,\"rateMultiplier\": 6,\"rateSpread\": 3,\"feeRate\": 86401,\"nextResetRate\": 1,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 139,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 3,\"lifeFloor\": 1337,\"periodCap\": 2014223714,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"100,253,174,196,56,110,75,221,174,6,243,71,40,162,89,106,182,125,29,186,103,3,181,92,5,68,92,213,70,94,24,219\"),stringToBytes32(\"88,106,181,126,69,196,41,159,111,122,37,46,247,38,114,190,80,138,68,171,0,37,148,1,52,186,75,29,52,241,24,67\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,90,68570,367,951,14,4799,59,81,79,24,901,39,364,1461000,86401,6,3,86401,1,1460,401,96,Definitions.IPS(30,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(139,Definitions.P.W,Definitions.S.SHORT,true),3,1337,2014223714,2440589)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [44,142,228,55,134,210,34,199,165,90,242,77,60,151,196,115,108,108,119,236,111,108,201,225,2,27,206,88,185,130,80,73],\"legalEntityIdCounterparty\": [180,138,129,160,120,54,163,170,68,155,56,146,125,92,80,151,62,254,192,220,2,221,140,44,0,102,151,191,125,11,105,151],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 60,\"statusDate\": 2440587,\"initialExchangeDate\": 4,\"maturityDate\": 32075,\"terminationDate\": 21,\"purchaseDate\": 4901,\"capitalizationEndDate\": 100,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 51,\"cycleAnchorDateOfFee\": 1336,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 1336,\"feeAccrued\": 1462,\"accruedInterest\": 95,\"rateMultiplier\": 63,\"rateSpread\": 4799,\"feeRate\": 97,\"nextResetRate\": 50,\"penaltyRate\": 39,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 4801,\"cycleOfInterestPayment\": {\"i\": 86401,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 3999,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 146096,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 130,\"lifeFloor\": 360,\"periodCap\": 150,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"44,142,228,55,134,210,34,199,165,90,242,77,60,151,196,115,108,108,119,236,111,108,201,225,2,27,206,88,185,130,80,73\"),stringToBytes32(\"180,138,129,160,120,54,163,170,68,155,56,146,125,92,80,151,62,254,192,220,2,221,140,44,0,102,151,191,125,11,105,151\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,60,2440587,4,32075,21,4901,100,146097,68570,51,1336,1461001,1336,1462,95,63,4799,97,50,39,401,4801,Definitions.IPS(86401,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(3999,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(950,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(146096,Definitions.P.Y,Definitions.S.LONG,true),130,360,150,254)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [117,198,180,114,209,85,33,246,250,255,201,16,212,54,172,99,115,72,162,95,83,98,6,106,14,226,12,168,144,185,34,206],\"legalEntityIdCounterparty\": [168,75,118,24,74,62,13,207,10,158,118,64,209,147,69,103,33,136,44,133,120,30,174,66,42,170,178,99,230,135,195,87],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 7,\"statusDate\": 256,\"initialExchangeDate\": 49,\"maturityDate\": 111,\"terminationDate\": 31,\"purchaseDate\": 0,\"capitalizationEndDate\": 14,\"cycleAnchorDateOfInterestPayment\": 151,\"cycleAnchorDateOfRateReset\": 71,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 901,\"nominalInterestRate\": 140,\"feeAccrued\": 900,\"accruedInterest\": 49,\"rateMultiplier\": 86400,\"rateSpread\": 1460,\"feeRate\": 101,\"nextResetRate\": 99,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 26,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 256,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 256,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 146097,\"lifeFloor\": 31,\"periodCap\": 16,\"periodFloor\": 7}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"117,198,180,114,209,85,33,246,250,255,201,16,212,54,172,99,115,72,162,95,83,98,6,106,14,226,12,168,144,185,34,206\"),stringToBytes32(\"168,75,118,24,74,62,13,207,10,158,118,64,209,147,69,103,33,136,44,133,120,30,174,66,42,170,178,99,230,135,195,87\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,7,256,49,111,31,0,14,151,71,119,8,901,140,900,49,86400,1460,101,99,256,146096,26,Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(256,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(256,Definitions.P.D,Definitions.S.SHORT,true),146097,31,16,7)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [63,168,94,217,153,129,83,93,0,4,92,96,6,133,209,104,5,207,207,127,221,124,99,180,133,187,177,55,47,19,200,65],\"legalEntityIdCounterparty\": [114,146,239,235,172,168,70,134,218,131,15,24,11,56,59,104,12,23,199,43,130,207,241,41,13,108,229,90,50,103,184,71],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2447,\"statusDate\": 13,\"initialExchangeDate\": 2014223716,\"maturityDate\": 900,\"terminationDate\": 364,\"purchaseDate\": 129,\"capitalizationEndDate\": 64,\"cycleAnchorDateOfInterestPayment\": 900,\"cycleAnchorDateOfRateReset\": 109,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 9,\"nominalInterestRate\": 120,\"feeAccrued\": 17,\"accruedInterest\": 3,\"rateMultiplier\": 19,\"rateSpread\": 32076,\"feeRate\": 29,\"nextResetRate\": 68570,\"penaltyRate\": 66,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 1532892062,\"cycleOfInterestPayment\": {\"i\": 129,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 40,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 14,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 91,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 86399,\"lifeFloor\": 4800,\"periodCap\": 89,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"63,168,94,217,153,129,83,93,0,4,92,96,6,133,209,104,5,207,207,127,221,124,99,180,133,187,177,55,47,19,200,65\"),stringToBytes32(\"114,146,239,235,172,168,70,134,218,131,15,24,11,56,59,104,12,23,199,43,130,207,241,41,13,108,229,90,50,103,184,71\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2447,13,2014223716,900,364,129,64,900,109,4,1461001,9,120,17,3,19,32076,29,68570,66,18,1532892062,Definitions.IPS(129,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(40,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(14,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(91,Definitions.P.Y,Definitions.S.SHORT,true),86399,4800,89,2)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [120,206,58,22,114,74,184,210,62,239,223,230,141,139,142,219,21,166,39,74,110,1,19,103,36,153,1,60,197,111,174,83],\"legalEntityIdCounterparty\": [21,40,29,126,173,60,213,69,249,70,14,104,90,88,104,177,44,134,160,167,229,89,153,51,189,64,41,155,33,230,99,170],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 60,\"statusDate\": 63,\"initialExchangeDate\": 367,\"maturityDate\": 39,\"terminationDate\": 4900,\"purchaseDate\": 31,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 129,\"cycleAnchorDateOfFee\": 161,\"notionalPrincipal\": 121,\"nominalInterestRate\": 32076,\"feeAccrued\": 26,\"accruedInterest\": 1532892063,\"rateMultiplier\": 4899,\"rateSpread\": 366,\"feeRate\": 161,\"nextResetRate\": 257,\"penaltyRate\": 16,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2014223715,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1336,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 11,\"lifeFloor\": 1461,\"periodCap\": 110,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"120,206,58,22,114,74,184,210,62,239,223,230,141,139,142,219,21,166,39,74,110,1,19,103,36,153,1,60,197,111,174,83\"),stringToBytes32(\"21,40,29,126,173,60,213,69,249,70,14,104,90,88,104,177,44,134,160,167,229,89,153,51,189,64,41,155,33,230,99,170\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,60,63,367,39,4900,31,10000,15,1532892063,129,161,121,32076,26,1532892063,4899,366,161,257,16,2440589,159,Definitions.IPS(4900,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2014223715,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1336,Definitions.P.M,Definitions.S.SHORT,false),11,1461,110,68569)"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [182,248,246,124,178,162,9,223,30,113,36,168,52,246,99,196,157,171,160,218,104,197,136,136,191,15,94,5,150,57,45,249],\"legalEntityIdCounterparty\": [250,32,66,212,165,167,37,223,39,197,128,147,226,199,68,99,235,2,0,67,30,22,120,98,240,42,179,192,197,84,217,242],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 89,\"statusDate\": 141,\"initialExchangeDate\": 129,\"maturityDate\": 24,\"terminationDate\": 6,\"purchaseDate\": 2014223714,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 2440588,\"cycleAnchorDateOfFee\": 1971,\"notionalPrincipal\": 151,\"nominalInterestRate\": 89,\"feeAccrued\": 86400,\"accruedInterest\": 146097,\"rateMultiplier\": 129,\"rateSpread\": 70,\"feeRate\": 49,\"nextResetRate\": 80,\"penaltyRate\": 141,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10001,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 400,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 401,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 86401,\"lifeFloor\": 28,\"periodCap\": 68569,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"182,248,246,124,178,162,9,223,30,113,36,168,52,246,99,196,157,171,160,218,104,197,136,136,191,15,94,5,150,57,45,249\"),stringToBytes32(\"250,32,66,212,165,167,37,223,39,197,128,147,226,199,68,99,235,2,0,67,30,22,120,98,240,42,179,192,197,84,217,242\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,89,141,129,24,6,2014223714,0,60,100,2440588,1971,151,89,86400,146097,129,70,49,80,141,146096,8,Definitions.IPS(4799,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(10001,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.Y,Definitions.S.SHORT,false),86401,28,68569,60)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [139,114,230,98,209,213,192,239,7,235,93,69,205,174,253,26,37,34,77,249,194,230,221,13,130,136,114,252,156,215,217,4],\"legalEntityIdCounterparty\": [156,34,217,227,227,183,184,51,241,180,163,63,198,127,167,201,16,218,200,142,68,57,242,117,0,180,152,190,225,255,216,193],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1532892062,\"statusDate\": 12,\"initialExchangeDate\": 28,\"maturityDate\": 1460,\"terminationDate\": 255,\"purchaseDate\": 28,\"capitalizationEndDate\": 13,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 95,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 68569,\"nominalInterestRate\": 3999,\"feeAccrued\": 59,\"accruedInterest\": 79,\"rateMultiplier\": 899,\"rateSpread\": 14,\"feeRate\": 39,\"nextResetRate\": 151,\"penaltyRate\": 257,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 151,\"cycleOfInterestPayment\": {\"i\": 1337,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 21,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 95,\"lifeFloor\": 151,\"periodCap\": 129,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"139,114,230,98,209,213,192,239,7,235,93,69,205,174,253,26,37,34,77,249,194,230,221,13,130,136,114,252,156,215,217,4\"),stringToBytes32(\"156,34,217,227,227,183,184,51,241,180,163,63,198,127,167,201,16,218,200,142,68,57,242,117,0,180,152,190,225,255,216,193\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1532892062,12,28,1460,255,28,13,9999,68570,95,1461,68569,3999,59,79,899,14,39,151,257,361,151,Definitions.IPS(1337,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(21,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.Q,Definitions.S.SHORT,false),95,151,129,159)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [205,9,205,139,76,135,71,98,5,10,166,80,102,75,116,23,131,46,25,108,116,77,80,99,22,220,41,24,13,89,77,70],\"legalEntityIdCounterparty\": [216,225,107,103,48,222,238,247,67,125,50,219,171,6,158,208,156,158,58,17,12,8,238,169,81,254,230,155,77,34,131,78],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 39,\"statusDate\": 21,\"initialExchangeDate\": 120,\"maturityDate\": 161,\"terminationDate\": 161,\"purchaseDate\": 254,\"capitalizationEndDate\": 1337,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 4901,\"cycleAnchorDateOfScalingIndex\": 255,\"cycleAnchorDateOfFee\": 951,\"notionalPrincipal\": 30,\"nominalInterestRate\": 364,\"feeAccrued\": 1461002,\"accruedInterest\": 140,\"rateMultiplier\": 10,\"rateSpread\": 63,\"feeRate\": 360,\"nextResetRate\": 257,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 28,\"cycleOfInterestPayment\": {\"i\": 119,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 361,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 15,\"lifeFloor\": 119,\"periodCap\": 18,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"205,9,205,139,76,135,71,98,5,10,166,80,102,75,116,23,131,46,25,108,116,77,80,99,22,220,41,24,13,89,77,70\"),stringToBytes32(\"216,225,107,103,48,222,238,247,67,125,50,219,171,6,158,208,156,158,58,17,12,8,238,169,81,254,230,155,77,34,131,78\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,39,21,120,161,161,254,1337,120,4901,255,951,30,364,1461002,140,10,63,360,257,5,364,28,Definitions.IPS(119,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(68570,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(361,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,false),15,119,18,89)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [174,45,218,156,196,216,169,34,76,118,156,214,138,154,206,52,254,55,28,250,37,142,148,2,58,217,23,238,24,148,59,7],\"legalEntityIdCounterparty\": [206,97,189,112,243,1,51,188,50,36,39,178,139,36,250,0,134,148,65,150,75,106,117,34,97,52,248,196,47,23,11,216],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 0,\"statusDate\": 60,\"initialExchangeDate\": 1460,\"maturityDate\": 2440588,\"terminationDate\": 3999,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 32,\"cycleAnchorDateOfScalingIndex\": 2014223716,\"cycleAnchorDateOfFee\": 1460,\"notionalPrincipal\": 20,\"nominalInterestRate\": 0,\"feeAccrued\": 65,\"accruedInterest\": 12,\"rateMultiplier\": 151,\"rateSpread\": 64,\"feeRate\": 7,\"nextResetRate\": 359,\"penaltyRate\": 91,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32075,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 130,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 25,\"lifeFloor\": 1969,\"periodCap\": 32076,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"174,45,218,156,196,216,169,34,76,118,156,214,138,154,206,52,254,55,28,250,37,142,148,2,58,217,23,238,24,148,59,7\"),stringToBytes32(\"206,97,189,112,243,1,51,188,50,36,39,178,139,36,250,0,134,148,65,150,75,106,117,34,97,52,248,196,47,23,11,216\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,0,60,1460,2440588,3999,0,0,68570,32,2014223716,1460,20,0,65,12,151,64,7,359,91,146096,101,Definitions.IPS(1970,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(32075,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(130,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(367,Definitions.P.H,Definitions.S.SHORT,true),25,1969,32076,949)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [19,141,222,12,108,132,174,95,214,94,90,149,182,58,50,79,116,240,163,80,151,166,112,183,65,98,210,87,153,59,92,226],\"legalEntityIdCounterparty\": [239,96,40,117,228,64,121,148,36,86,40,49,51,215,115,23,26,249,176,23,242,12,99,245,77,248,42,247,4,117,5,224],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 15,\"statusDate\": 10,\"initialExchangeDate\": 119,\"maturityDate\": 4,\"terminationDate\": 159,\"purchaseDate\": 160,\"capitalizationEndDate\": 4,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 1532892062,\"cycleAnchorDateOfFee\": 359,\"notionalPrincipal\": 66,\"nominalInterestRate\": 2446,\"feeAccrued\": 23,\"accruedInterest\": 949,\"rateMultiplier\": 40,\"rateSpread\": 70,\"feeRate\": 364,\"nextResetRate\": 31,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 32074,\"priceAtPurchaseDate\": 2440588,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 95,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 110,\"lifeFloor\": 367,\"periodCap\": 949,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"19,141,222,12,108,132,174,95,214,94,90,149,182,58,50,79,116,240,163,80,151,166,112,183,65,98,210,87,153,59,92,226\"),stringToBytes32(\"239,96,40,117,228,64,121,148,36,86,40,49,51,215,115,23,26,249,176,23,242,12,99,245,77,248,42,247,4,117,5,224\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,15,10,119,4,159,160,4,359,2014223714,1532892062,359,66,2446,23,949,40,70,364,31,68568,32074,2440588,Definitions.IPS(361,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(32,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(95,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.Y,Definitions.S.LONG,false),110,367,949,1532892064)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [20,45,26,73,192,197,59,92,199,186,84,98,63,18,101,72,80,152,128,3,21,7,32,9,64,224,213,184,38,209,91,175],\"legalEntityIdCounterparty\": [145,189,195,116,95,5,185,180,182,223,118,216,39,187,22,59,70,112,191,231,117,204,18,230,67,67,108,191,178,199,214,227],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 63,\"statusDate\": 359,\"initialExchangeDate\": 63,\"maturityDate\": 27,\"terminationDate\": 140,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 367,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 1971,\"notionalPrincipal\": 0,\"nominalInterestRate\": 0,\"feeAccrued\": 63,\"accruedInterest\": 1532892063,\"rateMultiplier\": 2440587,\"rateSpread\": 2014223714,\"feeRate\": 71,\"nextResetRate\": 161,\"penaltyRate\": 121,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 63,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 1971,\"lifeFloor\": 140,\"periodCap\": 2014223714,\"periodFloor\": 3}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"20,45,26,73,192,197,59,92,199,186,84,98,63,18,101,72,80,152,128,3,21,7,32,9,64,224,213,184,38,209,91,175\"),stringToBytes32(\"145,189,195,116,95,5,185,180,182,223,118,216,39,187,22,59,70,112,191,231,117,204,18,230,67,67,108,191,178,199,214,227\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,63,359,63,27,140,0,0,367,0,5,1971,0,0,63,1532892063,2440587,2014223714,71,161,121,51,1461,Definitions.IPS(30,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(63,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.H,Definitions.S.LONG,true),1971,140,2014223714,3)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [192,163,10,155,189,212,190,6,211,55,47,115,84,189,248,98,119,38,25,246,133,41,111,8,131,83,97,114,248,246,12,31],\"legalEntityIdCounterparty\": [213,221,47,128,237,170,215,190,161,208,126,47,33,165,8,212,252,109,220,211,216,122,245,41,129,233,147,229,99,57,209,86],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 150,\"statusDate\": 129,\"initialExchangeDate\": 111,\"maturityDate\": 32,\"terminationDate\": 10001,\"purchaseDate\": 1338,\"capitalizationEndDate\": 1971,\"cycleAnchorDateOfInterestPayment\": 70,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 49,\"cycleAnchorDateOfFee\": 23,\"notionalPrincipal\": 1461002,\"nominalInterestRate\": 70,\"feeAccrued\": 4899,\"accruedInterest\": 32074,\"rateMultiplier\": 99,\"rateSpread\": 1461001,\"feeRate\": 21,\"nextResetRate\": 26,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 901,\"priceAtPurchaseDate\": 39,\"cycleOfInterestPayment\": {\"i\": 28,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440589,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 40,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 4001,\"lifeFloor\": 131,\"periodCap\": 63,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"192,163,10,155,189,212,190,6,211,55,47,115,84,189,248,98,119,38,25,246,133,41,111,8,131,83,97,114,248,246,12,31\"),stringToBytes32(\"213,221,47,128,237,170,215,190,161,208,126,47,33,165,8,212,252,109,220,211,216,122,245,41,129,233,147,229,99,57,209,86\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,150,129,111,32,10001,1338,1971,70,110,49,23,1461002,70,4899,32074,99,1461001,21,26,97,901,39,Definitions.IPS(28,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2440589,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(40,Definitions.P.Y,Definitions.S.LONG,true),4001,131,63,257)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [60,157,119,42,39,198,163,140,175,110,123,178,90,42,33,232,205,95,171,191,205,123,219,110,180,135,107,153,166,174,36,12],\"legalEntityIdCounterparty\": [190,210,200,35,111,27,10,145,110,89,25,158,100,31,68,254,11,31,186,60,11,198,169,50,178,10,123,110,218,91,23,239],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 61,\"statusDate\": 13,\"initialExchangeDate\": 69,\"maturityDate\": 121,\"terminationDate\": 4901,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 2446,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 99,\"nominalInterestRate\": 0,\"feeAccrued\": 1969,\"accruedInterest\": 51,\"rateMultiplier\": 2446,\"rateSpread\": 32,\"feeRate\": 86401,\"nextResetRate\": 97,\"penaltyRate\": 63,\"premiumDiscountAtIED\": 70,\"priceAtPurchaseDate\": 2447,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 66,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 109,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 31,\"lifeFloor\": 111,\"periodCap\": 1337,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"60,157,119,42,39,198,163,140,175,110,123,178,90,42,33,232,205,95,171,191,205,123,219,110,180,135,107,153,166,174,36,12\"),stringToBytes32(\"190,210,200,35,111,27,10,145,110,89,25,158,100,31,68,254,11,31,186,60,11,198,169,50,178,10,123,110,218,91,23,239\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,61,13,69,121,4901,0,0,257,69,2446,0,99,0,1969,51,2446,32,86401,97,63,70,2447,Definitions.IPS(1461002,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(66,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(109,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,true),31,111,1337,95)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [51,94,149,135,187,157,151,217,241,104,222,237,121,127,191,124,7,99,135,47,160,253,236,216,99,219,9,218,146,232,215,106],\"legalEntityIdCounterparty\": [253,168,155,200,22,68,10,213,26,142,178,172,10,53,92,29,136,255,88,110,214,50,11,114,43,33,93,185,217,106,222,122],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 31,\"statusDate\": 359,\"initialExchangeDate\": 89,\"maturityDate\": 66,\"terminationDate\": 30,\"purchaseDate\": 30,\"capitalizationEndDate\": 146096,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 99,\"cycleAnchorDateOfFee\": 2014223715,\"notionalPrincipal\": 17,\"nominalInterestRate\": 146097,\"feeAccrued\": 360,\"accruedInterest\": 1532892064,\"rateMultiplier\": 399,\"rateSpread\": 364,\"feeRate\": 256,\"nextResetRate\": 64,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68569,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68568,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 257,\"lifeFloor\": 366,\"periodCap\": 86399,\"periodFloor\": 4001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"51,94,149,135,187,157,151,217,241,104,222,237,121,127,191,124,7,99,135,47,160,253,236,216,99,219,9,218,146,232,215,106\"),stringToBytes32(\"253,168,155,200,22,68,10,213,26,142,178,172,10,53,92,29,136,255,88,110,214,50,11,114,43,33,93,185,217,106,222,122\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,31,359,89,66,30,30,146096,65,19,99,2014223715,17,146097,360,1532892064,399,364,256,64,1338,18,120,Definitions.IPS(120,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(68569,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.H,Definitions.S.LONG,true),257,366,86399,4001)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [152,131,58,60,221,194,26,135,128,44,11,163,236,247,5,192,98,81,252,96,62,219,76,184,157,142,112,214,231,173,119,85],\"legalEntityIdCounterparty\": [252,180,30,226,27,3,12,145,0,61,72,60,183,219,233,101,132,205,210,74,190,16,103,243,37,131,208,197,129,148,243,124],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 256,\"statusDate\": 80,\"initialExchangeDate\": 4,\"maturityDate\": 121,\"terminationDate\": 2446,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 91,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 23,\"nominalInterestRate\": 0,\"feeAccrued\": 48,\"accruedInterest\": 146096,\"rateMultiplier\": 360,\"rateSpread\": 8,\"feeRate\": 63,\"nextResetRate\": 4899,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 64,\"priceAtPurchaseDate\": 48,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 39,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892063,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223715,\"lifeFloor\": 48,\"periodCap\": 25,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"152,131,58,60,221,194,26,135,128,44,11,163,236,247,5,192,98,81,252,96,62,219,76,184,157,142,112,214,231,173,119,85\"),stringToBytes32(\"252,180,30,226,27,3,12,145,0,61,72,60,183,219,233,101,132,205,210,74,190,16,103,243,37,131,208,197,129,148,243,124\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,256,80,4,121,2446,0,0,91,1461,0,65,23,0,48,146096,360,8,63,4899,19,64,48,Definitions.IPS(30,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(39,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1532892063,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.Y,Definitions.S.SHORT,true),2014223715,48,25,950)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [189,144,186,255,76,222,235,122,247,41,154,2,163,40,77,215,116,85,191,185,219,21,68,120,94,49,143,43,248,170,176,173],\"legalEntityIdCounterparty\": [18,74,152,182,118,123,117,126,10,56,140,169,105,49,174,182,163,88,202,244,139,164,18,90,52,85,228,93,222,140,95,209],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4900,\"statusDate\": 119,\"initialExchangeDate\": 96,\"maturityDate\": 6,\"terminationDate\": 130,\"purchaseDate\": 10,\"capitalizationEndDate\": 359,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 18,\"cycleAnchorDateOfScalingIndex\": 4900,\"cycleAnchorDateOfFee\": 359,\"notionalPrincipal\": 1338,\"nominalInterestRate\": 1460,\"feeAccrued\": 23,\"accruedInterest\": 26,\"rateMultiplier\": 161,\"rateSpread\": 7,\"feeRate\": 1462,\"nextResetRate\": 949,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 96,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 51,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4899,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 364,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 31,\"lifeFloor\": 26,\"periodCap\": 4900,\"periodFloor\": 27}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"189,144,186,255,76,222,235,122,247,41,154,2,163,40,77,215,116,85,191,185,219,21,68,120,94,49,143,43,248,170,176,173\"),stringToBytes32(\"18,74,152,182,118,123,117,126,10,56,140,169,105,49,174,182,163,88,202,244,139,164,18,90,52,85,228,93,222,140,95,209\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4900,119,96,6,130,10,359,90,18,4900,359,1338,1460,23,26,161,7,1462,949,79,96,60,Definitions.IPS(51,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2440588,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(4899,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(364,Definitions.P.Q,Definitions.S.LONG,false),31,26,4900,27)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [245,68,165,27,175,49,130,6,53,163,40,19,155,122,91,119,238,31,238,239,251,112,94,238,35,212,173,35,29,226,120,199],\"legalEntityIdCounterparty\": [155,76,98,157,133,68,123,47,94,101,47,226,215,10,4,87,53,123,19,183,185,239,150,5,24,25,18,188,170,243,34,169],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2440587,\"statusDate\": 146097,\"initialExchangeDate\": 2446,\"maturityDate\": 1461000,\"terminationDate\": 68569,\"purchaseDate\": 4901,\"capitalizationEndDate\": 97,\"cycleAnchorDateOfInterestPayment\": 68568,\"cycleAnchorDateOfRateReset\": 1337,\"cycleAnchorDateOfScalingIndex\": 359,\"cycleAnchorDateOfFee\": 60,\"notionalPrincipal\": 110,\"nominalInterestRate\": 51,\"feeAccrued\": 361,\"accruedInterest\": 366,\"rateMultiplier\": 32074,\"rateSpread\": 9,\"feeRate\": 899,\"nextResetRate\": 400,\"penaltyRate\": 32,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 71,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 139,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 361,\"lifeFloor\": 161,\"periodCap\": 141,\"periodFloor\": 101}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"245,68,165,27,175,49,130,6,53,163,40,19,155,122,91,119,238,31,238,239,251,112,94,238,35,212,173,35,29,226,120,199\"),stringToBytes32(\"155,76,98,157,133,68,123,47,94,101,47,226,215,10,4,87,53,123,19,183,185,239,150,5,24,25,18,188,170,243,34,169\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2440587,146097,2446,1461000,68569,4901,97,68568,1337,359,60,110,51,361,366,32074,9,899,400,32,2440587,71,Definitions.IPS(130,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(51,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(139,Definitions.P.Y,Definitions.S.LONG,false),361,161,141,101)"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [64,133,250,67,65,141,134,224,186,207,181,196,156,53,96,246,103,31,170,16,85,187,169,251,86,199,53,253,189,50,29,112],\"legalEntityIdCounterparty\": [210,153,20,234,244,30,47,122,153,94,160,43,187,212,114,122,23,25,105,56,30,141,207,111,66,252,32,220,160,74,131,124],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1532892062,\"statusDate\": 900,\"initialExchangeDate\": 86399,\"maturityDate\": 28,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 119,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 15,\"cycleAnchorDateOfFee\": 4900,\"notionalPrincipal\": 146098,\"nominalInterestRate\": 0,\"feeAccrued\": 39,\"accruedInterest\": 39,\"rateMultiplier\": 48,\"rateSpread\": 1532892063,\"feeRate\": 79,\"nextResetRate\": 71,\"penaltyRate\": 159,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 17,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 97,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 90,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 69,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 89,\"lifeFloor\": 86400,\"periodCap\": 15,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"64,133,250,67,65,141,134,224,186,207,181,196,156,53,96,246,103,31,170,16,85,187,169,251,86,199,53,253,189,50,29,112\"),stringToBytes32(\"210,153,20,234,244,30,47,122,153,94,160,43,187,212,114,122,23,25,105,56,30,141,207,111,66,252,32,220,160,74,131,124\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1532892062,900,86399,28,0,0,0,119,8,15,4900,146098,0,39,39,48,1532892063,79,71,159,48,23,Definitions.IPS(17,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(97,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.M,Definitions.S.LONG,false),89,86400,15,32075)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [3,121,43,239,228,151,54,136,160,184,177,223,100,196,168,186,24,75,58,105,189,106,245,125,134,155,172,199,121,15,119,118],\"legalEntityIdCounterparty\": [86,112,172,64,187,149,4,132,147,72,205,223,16,198,244,144,87,171,34,172,98,226,200,171,188,248,197,131,197,70,114,14],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 899,\"statusDate\": 95,\"initialExchangeDate\": 99,\"maturityDate\": 1532892063,\"terminationDate\": 160,\"purchaseDate\": 63,\"capitalizationEndDate\": 86399,\"cycleAnchorDateOfInterestPayment\": 3999,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 2440589,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 27,\"nominalInterestRate\": 86399,\"feeAccrued\": 50,\"accruedInterest\": 31,\"rateMultiplier\": 10001,\"rateSpread\": 899,\"feeRate\": 400,\"nextResetRate\": 5,\"penaltyRate\": 2,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 2014223714,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 151,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 151,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 899,\"lifeFloor\": 4,\"periodCap\": 254,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"3,121,43,239,228,151,54,136,160,184,177,223,100,196,168,186,24,75,58,105,189,106,245,125,134,155,172,199,121,15,119,118\"),stringToBytes32(\"86,112,172,64,187,149,4,132,147,72,205,223,16,198,244,144,87,171,34,172,98,226,200,171,188,248,197,131,197,70,114,14\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,899,95,99,1532892063,160,63,86399,3999,13,2440589,365,27,86399,50,31,10001,899,400,5,2,86399,68568,Definitions.IPS(2014223714,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(151,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(81,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(151,Definitions.P.W,Definitions.S.LONG,true),899,4,254,161)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [181,7,190,212,246,60,51,47,72,3,60,154,100,158,117,110,99,81,150,186,6,190,251,90,228,243,149,60,241,195,192,156],\"legalEntityIdCounterparty\": [132,98,234,5,43,35,72,54,114,147,7,208,68,100,165,87,187,173,168,161,176,253,0,253,170,35,199,135,241,7,138,14],\"dayCountConvention\": 2,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2014223716,\"statusDate\": 146098,\"initialExchangeDate\": 61,\"maturityDate\": 899,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 79,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 0,\"feeAccrued\": 60,\"accruedInterest\": 2446,\"rateMultiplier\": 99,\"rateSpread\": 81,\"feeRate\": 1970,\"nextResetRate\": 1532892063,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 150,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 140,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892064,\"lifeFloor\": 50,\"periodCap\": 24,\"periodFloor\": 149}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"181,7,190,212,246,60,51,47,72,3,60,154,100,158,117,110,99,81,150,186,6,190,251,90,228,243,149,60,241,195,192,156\"),stringToBytes32(\"132,98,234,5,43,35,72,54,114,147,7,208,68,100,165,87,187,173,168,161,176,253,0,253,170,35,199,135,241,7,138,14\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2014223716,146098,61,899,0,0,0,1,2446,79,365,32076,0,60,2446,99,81,1970,1532892063,1338,2014223715,1460,Definitions.IPS(149,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(150,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(140,Definitions.P.D,Definitions.S.LONG,false),1532892064,50,24,149)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.279ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T19:51:54.302ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}