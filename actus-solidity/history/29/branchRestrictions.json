,{
  "2020-11-13T06:12:12.376ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.378ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.378ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.379ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.379ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.380ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.381ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.384ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.386ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.387ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.387ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.387ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.388ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.389ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.392ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.403ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.404ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.405ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.406ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.406ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.406ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.407ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.407ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.408ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.408ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.408ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.409ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.409ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.410ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.410ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.411ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.411ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.412ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.412ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 951,
                "sol": 951
              },
              {
                "js": "950",
                "sol": "950"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.413ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223716,
                "sol": 2014223716
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.414ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.414ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.415ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.416ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 360,
                "sol": 360
              },
              {
                "js": "359",
                "sol": "359"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.418ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.419ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.426ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.431ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": 9999,
                "sol": 9999
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": 128,
                "sol": 128
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1461000",
                "sol": "1461000"
              },
              {
                "js": 1460999,
                "sol": 1460999
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1970",
                "sol": "1970"
              },
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T06:12:12.436ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.437ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.437ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.438ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.440ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{\"i\": 10001,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(10001,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{\"i\": 18,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{\"i\": 359,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(359,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{\"i\": 254,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(254,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.442ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.443ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.444ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.448ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.451ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.455ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.456ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.460ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 129,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(129,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 61,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(61,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 2448,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2448,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 257,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 4,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1461000,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.465ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{\"i\": 41,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(41,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{\"i\": 364,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(364,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 11,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(11,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{\"i\": 146096,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(146096,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{\"i\": 1461,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 100,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(100,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{\"i\": 3999,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3999,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{\"i\": 18,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.475ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(901,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 4801,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4801,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 4900,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4900,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 86399,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(86399,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 401,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(401,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 32075,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32075,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 86400,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.477ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 2447,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 2448,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 41,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 19},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 2440588,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 1462,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1461001,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 361,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 4001,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 121,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 2440587,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1462,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 25,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 140,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 26,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 13},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 2448,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 399,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 51,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 1461002,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 99,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 360,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 256,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 2440589,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 0},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 119,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 401,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 65,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 70,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 10001,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1462,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 0,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 119,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 32074,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 29,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 257,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 26,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 10,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 139,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 32075,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 129,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 26,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 2447,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 4799,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 361,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 16},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 1460,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 120,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 1461000,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 14,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 1461002,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 161,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 949,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 28,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 10},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 899,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 159,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 1969,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 4799,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 4900,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 100,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 129,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 366,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 2,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 6,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 139,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 368,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 68569,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17}]",
              "sol": "[Definitions.ProtoEvent(97,27,2447,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(140,1462,2448,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(26,4801,41,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.STD),Definitions.ProtoEvent(86401,368,2440588,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(400,146096,1462,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(13,90,1461001,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(99,90,361,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(4001,129,4001,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(899,255,121,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(130,1461000,2440587,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(61,29,1462,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(359,131,25,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(28,360,140,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(61,51,26,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY),Definitions.ProtoEvent(3999,96,2448,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(1532892064,1337,399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(1969,1338,51,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(401,14,1461002,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(951,4799,99,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(4900,2440587,360,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(1338,1460,256,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(95,900,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(12,2440588,2440589,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SD),Definitions.ProtoEvent(13,256,119,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(146098,119,401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(13,86401,65,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(900,149,70,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(60,1971,10001,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(71,29,1462,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(0,89,0,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(51,4801,119,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(12,359,32074,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(3999,59,29,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(68570,79,257,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(364,27,26,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(59,2014223716,10,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(1,4901,139,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(68568,1461002,32075,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(49,40,129,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(366,151,26,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(61,120,2447,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(0,1337,4799,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(129,7,361,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.DV),Definitions.ProtoEvent(5,17,1460,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(23,257,120,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(91,86400,1461000,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(1971,367,14,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(4900,2,1461002,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(131,111,161,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(99,950,949,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(1462,1,28,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.TD),Definitions.ProtoEvent(21,25,899,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(1532892064,1338,159,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(140,160,1969,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(149,64,4799,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(66,68568,4900,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(2014223714,89,100,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(1461001,400,129,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(41,60,366,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(59,109,2,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(40,71,6,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(146097,26,139,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(32074,51,368,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(1460,49,68569,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR)]"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.492ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 96,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4000,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 141,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 1462,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 1969,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 131,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 41,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 71,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 15},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 399,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 25,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 950,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 31,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 86399,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 14,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 71,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 1969,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 4,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 13,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 368,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 29,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 86401,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 2440589,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 63,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 1532892063,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 2447,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 32074,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 2446,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 41,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 3,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 1,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 21,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 49,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 2440588,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 121,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 10},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 361,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 65,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 13},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 18,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 151,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 1532892063,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 0,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 1337,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 86401,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 255,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 4901,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 17,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 10,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 5,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 255,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 7,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 21,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 129,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 1969,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 86400,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 149,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 29,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 51,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 2440589,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 96,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 146098,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 360,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 1338,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 40,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 20}]",
              "sol": "[Definitions.ProtoEvent(900,367,96,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(400,4801,4000,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(256,61,141,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(39,24,1462,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(1461001,71,1969,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(70,13,131,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(2447,29,41,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(4799,1337,71,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.CD),Definitions.ProtoEvent(96,60,399,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(160,257,25,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(66,12,950,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(1461,366,31,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(119,2447,86399,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(65,901,14,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(111,1532892062,71,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(365,71,1969,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(150,86400,4,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(25,63,13,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(1532892062,28,368,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(2014223716,146098,29,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(257,80,86401,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(1,28,2440589,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(2,1338,63,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(1338,1461001,1532892063,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(1337,1970,2447,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(2014223714,2014223714,32074,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(12,1338,2446,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(4800,149,41,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2446,401,3,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(2440589,12,1,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(10,151,21,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(361,89,49,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(400,1336,2440588,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(31,26,121,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.TD),Definitions.ProtoEvent(364,149,361,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(4001,14,65,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RRY),Definitions.ProtoEvent(1461000,257,18,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(65,151,151,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(151,149,1532892063,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(2440589,66,0,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(7,400,1337,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(161,1,86401,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(365,366,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(368,359,255,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(161,4800,4901,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(141,96,17,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(17,64,10,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(48,100,5,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(2440589,25,255,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(68569,48,7,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(4801,160,21,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(68569,9999,129,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(159,364,1969,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(119,20,86400,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(9,95,149,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(950,2446,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(359,49,29,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(64,0,51,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(26,68570,2440589,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(4801,366,96,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(11,119,146098,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(129,12,360,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(401,26,1338,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(4799,4901,40,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child)]"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.512ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1461003",
              "sol": "1461003"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.514ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [184,20,156,134,47,30,197,212,45,31,144,242,200,68,226,200,98,126,125,39,252,167,29,110,9,146,45,65,102,217,108,135],\"legalEntityIdCounterparty\": [169,140,32,193,62,97,219,213,108,0,220,207,17,81,191,255,49,199,213,91,219,223,120,5,74,183,95,84,214,168,139,225],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2,\"statusDate\": 1532892064,\"initialExchangeDate\": 1,\"maturityDate\": 146096,\"terminationDate\": 9999,\"purchaseDate\": 159,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 399,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 1532892063,\"cycleAnchorDateOfFee\": 59,\"notionalPrincipal\": 4901,\"nominalInterestRate\": 1337,\"feeAccrued\": 161,\"accruedInterest\": 21,\"rateMultiplier\": 10001,\"rateSpread\": 141,\"feeRate\": 1969,\"nextResetRate\": 141,\"penaltyRate\": 361,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 1462,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4800,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 64,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 139,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 31,\"lifeFloor\": 1337,\"periodCap\": 32,\"periodFloor\": 99}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"184,20,156,134,47,30,197,212,45,31,144,242,200,68,226,200,98,126,125,39,252,167,29,110,9,146,45,65,102,217,108,135\"),stringToBytes32(\"169,140,32,193,62,97,219,213,108,0,220,207,17,81,191,255,49,199,213,91,219,223,120,5,74,183,95,84,214,168,139,225\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2,1532892064,1,146096,9999,159,24,399,27,1532892063,59,4901,1337,161,21,10001,141,1969,141,361,146097,1462,Definitions.IPS(4800,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4800,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(64,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(139,Definitions.P.Y,Definitions.S.SHORT,true),31,1337,32,99)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.516ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [188,86,85,176,5,67,246,156,107,181,8,235,183,45,119,204,50,206,85,104,6,65,102,107,191,197,101,149,179,9,136,176],\"legalEntityIdCounterparty\": [161,230,41,160,60,127,16,71,154,68,92,186,234,202,239,18,110,168,198,17,174,127,162,163,76,47,155,143,108,249,113,244],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 24,\"statusDate\": 146098,\"initialExchangeDate\": 16,\"maturityDate\": 10001,\"terminationDate\": 70,\"purchaseDate\": 109,\"capitalizationEndDate\": 4,\"cycleAnchorDateOfInterestPayment\": 51,\"cycleAnchorDateOfRateReset\": 66,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 69,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 900,\"feeAccrued\": 99,\"accruedInterest\": 1532892064,\"rateMultiplier\": 13,\"rateSpread\": 254,\"feeRate\": 161,\"nextResetRate\": 10,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 160,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 86401,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 10001,\"lifeFloor\": 79,\"periodCap\": 96,\"periodFloor\": 97}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"188,86,85,176,5,67,246,156,107,181,8,235,183,45,119,204,50,206,85,104,6,65,102,107,191,197,101,149,179,9,136,176\"),stringToBytes32(\"161,230,41,160,60,127,16,71,154,68,92,186,234,202,239,18,110,168,198,17,174,127,162,163,76,47,155,143,108,249,113,244\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,24,146098,16,10001,70,109,4,51,66,2448,69,1532892064,900,99,1532892064,13,254,161,10,100,160,21,Definitions.IPS(29,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1970,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(86401,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.M,Definitions.S.LONG,false),10001,79,96,97)"
            },
            {
              "js": "{\"lastEventTime\": 12,\"contractStatus\": 3,\"timeFromLastEvent\": 41,\"nominalValue\": 1532892064,\"nominalAccrued\": 11,\"feeAccrued\": 2448,\"nominalRate\": 68568,\"interestScalingMultiplier\": 32075,\"nominalScalingMultiplier\": 256,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(12,Definitions.ContractStatus.DF,41,1532892064,11,2448,68568,32075,256,Definitions.ContractRole.GUA)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.519ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [239,129,18,174,118,197,230,233,209,34,7,88,224,244,139,221,81,211,5,223,248,217,227,131,61,74,67,236,85,16,142,192],\"legalEntityIdCounterparty\": [247,3,114,243,211,183,46,248,137,99,61,80,5,131,140,179,70,88,79,9,35,194,104,255,172,78,125,248,193,177,29,6],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 48,\"statusDate\": 4799,\"initialExchangeDate\": 15,\"maturityDate\": 1970,\"terminationDate\": 49,\"purchaseDate\": 1462,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 19,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 4799,\"notionalPrincipal\": 254,\"nominalInterestRate\": 80,\"feeAccrued\": 9999,\"accruedInterest\": 23,\"rateMultiplier\": 4000,\"rateSpread\": 257,\"feeRate\": 129,\"nextResetRate\": 14,\"penaltyRate\": 95,\"premiumDiscountAtIED\": -1,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86400,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 141,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 1971,\"periodCap\": 1461002,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"239,129,18,174,118,197,230,233,209,34,7,88,224,244,139,221,81,211,5,223,248,217,227,131,61,74,67,236,85,16,142,192\"),stringToBytes32(\"247,3,114,243,211,183,46,248,137,99,61,80,5,131,140,179,70,88,79,9,35,194,104,255,172,78,125,248,193,177,29,6\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,48,4799,15,1970,49,1462,96,19,27,2448,4799,254,80,9999,23,4000,257,129,14,95,-1,89,Definitions.IPS(4799,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(141,Definitions.P.H,Definitions.S.SHORT,true),1461002,1971,1461002,160)"
            },
            {
              "js": "{\"lastEventTime\": 63,\"contractStatus\": 2,\"timeFromLastEvent\": 16,\"nominalValue\": 1970,\"nominalAccrued\": 6,\"feeAccrued\": 139,\"nominalRate\": 17,\"interestScalingMultiplier\": 2447,\"nominalScalingMultiplier\": 2014223715,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(63,Definitions.ContractStatus.DQ,16,1970,6,139,17,2447,2014223715,Definitions.ContractRole.RPL)"
            },
            {
              "js": "{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 96,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 8}",
              "sol": "Definitions.ProtoEvent(2447,51,96,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP)"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.526ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [166,4,132,62,239,180,152,59,46,216,197,91,138,91,228,72,102,13,8,100,29,76,52,224,237,176,240,95,142,181,227,241],\"legalEntityIdCounterparty\": [90,146,173,80,2,217,15,66,56,124,230,144,99,138,30,202,20,158,90,66,132,220,36,13,170,116,9,184,109,140,53,230],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2014223715,\"statusDate\": 257,\"initialExchangeDate\": 900,\"maturityDate\": 901,\"terminationDate\": 1461000,\"purchaseDate\": 39,\"capitalizationEndDate\": 4899,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 360,\"notionalPrincipal\": 18,\"nominalInterestRate\": 13,\"feeAccrued\": 16,\"accruedInterest\": 1,\"rateMultiplier\": 150,\"rateSpread\": 9999,\"feeRate\": 27,\"nextResetRate\": 949,\"penaltyRate\": 29,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 101,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 131,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 366,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 1971,\"lifeFloor\": 1336,\"periodCap\": 159,\"periodFloor\": 69}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"166,4,132,62,239,180,152,59,46,216,197,91,138,91,228,72,102,13,8,100,29,76,52,224,237,176,240,95,142,181,227,241\"),stringToBytes32(\"90,146,173,80,2,217,15,66,56,124,230,144,99,138,30,202,20,158,90,66,132,220,36,13,170,116,9,184,109,140,53,230\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2014223715,257,900,901,1461000,39,4899,86401,365,950,360,18,13,16,1,150,9999,27,949,29,131,12,Definitions.IPS(59,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(101,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(131,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(366,Definitions.P.D,Definitions.S.LONG,true),1971,1336,159,69)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [70,124,154,205,30,194,183,21,118,222,217,188,160,74,58,183,160,4,226,36,183,23,223,16,143,216,230,104,14,1,212,28],\"legalEntityIdCounterparty\": [120,244,106,31,223,231,214,73,77,46,77,76,165,19,194,161,247,38,215,203,85,214,112,7,191,77,28,91,8,178,35,62],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 99,\"statusDate\": 11,\"initialExchangeDate\": 360,\"maturityDate\": 140,\"terminationDate\": 65,\"purchaseDate\": 1532892064,\"capitalizationEndDate\": 80,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 86401,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 21,\"feeAccrued\": 9,\"accruedInterest\": 2440587,\"rateMultiplier\": 367,\"rateSpread\": 1461003,\"feeRate\": 71,\"nextResetRate\": 29,\"penaltyRate\": 1336,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 29,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 160,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146098,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1969,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 99,\"lifeFloor\": 32,\"periodCap\": 111,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"70,124,154,205,30,194,183,21,118,222,217,188,160,74,58,183,160,4,226,36,183,23,223,16,143,216,230,104,14,1,212,28\"),stringToBytes32(\"120,244,106,31,223,231,214,73,77,46,77,76,165,19,194,161,247,38,215,203,85,214,112,7,191,77,28,91,8,178,35,62\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,99,11,360,140,65,1532892064,80,130,1971,86401,86399,146096,21,9,2440587,367,1461003,71,29,1336,24,29,Definitions.IPS(146098,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(160,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(146098,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.Q,Definitions.S.SHORT,true),99,32,111,28)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [252,191,48,143,207,238,137,4,105,85,244,106,163,131,206,240,103,57,3,145,197,53,29,148,26,190,53,13,131,190,153,28],\"legalEntityIdCounterparty\": [82,150,243,146,182,138,14,73,30,218,94,154,214,175,207,158,75,80,217,205,124,41,185,132,164,171,153,179,250,70,134,111],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 39,\"statusDate\": 7,\"initialExchangeDate\": 8,\"maturityDate\": 159,\"terminationDate\": 4900,\"purchaseDate\": 31,\"capitalizationEndDate\": 23,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 149,\"nominalInterestRate\": 13,\"feeAccrued\": 80,\"accruedInterest\": 4,\"rateMultiplier\": 31,\"rateSpread\": 97,\"feeRate\": 91,\"nextResetRate\": 2014223714,\"penaltyRate\": 161,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 364,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 161,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 29,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 86401,\"lifeFloor\": 27,\"periodCap\": 1462,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"252,191,48,143,207,238,137,4,105,85,244,106,163,131,206,240,103,57,3,145,197,53,29,148,26,190,53,13,131,190,153,28\"),stringToBytes32(\"82,150,243,146,182,138,14,73,30,218,94,154,214,175,207,158,75,80,217,205,124,41,185,132,164,171,153,179,250,70,134,111\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,39,7,8,159,4900,31,23,146097,129,69,130,149,13,80,4,31,97,91,2014223714,161,12,3999,Definitions.IPS(130,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(364,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(161,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(29,Definitions.P.Q,Definitions.S.SHORT,true),86401,27,1462,64)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [72,170,73,23,170,224,241,140,102,215,14,240,51,202,44,34,169,167,51,244,218,100,7,123,115,222,90,215,227,62,151,204],\"legalEntityIdCounterparty\": [118,73,131,183,98,29,150,116,248,248,228,204,223,3,195,166,92,142,53,104,197,185,106,31,53,223,75,246,38,78,232,227],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 65,\"statusDate\": 60,\"initialExchangeDate\": 68570,\"maturityDate\": 1461001,\"terminationDate\": 129,\"purchaseDate\": 951,\"capitalizationEndDate\": 2440589,\"cycleAnchorDateOfInterestPayment\": 4801,\"cycleAnchorDateOfRateReset\": 32075,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 68570,\"notionalPrincipal\": 3,\"nominalInterestRate\": 949,\"feeAccrued\": 149,\"accruedInterest\": 86400,\"rateMultiplier\": 109,\"rateSpread\": 119,\"feeRate\": 59,\"nextResetRate\": 368,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 1969,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 5,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 90,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 15,\"lifeFloor\": 96,\"periodCap\": 32,\"periodFloor\": 1970}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"72,170,73,23,170,224,241,140,102,215,14,240,51,202,44,34,169,167,51,244,218,100,7,123,115,222,90,215,227,62,151,204\"),stringToBytes32(\"118,73,131,183,98,29,150,116,248,248,228,204,223,3,195,166,92,142,53,104,197,185,106,31,53,223,75,246,38,78,232,227\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,65,60,68570,1461001,129,951,2440589,4801,32075,159,68570,3,949,149,86400,109,119,59,368,129,1969,30,Definitions.IPS(900,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(5,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(90,Definitions.P.Q,Definitions.S.SHORT,true),15,96,32,1970)"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [198,212,203,92,111,84,135,214,47,246,41,201,53,68,7,133,6,24,123,159,236,121,128,49,79,229,49,104,233,194,64,10],\"legalEntityIdCounterparty\": [167,98,28,40,192,228,204,83,25,225,217,127,188,251,232,144,216,192,52,11,190,170,228,4,107,33,4,146,164,34,232,7],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2446,\"statusDate\": 2446,\"initialExchangeDate\": 50,\"maturityDate\": 141,\"terminationDate\": 1969,\"purchaseDate\": 0,\"capitalizationEndDate\": 365,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 368,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 401,\"notionalPrincipal\": 31,\"nominalInterestRate\": 900,\"feeAccrued\": 1336,\"accruedInterest\": 32076,\"rateMultiplier\": 150,\"rateSpread\": 91,\"feeRate\": 256,\"nextResetRate\": 146096,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 900,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 97,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 68570,\"periodCap\": 21,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"198,212,203,92,111,84,135,214,47,246,41,201,53,68,7,133,6,24,123,159,236,121,128,49,79,229,49,104,233,194,64,10\"),stringToBytes32(\"167,98,28,40,192,228,204,83,25,225,217,127,188,251,232,144,216,192,52,11,190,170,228,4,107,33,4,146,164,34,232,7\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2446,2446,50,141,1969,0,365,4900,368,146098,401,31,900,1336,32076,150,91,256,146096,0,2014223715,6,Definitions.IPS(48,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(900,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.H,Definitions.S.LONG,false),256,68570,21,10001)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [102,182,88,244,60,182,36,17,250,243,90,247,133,235,188,72,197,106,20,157,176,177,144,226,91,181,3,94,99,46,103,238],\"legalEntityIdCounterparty\": [3,204,91,55,106,145,108,118,227,236,27,246,120,59,255,30,150,9,69,13,114,223,190,58,9,43,115,237,191,2,241,42],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 900,\"statusDate\": 14,\"initialExchangeDate\": 951,\"maturityDate\": 1532892063,\"terminationDate\": 70,\"purchaseDate\": 146097,\"capitalizationEndDate\": 68570,\"cycleAnchorDateOfInterestPayment\": 1461003,\"cycleAnchorDateOfRateReset\": 24,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 12,\"notionalPrincipal\": 146098,\"nominalInterestRate\": 100,\"feeAccrued\": 2448,\"accruedInterest\": 48,\"rateMultiplier\": 59,\"rateSpread\": 15,\"feeRate\": 900,\"nextResetRate\": 3999,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 41,\"priceAtPurchaseDate\": 4000,\"cycleOfInterestPayment\": {\"i\": 12,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 12,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461003,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 361,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 1461000,\"lifeFloor\": 31,\"periodCap\": 1532892062,\"periodFloor\": 27}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"102,182,88,244,60,182,36,17,250,243,90,247,133,235,188,72,197,106,20,157,176,177,144,226,91,181,3,94,99,46,103,238\"),stringToBytes32(\"3,204,91,55,106,145,108,118,227,236,27,246,120,59,255,30,150,9,69,13,114,223,190,58,9,43,115,237,191,2,241,42\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,900,14,951,1532892063,70,146097,68570,1461003,24,23,12,146098,100,2448,48,59,15,900,3999,1,41,4000,Definitions.IPS(12,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461003,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(361,Definitions.P.M,Definitions.S.SHORT,false),1461000,31,1532892062,27)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [249,120,156,95,255,111,93,84,74,166,121,180,139,183,32,71,76,101,148,8,120,25,49,78,40,128,238,245,95,134,185,229],\"legalEntityIdCounterparty\": [210,152,167,239,135,47,90,138,204,75,192,0,76,130,86,86,113,76,90,3,47,115,96,76,65,139,99,110,47,77,163,255],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 11,\"statusDate\": 146098,\"initialExchangeDate\": 60,\"maturityDate\": 32074,\"terminationDate\": 360,\"purchaseDate\": 4000,\"capitalizationEndDate\": 1969,\"cycleAnchorDateOfInterestPayment\": 129,\"cycleAnchorDateOfRateReset\": 8,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 1969,\"feeAccrued\": 96,\"accruedInterest\": 2014223716,\"rateMultiplier\": 900,\"rateSpread\": 4,\"feeRate\": -1,\"nextResetRate\": 29,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 70,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 20,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 949,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892063,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 39,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 86399,\"lifeFloor\": 68569,\"periodCap\": 1460,\"periodFloor\": 32074}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"249,120,156,95,255,111,93,84,74,166,121,180,139,183,32,71,76,101,148,8,120,25,49,78,40,128,238,245,95,134,185,229\"),stringToBytes32(\"210,152,167,239,135,47,90,138,204,75,192,0,76,130,86,86,113,76,90,3,47,115,96,76,65,139,99,110,47,77,163,255\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,11,146098,60,32074,360,4000,1969,129,8,109,26,1461000,1969,96,2014223716,900,4,-1,29,68568,70,950,Definitions.IPS(20,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(39,Definitions.P.Y,Definitions.S.SHORT,false),86399,68569,1460,32074)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [242,34,76,128,127,237,78,160,21,45,87,241,219,97,37,45,240,210,29,17,85,245,12,107,155,84,96,207,170,243,128,121],\"legalEntityIdCounterparty\": [159,192,59,86,161,161,3,125,102,40,252,192,238,96,148,136,125,14,165,121,181,139,1,76,157,253,170,76,95,245,217,1],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 101,\"statusDate\": 1461002,\"initialExchangeDate\": 24,\"maturityDate\": 2448,\"terminationDate\": 79,\"purchaseDate\": 101,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 256,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 17,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 130,\"feeAccrued\": 29,\"accruedInterest\": 3999,\"rateMultiplier\": 17,\"rateSpread\": 951,\"feeRate\": 86399,\"nextResetRate\": 86399,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 81,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 11,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 18,\"lifeFloor\": 15,\"periodCap\": 86401,\"periodFloor\": 99}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"242,34,76,128,127,237,78,160,21,45,87,241,219,97,37,45,240,210,29,17,85,245,12,107,155,84,96,207,170,243,128,121\"),stringToBytes32(\"159,192,59,86,161,161,3,125,102,40,252,192,238,96,148,136,125,14,165,121,181,139,1,76,157,253,170,76,95,245,217,1\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,101,1461002,24,2448,79,101,0,17,256,1970,17,1969,130,29,3999,17,951,86399,86399,1338,81,139,Definitions.IPS(97,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4900,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(11,Definitions.P.W,Definitions.S.LONG,true),18,15,86401,99)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [171,80,43,6,102,125,123,110,115,169,91,22,76,52,128,250,157,59,79,76,17,196,0,76,197,201,155,63,236,225,119,177],\"legalEntityIdCounterparty\": [246,199,44,54,231,11,129,88,166,158,144,92,170,234,185,141,236,164,211,53,56,153,60,102,117,69,156,208,158,96,79,1],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 16,\"statusDate\": 4001,\"initialExchangeDate\": 11,\"maturityDate\": 29,\"terminationDate\": 66,\"purchaseDate\": 86401,\"capitalizationEndDate\": 2440588,\"cycleAnchorDateOfInterestPayment\": 3,\"cycleAnchorDateOfRateReset\": 66,\"cycleAnchorDateOfScalingIndex\": 97,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 359,\"nominalInterestRate\": 1969,\"feeAccrued\": 146098,\"accruedInterest\": 5,\"rateMultiplier\": 26,\"rateSpread\": 12,\"feeRate\": 367,\"nextResetRate\": 99,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 21,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 51,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1970,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 99,\"lifeFloor\": 129,\"periodCap\": 63,\"periodFloor\": 1532892062}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"171,80,43,6,102,125,123,110,115,169,91,22,76,52,128,250,157,59,79,76,17,196,0,76,197,201,155,63,236,225,119,177\"),stringToBytes32(\"246,199,44,54,231,11,129,88,166,158,144,92,170,234,185,141,236,164,211,53,56,153,60,102,117,69,156,208,158,96,79,1\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,16,4001,11,29,66,86401,2440588,3,66,97,2447,359,1969,146098,5,26,12,367,99,1461000,2014223715,59,Definitions.IPS(364,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(21,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(51,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1970,Definitions.P.Q,Definitions.S.LONG,false),99,129,63,1532892062)"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [78,60,244,126,174,201,88,25,188,177,84,121,158,27,88,34,33,237,11,156,208,204,241,82,145,211,235,33,199,115,76,65],\"legalEntityIdCounterparty\": [178,65,101,64,119,92,251,164,48,181,200,149,216,150,52,24,252,133,186,79,244,210,45,190,239,78,70,102,222,22,109,104],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 951,\"statusDate\": 4901,\"initialExchangeDate\": 28,\"maturityDate\": 130,\"terminationDate\": 109,\"purchaseDate\": 29,\"capitalizationEndDate\": 901,\"cycleAnchorDateOfInterestPayment\": 99,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 6,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 5,\"nominalInterestRate\": 63,\"feeAccrued\": 111,\"accruedInterest\": 161,\"rateMultiplier\": 2014223715,\"rateSpread\": 7,\"feeRate\": 146098,\"nextResetRate\": 4801,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 949,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 10,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 368,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 86401,\"lifeFloor\": 49,\"periodCap\": 66,\"periodFloor\": -1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"78,60,244,126,174,201,88,25,188,177,84,121,158,27,88,34,33,237,11,156,208,204,241,82,145,211,235,33,199,115,76,65\"),stringToBytes32(\"178,65,101,64,119,92,251,164,48,181,200,149,216,150,52,24,252,133,186,79,244,210,45,190,239,78,70,102,222,22,109,104\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,951,4901,28,130,109,29,901,99,367,6,139,5,63,111,161,2014223715,7,146098,4801,40,949,97,Definitions.IPS(10,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(81,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(368,Definitions.P.W,Definitions.S.SHORT,false),86401,49,66,-1)"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [96,74,1,181,112,137,47,21,29,223,147,29,24,219,183,152,9,211,175,75,119,15,137,161,157,0,100,16,160,114,185,235],\"legalEntityIdCounterparty\": [9,96,251,80,61,42,127,176,11,31,246,115,134,152,35,65,127,235,75,182,116,120,75,83,49,237,44,10,86,120,19,145],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 39,\"statusDate\": 365,\"initialExchangeDate\": 2014223716,\"maturityDate\": 109,\"terminationDate\": 111,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 86400,\"notionalPrincipal\": 64,\"nominalInterestRate\": 0,\"feeAccrued\": 2447,\"accruedInterest\": 59,\"rateMultiplier\": 14,\"rateSpread\": 1461000,\"feeRate\": 1532892064,\"nextResetRate\": 66,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 24,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 16,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 255,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 12,\"lifeFloor\": 60,\"periodCap\": 141,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"96,74,1,181,112,137,47,21,29,223,147,29,24,219,183,152,9,211,175,75,119,15,137,161,157,0,100,16,160,114,185,235\"),stringToBytes32(\"9,96,251,80,61,42,127,176,11,31,246,115,134,152,35,65,127,235,75,182,116,120,75,83,49,237,44,10,86,120,19,145\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,39,365,2014223716,109,111,0,0,16,9999,949,86400,64,0,2447,59,14,1461000,1532892064,66,1969,29,24,Definitions.IPS(4000,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.Q,Definitions.S.SHORT,true),12,60,141,60)"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [68,93,207,185,10,193,242,42,7,129,179,124,197,7,161,96,42,106,41,158,237,62,239,8,22,79,35,164,187,182,133,90],\"legalEntityIdCounterparty\": [235,172,41,39,234,164,7,131,153,216,103,114,139,47,75,126,127,186,167,91,214,209,44,129,12,56,188,183,91,203,97,155],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 40,\"statusDate\": 39,\"initialExchangeDate\": 95,\"maturityDate\": 10,\"terminationDate\": 68569,\"purchaseDate\": 950,\"capitalizationEndDate\": 949,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 69,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 129,\"nominalInterestRate\": 65,\"feeAccrued\": 91,\"accruedInterest\": 1461001,\"rateMultiplier\": 86400,\"rateSpread\": 4000,\"feeRate\": 96,\"nextResetRate\": 80,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 4000,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 15,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 150,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 17,\"lifeFloor\": 141,\"periodCap\": 9999,\"periodFloor\": 11}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"68,93,207,185,10,193,242,42,7,129,179,124,197,7,161,96,42,106,41,158,237,62,239,8,22,79,35,164,187,182,133,90\"),stringToBytes32(\"235,172,41,39,234,164,7,131,153,216,103,114,139,47,75,126,127,186,167,91,214,209,44,129,12,56,188,183,91,203,97,155\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,40,39,95,10,68569,950,949,109,1971,69,61,129,65,91,1461001,86400,4000,96,80,109,4000,120,Definitions.IPS(15,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(150,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.Q,Definitions.S.SHORT,true),17,141,9999,11)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [35,227,168,78,97,228,47,144,229,248,113,76,160,242,237,233,108,127,238,64,235,160,181,138,248,115,164,204,65,44,11,175],\"legalEntityIdCounterparty\": [127,123,153,64,227,156,230,177,204,72,166,141,37,54,77,125,196,61,46,19,124,26,239,41,185,117,201,62,124,87,40,205],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 66,\"statusDate\": 51,\"initialExchangeDate\": 101,\"maturityDate\": 146098,\"terminationDate\": 32074,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 2014223715,\"nominalInterestRate\": 0,\"feeAccrued\": 1461,\"accruedInterest\": 2448,\"rateMultiplier\": 89,\"rateSpread\": 109,\"feeRate\": 48,\"nextResetRate\": 368,\"penaltyRate\": 29,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 7,\"cycleOfInterestPayment\": {\"i\": 28,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 11,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 51,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 97,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 146097,\"lifeFloor\": 1532892063,\"periodCap\": 150,\"periodFloor\": 360}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"35,227,168,78,97,228,47,144,229,248,113,76,160,242,237,233,108,127,238,64,235,160,181,138,248,115,164,204,65,44,11,175\"),stringToBytes32(\"127,123,153,64,227,156,230,177,204,72,166,141,37,54,77,125,196,61,46,19,124,26,239,41,185,117,201,62,124,87,40,205\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,66,51,101,146098,32074,0,0,4001,0,17,61,2014223715,0,1461,2448,89,109,48,368,29,1,7,Definitions.IPS(28,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(11,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(51,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(97,Definitions.P.Q,Definitions.S.SHORT,false),146097,1532892063,150,360)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [97,191,193,6,137,175,28,112,177,10,153,186,168,24,151,149,28,79,196,122,169,86,142,129,148,178,79,58,241,202,100,171],\"legalEntityIdCounterparty\": [248,197,93,163,112,67,238,253,76,254,115,23,51,5,96,5,175,182,57,78,217,210,204,109,220,165,151,142,178,49,106,233],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4800,\"statusDate\": 3999,\"initialExchangeDate\": 1462,\"maturityDate\": 80,\"terminationDate\": 1,\"purchaseDate\": 1336,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 29,\"notionalPrincipal\": 61,\"nominalInterestRate\": 401,\"feeAccrued\": 1461,\"accruedInterest\": 51,\"rateMultiplier\": 95,\"rateSpread\": 39,\"feeRate\": 4001,\"nextResetRate\": 150,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 89,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 59,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 66,\"lifeFloor\": 1970,\"periodCap\": 361,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"97,191,193,6,137,175,28,112,177,10,153,186,168,24,151,149,28,79,196,122,169,86,142,129,148,178,79,58,241,202,100,171\"),stringToBytes32(\"248,197,93,163,112,67,238,253,76,254,115,23,51,5,96,5,175,182,57,78,217,210,204,109,220,165,151,142,178,49,106,233\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4800,3999,1462,80,1,1336,950,109,131,4,29,61,401,1461,51,95,39,4001,150,119,2440589,129,Definitions.IPS(89,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4799,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(79,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(59,Definitions.P.W,Definitions.S.LONG,false),66,1970,361,4801)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [76,36,41,230,35,231,46,111,209,162,3,203,171,112,224,192,131,118,17,162,59,78,210,16,133,106,106,127,150,190,217,43],\"legalEntityIdCounterparty\": [75,240,107,220,254,87,102,36,215,136,245,110,98,103,232,220,83,66,125,178,62,66,125,125,47,30,27,188,87,254,195,243],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1969,\"statusDate\": 146098,\"initialExchangeDate\": 4900,\"maturityDate\": 1460,\"terminationDate\": 32074,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1971,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 4001,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 359,\"nominalInterestRate\": 0,\"feeAccrued\": 79,\"accruedInterest\": 949,\"rateMultiplier\": 4801,\"rateSpread\": 10,\"feeRate\": 86401,\"nextResetRate\": 1461001,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 11,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4001,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223714,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 64,\"lifeFloor\": 949,\"periodCap\": 949,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"76,36,41,230,35,231,46,111,209,162,3,203,171,112,224,192,131,118,17,162,59,78,210,16,133,106,106,127,150,190,217,43\"),stringToBytes32(\"75,240,107,220,254,87,102,36,215,136,245,110,98,103,232,220,83,66,125,178,62,66,125,125,47,30,27,188,87,254,195,243\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1969,146098,4900,1460,32074,0,0,1971,28,4001,0,359,0,79,949,4801,10,86401,1461001,99,11,15,Definitions.IPS(1,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(60,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2014223714,Definitions.P.D,Definitions.S.SHORT,true),64,949,949,2)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [230,149,63,168,79,216,45,65,26,45,200,201,42,184,198,147,157,121,10,17,3,222,244,173,125,117,138,248,85,242,39,3],\"legalEntityIdCounterparty\": [156,38,18,142,249,46,64,127,116,52,2,102,205,228,19,203,167,2,180,178,150,178,209,133,193,220,9,35,61,7,223,94],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 65,\"statusDate\": 71,\"initialExchangeDate\": 400,\"maturityDate\": 109,\"terminationDate\": 4900,\"purchaseDate\": 5,\"capitalizationEndDate\": 2446,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 1,\"cycleAnchorDateOfScalingIndex\": 41,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 899,\"nominalInterestRate\": 1532892064,\"feeAccrued\": 86399,\"accruedInterest\": 2014223714,\"rateMultiplier\": 4799,\"rateSpread\": 1461,\"feeRate\": 1971,\"nextResetRate\": 19,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 25,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 15,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 951,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 10000,\"lifeFloor\": 29,\"periodCap\": 1971,\"periodFloor\": 48}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"230,149,63,168,79,216,45,65,26,45,200,201,42,184,198,147,157,121,10,17,3,222,244,173,125,117,138,248,85,242,39,3\"),stringToBytes32(\"156,38,18,142,249,46,64,127,116,52,2,102,205,228,19,203,167,2,180,178,150,178,209,133,193,220,9,35,61,7,223,94\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,65,71,400,109,4900,5,2446,1337,1,41,120,899,1532892064,86399,2014223714,4799,1461,1971,19,14,255,30,Definitions.IPS(100,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(25,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(15,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(951,Definitions.P.D,Definitions.S.SHORT,false),10000,29,1971,48)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [237,128,77,131,13,145,149,87,201,109,227,8,78,8,149,239,237,200,245,66,49,158,31,89,31,26,134,235,117,240,201,135],\"legalEntityIdCounterparty\": [127,83,160,157,226,237,36,227,182,28,18,174,178,213,228,34,221,169,63,35,221,42,234,127,89,13,252,253,236,244,7,168],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 3999,\"statusDate\": 367,\"initialExchangeDate\": 4799,\"maturityDate\": 4,\"terminationDate\": 359,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 32074,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 951,\"nominalInterestRate\": 0,\"feeAccrued\": 32,\"accruedInterest\": 129,\"rateMultiplier\": 32075,\"rateSpread\": 4801,\"feeRate\": 141,\"nextResetRate\": 71,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 4900,\"priceAtPurchaseDate\": 65,\"cycleOfInterestPayment\": {\"i\": 366,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 110,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 81,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2448,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 68569,\"lifeFloor\": 6,\"periodCap\": 68568,\"periodFloor\": 41}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"237,128,77,131,13,145,149,87,201,109,227,8,78,8,149,239,237,200,245,66,49,158,31,89,31,26,134,235,117,240,201,135\"),stringToBytes32(\"127,83,160,157,226,237,36,227,182,28,18,174,178,213,228,34,221,169,63,35,221,42,234,127,89,13,252,253,236,244,7,168\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,3999,367,4799,4,359,0,0,32074,141,0,65,951,0,32,129,32075,4801,141,71,12,4900,65,Definitions.IPS(366,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(110,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(81,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(2448,Definitions.P.Q,Definitions.S.SHORT,true),68569,6,68568,41)"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [130,48,13,29,7,23,9,82,99,78,144,34,121,62,80,109,202,248,166,203,65,183,218,108,226,77,196,161,255,65,232,254],\"legalEntityIdCounterparty\": [196,117,86,243,71,135,171,213,32,5,73,200,48,250,3,65,87,85,211,144,66,135,126,128,166,183,189,8,126,196,40,77],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4799,\"statusDate\": 4001,\"initialExchangeDate\": 81,\"maturityDate\": 4900,\"terminationDate\": 2446,\"purchaseDate\": 1460,\"capitalizationEndDate\": 3,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 256,\"cycleAnchorDateOfScalingIndex\": 4801,\"cycleAnchorDateOfFee\": 19,\"notionalPrincipal\": 14,\"nominalInterestRate\": 146096,\"feeAccrued\": 361,\"accruedInterest\": 10,\"rateMultiplier\": 39,\"rateSpread\": 66,\"feeRate\": 16,\"nextResetRate\": 80,\"penaltyRate\": 63,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 4899,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4900,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 51,\"lifeFloor\": 31,\"periodCap\": 256,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"130,48,13,29,7,23,9,82,99,78,144,34,121,62,80,109,202,248,166,203,65,183,218,108,226,77,196,161,255,65,232,254\"),stringToBytes32(\"196,117,86,243,71,135,171,213,32,5,73,200,48,250,3,65,87,85,211,144,66,135,126,128,166,183,189,8,126,196,40,77\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4799,4001,81,4900,2446,1460,3,4001,256,4801,19,14,146096,361,10,39,66,16,80,63,10001,899,Definitions.IPS(4899,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(3999,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4900,Definitions.P.Q,Definitions.S.LONG,false),51,31,256,8)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [133,253,176,122,38,208,131,172,188,227,119,176,159,233,142,37,102,0,34,173,202,215,189,56,164,53,71,145,125,44,182,76],\"legalEntityIdCounterparty\": [186,185,35,219,12,251,136,142,80,138,86,59,207,33,84,250,159,65,99,82,152,64,148,5,20,12,68,109,29,228,13,30],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 23,\"statusDate\": 950,\"initialExchangeDate\": 131,\"maturityDate\": 255,\"terminationDate\": 1337,\"purchaseDate\": 2440587,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 91,\"nominalInterestRate\": 121,\"feeAccrued\": 1462,\"accruedInterest\": 1461003,\"rateMultiplier\": 32,\"rateSpread\": 1969,\"feeRate\": 1969,\"nextResetRate\": 48,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 160,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 6,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 8,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 161,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": 2014223715,\"periodCap\": 20,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"133,253,176,122,38,208,131,172,188,227,119,176,159,233,142,37,102,0,34,173,202,215,189,56,164,53,71,145,125,44,182,76\"),stringToBytes32(\"186,185,35,219,12,251,136,142,80,138,86,59,207,33,84,250,159,65,99,82,152,64,148,5,20,12,68,109,29,228,13,30\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,23,950,131,255,1337,2440587,68569,2440588,146097,1,8,91,121,1462,1461003,32,1969,1969,48,146096,160,21,Definitions.IPS(6,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(8,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(65,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(161,Definitions.P.M,Definitions.S.LONG,true),2446,2014223715,20,160)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [45,28,76,139,114,21,229,96,20,246,85,29,208,91,71,46,227,105,13,60,152,87,50,26,151,79,240,91,196,158,233,200],\"legalEntityIdCounterparty\": [2,167,128,73,124,117,60,209,183,90,246,107,67,70,7,135,179,113,54,190,9,254,9,184,83,150,240,142,31,157,100,240],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 149,\"initialExchangeDate\": 399,\"maturityDate\": 4900,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 900,\"cycleAnchorDateOfRateReset\": 366,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 10001,\"nominalInterestRate\": 0,\"feeAccrued\": 49,\"accruedInterest\": 150,\"rateMultiplier\": 81,\"rateSpread\": 1462,\"feeRate\": 80,\"nextResetRate\": 1462,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 28,\"priceAtPurchaseDate\": 69,\"cycleOfInterestPayment\": {\"i\": 101,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 364,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 3999,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 109,\"lifeFloor\": 12,\"periodCap\": 1338,\"periodFloor\": 149}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"45,28,76,139,114,21,229,96,20,246,85,29,208,91,71,46,227,105,13,60,152,87,50,26,151,79,240,91,196,158,233,200\"),stringToBytes32(\"2,167,128,73,124,117,60,209,183,90,246,107,67,70,7,135,179,113,54,190,9,254,9,184,83,150,240,142,31,157,100,240\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,32,149,399,4900,0,0,0,900,366,8,1462,10001,0,49,150,81,1462,80,1462,109,28,69,Definitions.IPS(101,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(364,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32074,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(3999,Definitions.P.Q,Definitions.S.LONG,true),109,12,1338,149)"
            },
            {
              "js": "1461003",
              "sol": "1461003"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [40,100,218,199,134,93,62,146,105,72,75,166,161,223,29,196,166,94,98,192,24,208,127,192,208,163,109,8,93,0,43,239],\"legalEntityIdCounterparty\": [231,146,2,140,219,194,245,162,23,237,51,115,251,152,175,149,17,197,179,169,61,36,166,154,145,254,70,30,252,5,181,162],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 256,\"statusDate\": 2440587,\"initialExchangeDate\": 11,\"maturityDate\": 1532892062,\"terminationDate\": 12,\"purchaseDate\": 365,\"capitalizationEndDate\": 2440588,\"cycleAnchorDateOfInterestPayment\": 366,\"cycleAnchorDateOfRateReset\": 4799,\"cycleAnchorDateOfScalingIndex\": 41,\"cycleAnchorDateOfFee\": 2014223715,\"notionalPrincipal\": 28,\"nominalInterestRate\": 4900,\"feeAccrued\": -1,\"accruedInterest\": 70,\"rateMultiplier\": 26,\"rateSpread\": 12,\"feeRate\": 1532892062,\"nextResetRate\": 4000,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 951,\"priceAtPurchaseDate\": 1461000,\"cycleOfInterestPayment\": {\"i\": 121,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 950,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 13,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 2448,\"lifeFloor\": 400,\"periodCap\": 15,\"periodFloor\": 119}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"40,100,218,199,134,93,62,146,105,72,75,166,161,223,29,196,166,94,98,192,24,208,127,192,208,163,109,8,93,0,43,239\"),stringToBytes32(\"231,146,2,140,219,194,245,162,23,237,51,115,251,152,175,149,17,197,179,169,61,36,166,154,145,254,70,30,252,5,181,162\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,256,2440587,11,1532892062,12,365,2440588,366,4799,41,2014223715,28,4900,-1,70,26,12,1532892062,4000,1532892064,951,1461000,Definitions.IPS(121,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(950,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(13,Definitions.P.H,Definitions.S.SHORT,true),2448,400,15,119)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [55,125,9,77,33,234,228,75,11,48,244,4,179,141,58,214,9,52,109,56,44,251,59,112,185,137,82,148,88,183,1,184],\"legalEntityIdCounterparty\": [112,45,4,150,144,119,19,154,150,245,13,145,146,107,215,255,233,196,15,75,122,168,102,126,170,37,80,154,196,11,105,180],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 79,\"statusDate\": 4001,\"initialExchangeDate\": 18,\"maturityDate\": 23,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 3999,\"cycleAnchorDateOfRateReset\": 9,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": -1,\"nominalInterestRate\": 0,\"feeAccrued\": 129,\"accruedInterest\": 4799,\"rateMultiplier\": 150,\"rateSpread\": 129,\"feeRate\": 1969,\"nextResetRate\": 151,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 27,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 111,\"lifeFloor\": 60,\"periodCap\": 950,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"55,125,9,77,33,234,228,75,11,48,244,4,179,141,58,214,9,52,109,56,44,251,59,112,185,137,82,148,88,183,1,184\"),stringToBytes32(\"112,45,4,150,144,119,19,154,150,245,13,145,146,107,215,255,233,196,15,75,122,168,102,126,170,37,80,154,196,11,105,180\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,79,4001,18,23,0,0,0,3999,9,1461002,110,-1,0,129,4799,150,129,1969,151,12,365,66,Definitions.IPS(254,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(80,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.D,Definitions.S.SHORT,false),111,60,950,254)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.585ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T06:12:12.606ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}