,{
  "2020-11-11T02:48:49.167ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "4900",
                "sol": "4900"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.169ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.170ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.170ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.171ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.172ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.172ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.175ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.184ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.185ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.185ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.185ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.186ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.187ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.192ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.193ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.193ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.193ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.193ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.194ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.194ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.194ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.195ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.195ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.196ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.196ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.196ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.197ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.197ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.198ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.198ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.198ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.199ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.200ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.201ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 32075,
                "sol": 32075
              },
              {
                "js": "32074",
                "sol": "32074"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.202ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 902,
                "sol": 902
              },
              {
                "js": "901",
                "sol": "901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.202ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.203ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.203ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 71,
                "sol": 71
              },
              {
                "js": "70",
                "sol": "70"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.206ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.208ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "146098",
                "sol": "146098"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.210ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.213ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "141",
                "sol": "141"
              },
              {
                "js": 140,
                "sol": 140
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "130",
                "sol": "130"
              },
              {
                "js": 129,
                "sol": 129
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "141",
                "sol": "141"
              },
              {
                "js": 140,
                "sol": 140
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": 159,
                "sol": 159
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "7",
                "sol": "7"
              },
              {
                "js": 6,
                "sol": 6
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:48:49.218ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.219ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.219ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.220ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.223ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{\"i\": 31,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(31,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{\"i\": 949,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(949,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{\"i\": 16,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(16,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{\"i\": 159,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(159,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.226ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.226ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.227ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.231ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.234ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.238ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.238ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.243ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 86401,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(86401,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(39,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(6,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 2,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 95,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(95,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.248ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 32075,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32075,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{\"i\": 20,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(20,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{\"i\": 25,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(25,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{\"i\": 4901,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4901,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 59,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(59,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 19,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(19,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{\"i\": 900,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(900,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{\"i\": 950,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(950,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{\"i\": 32074,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32074,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.259ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(68570,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 950,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(950,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 3,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(3,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 41,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.261ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 901,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 90,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 146097,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 120,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 2448,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 10001,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 6},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 120,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 901,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 19,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 7},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 49,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 1336,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 400,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 360,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 32074,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 2446,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 1461000,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 7,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 111,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 101,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 25,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 12,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 161,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 32,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 159,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 256,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 2448,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 146097,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 161,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 50,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 4,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 90,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 109,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 91,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 2440589,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 951,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 101,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 68570,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 368,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 3999,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 16,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 121,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 366,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 2014223715,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 4901,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 96,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 32,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 366,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 1532892062,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1461,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 257,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 149,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 129,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 951,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 20,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 71,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 4900,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 364,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 1532892064,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 366,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 4801,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 13},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 399,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 11},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 96,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 150,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 19}]",
              "sol": "[Definitions.ProtoEvent(89,1532892062,901,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(131,2446,90,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(2440589,3999,146097,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(2440587,4799,120,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(1461000,119,2448,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(160,367,10001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PP),Definitions.ProtoEvent(2447,100,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(2014223714,257,120,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(10001,360,901,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(86399,131,19,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PY),Definitions.ProtoEvent(1,50,49,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(255,6,1336,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(41,4900,400,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(90,50,360,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(1532892062,130,32074,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(161,901,2446,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(61,89,1461000,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(1336,146096,7,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(97,368,111,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(119,86400,101,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(4000,146096,25,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(255,68570,12,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(50,2440587,161,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(68570,361,32,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(2014223714,68570,159,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(90,120,256,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(2014223716,65,2448,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(1,1969,146097,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(141,368,161,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(68570,149,50,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(9999,32074,4,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(100,361,90,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(49,26,109,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(7,48,91,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(97,32075,2440589,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(14,146098,951,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(60,131,101,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(86399,30,68570,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(68570,4900,368,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(949,32,3999,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(4801,96,16,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(32,951,121,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(11,86399,366,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(100,1461000,2014223715,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(359,4001,4901,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(130,0,96,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(255,15,32,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(255,4799,366,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(149,26,1532892062,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(15,951,1461,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(161,901,257,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(79,359,149,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(1,1532892064,129,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(146096,60,951,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(3999,159,20,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(360,28,71,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(79,365,4900,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(4,4899,364,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(159,81,1532892064,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(23,4,366,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(161,96,4801,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RRY),Definitions.ProtoEvent(65,1461002,399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4001,1970,96,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(91,1462,150,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD)]"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.276ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 146098,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 949,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 4001,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 60,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 48,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 367,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 139,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 90,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 26,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 2448,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 4901,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 7,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 4801,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 359,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 1532892063,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 2440588,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 368,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 1532892062,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 61,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 16},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 59,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 63,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 1461002,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 12,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 2440588,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 65,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 361,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 25,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 2014223715,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1969,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 9},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 17,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 400,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 1,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 12,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 12,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 49,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 79,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 24,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 360,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 91,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 63,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 366,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 14,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 3999,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 86401,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 255,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 1461000,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 49,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 32076,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 400,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 368,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 2446,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 79,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 4799,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 1970,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 0},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 65,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 366,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 400,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 1461002,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 1338,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 10},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 5,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 100,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 96,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 1338,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(9999,41,146098,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(40,32074,949,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(366,4001,4001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(139,366,60,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(32076,79,48,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(65,79,367,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(1,95,139,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(1461000,140,90,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(1461002,17,26,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(1,70,2448,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(97,2014223714,4901,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(65,96,7,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1532892064,366,4801,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(86399,1337,359,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(110,257,1532892063,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(81,51,2440588,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(368,901,368,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(60,32075,1532892062,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(60,399,61,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.DV),Definitions.ProtoEvent(99,149,59,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(32,15,63,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(100,86399,1461002,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(28,256,12,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(4000,89,2440588,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(364,2440587,65,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(15,4001,361,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(25,950,25,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(4799,69,2014223715,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(951,0,1969,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PRD),Definitions.ProtoEvent(29,20,17,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(7,366,400,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(119,1461000,1,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(51,49,12,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(18,149,12,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(50,2,49,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(151,399,79,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(4800,63,24,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(254,4,360,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(140,1461002,91,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(146096,359,63,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(367,4799,366,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(28,360,14,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(25,130,3999,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,899,86401,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(141,1462,255,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(10001,1337,1461000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(149,1532892064,49,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(2448,68569,32076,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(5,0,400,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(146096,130,368,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(1460,59,2446,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(2448,1336,79,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(110,150,4799,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(1,257,1970,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SD),Definitions.ProtoEvent(2440587,899,65,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(70,60,366,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(50,96,400,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(101,40,1461002,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(60,367,1338,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.TD),Definitions.ProtoEvent(26,2,5,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(401,51,1,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(3,63,100,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(146098,110,96,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(4899,1461000,1338,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD)]"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.293ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.294ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [244,104,160,210,178,28,155,248,48,12,1,141,135,127,0,95,202,245,117,30,194,183,247,107,101,118,115,140,254,164,72,116],\"legalEntityIdCounterparty\": [230,177,79,170,106,50,185,146,85,123,191,192,165,196,148,234,163,51,135,195,212,167,204,111,143,52,99,206,96,254,25,107],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 63,\"statusDate\": 366,\"initialExchangeDate\": 2446,\"maturityDate\": 139,\"terminationDate\": 1338,\"purchaseDate\": 50,\"capitalizationEndDate\": 109,\"cycleAnchorDateOfInterestPayment\": 26,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 99,\"notionalPrincipal\": 4001,\"nominalInterestRate\": 49,\"feeAccrued\": 120,\"accruedInterest\": 4900,\"rateMultiplier\": 8,\"rateSpread\": 80,\"feeRate\": 29,\"nextResetRate\": 141,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 1460,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 48,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2014223714,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 59,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 1461000,\"lifeFloor\": 4799,\"periodCap\": 29,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"244,104,160,210,178,28,155,248,48,12,1,141,135,127,0,95,202,245,117,30,194,183,247,107,101,118,115,140,254,164,72,116\"),stringToBytes32(\"230,177,79,170,106,50,185,146,85,123,191,192,165,196,148,234,163,51,135,195,212,167,204,111,143,52,99,206,96,254,25,107\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,63,366,2446,139,1338,50,109,26,1461001,146098,99,4001,49,120,4900,8,80,29,141,129,400,101,Definitions.IPS(1460,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223714,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(59,Definitions.P.M,Definitions.S.LONG,false),1461000,4799,29,1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.297ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [100,143,175,236,81,146,104,207,146,94,88,245,115,129,226,110,133,174,67,151,127,166,167,11,46,152,180,189,44,163,73,8],\"legalEntityIdCounterparty\": [221,31,222,45,234,250,177,136,176,223,43,113,18,55,173,120,180,90,26,71,185,72,250,141,58,154,174,15,233,134,72,75],\"dayCountConvention\": 2,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 254,\"statusDate\": 364,\"initialExchangeDate\": 71,\"maturityDate\": 151,\"terminationDate\": 4800,\"purchaseDate\": 17,\"capitalizationEndDate\": 121,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 139,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 130,\"nominalInterestRate\": 1461,\"feeAccrued\": 4800,\"accruedInterest\": 25,\"rateMultiplier\": 97,\"rateSpread\": 139,\"feeRate\": 7,\"nextResetRate\": 1532892064,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 161,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 79,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 1461000,\"lifeFloor\": 1461000,\"periodCap\": 2014223716,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"100,143,175,236,81,146,104,207,146,94,88,245,115,129,226,110,133,174,67,151,127,166,167,11,46,152,180,189,44,163,73,8\"),stringToBytes32(\"221,31,222,45,234,250,177,136,176,223,43,113,18,55,173,120,180,90,26,71,185,72,250,141,58,154,174,15,233,134,72,75\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,254,364,71,151,4800,17,121,256,4001,139,70,130,1461,4800,25,97,139,7,1532892064,1461000,159,1,Definitions.IPS(1461000,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(161,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(79,Definitions.P.W,Definitions.S.LONG,true),1461000,1461000,2014223716,17)"
            },
            {
              "js": "{\"lastEventTime\": 3999,\"contractStatus\": 0,\"timeFromLastEvent\": 365,\"nominalValue\": 4801,\"nominalAccrued\": 80,\"feeAccrued\": 99,\"nominalRate\": 949,\"interestScalingMultiplier\": 4001,\"nominalScalingMultiplier\": 159,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(3999,Definitions.ContractStatus.PF,365,4801,80,99,949,4001,159,Definitions.ContractRole.BUY)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.299ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [70,209,216,66,163,150,236,135,244,218,13,119,62,87,89,218,172,163,240,170,147,241,116,71,46,31,209,197,15,99,197,94],\"legalEntityIdCounterparty\": [102,114,88,188,0,180,73,101,142,115,29,142,233,192,194,99,109,71,122,97,43,88,102,132,56,10,248,217,178,187,238,166],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 11,\"statusDate\": 17,\"initialExchangeDate\": 9999,\"maturityDate\": 63,\"terminationDate\": 367,\"purchaseDate\": 100,\"capitalizationEndDate\": 17,\"cycleAnchorDateOfInterestPayment\": 950,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 101,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 16,\"nominalInterestRate\": 360,\"feeAccrued\": 29,\"accruedInterest\": 2447,\"rateMultiplier\": 4899,\"rateSpread\": 19,\"feeRate\": 32,\"nextResetRate\": 149,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 49,\"priceAtPurchaseDate\": 24,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461000,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 80,\"lifeFloor\": 4899,\"periodCap\": 129,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"70,209,216,66,163,150,236,135,244,218,13,119,62,87,89,218,172,163,240,170,147,241,116,71,46,31,209,197,15,99,197,94\"),stringToBytes32(\"102,114,88,188,0,180,73,101,142,115,29,142,233,192,194,99,109,71,122,97,43,88,102,132,56,10,248,217,178,187,238,166\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,11,17,9999,63,367,100,17,950,4800,101,32074,16,360,29,2447,4899,19,32,149,129,49,24,Definitions.IPS(86400,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1461000,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(366,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.LONG,false),80,4899,129,24)"
            },
            {
              "js": "{\"lastEventTime\": 2448,\"contractStatus\": 2,\"timeFromLastEvent\": 359,\"nominalValue\": 99,\"nominalAccrued\": 950,\"feeAccrued\": 15,\"nominalRate\": 4000,\"interestScalingMultiplier\": 367,\"nominalScalingMultiplier\": 160,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(2448,Definitions.ContractStatus.DQ,359,99,950,15,4000,367,160,Definitions.ContractRole.BUY)"
            },
            {
              "js": "{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 68570,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 9}",
              "sol": "Definitions.ProtoEvent(19,24,68570,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.304ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [168,205,189,112,169,79,33,93,221,157,66,49,148,30,133,150,254,139,80,76,82,188,140,201,191,122,66,89,222,61,211,154],\"legalEntityIdCounterparty\": [119,123,138,123,94,47,195,107,194,68,151,33,210,182,239,39,136,232,130,139,173,106,8,53,9,200,220,23,147,225,124,110],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 130,\"statusDate\": 16,\"initialExchangeDate\": 15,\"maturityDate\": 4799,\"terminationDate\": 1532892064,\"purchaseDate\": 364,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 401,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 95,\"nominalInterestRate\": 2446,\"feeAccrued\": 10001,\"accruedInterest\": 86400,\"rateMultiplier\": 119,\"rateSpread\": 256,\"feeRate\": 146098,\"nextResetRate\": 161,\"penaltyRate\": 68569,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 14,\"cycleOfInterestPayment\": {\"i\": 26,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 140,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 4800,\"lifeFloor\": 68570,\"periodCap\": 1971,\"periodFloor\": 146097}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"168,205,189,112,169,79,33,93,221,157,66,49,148,30,133,150,254,139,80,76,82,188,140,201,191,122,66,89,222,61,211,154\"),stringToBytes32(\"119,123,138,123,94,47,195,107,194,68,151,33,210,182,239,39,136,232,130,139,173,106,8,53,9,200,220,23,147,225,124,110\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,130,16,15,4799,1532892064,364,4901,5,401,2,1532892064,95,2446,10001,86400,119,256,146098,161,68569,89,14,Definitions.IPS(26,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(140,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.H,Definitions.S.SHORT,true),4800,68570,1971,146097)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [158,85,253,1,55,158,95,116,50,58,27,88,65,110,86,193,136,134,98,232,146,221,1,91,108,121,155,122,144,137,104,69],\"legalEntityIdCounterparty\": [36,142,192,186,59,250,124,112,34,39,215,50,174,81,110,151,249,101,93,132,111,19,69,227,110,149,237,21,176,205,123,161],\"dayCountConvention\": 0,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 366,\"initialExchangeDate\": 18,\"maturityDate\": 61,\"terminationDate\": 151,\"purchaseDate\": 50,\"capitalizationEndDate\": 26,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 2440587,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 20,\"nominalInterestRate\": 19,\"feeAccrued\": 89,\"accruedInterest\": 949,\"rateMultiplier\": 70,\"rateSpread\": 367,\"feeRate\": 255,\"nextResetRate\": 159,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 359,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 900,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 12,\"lifeFloor\": 86400,\"periodCap\": 32074,\"periodFloor\": 119}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"158,85,253,1,55,158,95,116,50,58,27,88,65,110,86,193,136,134,98,232,146,221,1,91,108,121,155,122,144,137,104,69\"),stringToBytes32(\"36,142,192,186,59,250,124,112,34,39,215,50,174,81,110,151,249,101,93,132,111,19,69,227,110,149,237,21,176,205,123,161\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,32,366,18,61,151,50,26,96,2440587,70,1461001,20,19,89,949,70,367,255,159,25,86401,359,Definitions.IPS(10001,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1969,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(63,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.LONG,true),12,86400,32074,119)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [79,250,58,151,13,13,144,252,205,41,211,83,115,69,114,213,39,28,94,144,81,116,12,103,17,181,42,92,0,210,24,98],\"legalEntityIdCounterparty\": [126,60,240,112,171,138,202,40,83,133,146,160,25,33,226,74,141,157,38,73,11,97,67,9,81,91,95,140,241,112,243,137],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1461000,\"statusDate\": 95,\"initialExchangeDate\": 141,\"maturityDate\": 48,\"terminationDate\": 25,\"purchaseDate\": 1971,\"capitalizationEndDate\": 400,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 30,\"nominalInterestRate\": 86401,\"feeAccrued\": 65,\"accruedInterest\": 66,\"rateMultiplier\": 60,\"rateSpread\": 256,\"feeRate\": 4901,\"nextResetRate\": 1970,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 50,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 95,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": 13,\"periodCap\": 367,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"79,250,58,151,13,13,144,252,205,41,211,83,115,69,114,213,39,28,94,144,81,116,12,103,17,181,42,92,0,210,24,98\"),stringToBytes32(\"126,60,240,112,171,138,202,40,83,133,146,160,25,33,226,74,141,157,38,73,11,97,67,9,81,91,95,140,241,112,243,137\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1461000,95,141,48,25,1971,400,1461,111,63,2448,30,86401,65,66,60,256,4901,1970,79,900,4,Definitions.IPS(111,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(50,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(901,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.W,Definitions.S.SHORT,true),2446,13,367,129)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [144,241,125,96,41,176,59,190,70,214,173,124,92,144,226,145,93,90,80,164,27,53,142,179,85,141,67,244,238,63,73,62],\"legalEntityIdCounterparty\": [147,250,187,227,69,15,243,41,243,160,47,113,16,128,6,59,124,134,113,63,25,241,78,15,26,134,133,118,244,106,206,123],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 29,\"statusDate\": 2014223715,\"initialExchangeDate\": 146098,\"maturityDate\": 361,\"terminationDate\": 99,\"purchaseDate\": 161,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 32074,\"cycleAnchorDateOfRateReset\": 1532892063,\"cycleAnchorDateOfScalingIndex\": 1461000,\"cycleAnchorDateOfFee\": 91,\"notionalPrincipal\": 14,\"nominalInterestRate\": 9999,\"feeAccrued\": 19,\"accruedInterest\": 150,\"rateMultiplier\": 19,\"rateSpread\": 139,\"feeRate\": 6,\"nextResetRate\": 65,\"penaltyRate\": 141,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 61,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 400,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461001,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 39,\"lifeFloor\": 368,\"periodCap\": 99,\"periodFloor\": 401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"144,241,125,96,41,176,59,190,70,214,173,124,92,144,226,145,93,90,80,164,27,53,142,179,85,141,67,244,238,63,73,62\"),stringToBytes32(\"147,250,187,227,69,15,243,41,243,160,47,113,16,128,6,59,124,134,113,63,25,241,78,15,26,134,133,118,244,106,206,123\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,29,2014223715,146098,361,99,161,16,32074,1532892063,1461000,91,14,9999,19,150,19,139,6,65,141,89,61,Definitions.IPS(48,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(400,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1461001,Definitions.P.Y,Definitions.S.SHORT,true),39,368,99,401)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [149,92,117,250,152,65,206,246,167,78,62,35,191,180,97,213,110,81,249,189,189,234,214,149,72,218,70,250,18,115,62,223],\"legalEntityIdCounterparty\": [235,118,42,113,168,218,47,153,66,138,187,84,31,98,149,16,26,127,136,111,140,34,119,92,14,31,246,241,160,69,10,143],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 160,\"statusDate\": 10001,\"initialExchangeDate\": 1336,\"maturityDate\": 68568,\"terminationDate\": 1,\"purchaseDate\": 0,\"capitalizationEndDate\": 39,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 66,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 900,\"nominalInterestRate\": 89,\"feeAccrued\": 100,\"accruedInterest\": 69,\"rateMultiplier\": 949,\"rateSpread\": 49,\"feeRate\": 399,\"nextResetRate\": 5,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 1461000,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 51,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 368,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 6,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 10001,\"periodCap\": 25,\"periodFloor\": 256}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"149,92,117,250,152,65,206,246,167,78,62,35,191,180,97,213,110,81,249,189,189,234,214,149,72,218,70,250,18,115,62,223\"),stringToBytes32(\"235,118,42,113,168,218,47,153,66,138,187,84,31,98,149,16,26,127,136,111,140,34,119,92,14,31,246,241,160,69,10,143\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,160,10001,1336,68568,1,0,39,2448,66,17,39,900,89,100,69,949,49,399,5,109,86399,1461000,Definitions.IPS(50,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(51,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(368,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.Y,Definitions.S.SHORT,true),1461002,10001,25,256)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [151,114,220,60,158,27,76,104,81,170,1,246,211,64,131,224,147,9,64,255,71,187,34,118,163,104,118,63,213,161,177,185],\"legalEntityIdCounterparty\": [145,37,178,171,130,103,182,249,156,85,231,249,134,188,251,184,172,44,187,20,213,234,179,177,114,32,174,67,171,222,207,190],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 5,\"statusDate\": 24,\"initialExchangeDate\": 24,\"maturityDate\": 11,\"terminationDate\": 17,\"purchaseDate\": 899,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 7,\"cycleAnchorDateOfScalingIndex\": 91,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 140,\"nominalInterestRate\": 86400,\"feeAccrued\": 368,\"accruedInterest\": 4901,\"rateMultiplier\": 140,\"rateSpread\": 101,\"feeRate\": 400,\"nextResetRate\": 360,\"penaltyRate\": -1,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 257,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86400,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 951,\"lifeFloor\": 40,\"periodCap\": 2440587,\"periodFloor\": 366}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"151,114,220,60,158,27,76,104,81,170,1,246,211,64,131,224,147,9,64,255,71,187,34,118,163,104,118,63,213,161,177,185\"),stringToBytes32(\"145,37,178,171,130,103,182,249,156,85,231,249,134,188,251,184,172,44,187,20,213,234,179,177,114,32,174,67,171,222,207,190\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,5,24,24,11,17,899,4799,1461,7,91,949,140,86400,368,4901,140,101,400,360,-1,79,68570,Definitions.IPS(949,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(257,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4,Definitions.P.Q,Definitions.S.LONG,false),951,40,2440587,366)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [153,206,66,196,85,137,99,168,62,99,78,6,153,212,151,147,69,12,161,207,24,236,231,64,206,171,206,34,147,171,117,195],\"legalEntityIdCounterparty\": [76,3,201,43,212,114,241,17,184,222,188,157,234,70,43,82,150,243,50,38,106,28,6,223,236,183,186,153,181,158,116,97],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 16,\"statusDate\": 900,\"initialExchangeDate\": 160,\"maturityDate\": 10001,\"terminationDate\": 4801,\"purchaseDate\": 1,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 63,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 149,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 79,\"nominalInterestRate\": 949,\"feeAccrued\": 32,\"accruedInterest\": 1336,\"rateMultiplier\": 1,\"rateSpread\": 39,\"feeRate\": 10001,\"nextResetRate\": 14,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86400,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 2447,\"lifeFloor\": 1338,\"periodCap\": -1,\"periodFloor\": 39}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"153,206,66,196,85,137,99,168,62,99,78,6,153,212,151,147,69,12,161,207,24,236,231,64,206,171,206,34,147,171,117,195\"),stringToBytes32(\"76,3,201,43,212,114,241,17,184,222,188,157,234,70,43,82,150,243,50,38,106,28,6,223,236,183,186,153,181,158,116,97\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,16,900,160,10001,4801,1,950,63,9999,149,1338,79,949,32,1336,1,39,10001,14,146098,25,1,Definitions.IPS(2,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(80,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.W,Definitions.S.LONG,true),2447,1338,-1,39)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [199,233,71,60,45,20,145,84,82,173,138,25,29,219,241,251,188,10,178,218,78,229,42,133,213,43,98,3,216,220,190,184],\"legalEntityIdCounterparty\": [6,226,9,143,29,45,167,90,252,183,112,94,44,150,252,154,234,168,176,245,70,225,197,160,216,191,158,67,42,255,228,68],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 257,\"statusDate\": 24,\"initialExchangeDate\": 8,\"maturityDate\": 140,\"terminationDate\": 1970,\"purchaseDate\": 120,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 4,\"notionalPrincipal\": 120,\"nominalInterestRate\": 1336,\"feeAccrued\": 10001,\"accruedInterest\": 1462,\"rateMultiplier\": 89,\"rateSpread\": 949,\"feeRate\": 254,\"nextResetRate\": 30,\"penaltyRate\": 86399,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 2440587,\"cycleOfInterestPayment\": {\"i\": 151,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10001,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 71,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 361,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 4900,\"lifeFloor\": 11,\"periodCap\": 48,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"199,233,71,60,45,20,145,84,82,173,138,25,29,219,241,251,188,10,178,218,78,229,42,133,213,43,98,3,216,220,190,184\"),stringToBytes32(\"6,226,9,143,29,45,167,90,252,183,112,94,44,150,252,154,234,168,176,245,70,225,197,160,216,191,158,67,42,255,228,68\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,257,24,8,140,1970,120,0,4800,96,254,4,120,1336,10001,1462,89,949,254,30,86399,401,2440587,Definitions.IPS(151,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(10001,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(71,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(361,Definitions.P.Y,Definitions.S.LONG,false),4900,11,48,10001)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [8,117,254,128,17,20,148,129,13,173,98,141,61,95,199,5,113,203,136,116,10,155,225,254,17,193,4,236,199,86,14,14],\"legalEntityIdCounterparty\": [215,65,238,202,189,128,67,145,134,139,19,175,132,193,181,140,239,34,43,167,196,76,70,177,49,73,98,225,201,209,245,77],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 131,\"statusDate\": 2440589,\"initialExchangeDate\": 359,\"maturityDate\": 1970,\"terminationDate\": 4900,\"purchaseDate\": 96,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 32075,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 16,\"nominalInterestRate\": 4799,\"feeAccrued\": 39,\"accruedInterest\": 950,\"rateMultiplier\": 256,\"rateSpread\": 1337,\"feeRate\": 17,\"nextResetRate\": 401,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 146096,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 61,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 146097,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 139,\"lifeFloor\": 900,\"periodCap\": 366,\"periodFloor\": 29}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"8,117,254,128,17,20,148,129,13,173,98,141,61,95,199,5,113,203,136,116,10,155,225,254,17,193,4,236,199,86,14,14\"),stringToBytes32(\"215,65,238,202,189,128,67,145,134,139,19,175,132,193,181,140,239,34,43,167,196,76,70,177,49,73,98,225,201,209,245,77\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,131,2440589,359,1970,4900,96,1532892062,110,1336,32075,366,16,4799,39,950,256,1337,17,401,949,32076,1338,Definitions.IPS(146096,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(61,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(61,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(146097,Definitions.P.M,Definitions.S.LONG,true),139,900,366,29)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [15,74,204,204,171,128,220,113,147,220,133,95,56,14,188,87,12,228,67,28,18,112,106,169,116,17,48,132,172,152,83,217],\"legalEntityIdCounterparty\": [23,44,139,150,200,100,87,253,24,119,134,120,249,154,124,214,9,205,202,230,105,28,95,15,131,19,87,229,242,89,163,209],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4901,\"statusDate\": 160,\"initialExchangeDate\": 39,\"maturityDate\": 1461002,\"terminationDate\": 141,\"purchaseDate\": 17,\"capitalizationEndDate\": 2446,\"cycleAnchorDateOfInterestPayment\": 1532892063,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 97,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 2448,\"feeAccrued\": 15,\"accruedInterest\": 111,\"rateMultiplier\": 364,\"rateSpread\": 131,\"feeRate\": 119,\"nextResetRate\": 951,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 95,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 95,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 1337,\"periodCap\": 16,\"periodFloor\": 23}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"15,74,204,204,171,128,220,113,147,220,133,95,56,14,188,87,12,228,67,28,18,112,106,169,116,17,48,132,172,152,83,217\"),stringToBytes32(\"23,44,139,150,200,100,87,253,24,119,134,120,249,154,124,214,9,205,202,230,105,28,95,15,131,19,87,229,242,89,163,209\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4901,160,39,1461002,141,17,2446,1532892063,68570,97,32,86399,2448,15,111,364,131,119,951,90,109,95,Definitions.IPS(256,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(68570,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(95,Definitions.P.W,Definitions.S.LONG,false),41,1337,16,23)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [218,43,191,95,106,227,178,126,220,127,102,193,24,101,212,149,91,127,19,120,126,188,19,53,82,210,183,204,167,46,189,124],\"legalEntityIdCounterparty\": [96,251,66,16,255,40,19,176,25,236,208,3,174,31,139,99,35,189,219,206,50,128,182,85,49,143,55,224,33,105,44,188],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 51,\"statusDate\": 29,\"initialExchangeDate\": 9999,\"maturityDate\": 4,\"terminationDate\": 60,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 64,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 366,\"nominalInterestRate\": 0,\"feeAccrued\": 2,\"accruedInterest\": 364,\"rateMultiplier\": 139,\"rateSpread\": 20,\"feeRate\": 1532892063,\"nextResetRate\": 18,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 80,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 31,\"lifeFloor\": 5,\"periodCap\": 2446,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"218,43,191,95,106,227,178,126,220,127,102,193,24,101,212,149,91,127,19,120,126,188,19,53,82,210,183,204,167,46,189,124\"),stringToBytes32(\"96,251,66,16,255,40,19,176,25,236,208,3,174,31,139,99,35,189,219,206,50,128,182,85,49,143,55,224,33,105,44,188\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,51,29,9999,4,60,0,0,150,64,1337,140,366,0,2,364,139,20,1532892063,18,68568,89,60,Definitions.IPS(11,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(80,Definitions.P.M,Definitions.S.SHORT,false),31,5,2446,18)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [91,161,230,215,5,237,145,137,81,86,179,49,20,51,66,171,243,129,212,4,14,117,242,63,182,1,44,49,229,40,211,75],\"legalEntityIdCounterparty\": [172,218,195,10,71,50,43,225,168,236,114,187,21,191,110,45,199,168,213,231,62,159,34,84,30,234,188,228,14,136,146,156],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 51,\"statusDate\": 4900,\"initialExchangeDate\": 1337,\"maturityDate\": 9,\"terminationDate\": 30,\"purchaseDate\": 4899,\"capitalizationEndDate\": 139,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 30,\"nominalInterestRate\": 366,\"feeAccrued\": 161,\"accruedInterest\": 4001,\"rateMultiplier\": 25,\"rateSpread\": 361,\"feeRate\": 13,\"nextResetRate\": 150,\"penaltyRate\": 141,\"premiumDiscountAtIED\": 254,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 12,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32076,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4900,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 71,\"lifeFloor\": 2014223715,\"periodCap\": 15,\"periodFloor\": 1338}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"91,161,230,215,5,237,145,137,81,86,179,49,20,51,66,171,243,129,212,4,14,117,242,63,182,1,44,49,229,40,211,75\"),stringToBytes32(\"172,218,195,10,71,50,43,225,168,236,114,187,21,191,110,45,199,168,213,231,62,159,34,84,30,234,188,228,14,136,146,156\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,51,4900,1337,9,30,4899,139,48,96,5,32,30,366,161,4001,25,361,13,150,141,254,4899,Definitions.IPS(12,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(4900,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,false),71,2014223715,15,1338)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [130,12,49,150,54,7,125,56,240,102,21,2,100,207,21,71,233,79,234,34,195,119,248,156,129,124,202,30,132,186,199,42],\"legalEntityIdCounterparty\": [102,162,57,62,251,221,71,205,10,215,220,145,29,242,187,99,53,125,42,73,26,238,117,117,201,166,110,65,106,65,172,19],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1461002,\"statusDate\": 5,\"initialExchangeDate\": 2,\"maturityDate\": 69,\"terminationDate\": 40,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 899,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 32075,\"nominalInterestRate\": 0,\"feeAccrued\": 364,\"accruedInterest\": 1461000,\"rateMultiplier\": 2448,\"rateSpread\": 399,\"feeRate\": 4900,\"nextResetRate\": 4799,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 25,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 399,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 5,\"periodCap\": 1462,\"periodFloor\": 150}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"130,12,49,150,54,7,125,56,240,102,21,2,100,207,21,71,233,79,234,34,195,119,248,156,129,124,202,30,132,186,199,42\"),stringToBytes32(\"102,162,57,62,251,221,71,205,10,215,220,145,29,242,187,99,53,125,42,73,26,238,117,117,201,166,110,65,106,65,172,19\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1461002,5,2,69,40,0,0,359,0,899,949,32075,0,364,1461000,2448,399,4900,4799,146096,32076,59,Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(25,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(399,Definitions.P.M,Definitions.S.SHORT,true),161,5,1462,150)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [148,120,5,20,233,22,40,213,15,124,62,227,106,226,94,169,135,58,82,46,187,182,219,210,166,170,84,213,9,74,2,17],\"legalEntityIdCounterparty\": [193,177,228,151,201,135,165,14,40,235,214,92,228,204,217,39,193,229,138,5,136,114,134,1,173,37,207,75,72,124,138,92],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 13,\"statusDate\": 71,\"initialExchangeDate\": 70,\"maturityDate\": 109,\"terminationDate\": 899,\"purchaseDate\": 130,\"capitalizationEndDate\": 161,\"cycleAnchorDateOfInterestPayment\": 20,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 951,\"cycleAnchorDateOfFee\": 950,\"notionalPrincipal\": 950,\"nominalInterestRate\": 32,\"feeAccrued\": 368,\"accruedInterest\": 899,\"rateMultiplier\": 29,\"rateSpread\": 151,\"feeRate\": 41,\"nextResetRate\": 49,\"penaltyRate\": 950,\"premiumDiscountAtIED\": 90,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 95,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2446,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 0,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 121,\"lifeFloor\": 2440587,\"periodCap\": 32,\"periodFloor\": 361}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"148,120,5,20,233,22,40,213,15,124,62,227,106,226,94,169,135,58,82,46,187,182,219,210,166,170,84,213,9,74,2,17\"),stringToBytes32(\"193,177,228,151,201,135,165,14,40,235,214,92,228,204,217,39,193,229,138,5,136,114,134,1,173,37,207,75,72,124,138,92\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,13,71,70,109,899,130,161,20,69,951,950,950,32,368,899,29,151,41,49,950,90,15,Definitions.IPS(4799,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2446,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(0,Definitions.P.Q,Definitions.S.SHORT,false),121,2440587,32,361)"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [151,74,12,74,54,176,166,45,71,236,174,244,15,160,37,237,225,214,107,201,214,109,67,81,220,143,25,219,13,50,25,71],\"legalEntityIdCounterparty\": [32,131,38,92,65,108,24,189,170,12,202,158,217,161,193,146,23,179,227,84,247,30,82,111,185,169,183,124,100,230,2,194],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 80,\"statusDate\": 66,\"initialExchangeDate\": 40,\"maturityDate\": 120,\"terminationDate\": 899,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 365,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 140,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 2440588,\"nominalInterestRate\": 0,\"feeAccrued\": 110,\"accruedInterest\": 359,\"rateMultiplier\": 1,\"rateSpread\": 254,\"feeRate\": 4,\"nextResetRate\": 24,\"penaltyRate\": 11,\"premiumDiscountAtIED\": 4899,\"priceAtPurchaseDate\": 2440588,\"cycleOfInterestPayment\": {\"i\": 17,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 70,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 26,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 3999,\"lifeFloor\": 1461,\"periodCap\": 2014223714,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"151,74,12,74,54,176,166,45,71,236,174,244,15,160,37,237,225,214,107,201,214,109,67,81,220,143,25,219,13,50,25,71\"),stringToBytes32(\"32,131,38,92,65,108,24,189,170,12,202,158,217,161,193,146,23,179,227,84,247,30,82,111,185,169,183,124,100,230,2,194\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,80,66,40,120,899,0,0,365,141,140,0,2440588,0,110,359,1,254,4,24,11,4899,2440588,Definitions.IPS(17,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(70,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(26,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,false),3999,1461,2014223714,950)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [164,71,196,120,199,199,212,193,218,49,149,163,22,62,153,169,124,100,134,157,11,173,185,162,220,61,151,46,43,69,62,118],\"legalEntityIdCounterparty\": [21,161,235,88,61,194,73,175,127,203,87,90,34,86,105,71,162,34,34,99,143,118,100,164,53,87,156,190,113,189,139,167],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1532892064,\"statusDate\": 71,\"initialExchangeDate\": 949,\"maturityDate\": 4001,\"terminationDate\": 64,\"purchaseDate\": 2014223715,\"capitalizationEndDate\": 366,\"cycleAnchorDateOfInterestPayment\": 25,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 1460,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 24,\"nominalInterestRate\": 50,\"feeAccrued\": 23,\"accruedInterest\": 11,\"rateMultiplier\": 86401,\"rateSpread\": 61,\"feeRate\": 401,\"nextResetRate\": 1970,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 80,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 80,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2014223715,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 60,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 110,\"lifeFloor\": 2,\"periodCap\": 60,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"164,71,196,120,199,199,212,193,218,49,149,163,22,62,153,169,124,100,134,157,11,173,185,162,220,61,151,46,43,69,62,118\"),stringToBytes32(\"21,161,235,88,61,194,73,175,127,203,87,90,34,86,105,71,162,34,34,99,143,118,100,164,53,87,156,190,113,189,139,167\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1532892064,71,949,4001,64,2014223715,366,25,5,1460,1461001,24,50,23,11,86401,61,401,1970,949,950,100,Definitions.IPS(80,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(80,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(60,Definitions.P.Q,Definitions.S.LONG,false),110,2,60,80)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [198,207,240,250,48,136,140,131,203,166,105,25,142,214,234,43,188,246,169,161,34,85,119,138,207,218,134,77,48,144,74,144],\"legalEntityIdCounterparty\": [146,21,62,25,197,41,10,198,16,134,212,80,120,246,33,60,101,149,147,6,158,70,170,174,114,224,176,173,11,159,244,133],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 109,\"statusDate\": 146098,\"initialExchangeDate\": 2447,\"maturityDate\": 15,\"terminationDate\": 1970,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 368,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 139,\"nominalInterestRate\": 0,\"feeAccrued\": 111,\"accruedInterest\": 66,\"rateMultiplier\": 257,\"rateSpread\": 5,\"feeRate\": 1,\"nextResetRate\": 367,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 2014223714,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 41,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 109,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 399,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 59,\"lifeFloor\": 255,\"periodCap\": 32074,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"198,207,240,250,48,136,140,131,203,166,105,25,142,214,234,43,188,246,169,161,34,85,119,138,207,218,134,77,48,144,74,144\"),stringToBytes32(\"146,21,62,25,197,41,10,198,16,134,212,80,120,246,33,60,101,149,147,6,158,70,170,174,114,224,176,173,11,159,244,133\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,109,146098,2447,15,1970,0,0,5,368,0,151,139,0,111,66,257,5,1,367,6,32,1,Definitions.IPS(2014223714,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(41,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(109,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(399,Definitions.P.H,Definitions.S.LONG,true),59,255,32074,40)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [81,43,191,25,186,209,199,215,132,249,139,38,26,189,197,193,172,82,87,65,63,200,59,163,214,0,39,103,45,133,131,254],\"legalEntityIdCounterparty\": [235,245,220,112,249,99,240,80,49,63,195,170,67,41,199,206,49,225,112,253,20,188,94,125,26,25,80,38,177,124,229,9],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 13,\"statusDate\": 950,\"initialExchangeDate\": 1969,\"maturityDate\": 368,\"terminationDate\": 23,\"purchaseDate\": 365,\"capitalizationEndDate\": 70,\"cycleAnchorDateOfInterestPayment\": 29,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 41,\"notionalPrincipal\": 51,\"nominalInterestRate\": 364,\"feeAccrued\": 119,\"accruedInterest\": 109,\"rateMultiplier\": 86399,\"rateSpread\": 24,\"feeRate\": 141,\"nextResetRate\": 9,\"penaltyRate\": 11,\"premiumDiscountAtIED\": 4901,\"priceAtPurchaseDate\": 90,\"cycleOfInterestPayment\": {\"i\": 140,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86400,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 96,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 39,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892063,\"lifeFloor\": 68570,\"periodCap\": 61,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"81,43,191,25,186,209,199,215,132,249,139,38,26,189,197,193,172,82,87,65,63,200,59,163,214,0,39,103,45,133,131,254\"),stringToBytes32(\"235,245,220,112,249,99,240,80,49,63,195,170,67,41,199,206,49,225,112,253,20,188,94,125,26,25,80,38,177,124,229,9\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,13,950,1969,368,23,365,70,29,2014223714,1461001,41,51,364,119,109,86399,24,141,9,11,4901,90,Definitions.IPS(140,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(86400,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(39,Definitions.P.D,Definitions.S.LONG,false),1532892063,68570,61,1336)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [234,176,138,34,61,67,224,195,225,118,140,149,81,183,156,128,71,139,74,137,31,129,223,93,3,111,99,201,252,32,12,231],\"legalEntityIdCounterparty\": [214,3,88,90,39,44,87,241,12,42,212,80,236,119,237,6,55,234,86,139,114,253,4,160,18,246,244,186,53,20,227,118],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 50,\"statusDate\": 1337,\"initialExchangeDate\": 949,\"maturityDate\": 3999,\"terminationDate\": 68568,\"purchaseDate\": 10001,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68568,\"cycleAnchorDateOfRateReset\": 1461000,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 120,\"nominalInterestRate\": 50,\"feeAccrued\": 2440589,\"accruedInterest\": 2446,\"rateMultiplier\": -1,\"rateSpread\": 23,\"feeRate\": 1969,\"nextResetRate\": 9999,\"penaltyRate\": 899,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 255,\"cycleOfInterestPayment\": {\"i\": 40,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 121,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 359,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 161,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 141,\"lifeFloor\": 4001,\"periodCap\": 146098,\"periodFloor\": 359}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"234,176,138,34,61,67,224,195,225,118,140,149,81,183,156,128,71,139,74,137,31,129,223,93,3,111,99,201,252,32,12,231\"),stringToBytes32(\"214,3,88,90,39,44,87,241,12,42,212,80,236,119,237,6,55,234,86,139,114,253,4,160,18,246,244,186,53,20,227,118\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,50,1337,949,3999,68568,10001,0,68568,1461000,1461002,32,120,50,2440589,2446,-1,23,1969,9999,899,86399,255,Definitions.IPS(40,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(121,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(359,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(161,Definitions.P.H,Definitions.S.SHORT,false),141,4001,146098,359)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [206,224,227,235,63,36,86,77,209,238,244,139,135,21,92,83,31,168,109,62,156,187,28,12,138,59,60,98,17,45,94,0],\"legalEntityIdCounterparty\": [225,240,167,111,187,166,152,183,174,251,167,237,107,245,38,208,250,85,38,41,169,251,28,24,14,143,165,32,88,20,251,27],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 146096,\"statusDate\": 256,\"initialExchangeDate\": 4,\"maturityDate\": 4,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 48,\"nominalInterestRate\": 0,\"feeAccrued\": 2447,\"accruedInterest\": 1970,\"rateMultiplier\": 71,\"rateSpread\": 368,\"feeRate\": 6,\"nextResetRate\": 50,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 361,\"priceAtPurchaseDate\": 146096,\"cycleOfInterestPayment\": {\"i\": 160,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 50,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 25,\"lifeFloor\": 1532892064,\"periodCap\": 146098,\"periodFloor\": 140}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"206,224,227,235,63,36,86,77,209,238,244,139,135,21,92,83,31,168,109,62,156,187,28,12,138,59,60,98,17,45,94,0\"),stringToBytes32(\"225,240,167,111,187,166,152,183,174,251,167,237,107,245,38,208,250,85,38,41,169,251,28,24,14,143,165,32,88,20,251,27\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,146096,256,4,4,0,0,0,24,32074,8,1969,48,0,2447,1970,71,368,6,50,256,361,146096,Definitions.IPS(160,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(110,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.H,Definitions.S.SHORT,true),25,1532892064,146098,140)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [159,209,40,87,248,88,32,138,110,12,93,145,86,241,95,73,238,149,28,233,99,9,218,87,82,211,185,133,114,219,100,216],\"legalEntityIdCounterparty\": [246,24,97,76,131,207,106,54,229,140,230,211,105,249,217,252,20,33,231,66,98,7,73,240,50,54,119,176,164,133,117,95],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 149,\"statusDate\": 4900,\"initialExchangeDate\": 951,\"maturityDate\": 1532892064,\"terminationDate\": 2440589,\"purchaseDate\": 0,\"capitalizationEndDate\": 900,\"cycleAnchorDateOfInterestPayment\": 254,\"cycleAnchorDateOfRateReset\": 2440589,\"cycleAnchorDateOfScalingIndex\": 149,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 21,\"nominalInterestRate\": 361,\"feeAccrued\": 366,\"accruedInterest\": 1461000,\"rateMultiplier\": 359,\"rateSpread\": 2014223715,\"feeRate\": 2440587,\"nextResetRate\": 1337,\"penaltyRate\": 81,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 257,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 16,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 2446,\"lifeFloor\": 161,\"periodCap\": 131,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"159,209,40,87,248,88,32,138,110,12,93,145,86,241,95,73,238,149,28,233,99,9,218,87,82,211,185,133,114,219,100,216\"),stringToBytes32(\"246,24,97,76,131,207,106,54,229,140,230,211,105,249,217,252,20,33,231,66,98,7,73,240,50,54,119,176,164,133,117,95\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,149,4900,951,1532892064,2440589,0,900,254,2440589,149,2440588,21,361,366,1461000,359,2014223715,2440587,1337,81,365,49,Definitions.IPS(257,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(89,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(17,Definitions.P.W,Definitions.S.SHORT,false),2446,161,131,399)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [131,142,24,150,119,133,102,223,151,60,228,133,242,124,205,241,143,40,158,91,171,33,239,89,220,122,245,140,84,215,104,164],\"legalEntityIdCounterparty\": [30,110,37,120,70,30,42,64,128,1,100,97,157,164,83,246,140,149,167,52,132,164,1,85,183,234,179,223,236,182,21,15],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 256,\"initialExchangeDate\": 3999,\"maturityDate\": 139,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 949,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 79,\"nominalInterestRate\": 0,\"feeAccrued\": 2440588,\"accruedInterest\": 146098,\"rateMultiplier\": 365,\"rateSpread\": 4,\"feeRate\": 65,\"nextResetRate\": 951,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 50,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 14,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440589,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 3,\"lifeFloor\": 2448,\"periodCap\": 360,\"periodFloor\": 141}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"131,142,24,150,119,133,102,223,151,60,228,133,242,124,205,241,143,40,158,91,171,33,239,89,220,122,245,140,84,215,104,164\"),stringToBytes32(\"30,110,37,120,70,30,42,64,128,1,100,97,157,164,83,246,140,149,167,52,132,164,1,85,183,234,179,223,236,182,21,15\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,68569,256,3999,139,0,0,0,90,949,254,1,79,0,2440588,146098,365,4,65,951,2446,50,51,Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(14,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(2440589,Definitions.P.M,Definitions.S.LONG,false),3,2448,360,141)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.377ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:48:49.401ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}