,{
  "2020-11-12T21:38:18.429ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "146097",
                "sol": "146097"
              },
              {
                "js": "399",
                "sol": "399"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.430ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.430ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.431ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.431ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.432ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.433ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12",
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12,year<1970",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.436ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.437ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.438ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.438ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.438ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.439ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.440ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.443ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.443ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.443ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.444ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.444ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.444ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.444ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.445ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.446ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.446ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.446ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.447ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.447ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.448ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.460ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.462ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.463ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.463ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.464ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.464ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146097,
                "sol": 146097
              },
              {
                "js": "146096",
                "sol": "146096"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.465ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 67,
                "sol": 67
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.466ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 131,
                "sol": 131
              },
              {
                "js": "130",
                "sol": "130"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.467ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.467ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1463,
                "sol": 1463
              },
              {
                "js": "1462",
                "sol": "1462"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.468ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 162,
                "sol": 162
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.470ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.471ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.473ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.477ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": 159,
                "sol": 159
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": 62,
                "sol": 62
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "59",
                "sol": "59"
              },
              {
                "js": 58,
                "sol": 58
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": 68,
                "sol": 68
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "89",
                "sol": "89"
              },
              {
                "js": 88,
                "sol": 88
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:38:18.485ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.486ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.486ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.487ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.490ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{\"i\": 901,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(901,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{\"i\": 257,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{\"i\": 86401,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(86401,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{\"i\": 1,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.492ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.493ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.494ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.498ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.501ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.505ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.506ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.509ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 110,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(110,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(79,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 15,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(15,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 59,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(59,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 31,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(31,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(39,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32074,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.515ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{\"i\": 2014223715,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{\"i\": 255,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(255,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{\"i\": 1336,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1336,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 32,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{\"i\": 32076,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32076,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "68",
              "sol": "68"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{\"i\": 64,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(64,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{\"i\": 5,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(5,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{\"i\": 951,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(951,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{\"i\": 60,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(60,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.525ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 141,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(141,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 121,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(121,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 10000,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(10000,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 9,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(9,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 257,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 16,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(16,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 101,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "68",
              "sol": "68"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.528ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 80,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 31,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 360,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 146098,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 68,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 2,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 10},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 66,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 32,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 151,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 15,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 4800,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 120,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 68,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 159,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2446,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 254,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 99,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 30,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 4001,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 4799,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 51,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 71,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 1969,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 0,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 0,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 6},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 901,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 86401,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 40,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 63,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 12,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 2},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 121,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 86401,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 129,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 120,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 63,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 899,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 951,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 17,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 80,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 59,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 9},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 97,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 146097,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 30,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 65,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 50,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 1461000,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 69,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 50,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 64,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 0},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 27,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 399,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 86401,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 130,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 367,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 11},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 159,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 14,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 400,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 119,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 51,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 256,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 9999,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 0,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 17},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 25,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 1}]",
              "sol": "[Definitions.ProtoEvent(146097,90,80,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(63,95,31,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(1338,59,360,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(59,66,146098,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(1970,120,68,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(86400,3,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(40,64,2,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.TD),Definitions.ProtoEvent(63,11,66,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(11,1971,32,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(26,160,151,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(4800,146098,15,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(65,28,4800,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(63,96,120,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(68,4,159,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(364,160,2446,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(21,86400,254,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(359,11,99,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(30,8,30,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(30,6,4001,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(80,10001,4799,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(399,2,51,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(100,86401,71,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(29,0,1969,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(401,2014223714,0,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(1461000,96,0,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP),Definitions.ProtoEvent(130,131,901,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(1461001,161,86401,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(2014223714,1336,40,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(71,129,63,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(368,4800,12,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.AD),Definitions.ProtoEvent(4801,17,121,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(68568,23,86401,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(86400,51,129,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(86401,1336,120,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(16,29,63,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(39,1461001,899,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(1461002,2440588,951,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(86401,5,17,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(4900,4001,80,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(61,130,59,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PRD),Definitions.ProtoEvent(2440588,26,97,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(68568,2440588,146097,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(48,2440588,30,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(15,29,65,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(1462,59,50,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(99,17,1461000,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(79,1461000,69,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(1460,150,50,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(159,59,64,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.SD),Definitions.ProtoEvent(150,25,27,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(96,1532892063,399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(257,141,86401,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(80,360,130,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(15,95,367,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1336,4801,1,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(70,32074,159,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(32075,149,14,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(13,1969,400,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(131,161,119,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(32,11,51,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(368,1461002,256,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(4801,28,9999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(359,19,0,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MR),Definitions.ProtoEvent(61,1,25,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD)]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.542ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 70,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 18},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 61,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 20,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 99,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 368,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 119,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 2},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 40,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 32075,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 111,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 32075,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 110,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 1969,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 4,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 90,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 79,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 360,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 48,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 71,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 139,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 10000,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 368,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 1971,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 68569,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 2440587,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 129,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 51,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 901,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 367,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 109,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 18},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 12,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 32076,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 10001,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 68,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 255,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 68,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 7},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 1337,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 4001,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 5,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 20},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 19,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 8,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 3,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 2446,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 59,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 99,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 32074,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 1970,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 366,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 951,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 14,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 109,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 64,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 100,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 4899,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 1461,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 2014223714,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 48,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 360,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 2014223715,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 2,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 32,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 65,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 901,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 3},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 159,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(368,359,70,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1970,100,61,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(99,1461,20,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(64,19,99,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(32074,150,368,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(90,951,119,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.AD),Definitions.ProtoEvent(119,71,40,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(901,12,32075,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(140,64,111,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(0,9999,32075,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(129,2440589,110,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(2446,10,1969,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(9,399,4,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(1461,10001,90,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(899,51,79,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(86399,39,360,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(2440588,39,48,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(146096,15,71,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(161,4800,139,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(146096,1461000,10000,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(121,2,368,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(63,401,1971,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(2,63,68569,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(2014223714,359,2440587,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(1462,68570,129,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(2014223716,17,51,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(2014223716,1460,901,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(111,97,367,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(4,8,109,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB),Definitions.ProtoEvent(86399,2014223715,12,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(68570,146096,32076,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(131,12,10001,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(4900,8,68,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(100,1462,255,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(2440587,149,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(4801,149,68,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PY),Definitions.ProtoEvent(66,150,1337,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(21,11,4001,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(29,27,5,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child),Definitions.ProtoEvent(70,41,19,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(140,28,8,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(86401,140,3,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(25,1532892062,2446,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(2440587,1969,59,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(6,0,99,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(151,100,32074,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(97,60,1970,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(1338,3999,366,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(140,31,951,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(1532892063,4001,14,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(359,39,109,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(69,399,64,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(950,161,100,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(50,111,4899,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(119,109,1461,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(2440589,401,2014223714,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(159,1532892063,48,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(4,140,360,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(68569,59,2014223715,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(86400,59,2,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(39,86399,32,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(17,64,65,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(7,4,901,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IED),Definitions.ProtoEvent(3,96,159,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY)]"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.562ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.564ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [145,42,94,124,72,179,109,223,228,65,1,75,72,45,130,67,166,59,150,195,216,99,241,169,172,128,145,52,63,77,203,78],\"legalEntityIdCounterparty\": [41,250,30,100,92,109,135,68,227,14,19,179,80,175,249,69,226,181,205,213,105,240,140,189,215,133,190,135,216,79,219,1],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 100,\"statusDate\": 149,\"initialExchangeDate\": 257,\"maturityDate\": 2447,\"terminationDate\": 364,\"purchaseDate\": 365,\"capitalizationEndDate\": 4000,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 951,\"cycleAnchorDateOfFee\": 159,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 4901,\"feeAccrued\": 13,\"accruedInterest\": 367,\"rateMultiplier\": 8,\"rateSpread\": 4800,\"feeRate\": 63,\"nextResetRate\": 99,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 1971,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1336,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 90,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 32075,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 20,\"lifeFloor\": 99,\"periodCap\": 4801,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"145,42,94,124,72,179,109,223,228,65,1,75,72,45,130,67,166,59,150,195,216,99,241,169,172,128,145,52,63,77,203,78\"),stringToBytes32(\"41,250,30,100,92,109,135,68,227,14,19,179,80,175,249,69,226,181,205,213,105,240,140,189,215,133,190,135,216,79,219,1\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,100,149,257,2447,364,365,4000,360,367,951,159,1461000,4901,13,367,8,4800,63,99,14,29,1971,Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1336,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(32075,Definitions.P.Q,Definitions.S.LONG,true),20,99,4801,1532892063)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.567ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [87,17,107,201,62,193,29,170,178,178,25,119,62,46,24,5,144,25,101,132,15,60,179,95,223,71,44,81,130,69,34,177],\"legalEntityIdCounterparty\": [179,250,175,116,0,5,209,233,168,7,97,168,165,135,9,37,121,193,179,178,16,96,12,58,243,207,122,140,23,45,195,95],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4900,\"statusDate\": 141,\"initialExchangeDate\": 4000,\"maturityDate\": 1971,\"terminationDate\": 32074,\"purchaseDate\": 1532892063,\"capitalizationEndDate\": 50,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 900,\"cycleAnchorDateOfScalingIndex\": 401,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 161,\"nominalInterestRate\": 901,\"feeAccrued\": 951,\"accruedInterest\": 69,\"rateMultiplier\": 99,\"rateSpread\": 4000,\"feeRate\": 11,\"nextResetRate\": 20,\"penaltyRate\": 161,\"premiumDiscountAtIED\": 149,\"priceAtPurchaseDate\": 364,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 60,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2,\"lifeFloor\": 70,\"periodCap\": 1532892064,\"periodFloor\": 401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"87,17,107,201,62,193,29,170,178,178,25,119,62,46,24,5,144,25,101,132,15,60,179,95,223,71,44,81,130,69,34,177\"),stringToBytes32(\"179,250,175,116,0,5,209,233,168,7,97,168,165,135,9,37,121,193,179,178,16,96,12,58,243,207,122,140,23,45,195,95\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4900,141,4000,1971,32074,1532892063,50,2448,900,401,4800,161,901,951,69,99,4000,11,20,161,149,364,Definitions.IPS(59,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(257,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(60,Definitions.P.W,Definitions.S.SHORT,true),2,70,1532892064,401)"
            },
            {
              "js": "{\"lastEventTime\": 6,\"contractStatus\": 3,\"timeFromLastEvent\": 949,\"nominalValue\": 18,\"nominalAccrued\": 59,\"feeAccrued\": 95,\"nominalRate\": 361,\"interestScalingMultiplier\": 0,\"nominalScalingMultiplier\": 1532892063,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(6,Definitions.ContractStatus.DF,949,18,59,95,361,0,1532892063,Definitions.ContractRole.BUY)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.570ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [6,195,4,90,59,172,251,126,125,255,134,66,172,157,165,221,107,55,240,81,227,111,224,55,50,10,96,160,46,173,254,72],\"legalEntityIdCounterparty\": [7,81,15,132,203,208,198,43,123,247,56,118,131,160,242,255,12,206,244,157,214,27,179,33,20,200,200,72,198,195,2,227],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 71,\"statusDate\": 150,\"initialExchangeDate\": 71,\"maturityDate\": 4900,\"terminationDate\": 39,\"purchaseDate\": 30,\"capitalizationEndDate\": 1337,\"cycleAnchorDateOfInterestPayment\": 12,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 19,\"notionalPrincipal\": 69,\"nominalInterestRate\": 101,\"feeAccrued\": 1970,\"accruedInterest\": 140,\"rateMultiplier\": 1532892063,\"rateSpread\": 1462,\"feeRate\": 26,\"nextResetRate\": 131,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 3,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 399,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 360,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 32074,\"lifeFloor\": 139,\"periodCap\": 1971,\"periodFloor\": 3}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"6,195,4,90,59,172,251,126,125,255,134,66,172,157,165,221,107,55,240,81,227,111,224,55,50,10,96,160,46,173,254,72\"),stringToBytes32(\"7,81,15,132,203,208,198,43,123,247,56,118,131,160,242,255,12,206,244,157,214,27,179,33,20,200,200,72,198,195,2,227\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,71,150,71,4900,39,30,1337,12,254,146098,19,69,101,1970,140,1532892063,1462,26,131,1461002,26,254,Definitions.IPS(3,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(119,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.W,Definitions.S.LONG,false),32074,139,1971,3)"
            },
            {
              "js": "{\"lastEventTime\": 161,\"contractStatus\": 2,\"timeFromLastEvent\": 121,\"nominalValue\": 2447,\"nominalAccrued\": 2014223715,\"feeAccrued\": 21,\"nominalRate\": 257,\"interestScalingMultiplier\": 27,\"nominalScalingMultiplier\": 360,\"contractRoleSign\": 4}",
              "sol": "Definitions.ContractState(161,Definitions.ContractStatus.DQ,121,2447,2014223715,21,257,27,360,Definitions.ContractRole.RFL)"
            },
            {
              "js": "{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 366,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 6}",
              "sol": "Definitions.ProtoEvent(139,899,366,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.580ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [56,32,251,224,7,22,80,208,186,95,169,209,251,254,118,138,212,126,160,108,198,187,61,99,2,98,173,122,53,154,255,31],\"legalEntityIdCounterparty\": [203,114,34,174,153,210,50,193,76,82,9,159,53,154,111,77,98,72,122,140,84,166,188,128,84,64,155,36,107,219,85,138],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2014223715,\"statusDate\": 19,\"initialExchangeDate\": 97,\"maturityDate\": 2014223716,\"terminationDate\": 900,\"purchaseDate\": 101,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 32075,\"cycleAnchorDateOfScalingIndex\": 2446,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 86401,\"feeAccrued\": 63,\"accruedInterest\": 19,\"rateMultiplier\": 61,\"rateSpread\": 89,\"feeRate\": 97,\"nextResetRate\": 2014223714,\"penaltyRate\": 129,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 70,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 89,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 4801,\"lifeFloor\": 129,\"periodCap\": 151,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"56,32,251,224,7,22,80,208,186,95,169,209,251,254,118,138,212,126,160,108,198,187,61,99,2,98,173,122,53,154,255,31\"),stringToBytes32(\"203,114,34,174,153,210,50,193,76,82,9,159,53,154,111,77,98,72,122,140,84,166,188,128,84,64,155,36,107,219,85,138\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2014223715,19,97,2014223716,900,101,101,1462,32075,2446,367,1461000,86401,63,19,61,89,97,2014223714,129,400,59,Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(70,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(89,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,false),4801,129,151,4800)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [32,201,221,250,197,34,3,24,68,202,13,168,187,86,255,193,122,139,103,16,205,201,209,153,180,208,217,95,1,48,236,232],\"legalEntityIdCounterparty\": [10,16,219,143,90,178,121,219,108,164,188,57,221,26,16,205,215,47,88,11,59,59,166,211,139,243,203,209,118,252,79,93],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 146096,\"statusDate\": 2440589,\"initialExchangeDate\": 6,\"maturityDate\": 2014223716,\"terminationDate\": 119,\"purchaseDate\": 367,\"capitalizationEndDate\": 1970,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 367,\"cycleAnchorDateOfFee\": 86400,\"notionalPrincipal\": 2014223715,\"nominalInterestRate\": 121,\"feeAccrued\": 2446,\"accruedInterest\": 4801,\"rateMultiplier\": 1336,\"rateSpread\": 64,\"feeRate\": 89,\"nextResetRate\": 146096,\"penaltyRate\": 50,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 161,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86401,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 120,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 1461,\"lifeFloor\": 901,\"periodCap\": 109,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"32,201,221,250,197,34,3,24,68,202,13,168,187,86,255,193,122,139,103,16,205,201,209,153,180,208,217,95,1,48,236,232\"),stringToBytes32(\"10,16,219,143,90,178,121,219,108,164,188,57,221,26,16,205,215,47,88,11,59,59,166,211,139,243,203,209,118,252,79,93\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,146096,2440589,6,2014223716,119,367,1970,100,97,367,86400,2014223715,121,2446,4801,1336,64,89,146096,50,900,161,Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(86401,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1970,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(120,Definitions.P.Q,Definitions.S.SHORT,false),1461,901,109,4799)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [19,181,108,241,172,8,145,204,87,206,239,186,113,38,155,243,150,156,75,149,140,134,150,167,90,66,150,126,57,175,22,126],\"legalEntityIdCounterparty\": [87,78,174,226,167,120,179,244,218,169,116,134,168,74,61,220,160,144,121,58,105,147,110,25,160,89,202,139,135,189,65,254],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 119,\"statusDate\": 51,\"initialExchangeDate\": 951,\"maturityDate\": 2014223715,\"terminationDate\": 1532892063,\"purchaseDate\": 68569,\"capitalizationEndDate\": 40,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 101,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 1970,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 1,\"feeAccrued\": 89,\"accruedInterest\": 90,\"rateMultiplier\": 4800,\"rateSpread\": 81,\"feeRate\": 1336,\"nextResetRate\": 25,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 3,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 359,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 95,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 361,\"lifeFloor\": 70,\"periodCap\": 950,\"periodFloor\": 3999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"19,181,108,241,172,8,145,204,87,206,239,186,113,38,155,243,150,156,75,149,140,134,150,167,90,66,150,126,57,175,22,126\"),stringToBytes32(\"87,78,174,226,167,120,179,244,218,169,116,134,168,74,61,220,160,144,121,58,105,147,110,25,160,89,202,139,135,189,65,254\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,119,51,951,2014223715,1532892063,68569,40,9999,101,39,1970,4900,1,89,90,4800,81,1336,25,64,1462,8,Definitions.IPS(3,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(359,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(160,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.D,Definitions.S.LONG,false),361,70,950,3999)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [175,30,17,121,228,17,236,68,56,169,217,250,246,186,251,12,147,254,225,61,132,178,201,7,196,48,237,133,115,161,87,245],\"legalEntityIdCounterparty\": [7,195,179,117,196,83,86,82,63,11,141,68,10,28,147,193,115,48,210,189,178,25,99,145,146,242,197,29,63,133,230,153],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 2446,\"statusDate\": 39,\"initialExchangeDate\": 65,\"maturityDate\": 367,\"terminationDate\": 59,\"purchaseDate\": 60,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 146098,\"cycleAnchorDateOfRateReset\": 1532892062,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 951,\"nominalInterestRate\": 4900,\"feeAccrued\": 48,\"accruedInterest\": 119,\"rateMultiplier\": 71,\"rateSpread\": 3,\"feeRate\": 151,\"nextResetRate\": 254,\"penaltyRate\": 24,\"premiumDiscountAtIED\": 950,\"priceAtPurchaseDate\": 16,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 149,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 365,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 97,\"lifeFloor\": 79,\"periodCap\": 120,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"175,30,17,121,228,17,236,68,56,169,217,250,246,186,251,12,147,254,225,61,132,178,201,7,196,48,237,133,115,161,87,245\"),stringToBytes32(\"7,195,179,117,196,83,86,82,63,11,141,68,10,28,147,193,115,48,210,189,178,25,99,145,146,242,197,29,63,133,230,153\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,2446,39,65,367,59,60,160,146098,1532892062,96,121,951,4900,48,119,71,3,151,254,24,950,16,Definitions.IPS(32074,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(59,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(365,Definitions.P.W,Definitions.S.LONG,true),97,79,120,32075)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [226,252,11,226,178,161,6,63,229,159,226,185,224,8,153,162,193,253,73,2,121,68,163,67,16,161,84,225,50,1,217,134],\"legalEntityIdCounterparty\": [77,235,139,36,255,240,68,227,168,97,240,128,30,172,48,56,41,17,57,46,126,18,21,23,63,49,212,106,92,38,10,75],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 139,\"statusDate\": 256,\"initialExchangeDate\": 2440589,\"maturityDate\": 4801,\"terminationDate\": 119,\"purchaseDate\": 0,\"capitalizationEndDate\": 140,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 59,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 900,\"nominalInterestRate\": 139,\"feeAccrued\": 59,\"accruedInterest\": 2447,\"rateMultiplier\": 15,\"rateSpread\": 1337,\"feeRate\": 367,\"nextResetRate\": 1969,\"penaltyRate\": 64,\"premiumDiscountAtIED\": -1,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 32,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 23,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892064,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 161,\"lifeFloor\": 64,\"periodCap\": 359,\"periodFloor\": 901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"226,252,11,226,178,161,6,63,229,159,226,185,224,8,153,162,193,253,73,2,121,68,163,67,16,161,84,225,50,1,217,134\"),stringToBytes32(\"77,235,139,36,255,240,68,227,168,97,240,128,30,172,48,56,41,17,57,46,126,18,21,23,63,49,212,106,92,38,10,75\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,139,256,2440589,4801,119,0,140,6,59,70,3999,900,139,59,2447,15,1337,367,1969,64,-1,13,Definitions.IPS(32,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(23,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1532892064,Definitions.P.W,Definitions.S.LONG,false),161,64,359,901)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [174,138,187,85,112,72,171,36,25,51,87,92,188,1,101,193,253,186,131,34,18,43,82,90,225,201,194,236,85,148,233,45],\"legalEntityIdCounterparty\": [119,145,210,224,181,6,108,50,103,21,41,235,3,254,125,141,136,123,125,97,56,254,31,115,93,107,153,27,45,166,229,7],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 14,\"statusDate\": 901,\"initialExchangeDate\": 4801,\"maturityDate\": 131,\"terminationDate\": 2,\"purchaseDate\": 68,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 68,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 2014223714,\"notionalPrincipal\": 59,\"nominalInterestRate\": 64,\"feeAccrued\": 32076,\"accruedInterest\": 59,\"rateMultiplier\": 91,\"rateSpread\": 4,\"feeRate\": 13,\"nextResetRate\": 161,\"penaltyRate\": 899,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2446,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2447,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 400,\"lifeFloor\": 40,\"periodCap\": 161,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"174,138,187,85,112,72,171,36,25,51,87,92,188,1,101,193,253,186,131,34,18,43,82,90,225,201,194,236,85,148,233,45\"),stringToBytes32(\"119,145,210,224,181,6,108,50,103,21,41,235,3,254,125,141,136,123,125,97,56,254,31,115,93,107,153,27,45,166,229,7\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,14,901,4801,131,2,68,27,68,140,39,2014223714,59,64,32076,59,91,4,13,161,899,899,365,Definitions.IPS(10000,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2446,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4800,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2447,Definitions.P.D,Definitions.S.SHORT,false),400,40,161,32075)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [61,111,222,24,231,242,154,17,110,120,250,111,23,139,179,117,129,138,124,71,4,176,58,221,25,180,4,17,161,134,20,57],\"legalEntityIdCounterparty\": [75,48,215,87,45,130,15,133,60,185,199,224,243,77,117,105,103,67,107,8,223,144,219,223,69,145,25,138,209,141,47,173],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 68,\"statusDate\": 360,\"initialExchangeDate\": 31,\"maturityDate\": 150,\"terminationDate\": 951,\"purchaseDate\": 361,\"capitalizationEndDate\": 949,\"cycleAnchorDateOfInterestPayment\": 2440589,\"cycleAnchorDateOfRateReset\": 23,\"cycleAnchorDateOfScalingIndex\": 32076,\"cycleAnchorDateOfFee\": 9999,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 139,\"feeAccrued\": 96,\"accruedInterest\": 13,\"rateMultiplier\": 401,\"rateSpread\": 3999,\"feeRate\": 39,\"nextResetRate\": 140,\"penaltyRate\": 4801,\"premiumDiscountAtIED\": 66,\"priceAtPurchaseDate\": 255,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32076,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 86400,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 119,\"lifeFloor\": 146096,\"periodCap\": 68569,\"periodFloor\": 29}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"61,111,222,24,231,242,154,17,110,120,250,111,23,139,179,117,129,138,124,71,4,176,58,221,25,180,4,17,161,134,20,57\"),stringToBytes32(\"75,48,215,87,45,130,15,133,60,185,199,224,243,77,117,105,103,67,107,8,223,144,219,223,69,145,25,138,209,141,47,173\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,68,360,31,150,951,361,949,2440589,23,32076,9999,86399,139,96,13,401,3999,39,140,4801,66,255,Definitions.IPS(367,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(32076,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(257,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(86400,Definitions.P.H,Definitions.S.SHORT,true),119,146096,68569,29)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [191,1,243,208,221,177,38,65,168,133,95,11,217,74,156,0,88,220,37,39,120,26,116,213,114,197,46,223,68,1,58,213],\"legalEntityIdCounterparty\": [52,26,208,129,214,126,95,130,84,37,224,247,186,100,144,194,161,44,115,75,167,156,8,186,177,49,0,248,213,111,32,186],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 361,\"statusDate\": 1461000,\"initialExchangeDate\": 2,\"maturityDate\": 99,\"terminationDate\": 41,\"purchaseDate\": 1,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 70,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 29,\"notionalPrincipal\": 119,\"nominalInterestRate\": 20,\"feeAccrued\": 25,\"accruedInterest\": 65,\"rateMultiplier\": 4800,\"rateSpread\": 364,\"feeRate\": 68568,\"nextResetRate\": 32075,\"penaltyRate\": 32074,\"premiumDiscountAtIED\": 2448,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 139,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 65,\"lifeFloor\": 68,\"periodCap\": 4901,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"191,1,243,208,221,177,38,65,168,133,95,11,217,74,156,0,88,220,37,39,120,26,116,213,114,197,46,223,68,1,58,213\"),stringToBytes32(\"52,26,208,129,214,126,95,130,84,37,224,247,186,100,144,194,161,44,115,75,167,156,8,186,177,49,0,248,213,111,32,186\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,361,1461000,2,99,41,1,0,39,70,141,29,119,20,25,65,4800,364,68568,32075,32074,2448,900,Definitions.IPS(2446,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(149,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(139,Definitions.P.Y,Definitions.S.LONG,false),65,68,4901,32075)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [5,228,31,24,4,221,145,177,58,121,116,153,9,246,197,0,251,146,36,155,194,30,57,96,119,32,12,83,219,63,166,115],\"legalEntityIdCounterparty\": [190,18,234,168,17,246,3,135,160,155,65,161,215,6,255,107,91,57,103,40,172,74,80,51,178,90,20,221,145,242,135,201],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 68,\"statusDate\": 1337,\"initialExchangeDate\": 95,\"maturityDate\": 101,\"terminationDate\": 951,\"purchaseDate\": 61,\"capitalizationEndDate\": 1461,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 96,\"nominalInterestRate\": 10000,\"feeAccrued\": 360,\"accruedInterest\": 49,\"rateMultiplier\": 11,\"rateSpread\": 2014223714,\"feeRate\": 121,\"nextResetRate\": 139,\"penaltyRate\": 70,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 101,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 59,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 1970,\"lifeFloor\": 10001,\"periodCap\": 950,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"5,228,31,24,4,221,145,177,58,121,116,153,9,246,197,0,251,146,36,155,194,30,57,96,119,32,12,83,219,63,166,115\"),stringToBytes32(\"190,18,234,168,17,246,3,135,160,155,65,161,215,6,255,107,91,57,103,40,172,74,80,51,178,90,20,221,145,242,135,201\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,68,1337,95,101,951,61,1461,18,20,28,1461,96,10000,360,49,11,2014223714,121,139,70,255,950,Definitions.IPS(4000,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2440588,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(101,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(59,Definitions.P.W,Definitions.S.SHORT,false),1970,10001,950,4800)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [94,63,47,65,179,10,218,218,36,162,84,206,114,84,178,63,93,192,180,23,118,178,114,222,89,164,134,34,35,192,29,65],\"legalEntityIdCounterparty\": [119,51,141,120,38,199,157,165,239,131,102,17,68,224,142,93,5,170,116,32,246,238,119,59,232,171,78,189,15,245,224,201],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 399,\"statusDate\": 366,\"initialExchangeDate\": 65,\"maturityDate\": 367,\"terminationDate\": 256,\"purchaseDate\": 367,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 4,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 32074,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 70,\"nominalInterestRate\": 65,\"feeAccrued\": 2440588,\"accruedInterest\": 146096,\"rateMultiplier\": 359,\"rateSpread\": 2440589,\"feeRate\": 32076,\"nextResetRate\": 86399,\"penaltyRate\": 32075,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 149,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 109,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 149,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 80,\"periodCap\": 0,\"periodFloor\": 13}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"94,63,47,65,179,10,218,218,36,162,84,206,114,84,178,63,93,192,180,23,118,178,114,222,89,164,134,34,35,192,29,65\"),stringToBytes32(\"119,51,141,120,38,199,157,165,239,131,102,17,68,224,142,93,5,170,116,32,246,238,119,59,232,171,78,189,15,245,224,201\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,399,366,65,367,256,367,950,4,2014223715,32074,120,70,65,2440588,146096,359,2440589,32076,86399,32075,4800,149,Definitions.IPS(256,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(109,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1336,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.D,Definitions.S.LONG,true),949,80,0,13)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [158,68,13,226,191,190,227,69,244,10,188,213,226,170,204,57,130,202,6,52,172,17,16,82,82,164,133,111,100,157,248,187],\"legalEntityIdCounterparty\": [112,144,85,65,98,87,182,196,239,180,186,240,6,29,47,96,168,220,222,250,112,204,94,171,138,101,46,110,138,143,180,228],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1336,\"statusDate\": 1460,\"initialExchangeDate\": 70,\"maturityDate\": 32074,\"terminationDate\": 69,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 400,\"cycleAnchorDateOfScalingIndex\": 359,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 0,\"feeAccrued\": 100,\"accruedInterest\": 10001,\"rateMultiplier\": 1970,\"rateSpread\": 4000,\"feeRate\": 899,\"nextResetRate\": 2440587,\"penaltyRate\": 48,\"premiumDiscountAtIED\": 68569,\"priceAtPurchaseDate\": 2440587,\"cycleOfInterestPayment\": {\"i\": 4801,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 161,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 59,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 64,\"lifeFloor\": 2448,\"periodCap\": 256,\"periodFloor\": 29}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"158,68,13,226,191,190,227,69,244,10,188,213,226,170,204,57,130,202,6,52,172,17,16,82,82,164,133,111,100,157,248,187\"),stringToBytes32(\"112,144,85,65,98,87,182,196,239,180,186,240,6,29,47,96,168,220,222,250,112,204,94,171,138,101,46,110,138,143,180,228\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1336,1460,70,32074,69,0,0,5,400,359,367,1337,0,100,10001,1970,4000,899,2440587,48,68569,2440587,Definitions.IPS(4801,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(161,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(59,Definitions.P.M,Definitions.S.SHORT,false),64,2448,256,29)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [112,117,176,90,154,138,212,135,30,217,170,121,156,89,96,80,6,203,213,149,118,46,93,250,209,202,167,8,124,52,57,115],\"legalEntityIdCounterparty\": [196,217,160,245,157,224,107,13,151,70,182,181,206,155,123,232,28,141,142,92,142,159,47,60,184,79,57,53,164,155,96,42],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 101,\"statusDate\": 60,\"initialExchangeDate\": 2440589,\"maturityDate\": 24,\"terminationDate\": 2440587,\"purchaseDate\": 50,\"capitalizationEndDate\": 95,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 69,\"notionalPrincipal\": 6,\"nominalInterestRate\": 32074,\"feeAccrued\": 111,\"accruedInterest\": 15,\"rateMultiplier\": 66,\"rateSpread\": 257,\"feeRate\": 9999,\"nextResetRate\": 109,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1970,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 141,\"lifeFloor\": 366,\"periodCap\": 4800,\"periodFloor\": 366}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"112,117,176,90,154,138,212,135,30,217,170,121,156,89,96,80,6,203,213,149,118,46,93,250,209,202,167,8,124,52,57,115\"),stringToBytes32(\"196,217,160,245,157,224,107,13,151,70,182,181,206,155,123,232,28,141,142,92,142,159,47,60,184,79,57,53,164,155,96,42\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,101,60,2440589,24,2440587,50,95,68569,100,63,69,6,32074,111,15,66,257,9999,109,4799,1,86400,Definitions.IPS(68569,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4900,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(256,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1970,Definitions.P.Y,Definitions.S.LONG,true),141,366,4800,366)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [218,134,223,212,35,12,22,145,186,109,169,166,100,87,240,68,162,209,228,132,113,153,105,61,85,128,74,99,138,244,76,254],\"legalEntityIdCounterparty\": [158,207,89,16,168,28,63,255,213,43,30,151,151,29,248,169,84,210,155,163,47,153,131,226,63,73,213,218,21,87,118,67],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2,\"statusDate\": 361,\"initialExchangeDate\": 1461002,\"maturityDate\": 59,\"terminationDate\": 66,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 68,\"notionalPrincipal\": 28,\"nominalInterestRate\": 0,\"feeAccrued\": 4900,\"accruedInterest\": 10,\"rateMultiplier\": 149,\"rateSpread\": 95,\"feeRate\": 146098,\"nextResetRate\": 901,\"penaltyRate\": 68569,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223715,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 141,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 364,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 99,\"lifeFloor\": 254,\"periodCap\": 30,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"218,134,223,212,35,12,22,145,186,109,169,166,100,87,240,68,162,209,228,132,113,153,105,61,85,128,74,99,138,244,76,254\"),stringToBytes32(\"158,207,89,16,168,28,63,255,213,43,30,151,151,29,248,169,84,210,155,163,47,153,131,226,63,73,213,218,21,87,118,67\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2,361,1461002,59,66,0,0,71,0,109,68,28,0,4900,10,149,95,146098,901,68569,79,129,Definitions.IPS(367,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2014223715,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(141,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(364,Definitions.P.D,Definitions.S.LONG,true),99,254,30,71)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [207,62,229,155,252,70,11,154,99,23,28,80,32,213,74,81,55,193,143,59,217,208,168,72,185,99,83,28,174,204,214,75],\"legalEntityIdCounterparty\": [52,99,119,236,163,84,185,161,107,196,183,191,240,243,38,103,131,172,0,148,192,116,96,165,58,161,31,236,78,128,48,81],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 68,\"statusDate\": 2440589,\"initialExchangeDate\": 80,\"maturityDate\": 1969,\"terminationDate\": 360,\"purchaseDate\": 364,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 40,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 12,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 950,\"nominalInterestRate\": 91,\"feeAccrued\": 2014223715,\"accruedInterest\": 68569,\"rateMultiplier\": 20,\"rateSpread\": 1532892062,\"feeRate\": 41,\"nextResetRate\": 89,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 41,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 64,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4000,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": -1,\"periodCap\": 11,\"periodFloor\": 110}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"207,62,229,155,252,70,11,154,99,23,28,80,32,213,74,81,55,193,143,59,217,208,168,72,185,99,83,28,174,204,214,75\"),stringToBytes32(\"52,99,119,236,163,84,185,161,107,196,183,191,240,243,38,103,131,172,0,148,192,116,96,165,58,161,31,236,78,128,48,81\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,68,2440589,80,1969,360,364,130,40,4000,12,86399,950,91,2014223715,68569,20,1532892062,41,89,69,80,6,Definitions.IPS(97,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(41,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(64,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.Y,Definitions.S.SHORT,true),2446,-1,11,110)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [24,127,7,232,42,193,83,222,122,214,221,187,171,209,2,70,84,23,143,153,162,101,200,94,180,145,59,60,37,10,178,134],\"legalEntityIdCounterparty\": [10,221,159,77,175,145,228,139,134,210,40,61,132,96,225,203,218,242,200,123,76,158,60,250,132,118,191,176,129,181,42,85],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 5,\"statusDate\": 18,\"initialExchangeDate\": 41,\"maturityDate\": 3,\"terminationDate\": 1461,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 29,\"nominalInterestRate\": 0,\"feeAccrued\": 361,\"accruedInterest\": 1460,\"rateMultiplier\": 31,\"rateSpread\": 1461000,\"feeRate\": 7,\"nextResetRate\": 950,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 149,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 24,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 160,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1970,\"lifeFloor\": 368,\"periodCap\": 1970,\"periodFloor\": 9999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"24,127,7,232,42,193,83,222,122,214,221,187,171,209,2,70,84,23,143,153,162,101,200,94,180,145,59,60,37,10,178,134\"),stringToBytes32(\"10,221,159,77,175,145,228,139,134,210,40,61,132,96,225,203,218,242,200,123,76,158,60,250,132,118,191,176,129,181,42,85\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,5,18,41,3,1461,0,0,18,119,0,0,29,0,361,1460,31,1461000,7,950,95,149,9,Definitions.IPS(149,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(24,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(17,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(160,Definitions.P.H,Definitions.S.SHORT,false),1970,368,1970,9999)"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [33,119,163,114,211,12,92,80,247,204,1,69,248,94,122,132,103,101,65,85,66,103,120,138,164,27,121,152,18,38,14,124],\"legalEntityIdCounterparty\": [64,117,133,7,78,29,127,39,111,159,106,178,18,213,23,213,157,117,239,89,116,233,33,105,56,176,129,158,73,140,123,15],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 399,\"statusDate\": 141,\"initialExchangeDate\": 24,\"maturityDate\": 141,\"terminationDate\": 8,\"purchaseDate\": 32076,\"capitalizationEndDate\": 40,\"cycleAnchorDateOfInterestPayment\": 1461001,\"cycleAnchorDateOfRateReset\": 95,\"cycleAnchorDateOfScalingIndex\": 130,\"cycleAnchorDateOfFee\": 364,\"notionalPrincipal\": 1,\"nominalInterestRate\": 31,\"feeAccrued\": 12,\"accruedInterest\": 2446,\"rateMultiplier\": 39,\"rateSpread\": 141,\"feeRate\": 2447,\"nextResetRate\": 31,\"penaltyRate\": 89,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 160,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 255,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 1,\"lifeFloor\": 8,\"periodCap\": 1460,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"33,119,163,114,211,12,92,80,247,204,1,69,248,94,122,132,103,101,65,85,66,103,120,138,164,27,121,152,18,38,14,124\"),stringToBytes32(\"64,117,133,7,78,29,127,39,111,159,106,178,18,213,23,213,157,117,239,89,116,233,33,105,56,176,129,158,73,140,123,15\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,399,141,24,141,8,32076,40,1461001,95,130,364,1,31,12,2446,39,141,2447,31,89,25,63,Definitions.IPS(160,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(255,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(59,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.W,Definitions.S.LONG,false),1,8,1460,368)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [217,244,251,76,67,159,199,254,116,255,50,253,11,67,111,176,232,11,156,208,171,189,9,83,31,50,192,192,39,197,125,162],\"legalEntityIdCounterparty\": [71,122,65,143,239,108,68,53,70,29,8,11,120,35,154,34,238,18,154,186,18,12,42,4,9,212,133,107,114,250,12,31],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 949,\"statusDate\": 399,\"initialExchangeDate\": 119,\"maturityDate\": 141,\"terminationDate\": 5,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 1970,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 21,\"notionalPrincipal\": 15,\"nominalInterestRate\": 0,\"feeAccrued\": 400,\"accruedInterest\": 63,\"rateMultiplier\": 32074,\"rateSpread\": 100,\"feeRate\": 4900,\"nextResetRate\": 109,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 95,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 23,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 950,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 1969,\"lifeFloor\": 49,\"periodCap\": 31,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"217,244,251,76,67,159,199,254,116,255,50,253,11,67,111,176,232,11,156,208,171,189,9,83,31,50,192,192,39,197,125,162\"),stringToBytes32(\"71,122,65,143,239,108,68,53,70,29,8,11,120,35,154,34,238,18,154,186,18,12,42,4,9,212,133,107,114,250,12,31\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,949,399,119,141,5,0,0,97,1970,0,21,15,0,400,63,32074,100,4900,109,367,400,100,Definitions.IPS(95,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(23,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(60,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(950,Definitions.P.Q,Definitions.S.SHORT,false),1969,49,31,368)"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [253,10,226,235,178,150,140,35,158,23,162,1,56,99,94,255,108,65,166,3,168,182,218,111,183,128,90,11,40,228,36,217],\"legalEntityIdCounterparty\": [191,137,84,212,76,176,142,171,135,204,36,250,151,56,249,212,95,219,53,154,15,253,88,15,110,78,224,164,8,127,255,184],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 367,\"statusDate\": 365,\"initialExchangeDate\": 900,\"maturityDate\": 899,\"terminationDate\": 146097,\"purchaseDate\": 100,\"capitalizationEndDate\": 256,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 6,\"notionalPrincipal\": 24,\"nominalInterestRate\": 66,\"feeAccrued\": 68,\"accruedInterest\": 100,\"rateMultiplier\": 1337,\"rateSpread\": 39,\"feeRate\": 12,\"nextResetRate\": 9,\"penaltyRate\": 68570,\"premiumDiscountAtIED\": 68569,\"priceAtPurchaseDate\": 61,\"cycleOfInterestPayment\": {\"i\": 2447,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461002,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 80,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 19,\"lifeFloor\": 161,\"periodCap\": 23,\"periodFloor\": 359}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"253,10,226,235,178,150,140,35,158,23,162,1,56,99,94,255,108,65,166,3,168,182,218,111,183,128,90,11,40,228,36,217\"),stringToBytes32(\"191,137,84,212,76,176,142,171,135,204,36,250,151,56,249,212,95,219,53,154,15,253,88,15,110,78,224,164,8,127,255,184\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,367,365,900,899,146097,100,256,100,1461,63,6,24,66,68,100,1337,39,12,9,68570,68569,61,Definitions.IPS(2447,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461002,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(80,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(80,Definitions.P.D,Definitions.S.LONG,false),19,161,23,359)"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [26,137,169,17,160,22,130,216,126,133,89,217,52,128,148,125,157,242,205,178,249,151,172,9,56,143,16,203,240,253,107,64],\"legalEntityIdCounterparty\": [94,45,146,61,126,163,212,154,6,71,89,45,240,10,126,203,173,30,144,57,234,123,160,109,233,80,109,129,97,27,161,231],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 131,\"statusDate\": 151,\"initialExchangeDate\": 2448,\"maturityDate\": 3999,\"terminationDate\": 366,\"purchaseDate\": 109,\"capitalizationEndDate\": 151,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 99,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 13,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 11,\"feeAccrued\": 28,\"accruedInterest\": 110,\"rateMultiplier\": 81,\"rateSpread\": 17,\"feeRate\": 2440589,\"nextResetRate\": 48,\"penaltyRate\": 364,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 365,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 64,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 68,\"lifeFloor\": 366,\"periodCap\": 949,\"periodFloor\": 68}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"26,137,169,17,160,22,130,216,126,133,89,217,52,128,148,125,157,242,205,178,249,151,172,9,56,143,16,203,240,253,107,64\"),stringToBytes32(\"94,45,146,61,126,163,212,154,6,71,89,45,240,10,126,203,173,30,144,57,234,123,160,109,233,80,109,129,97,27,161,231\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,131,151,2448,3999,366,109,151,139,99,2,13,10000,11,28,110,81,17,2440589,48,364,48,146097,Definitions.IPS(100,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(365,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(111,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.M,Definitions.S.SHORT,true),68,366,949,68)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [164,66,7,209,60,223,81,238,200,201,75,198,235,134,89,13,68,188,145,235,116,186,220,125,67,217,62,184,98,245,16,191],\"legalEntityIdCounterparty\": [180,238,172,25,96,163,97,149,144,221,74,57,243,45,251,15,143,13,15,73,214,65,191,13,214,46,116,244,39,34,244,92],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 49,\"statusDate\": 23,\"initialExchangeDate\": 20,\"maturityDate\": 361,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 50,\"cycleAnchorDateOfFee\": 27,\"notionalPrincipal\": 159,\"nominalInterestRate\": 0,\"feeAccrued\": 151,\"accruedInterest\": 7,\"rateMultiplier\": 361,\"rateSpread\": 89,\"feeRate\": 111,\"nextResetRate\": 70,\"penaltyRate\": 4000,\"premiumDiscountAtIED\": 4799,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 48,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 20,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 90,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 951,\"lifeFloor\": 140,\"periodCap\": 900,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"164,66,7,209,60,223,81,238,200,201,75,198,235,134,89,13,68,188,145,235,116,186,220,125,67,217,62,184,98,245,16,191\"),stringToBytes32(\"180,238,172,25,96,163,97,149,144,221,74,57,243,45,251,15,143,13,15,73,214,65,191,13,214,46,116,244,39,34,244,92\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,49,23,20,361,0,0,0,2440588,1971,50,27,159,0,151,7,361,89,111,70,4000,4799,63,Definitions.IPS(97,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(48,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(20,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.Q,Definitions.S.LONG,false),951,140,900,257)"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [225,48,188,222,151,207,187,63,220,160,40,171,156,170,148,206,207,60,122,117,127,163,66,97,37,44,159,158,124,190,218,84],\"legalEntityIdCounterparty\": [53,196,52,89,92,94,8,95,34,113,197,59,27,238,48,246,176,45,167,107,47,18,22,151,172,217,89,178,36,37,255,26],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461002,\"statusDate\": 159,\"initialExchangeDate\": 49,\"maturityDate\": 3,\"terminationDate\": 1971,\"purchaseDate\": 9999,\"capitalizationEndDate\": 49,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 366,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 4899,\"nominalInterestRate\": 4899,\"feeAccrued\": 4899,\"accruedInterest\": 4899,\"rateMultiplier\": 256,\"rateSpread\": 16,\"feeRate\": 17,\"nextResetRate\": 256,\"penaltyRate\": 10001,\"premiumDiscountAtIED\": 69,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 32075,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223715,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 141,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 60,\"lifeFloor\": 86399,\"periodCap\": 70,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"225,48,188,222,151,207,187,63,220,160,40,171,156,170,148,206,207,60,122,117,127,163,66,97,37,44,159,158,124,190,218,84\"),stringToBytes32(\"53,196,52,89,92,94,8,95,34,113,197,59,27,238,48,246,176,45,167,107,47,18,22,151,172,217,89,178,36,37,255,26\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461002,159,49,3,1971,9999,49,110,366,5,160,4899,4899,4899,4899,256,16,17,256,10001,69,899,Definitions.IPS(32075,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4900,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.Y,Definitions.S.SHORT,true),60,86399,70,32075)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [164,19,106,181,140,140,51,63,140,244,217,36,184,178,107,67,123,195,95,255,187,227,191,165,163,187,164,215,211,44,64,39],\"legalEntityIdCounterparty\": [100,83,131,191,140,74,182,156,247,235,41,34,62,17,149,30,153,43,249,123,119,250,157,90,7,45,131,41,48,37,27,45],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 950,\"statusDate\": 119,\"initialExchangeDate\": 360,\"maturityDate\": 366,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 18,\"cycleAnchorDateOfScalingIndex\": 29,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 120,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892064,\"accruedInterest\": 80,\"rateMultiplier\": 11,\"rateSpread\": 399,\"feeRate\": 39,\"nextResetRate\": 255,\"penaltyRate\": 30,\"premiumDiscountAtIED\": 4899,\"priceAtPurchaseDate\": 1971,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 3999,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1462,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 149,\"lifeFloor\": 149,\"periodCap\": 31,\"periodFloor\": 68570}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"164,19,106,181,140,140,51,63,140,244,217,36,184,178,107,67,123,195,95,255,187,227,191,165,163,187,164,215,211,44,64,39\"),stringToBytes32(\"100,83,131,191,140,74,182,156,247,235,41,34,62,17,149,30,153,43,249,123,119,250,157,90,7,45,131,41,48,37,27,45\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,950,119,360,366,0,0,0,31,18,29,32076,120,0,1532892064,80,11,399,39,255,30,4899,1971,Definitions.IPS(364,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(3999,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1462,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.W,Definitions.S.LONG,false),149,149,31,68570)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.626ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:38:18.650ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}