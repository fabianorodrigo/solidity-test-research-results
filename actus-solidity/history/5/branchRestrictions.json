,{
  "2020-11-10T17:43:26.222ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "160",
                "sol": "160"
              },
              {
                "js": "149",
                "sol": "149"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.224ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.224ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.225ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.225ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.225ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.227ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12",
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12,year<1970",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.241ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.244ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.244ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.245ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.245ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.246ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.247ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.250ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.250ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.251ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.251ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.252ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.252ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.252ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.252ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.253ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.254ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.254ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.254ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.255ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.255ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.256ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.256ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.256ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.257ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.257ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.258ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 92,
                "sol": 92
              },
              {
                "js": "91",
                "sol": "91"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.264ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440590,
                "sol": 2440590
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.265ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 51,
                "sol": 51
              },
              {
                "js": "50",
                "sol": "50"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.265ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440590,
                "sol": 2440590
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.266ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 86401,
                "sol": 86401
              },
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.266ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 365,
                "sol": 365
              },
              {
                "js": "364",
                "sol": "364"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.269ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.271ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "16",
                "sol": "16"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.274ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.279ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "401",
                "sol": "401"
              },
              {
                "js": 400,
                "sol": 400
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": 128,
                "sol": 128
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": 62,
                "sol": 62
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T17:43:26.283ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.283ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.283ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.284ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.286ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{\"i\": 2014223714,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223714,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{\"i\": 2440589,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2440589,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 70,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(70,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{\"i\": 900,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.289ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.289ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.290ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.294ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.297ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.301ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.302ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.306ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 14,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(14,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 121,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(121,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(901,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 96,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(96,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 4900,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4900,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 146098,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(146098,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 86401,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.311ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{\"i\": 899,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(899,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{\"i\": 17,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(17,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{\"i\": 100,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(100,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 130,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(130,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{\"i\": 28,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(28,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{\"i\": 1532892063,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{\"i\": 99,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(99,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{\"i\": 17,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(17,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{\"i\": 361,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(361,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.321ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 12,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(12,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 257,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 101,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(101,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 4801,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4801,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 90,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(90,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 121,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.323ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 19,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 16},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 7,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 151,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 130,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 49,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 4900,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 23,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 1461000,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 146098,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 365,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 41,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 23,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 30,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 0,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 7,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 3999,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 401,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 10},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 7,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 951,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 64,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 1,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 101,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 364,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 64,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 32076,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 51,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 59,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 68568,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 68569,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 10000,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 399,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 100,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 65,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 150,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 12},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 140,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 1461000,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 951,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 254,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 64,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 901,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 1338,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 2446,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 2440588,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 96,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 119,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 86400,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 32074,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 15},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 901,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 109,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 13,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 79,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 140,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 949,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 4001,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 1970,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 96,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 111,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 4800,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 69,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 2448,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 26,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 4801,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 120,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 97,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 11}]",
              "sol": "[Definitions.ProtoEvent(80,89,19,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.DV),Definitions.ProtoEvent(1969,1460,7,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(16,70,151,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(140,149,130,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(81,1461,49,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(1336,23,4900,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(101,951,23,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(900,68568,1461000,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(2446,4000,146098,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(91,60,365,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(32074,1,41,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(2446,399,23,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(140,19,30,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(8,50,0,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(2447,4,7,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(91,1532892063,3999,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(8,97,401,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD),Definitions.ProtoEvent(141,13,7,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(119,1462,951,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(70,14,64,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(65,69,1,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(23,68570,101,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(79,1338,364,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(141,4,64,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(949,3999,32076,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(1462,129,51,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(160,10000,59,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(9,6,68568,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(68568,90,68569,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(80,361,10000,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(1462,111,399,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(4799,18,100,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(140,32074,65,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(4001,140,150,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RR),Definitions.ProtoEvent(1461001,140,140,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(1338,149,1461000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(19,69,951,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(32074,364,254,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(29,100,64,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(2014223715,100,901,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(86401,40,1338,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(89,68569,2446,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(39,149,2440588,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(4,69,96,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(254,5,119,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(30,96,86400,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(161,257,32074,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD),Definitions.ProtoEvent(151,61,901,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(24,68569,109,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(18,2,13,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(4901,28,79,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(14,15,140,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(366,51,949,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(1,24,4001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(16,26,1970,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(2014223715,1969,96,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(32076,2014223715,111,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(26,2447,4800,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(86401,401,69,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(24,96,2448,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(68569,256,26,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(49,24,4801,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(109,19,120,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(100,367,97,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI)]"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.339ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 139,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 3999,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 18,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 17},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 89,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 2014223715,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 6,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 254,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 50,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 16},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 32074,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 359,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 1461001,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 10001,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 146097,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 6},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 27,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 79,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 139,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 69,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 3999,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 91,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 63,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 50,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 131,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 149,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 951,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 20},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 10001,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 367,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 3},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 86399,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 2447,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 1532892064,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 7},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 4,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 120,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 10000,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 2,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 60,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 100,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 1532892064,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 40,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 90,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 18,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 90,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 61,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 41,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 9,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 48,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 361,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 146098,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 257,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 25,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 14,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 1969,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 2},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 71,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 4901,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 950,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 8},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 16,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 13},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 71,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 1460,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 4900,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 17},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 48,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 2014223715,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 1462,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 1337,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 20},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 109,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 140,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 257,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 15}]",
              "sol": "[Definitions.ProtoEvent(25,160,139,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(28,86401,3999,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(140,68569,18,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MR),Definitions.ProtoEvent(159,149,89,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(10001,27,2014223715,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(1338,101,6,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(255,364,254,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(367,79,50,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.DV),Definitions.ProtoEvent(11,4,32074,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(1337,12,359,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(39,365,1461001,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(100,1338,10001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(17,6,146097,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PP),Definitions.ProtoEvent(16,1460,27,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(81,9999,79,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(1460,20,139,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(99,2440588,69,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(146098,80,3999,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(70,86401,91,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(950,2440589,63,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(12,65,50,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(146098,79,131,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(900,256,149,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(256,951,951,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.Child),Definitions.ProtoEvent(4799,48,10001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(1532892062,18,367,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IED),Definitions.ProtoEvent(86401,90,86399,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(39,28,2447,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(951,18,1532892064,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PY),Definitions.ProtoEvent(366,160,4,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(149,51,120,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(368,68570,10000,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(1532892062,2,2,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(119,49,60,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(139,49,100,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(949,51,1532892064,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(99,1338,40,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(1338,2448,90,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(19,1460,18,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(81,1460,90,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(6,81,61,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440589,11,41,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(2014223716,2446,9,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(119,64,48,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(131,2448,361,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(17,18,146098,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(139,1,257,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(159,146098,25,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(256,86399,14,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(65,63,1969,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.AD),Definitions.ProtoEvent(30,12,71,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(20,13,4901,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(9,25,950,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.FP),Definitions.ProtoEvent(51,63,16,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY),Definitions.ProtoEvent(40,29,71,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(4899,256,1460,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(0,4001,4900,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MR),Definitions.ProtoEvent(28,13,48,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(131,86401,2014223715,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(71,151,1462,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(32076,59,1337,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.Child),Definitions.ProtoEvent(90,71,109,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(2014223715,86401,140,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(68568,160,257,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD)]"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.356ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.358ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [95,166,139,119,68,90,147,16,24,163,252,208,41,162,150,73,76,143,25,179,254,247,39,105,151,134,60,85,237,166,183,111],\"legalEntityIdCounterparty\": [193,162,172,138,228,165,237,23,33,132,65,81,89,102,76,52,195,199,129,172,207,92,18,242,164,49,210,97,93,101,167,99],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 26,\"statusDate\": 28,\"initialExchangeDate\": 13,\"maturityDate\": 149,\"terminationDate\": 68570,\"purchaseDate\": 1,\"capitalizationEndDate\": 51,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 149,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 1532892062,\"notionalPrincipal\": 28,\"nominalInterestRate\": 366,\"feeAccrued\": 4000,\"accruedInterest\": 90,\"rateMultiplier\": 401,\"rateSpread\": 86399,\"feeRate\": 146098,\"nextResetRate\": 1461000,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 86401,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 20,\"lifeFloor\": 366,\"periodCap\": 151,\"periodFloor\": 360}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"95,166,139,119,68,90,147,16,24,163,252,208,41,162,150,73,76,143,25,179,254,247,39,105,151,134,60,85,237,166,183,111\"),stringToBytes32(\"193,162,172,138,228,165,237,23,33,132,65,81,89,102,76,52,195,199,129,172,207,92,18,242,164,49,210,97,93,101,167,99\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,26,28,13,149,68570,1,51,71,149,68570,1532892062,28,366,4000,90,401,86399,146098,1461000,80,26,50,Definitions.IPS(159,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(160,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(86401,Definitions.P.W,Definitions.S.SHORT,true),20,366,151,360)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.363ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [79,11,27,33,57,255,23,76,119,119,16,190,190,85,27,14,56,84,87,2,222,162,6,2,57,135,197,29,27,163,29,105],\"legalEntityIdCounterparty\": [26,200,237,55,98,77,115,187,184,116,239,247,27,197,74,200,80,16,213,192,85,228,15,97,84,43,142,107,129,226,162,108],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4899,\"statusDate\": 4799,\"initialExchangeDate\": 254,\"maturityDate\": 1462,\"terminationDate\": 90,\"purchaseDate\": 151,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 159,\"cycleAnchorDateOfScalingIndex\": 3,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 13,\"feeAccrued\": 14,\"accruedInterest\": 48,\"rateMultiplier\": 9,\"rateSpread\": 256,\"feeRate\": 48,\"nextResetRate\": 21,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 161,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 63,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 50,\"lifeFloor\": 368,\"periodCap\": 96,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"79,11,27,33,57,255,23,76,119,119,16,190,190,85,27,14,56,84,87,2,222,162,6,2,57,135,197,29,27,163,29,105\"),stringToBytes32(\"26,200,237,55,98,77,115,187,184,116,239,247,27,197,74,200,80,16,213,192,85,228,15,97,84,43,142,107,129,226,162,108\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4899,4799,254,1462,90,151,27,95,159,3,254,10000,13,14,48,9,256,48,21,1461,255,161,Definitions.IPS(8,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(63,Definitions.P.M,Definitions.S.LONG,false),50,368,96,129)"
            },
            {
              "js": "{\"lastEventTime\": 368,\"contractStatus\": 2,\"timeFromLastEvent\": 89,\"nominalValue\": 1461002,\"nominalAccrued\": 161,\"feeAccrued\": 2440589,\"nominalRate\": 0,\"interestScalingMultiplier\": 4800,\"nominalScalingMultiplier\": 2014223715,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(368,Definitions.ContractStatus.DQ,89,1461002,161,2440589,0,4800,2014223715,Definitions.ContractRole.GUA)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.367ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [113,251,250,75,59,1,153,166,75,187,182,30,254,159,46,14,93,229,163,182,226,101,219,232,201,177,46,185,66,2,238,57],\"legalEntityIdCounterparty\": [229,10,226,73,139,48,252,123,223,249,164,16,171,38,82,143,70,126,88,81,119,61,26,140,179,62,110,247,36,13,157,253],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2440589,\"statusDate\": 27,\"initialExchangeDate\": 90,\"maturityDate\": 99,\"terminationDate\": 2447,\"purchaseDate\": 7,\"capitalizationEndDate\": 146096,\"cycleAnchorDateOfInterestPayment\": 4899,\"cycleAnchorDateOfRateReset\": 10000,\"cycleAnchorDateOfScalingIndex\": 4799,\"cycleAnchorDateOfFee\": 129,\"notionalPrincipal\": 949,\"nominalInterestRate\": 256,\"feeAccrued\": 110,\"accruedInterest\": 86399,\"rateMultiplier\": 50,\"rateSpread\": 360,\"feeRate\": 368,\"nextResetRate\": 119,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 159,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 951,\"lifeFloor\": 4000,\"periodCap\": 254,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"113,251,250,75,59,1,153,166,75,187,182,30,254,159,46,14,93,229,163,182,226,101,219,232,201,177,46,185,66,2,238,57\"),stringToBytes32(\"229,10,226,73,139,48,252,123,223,249,164,16,171,38,82,143,70,126,88,81,119,61,26,140,179,62,110,247,36,13,157,253\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2440589,27,90,99,2447,7,146096,4899,10000,4799,129,949,256,110,86399,50,360,368,119,97,400,23,Definitions.IPS(131,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(9,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(159,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,false),951,4000,254,1)"
            },
            {
              "js": "{\"lastEventTime\": 146097,\"contractStatus\": 0,\"timeFromLastEvent\": 4799,\"nominalValue\": 109,\"nominalAccrued\": 4800,\"feeAccrued\": 99,\"nominalRate\": 18,\"interestScalingMultiplier\": 130,\"nominalScalingMultiplier\": 61,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(146097,Definitions.ContractStatus.PF,4799,109,4800,99,18,130,61,Definitions.ContractRole.GUA)"
            },
            {
              "js": "{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 4899,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 11}",
              "sol": "Definitions.ProtoEvent(19,81,4899,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.378ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [3,36,192,232,72,138,3,51,220,93,237,173,211,242,69,8,109,196,182,215,153,188,228,72,195,88,105,140,31,255,209,207],\"legalEntityIdCounterparty\": [51,29,156,41,22,100,145,144,171,62,165,181,240,137,75,53,129,238,37,148,104,42,97,208,137,162,174,61,43,234,22,6],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 71,\"statusDate\": 96,\"initialExchangeDate\": 40,\"maturityDate\": 400,\"terminationDate\": 97,\"purchaseDate\": 109,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 60,\"cycleAnchorDateOfRateReset\": 950,\"cycleAnchorDateOfScalingIndex\": 100,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 149,\"feeAccrued\": 1532892063,\"accruedInterest\": 19,\"rateMultiplier\": 146098,\"rateSpread\": 146098,\"feeRate\": 66,\"nextResetRate\": 254,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146096,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 61,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 71,\"lifeFloor\": 61,\"periodCap\": 61,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"3,36,192,232,72,138,3,51,220,93,237,173,211,242,69,8,109,196,182,215,153,188,228,72,195,88,105,140,31,255,209,207\"),stringToBytes32(\"51,29,156,41,22,100,145,144,171,62,165,181,240,137,75,53,129,238,37,148,104,42,97,208,137,162,174,61,43,234,22,6\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,71,96,40,400,97,109,86401,60,950,100,111,10000,149,1532892063,19,146098,146098,66,254,1461,401,68568,Definitions.IPS(146098,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(146096,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(41,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(61,Definitions.P.W,Definitions.S.LONG,false),71,61,61,14)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [243,183,39,113,47,91,120,160,16,155,231,30,124,209,30,111,232,34,36,120,220,82,221,143,231,210,107,38,132,207,76,226],\"legalEntityIdCounterparty\": [224,194,133,145,132,208,5,203,24,214,137,103,85,132,113,28,178,206,78,109,30,240,237,81,45,174,201,1,199,89,164,223],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 96,\"statusDate\": 360,\"initialExchangeDate\": 60,\"maturityDate\": 68568,\"terminationDate\": 111,\"purchaseDate\": 70,\"capitalizationEndDate\": 111,\"cycleAnchorDateOfInterestPayment\": 63,\"cycleAnchorDateOfRateReset\": 50,\"cycleAnchorDateOfScalingIndex\": 15,\"cycleAnchorDateOfFee\": 10001,\"notionalPrincipal\": 68568,\"nominalInterestRate\": 8,\"feeAccrued\": 31,\"accruedInterest\": 150,\"rateMultiplier\": 2447,\"rateSpread\": 100,\"feeRate\": 146097,\"nextResetRate\": 1336,\"penaltyRate\": 1971,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 950,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 131,\"lifeFloor\": 364,\"periodCap\": 9999,\"periodFloor\": 1970}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"243,183,39,113,47,91,120,160,16,155,231,30,124,209,30,111,232,34,36,120,220,82,221,143,231,210,107,38,132,207,76,226\"),stringToBytes32(\"224,194,133,145,132,208,5,203,24,214,137,103,85,132,113,28,178,206,78,109,30,240,237,81,45,174,201,1,199,89,164,223\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,96,360,60,68568,111,70,111,63,50,15,10001,68568,8,31,150,2447,100,146097,1336,1971,86400,59,Definitions.IPS(11,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(150,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(950,Definitions.P.H,Definitions.S.SHORT,true),131,364,9999,1970)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [199,235,69,255,162,130,39,237,27,206,116,65,151,100,100,238,213,252,20,151,157,113,55,27,212,225,88,190,107,195,91,25],\"legalEntityIdCounterparty\": [112,156,84,62,167,157,161,135,222,255,6,0,181,153,29,200,222,200,211,190,64,139,152,54,232,123,204,59,35,202,50,228],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 151,\"statusDate\": 59,\"initialExchangeDate\": 146096,\"maturityDate\": 2447,\"terminationDate\": 68570,\"purchaseDate\": 9999,\"capitalizationEndDate\": 1971,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 60,\"notionalPrincipal\": 17,\"nominalInterestRate\": 27,\"feeAccrued\": 257,\"accruedInterest\": 1971,\"rateMultiplier\": 1971,\"rateSpread\": 109,\"feeRate\": 86399,\"nextResetRate\": 364,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 6,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 146096,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 149,\"lifeFloor\": 1532892064,\"periodCap\": 24,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"199,235,69,255,162,130,39,237,27,206,116,65,151,100,100,238,213,252,20,151,157,113,55,27,212,225,88,190,107,195,91,25\"),stringToBytes32(\"112,156,84,62,167,157,161,135,222,255,6,0,181,153,29,200,222,200,211,190,64,139,152,54,232,123,204,59,35,202,50,228\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,151,59,146096,2447,68570,9999,1971,360,100,1336,60,17,27,257,1971,1971,109,86399,364,68568,51,13,Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(150,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.Y,Definitions.S.SHORT,true),149,1532892064,24,900)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [55,218,99,88,207,38,237,56,251,140,186,162,202,121,42,99,97,13,98,227,163,79,229,103,221,139,216,233,238,54,161,7],\"legalEntityIdCounterparty\": [135,189,12,223,210,61,149,191,127,68,60,160,130,123,116,176,213,119,154,68,93,116,104,248,244,134,110,233,216,165,249,198],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 159,\"statusDate\": 4801,\"initialExchangeDate\": 32074,\"maturityDate\": 1532892063,\"terminationDate\": 2448,\"purchaseDate\": 101,\"capitalizationEndDate\": 11,\"cycleAnchorDateOfInterestPayment\": 59,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 4900,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 32,\"feeAccrued\": 366,\"accruedInterest\": 151,\"rateMultiplier\": 86401,\"rateSpread\": 23,\"feeRate\": 40,\"nextResetRate\": 130,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 110,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 49,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 254,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 151,\"lifeFloor\": 6,\"periodCap\": 86401,\"periodFloor\": 130}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"55,218,99,88,207,38,237,56,251,140,186,162,202,121,42,99,97,13,98,227,163,79,229,103,221,139,216,233,238,54,161,7\"),stringToBytes32(\"135,189,12,223,210,61,149,191,127,68,60,160,130,123,116,176,213,119,154,68,93,116,104,248,244,134,110,233,216,165,249,198\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,159,4801,32074,1532892063,2448,101,11,59,11,4,4900,68570,32,366,151,86401,23,40,130,1532892064,400,950,Definitions.IPS(110,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(49,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.W,Definitions.S.SHORT,true),151,6,86401,130)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [3,61,67,25,139,207,65,97,226,226,114,90,216,193,250,243,102,198,92,29,160,38,113,13,165,136,99,246,192,109,142,204],\"legalEntityIdCounterparty\": [105,242,197,248,242,246,221,81,144,61,235,98,67,213,133,5,242,6,181,7,66,11,103,19,181,90,151,172,10,8,26,64],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 368,\"statusDate\": 51,\"initialExchangeDate\": 2447,\"maturityDate\": 32,\"terminationDate\": 80,\"purchaseDate\": 0,\"capitalizationEndDate\": 150,\"cycleAnchorDateOfInterestPayment\": 4901,\"cycleAnchorDateOfRateReset\": 80,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 1,\"nominalInterestRate\": 1462,\"feeAccrued\": 8,\"accruedInterest\": 9999,\"rateMultiplier\": 30,\"rateSpread\": 119,\"feeRate\": 4899,\"nextResetRate\": 9,\"penaltyRate\": 149,\"premiumDiscountAtIED\": 1971,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 29,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 360,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 18,\"lifeFloor\": 161,\"periodCap\": 81,\"periodFloor\": 32}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"3,61,67,25,139,207,65,97,226,226,114,90,216,193,250,243,102,198,92,29,160,38,113,13,165,136,99,246,192,109,142,204\"),stringToBytes32(\"105,242,197,248,242,246,221,81,144,61,235,98,67,213,133,5,242,6,181,7,66,11,103,19,181,90,151,172,10,8,26,64\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,368,51,2447,32,80,0,150,4901,80,70,2,1,1462,8,9999,30,119,4899,9,149,1971,97,Definitions.IPS(159,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(9999,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(29,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(360,Definitions.P.D,Definitions.S.SHORT,true),18,161,81,32)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [203,20,175,226,57,141,14,48,234,19,183,85,38,150,226,235,109,204,167,225,157,59,215,207,76,33,33,164,229,236,45,125],\"legalEntityIdCounterparty\": [187,185,135,98,218,228,113,143,4,69,131,69,16,169,72,201,23,177,154,94,208,100,204,223,15,240,199,159,10,90,158,1],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 79,\"statusDate\": 360,\"initialExchangeDate\": 1970,\"maturityDate\": 401,\"terminationDate\": 9,\"purchaseDate\": 366,\"capitalizationEndDate\": 364,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 3,\"cycleAnchorDateOfScalingIndex\": 68569,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 1337,\"feeAccrued\": 86401,\"accruedInterest\": 361,\"rateMultiplier\": 61,\"rateSpread\": 1336,\"feeRate\": 59,\"nextResetRate\": 10000,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 0,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 146097,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1971,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 24,\"lifeFloor\": 900,\"periodCap\": 0,\"periodFloor\": 41}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"203,20,175,226,57,141,14,48,234,19,183,85,38,150,226,235,109,204,167,225,157,59,215,207,76,33,33,164,229,236,45,125\"),stringToBytes32(\"187,185,135,98,218,228,113,143,4,69,131,69,16,169,72,201,23,177,154,94,208,100,204,223,15,240,199,159,10,90,158,1\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,79,360,1970,401,9,366,364,11,3,68569,111,4900,1337,86401,361,61,1336,59,10000,4799,4800,0,Definitions.IPS(30,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(146097,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(901,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1971,Definitions.P.W,Definitions.S.SHORT,true),24,900,0,41)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [69,184,68,119,246,230,5,141,99,27,135,44,6,107,88,115,101,177,231,33,223,170,254,184,86,98,157,149,97,59,143,134],\"legalEntityIdCounterparty\": [185,26,102,66,172,129,183,74,237,9,168,39,96,37,197,237,92,133,16,138,123,94,77,129,107,165,84,37,15,66,226,126],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1970,\"statusDate\": 2440588,\"initialExchangeDate\": 131,\"maturityDate\": 59,\"terminationDate\": 41,\"purchaseDate\": 950,\"capitalizationEndDate\": 86399,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 101,\"nominalInterestRate\": 1461001,\"feeAccrued\": 23,\"accruedInterest\": 367,\"rateMultiplier\": 86400,\"rateSpread\": 31,\"feeRate\": 32075,\"nextResetRate\": 951,\"penaltyRate\": 61,\"premiumDiscountAtIED\": 6,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 96,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 254,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 15,\"lifeFloor\": 359,\"periodCap\": 146098,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"69,184,68,119,246,230,5,141,99,27,135,44,6,107,88,115,101,177,231,33,223,170,254,184,86,98,157,149,97,59,143,134\"),stringToBytes32(\"185,26,102,66,172,129,183,74,237,9,168,39,96,37,197,237,92,133,16,138,123,94,77,129,107,165,84,37,15,66,226,126\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1970,2440588,131,59,41,950,86399,65,1971,364,68569,101,1461001,23,367,86400,31,32075,951,61,6,120,Definitions.IPS(4799,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(254,Definitions.P.D,Definitions.S.LONG,false),15,359,146098,81)"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [18,97,253,115,89,75,94,177,255,35,119,224,115,19,95,169,214,252,89,25,113,222,118,227,158,124,241,25,205,118,19,5],\"legalEntityIdCounterparty\": [121,113,250,188,14,27,223,194,75,222,108,158,16,32,107,157,140,200,93,138,130,191,74,127,36,241,153,134,238,228,36,12],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 64,\"statusDate\": 361,\"initialExchangeDate\": 5,\"maturityDate\": 4,\"terminationDate\": 32,\"purchaseDate\": 1338,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 81,\"cycleAnchorDateOfRateReset\": 99,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 1532892062,\"notionalPrincipal\": 96,\"nominalInterestRate\": 129,\"feeAccrued\": 2440588,\"accruedInterest\": 2446,\"rateMultiplier\": 63,\"rateSpread\": 4900,\"feeRate\": 61,\"nextResetRate\": 7,\"penaltyRate\": 86399,\"premiumDiscountAtIED\": 10,\"priceAtPurchaseDate\": 951,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68568,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 365,\"lifeFloor\": 80,\"periodCap\": 10,\"periodFloor\": 66}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"18,97,253,115,89,75,94,177,255,35,119,224,115,19,95,169,214,252,89,25,113,222,118,227,158,124,241,25,205,118,19,5\"),stringToBytes32(\"121,113,250,188,14,27,223,194,75,222,108,158,16,32,107,157,140,200,93,138,130,191,74,127,36,241,153,134,238,228,36,12\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,64,361,5,4,32,1338,0,81,99,39,1532892062,96,129,2440588,2446,63,4900,61,7,86399,10,951,Definitions.IPS(4900,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(68570,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1336,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.D,Definitions.S.LONG,false),365,80,10,66)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [220,107,178,2,123,248,197,138,22,159,205,140,124,123,244,5,234,70,212,89,158,200,183,137,108,85,29,47,124,214,156,1],\"legalEntityIdCounterparty\": [190,230,239,59,190,177,63,103,132,93,223,28,216,199,40,248,27,96,73,237,156,216,159,124,170,154,216,246,127,182,73,177],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 40,\"statusDate\": 27,\"initialExchangeDate\": 31,\"maturityDate\": 149,\"terminationDate\": 100,\"purchaseDate\": 81,\"capitalizationEndDate\": 69,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 255,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 15,\"nominalInterestRate\": 367,\"feeAccrued\": 359,\"accruedInterest\": 129,\"rateMultiplier\": 130,\"rateSpread\": 1532892064,\"feeRate\": 1971,\"nextResetRate\": 21,\"penaltyRate\": 27,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 2014223716,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 23,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 1969,\"lifeFloor\": 4,\"periodCap\": 59,\"periodFloor\": 1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"220,107,178,2,123,248,197,138,22,159,205,140,124,123,244,5,234,70,212,89,158,200,183,137,108,85,29,47,124,214,156,1\"),stringToBytes32(\"190,230,239,59,190,177,63,103,132,93,223,28,216,199,40,248,27,96,73,237,156,216,159,124,170,154,216,246,127,182,73,177\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,40,27,31,149,100,81,69,96,151,255,2,15,367,359,129,130,1532892064,1971,21,27,89,6,Definitions.IPS(2014223716,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1970,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(23,Definitions.P.Y,Definitions.S.SHORT,false),1969,4,59,1)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [78,212,151,164,5,232,238,77,76,186,119,201,224,51,12,26,16,192,52,156,104,202,153,120,149,109,201,113,88,138,15,38],\"legalEntityIdCounterparty\": [13,128,99,228,159,251,105,40,16,10,180,17,220,167,191,211,126,197,146,162,176,9,191,153,97,166,0,57,221,60,96,220],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 141,\"statusDate\": 151,\"initialExchangeDate\": 401,\"maturityDate\": 2014223716,\"terminationDate\": 159,\"purchaseDate\": 86401,\"capitalizationEndDate\": 41,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 15,\"notionalPrincipal\": 150,\"nominalInterestRate\": 901,\"feeAccrued\": 6,\"accruedInterest\": 9,\"rateMultiplier\": 66,\"rateSpread\": 131,\"feeRate\": 32,\"nextResetRate\": 255,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 15,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461001,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 899,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 28,\"lifeFloor\": 0,\"periodCap\": 146097,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"78,212,151,164,5,232,238,77,76,186,119,201,224,51,12,26,16,192,52,156,104,202,153,120,149,109,201,113,88,138,15,38\"),stringToBytes32(\"13,128,99,228,159,251,105,40,16,10,180,17,220,167,191,211,126,197,146,162,176,9,191,153,97,166,0,57,221,60,96,220\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,141,151,401,2014223716,159,86401,41,256,32074,71,15,150,901,6,9,66,131,32,255,69,15,100,Definitions.IPS(9999,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1461001,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.W,Definitions.S.SHORT,true),28,0,146097,0)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [130,156,198,167,60,117,96,8,189,32,77,34,54,32,15,246,213,43,88,109,226,28,48,185,232,110,159,241,228,116,106,124],\"legalEntityIdCounterparty\": [221,169,189,215,40,57,95,73,200,122,231,34,217,133,31,194,71,21,167,233,124,253,145,82,188,28,204,12,140,246,163,214],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4,\"statusDate\": 61,\"initialExchangeDate\": 2014223715,\"maturityDate\": 146096,\"terminationDate\": 13,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 18,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892063,\"accruedInterest\": 96,\"rateMultiplier\": 366,\"rateSpread\": 13,\"feeRate\": 2440588,\"nextResetRate\": 97,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 900,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 2447,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 140,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 9999,\"lifeFloor\": 27,\"periodCap\": 31,\"periodFloor\": 79}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"130,156,198,167,60,117,96,8,189,32,77,34,54,32,15,246,213,43,88,109,226,28,48,185,232,110,159,241,228,116,106,124\"),stringToBytes32(\"221,169,189,215,40,57,95,73,200,122,231,34,217,133,31,194,71,21,167,233,124,253,145,82,188,28,204,12,140,246,163,214\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4,61,2014223715,146096,13,0,0,95,0,1461002,65,18,0,1532892063,96,366,13,2440588,97,146098,900,49,Definitions.IPS(2447,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(401,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(901,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(140,Definitions.P.Y,Definitions.S.LONG,false),9999,27,31,79)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [147,124,60,216,56,8,162,212,220,227,175,130,55,139,58,255,136,35,151,102,163,37,172,166,34,85,234,131,128,18,156,187],\"legalEntityIdCounterparty\": [252,50,236,153,111,60,80,107,149,51,14,198,66,152,20,65,181,211,134,83,122,26,6,243,24,215,27,187,17,186,83,140],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1532892063,\"statusDate\": 901,\"initialExchangeDate\": 401,\"maturityDate\": 30,\"terminationDate\": 10001,\"purchaseDate\": 364,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 12,\"notionalPrincipal\": 96,\"nominalInterestRate\": 1,\"feeAccrued\": 99,\"accruedInterest\": 40,\"rateMultiplier\": 80,\"rateSpread\": 161,\"feeRate\": 1970,\"nextResetRate\": 6,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 366,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 141,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 96,\"lifeFloor\": 129,\"periodCap\": 2448,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"147,124,60,216,56,8,162,212,220,227,175,130,55,139,58,255,136,35,151,102,163,37,172,166,34,85,234,131,128,18,156,187\"),stringToBytes32(\"252,50,236,153,111,60,80,107,149,51,14,198,66,152,20,65,181,211,134,83,122,26,6,243,24,215,27,187,17,186,83,140\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1532892063,901,401,30,10001,364,19,100,96,1,12,96,1,99,40,80,161,1970,6,97,5,15,Definitions.IPS(97,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(366,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(27,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(141,Definitions.P.M,Definitions.S.LONG,false),96,129,2448,159)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [231,130,201,240,141,44,57,239,189,111,192,3,195,172,236,102,210,164,5,81,204,20,75,218,7,150,95,82,150,32,161,219],\"legalEntityIdCounterparty\": [120,169,99,39,171,12,107,108,146,126,186,0,92,200,183,238,242,91,141,86,99,198,208,65,0,162,103,100,214,160,115,247],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2446,\"statusDate\": 15,\"initialExchangeDate\": 60,\"maturityDate\": 21,\"terminationDate\": 1532892063,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 1532892062,\"notionalPrincipal\": 26,\"nominalInterestRate\": 0,\"feeAccrued\": 146096,\"accruedInterest\": 129,\"rateMultiplier\": 17,\"rateSpread\": 131,\"feeRate\": 64,\"nextResetRate\": 4,\"penaltyRate\": 400,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 109,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4000,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 4900,\"lifeFloor\": 3,\"periodCap\": 28,\"periodFloor\": 899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"231,130,201,240,141,44,57,239,189,111,192,3,195,172,236,102,210,164,5,81,204,20,75,218,7,150,95,82,150,32,161,219\"),stringToBytes32(\"120,169,99,39,171,12,107,108,146,126,186,0,92,200,183,238,242,91,141,86,99,198,208,65,0,162,103,100,214,160,115,247\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2446,15,60,21,1532892063,0,0,109,0,2448,1532892062,26,0,146096,129,17,131,64,4,400,9,96,Definitions.IPS(59,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(109,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.W,Definitions.S.LONG,true),4900,3,28,899)"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [59,149,16,33,165,237,191,24,247,141,53,28,217,10,196,0,130,137,130,135,118,187,183,190,214,18,223,221,79,249,101,33],\"legalEntityIdCounterparty\": [131,223,132,121,97,49,161,84,184,8,73,137,110,155,246,106,191,17,62,91,166,60,84,116,199,120,86,32,224,153,11,119],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 81,\"statusDate\": 121,\"initialExchangeDate\": 65,\"maturityDate\": 160,\"terminationDate\": 368,\"purchaseDate\": 32075,\"capitalizationEndDate\": 121,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 69,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 950,\"nominalInterestRate\": 4799,\"feeAccrued\": 29,\"accruedInterest\": 1461002,\"rateMultiplier\": 146097,\"rateSpread\": 360,\"feeRate\": 24,\"nextResetRate\": 2448,\"penaltyRate\": 32075,\"premiumDiscountAtIED\": 95,\"priceAtPurchaseDate\": 2447,\"cycleOfInterestPayment\": {\"i\": 2448,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 61,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 40,\"lifeFloor\": 4801,\"periodCap\": 1,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"59,149,16,33,165,237,191,24,247,141,53,28,217,10,196,0,130,137,130,135,118,187,183,190,214,18,223,221,79,249,101,33\"),stringToBytes32(\"131,223,132,121,97,49,161,84,184,8,73,137,110,155,246,106,191,17,62,91,166,60,84,116,199,120,86,32,224,153,11,119\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,81,121,65,160,368,32075,121,90,69,254,90,950,4799,29,1461002,146097,360,24,2448,32075,95,2447,Definitions.IPS(2448,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(68568,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1336,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(61,Definitions.P.Y,Definitions.S.LONG,false),40,4801,1,2440589)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [24,202,120,159,225,55,40,15,166,156,224,39,159,54,101,47,233,194,233,4,203,54,12,56,145,197,226,30,154,192,169,189],\"legalEntityIdCounterparty\": [238,70,23,167,58,196,120,241,255,150,18,194,22,35,214,191,111,237,69,87,199,149,64,68,119,225,149,5,146,194,178,165],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4800,\"statusDate\": 97,\"initialExchangeDate\": 5,\"maturityDate\": 50,\"terminationDate\": 19,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 1461000,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 96,\"nominalInterestRate\": 0,\"feeAccrued\": 901,\"accruedInterest\": 360,\"rateMultiplier\": 950,\"rateSpread\": 400,\"feeRate\": 24,\"nextResetRate\": 91,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 1970,\"cycleOfInterestPayment\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 399,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 1461002,\"periodCap\": 151,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"24,202,120,159,225,55,40,15,166,156,224,39,159,54,101,47,233,194,233,4,203,54,12,56,145,197,226,30,154,192,169,189\"),stringToBytes32(\"238,70,23,167,58,196,120,241,255,150,18,194,22,35,214,191,111,237,69,87,199,149,64,68,119,225,149,5,146,194,178,165\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4800,97,5,50,19,0,0,2448,1461000,131,0,96,0,901,360,950,400,24,91,2014223716,24,1970,Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,false),256,1461002,151,71)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [254,115,88,37,188,39,16,44,57,178,32,247,14,23,238,167,30,248,79,107,196,30,5,193,15,100,203,105,90,106,170,94],\"legalEntityIdCounterparty\": [138,155,185,15,34,175,205,62,117,237,15,186,213,50,200,124,166,52,168,237,107,188,82,85,31,221,210,51,255,16,37,207],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 70,\"statusDate\": 61,\"initialExchangeDate\": 18,\"maturityDate\": 146098,\"terminationDate\": 4001,\"purchaseDate\": 68570,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 48,\"nominalInterestRate\": 2014223716,\"feeAccrued\": 3,\"accruedInterest\": 1461000,\"rateMultiplier\": 2440589,\"rateSpread\": 32075,\"feeRate\": 1532892064,\"nextResetRate\": 4000,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 130,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 89,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 66,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 18,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 4800,\"lifeFloor\": 1462,\"periodCap\": 86399,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"254,115,88,37,188,39,16,44,57,178,32,247,14,23,238,167,30,248,79,107,196,30,5,193,15,100,203,105,90,106,170,94\"),stringToBytes32(\"138,155,185,15,34,175,205,62,117,237,15,186,213,50,200,124,166,52,168,237,107,188,82,85,31,221,210,51,255,16,37,207\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,70,61,18,146098,4001,68570,16,1460,4800,71,7,48,2014223716,3,1461000,2440589,32075,1532892064,4000,9,130,51,Definitions.IPS(89,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(66,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(18,Definitions.P.Q,Definitions.S.SHORT,true),4800,1462,86399,4800)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [208,170,222,83,1,168,94,30,100,35,132,192,154,7,11,240,31,236,23,62,68,126,4,204,206,247,4,62,63,249,175,125],\"legalEntityIdCounterparty\": [24,229,121,243,146,62,81,47,248,5,109,46,194,24,217,222,30,92,242,94,100,164,149,222,149,211,18,10,126,30,141,233],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 40,\"statusDate\": 140,\"initialExchangeDate\": 146098,\"maturityDate\": 950,\"terminationDate\": 86400,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 1336,\"nominalInterestRate\": 0,\"feeAccrued\": 111,\"accruedInterest\": 900,\"rateMultiplier\": 4900,\"rateSpread\": 86400,\"feeRate\": 31,\"nextResetRate\": 59,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 400,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 80,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 26,\"lifeFloor\": 97,\"periodCap\": 2440588,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"208,170,222,83,1,168,94,30,100,35,132,192,154,7,11,240,31,236,23,62,68,126,4,204,206,247,4,62,63,249,175,125\"),stringToBytes32(\"24,229,121,243,146,62,81,47,248,5,109,46,194,24,217,222,30,92,242,94,100,164,149,222,149,211,18,10,126,30,141,233\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,40,140,146098,950,86400,0,0,360,17,0,949,1336,0,111,900,4900,86400,31,59,12,899,25,Definitions.IPS(90,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(400,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(80,Definitions.P.D,Definitions.S.SHORT,false),26,97,2440588,399)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [164,104,230,60,13,88,111,95,85,132,226,137,158,255,14,220,93,116,114,217,232,31,240,54,242,241,227,21,80,8,151,192],\"legalEntityIdCounterparty\": [131,172,68,203,65,159,21,219,180,150,113,103,240,163,193,254,48,181,43,177,69,33,180,222,198,130,112,212,87,135,199,22],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 86401,\"statusDate\": 149,\"initialExchangeDate\": 13,\"maturityDate\": 159,\"terminationDate\": 111,\"purchaseDate\": 1970,\"capitalizationEndDate\": 3,\"cycleAnchorDateOfInterestPayment\": 901,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 29,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 4799,\"feeAccrued\": 2014223715,\"accruedInterest\": 0,\"rateMultiplier\": 30,\"rateSpread\": 4901,\"feeRate\": 150,\"nextResetRate\": 399,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 65,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 28,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 25,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 71,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 1461002,\"lifeFloor\": 10000,\"periodCap\": 32074,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"164,104,230,60,13,88,111,95,85,132,226,137,158,255,14,220,93,116,114,217,232,31,240,54,242,241,227,21,80,8,151,192\"),stringToBytes32(\"131,172,68,203,65,159,21,219,180,150,113,103,240,163,193,254,48,181,43,177,69,33,180,222,198,130,112,212,87,135,199,22\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,86401,149,13,159,111,1970,3,901,0,159,29,3999,4799,2014223715,0,30,4901,150,399,49,65,139,Definitions.IPS(86399,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(28,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(25,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(71,Definitions.P.W,Definitions.S.LONG,false),1461002,10000,32074,86399)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [91,51,163,108,249,201,16,187,166,238,152,79,191,102,90,107,171,191,148,40,217,125,118,230,33,54,143,84,140,105,199,80],\"legalEntityIdCounterparty\": [152,139,178,30,77,117,151,49,93,164,126,122,103,207,218,208,204,221,36,40,112,250,109,78,47,159,33,161,141,41,45,179],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 69,\"statusDate\": 29,\"initialExchangeDate\": 28,\"maturityDate\": 2440589,\"terminationDate\": 159,\"purchaseDate\": 2448,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 64,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 66,\"feeAccrued\": 91,\"accruedInterest\": 14,\"rateMultiplier\": 399,\"rateSpread\": 2014223716,\"feeRate\": 139,\"nextResetRate\": 159,\"penaltyRate\": 10,\"premiumDiscountAtIED\": 61,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 32075,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 49,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 16,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 100,\"periodCap\": 1461000,\"periodFloor\": 70}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"91,51,163,108,249,201,16,187,166,238,152,79,191,102,90,107,171,191,148,40,217,125,118,230,33,54,143,84,140,105,199,80\"),stringToBytes32(\"152,139,178,30,77,117,151,49,93,164,126,122,103,207,218,208,204,221,36,40,112,250,109,78,47,159,33,161,141,41,45,179\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,69,29,28,2440589,159,2448,10000,10001,64,131,254,86399,66,91,14,399,2014223716,139,159,10,61,1461002,Definitions.IPS(32075,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(49,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(16,Definitions.P.W,Definitions.S.LONG,true),1461002,100,1461000,70)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [50,114,127,229,33,211,175,235,245,126,152,136,27,41,139,239,133,59,66,144,233,231,188,238,255,43,35,201,200,106,65,225],\"legalEntityIdCounterparty\": [212,162,93,122,98,141,53,78,160,242,131,54,41,110,53,17,202,188,50,184,208,11,204,188,246,123,238,50,21,216,138,70],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 97,\"statusDate\": 1462,\"initialExchangeDate\": 68568,\"maturityDate\": 26,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 60,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 2447,\"nominalInterestRate\": 0,\"feeAccrued\": 31,\"accruedInterest\": 7,\"rateMultiplier\": 141,\"rateSpread\": 31,\"feeRate\": 32076,\"nextResetRate\": 28,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32075,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 25,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 6,\"lifeFloor\": 1970,\"periodCap\": 146096,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"50,114,127,229,33,211,175,235,245,126,152,136,27,41,139,239,133,59,66,144,233,231,188,238,255,43,35,201,200,106,65,225\"),stringToBytes32(\"212,162,93,122,98,141,53,78,160,242,131,54,41,110,53,17,202,188,50,184,208,11,204,188,246,123,238,50,21,216,138,70\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,97,1462,68568,26,0,0,0,11,60,8,2,2447,0,31,7,141,31,32076,28,119,86401,4800,Definitions.IPS(146098,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(32075,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(25,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.D,Definitions.S.LONG,false),6,1970,146096,86401)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [56,218,148,47,184,148,141,196,90,246,223,164,106,153,245,157,70,217,230,175,187,55,87,36,38,149,110,90,30,135,209,238],\"legalEntityIdCounterparty\": [4,79,28,65,97,224,118,247,115,128,51,231,33,131,227,196,1,196,37,180,205,112,89,197,178,13,248,194,43,190,140,36],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 18,\"initialExchangeDate\": 257,\"maturityDate\": 81,\"terminationDate\": 39,\"purchaseDate\": 101,\"capitalizationEndDate\": 70,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 63,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 119,\"feeAccrued\": 257,\"accruedInterest\": 24,\"rateMultiplier\": 65,\"rateSpread\": 61,\"feeRate\": 2,\"nextResetRate\": 160,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 2440588,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 121,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 255,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 39,\"lifeFloor\": 129,\"periodCap\": 2,\"periodFloor\": 130}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"56,218,148,47,184,148,141,196,90,246,223,164,106,153,245,157,70,217,230,175,187,55,87,36,38,149,110,90,30,135,209,238\"),stringToBytes32(\"4,79,28,65,97,224,118,247,115,128,51,231,33,131,227,196,1,196,37,180,205,112,89,197,178,13,248,194,43,190,140,36\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,68569,18,257,81,39,101,70,139,63,23,130,10000,119,257,24,65,61,2,160,69,2440588,159,Definitions.IPS(9999,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(111,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(121,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.W,Definitions.S.LONG,false),39,129,2,130)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [102,95,165,33,228,189,161,135,88,250,18,215,35,108,66,210,142,137,0,76,232,70,54,238,175,224,120,167,166,208,51,0],\"legalEntityIdCounterparty\": [153,169,27,21,206,85,181,68,166,103,95,70,102,70,139,77,95,219,50,108,173,215,8,198,109,243,37,144,205,246,155,31],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4800,\"statusDate\": 12,\"initialExchangeDate\": 401,\"maturityDate\": 9999,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 90,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 366,\"nominalInterestRate\": 0,\"feeAccrued\": 79,\"accruedInterest\": 109,\"rateMultiplier\": 96,\"rateSpread\": 2014223716,\"feeRate\": 4001,\"nextResetRate\": 9999,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 9999,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 254,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 254,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 141,\"lifeFloor\": 40,\"periodCap\": 86401,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"102,95,165,33,228,189,161,135,88,250,18,215,35,108,66,210,142,137,0,76,232,70,54,238,175,224,120,167,166,208,51,0\"),stringToBytes32(\"153,169,27,21,206,85,181,68,166,103,95,70,102,70,139,77,95,219,50,108,173,215,8,198,109,243,37,144,205,246,155,31\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4800,12,401,9999,0,0,0,27,1532892064,90,32074,366,0,79,109,96,2014223716,4001,9999,5,19,9999,Definitions.IPS(1461001,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(254,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(254,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4,Definitions.P.Y,Definitions.S.SHORT,false),141,40,86401,400)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.417ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T17:43:26.441ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}