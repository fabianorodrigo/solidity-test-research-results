,{
  "2020-11-11T15:04:19.833ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "20",
                "sol": "20"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.835ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.836ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.845ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.847ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.848ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.850ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month<=0",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.856ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.869ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.871ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.872ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.873ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.874ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.881ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.892ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.903ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.904ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.905ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.905ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.906ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.907ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.907ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.908ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.909ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.910ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.911ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.912ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.913ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.913ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.914ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.914ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.915ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.916ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.916ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892064,
                "sol": 1532892064
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.917ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 111,
                "sol": 111
              },
              {
                "js": "110",
                "sol": "110"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.918ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.919ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 160,
                "sol": 160
              },
              {
                "js": "159",
                "sol": "159"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.919ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 368,
                "sol": 368
              },
              {
                "js": "367",
                "sol": "367"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.920ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68571,
                "sol": 68571
              },
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.923ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.925ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.928ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.ContractRole.OBL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.933ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "141",
                "sol": "141"
              },
              {
                "js": 140,
                "sol": 140
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4899",
                "sol": "4899"
              },
              {
                "js": 4898,
                "sol": 4898
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "360",
                "sol": "360"
              },
              {
                "js": 359,
                "sol": 359
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "10",
                "sol": "10"
              },
              {
                "js": 9,
                "sol": 9
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": 367,
                "sol": 367
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:04:19.937ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.937ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.938ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.939ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.940ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 32075,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32075,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{\"i\": 1532892062,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{\"i\": 2440589,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2440589,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{\"i\": 4899,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4899,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.943ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.943ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.945ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.948ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.952ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.956ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.956ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.960ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 159,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 2446,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2446,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(366,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 159,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.964ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 81,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(81,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{\"i\": 100,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(100,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 29,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(29,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{\"i\": 1338,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1338,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 361,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(361,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{\"i\": 8,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(8,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 4,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{\"i\": 41,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.973ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32074,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(32074,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2446,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2446,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 32075,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32075,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 146096,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146096,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1338,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1338,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 86399,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(86399,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.975ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 0,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 2014223714,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 65,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 1460,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 2446,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 28,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 130,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 149,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 25,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 256,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 120,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 69,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2447,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 1969,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 31,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 2014223714,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 86399,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 16,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 40,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 86400,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 7},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 48,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 4900,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 10},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 71,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 41,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 4801,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 10},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 121,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 6,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 15,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 29,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 4001,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 254,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1460,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 4899,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 50,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 91,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 13},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 99,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 32074,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 2014223714,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 30,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 2440587,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 32075,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 10000,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 29,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 59,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 2448,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 12},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 9,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 254,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 9},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 90,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 4001,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 6,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 359,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 950,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 146097,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 368,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 141,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 63,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 949,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 401,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 32076,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 120,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 255,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 32076,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 0,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 60,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 18}]",
              "sol": "[Definitions.ProtoEvent(1971,4901,0,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(146096,1,2014223714,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(90,361,65,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(95,399,1460,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(3,1461,2446,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(2014223714,17,28,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(254,71,130,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(4001,160,149,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(64,49,25,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(1337,18,256,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(1462,1337,120,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(59,80,69,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(360,160,2447,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(99,1,1969,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(59,79,31,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(1462,49,2014223714,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(27,110,86399,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(1532892062,68568,16,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(50,4901,40,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(1462,121,86400,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PY),Definitions.ProtoEvent(10,51,48,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(29,1460,4900,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.TD),Definitions.ProtoEvent(950,48,71,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(24,39,41,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(360,110,4801,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.TD),Definitions.ProtoEvent(9999,6,121,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(139,49,6,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(1969,9999,15,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(95,1462,29,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(129,24,4001,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(12,257,254,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(9,2447,1460,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(20,401,4899,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(97,2448,50,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(254,2,91,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RRY),Definitions.ProtoEvent(91,29,99,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(99,13,32074,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(2,901,2014223714,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(365,4799,30,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(86400,401,2440587,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(257,2014223715,32075,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(10,1460,10000,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(24,4,29,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(5,96,59,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(68568,401,2448,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RR),Definitions.ProtoEvent(70,66,9,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(256,8,254,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PRD),Definitions.ProtoEvent(99,140,90,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(29,361,4001,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(51,101,6,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(28,151,359,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(10001,1970,950,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(361,68569,146097,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(14,1461002,368,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(16,0,141,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(2446,20,63,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(1532892063,400,949,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(86400,91,401,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(4000,60,32076,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(50,10001,120,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(10001,4001,255,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(69,68569,32076,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(368,32076,0,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(2440588,101,60,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB)]"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:19.989ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1532892063,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 28,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 68569,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1462,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 0},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 32076,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 5},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 20,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 159,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 97,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 11,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 4899,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 97,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 368,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 8,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 21,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 10000,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 10000,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 8,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1461001,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 29,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 13},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 109,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 19,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 5},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 149,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 6},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 2014223714,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 59,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 69,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 257,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 901,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 899,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 367,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 1970,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 1461001,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 86401,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 60,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 14,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 1969,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 2014223716,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 119,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 23,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 146098,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 50,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 68569,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 2440589,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 111,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 17,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 146096,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 368,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 1461002,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 1462,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 24,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 4801,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 51,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 1461,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 30,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 2440588,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 86400,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 14},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 151,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 2,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 96,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 71,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 25,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 9},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 71,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 111,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 27,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 3}]",
              "sol": "[Definitions.ProtoEvent(32075,1461002,1532892063,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(161,40,28,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(97,100,68569,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(364,97,1462,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SD),Definitions.ProtoEvent(949,8,32076,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PR),Definitions.ProtoEvent(1338,150,20,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(48,5,159,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(61,130,97,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(8,81,11,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(149,30,4899,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(5,4800,97,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(32,28,368,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(2440587,32075,8,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(39,30,21,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(95,1969,10000,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(90,49,10000,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(1971,68569,8,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(120,1461002,1461001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(4800,32074,29,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RRY),Definitions.ProtoEvent(2440587,151,109,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(4899,901,19,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PR),Definitions.ProtoEvent(5,17,149,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PP),Definitions.ProtoEvent(141,1337,2014223714,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(4000,254,59,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(146097,32075,69,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(8,949,257,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(900,4799,901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(365,130,899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(131,28,367,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(2,86399,1970,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(0,141,1461001,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(61,3,86401,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(81,161,60,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(28,399,14,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(79,21,1969,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(99,146098,2014223716,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(949,68569,119,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1337,365,23,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(99,40,146098,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1337,21,50,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(1338,150,68569,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(119,86399,2440589,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(32,257,111,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(101,4,17,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(68570,949,146096,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(2447,41,368,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(400,1461,1461002,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(1532892062,255,1462,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(1460,366,24,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(70,255,4801,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(13,1461002,51,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(68570,10000,1461,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(4001,1971,30,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(70,69,2440588,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(129,0,86400,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SC),Definitions.ProtoEvent(2448,16,151,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(29,16,2,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(39,66,96,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(2014223715,97,71,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(130,361,25,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(119,257,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PRD),Definitions.ProtoEvent(2014223716,81,71,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223716,2014223714,111,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(10000,101,27,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED)]"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.009ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.013ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [179,101,60,177,105,129,145,170,183,30,155,255,197,91,10,215,245,193,96,236,82,169,223,0,250,120,207,69,67,12,199,249],\"legalEntityIdCounterparty\": [28,21,236,110,122,193,72,140,74,238,212,150,248,142,13,22,100,98,75,225,55,92,34,218,71,251,62,157,29,201,41,184],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 40,\"statusDate\": 950,\"initialExchangeDate\": 10,\"maturityDate\": 950,\"terminationDate\": 27,\"purchaseDate\": 901,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 4000,\"cycleAnchorDateOfRateReset\": 2447,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 17,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 1970,\"feeAccrued\": 32,\"accruedInterest\": 1461002,\"rateMultiplier\": 17,\"rateSpread\": 69,\"feeRate\": 4799,\"nextResetRate\": 66,\"penaltyRate\": 28,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4001,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 70,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 25,\"lifeFloor\": 32074,\"periodCap\": 146097,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"179,101,60,177,105,129,145,170,183,30,155,255,197,91,10,215,245,193,96,236,82,169,223,0,250,120,207,69,67,12,199,249\"),stringToBytes32(\"28,21,236,110,122,193,72,140,74,238,212,150,248,142,13,22,100,98,75,225,55,92,34,218,71,251,62,157,29,201,41,184\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,40,950,10,950,27,901,61,4000,2447,4901,17,32076,1970,32,1461002,17,69,4799,66,28,899,950,Definitions.IPS(131,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(9999,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.H,Definitions.S.LONG,false),25,32074,146097,1461000)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.017ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [4,5,221,51,210,156,42,3,85,61,219,78,163,86,166,217,150,196,32,132,193,157,6,94,108,69,109,188,6,117,17,149],\"legalEntityIdCounterparty\": [2,17,225,157,92,98,27,49,17,197,14,129,189,187,137,251,9,89,134,240,116,198,177,65,197,245,130,139,81,60,227,95],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2,\"statusDate\": 11,\"initialExchangeDate\": 3,\"maturityDate\": 23,\"terminationDate\": 950,\"purchaseDate\": 32074,\"capitalizationEndDate\": 257,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 10000,\"cycleAnchorDateOfScalingIndex\": 367,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 59,\"nominalInterestRate\": 4899,\"feeAccrued\": 121,\"accruedInterest\": 4799,\"rateMultiplier\": 70,\"rateSpread\": 81,\"feeRate\": 3,\"nextResetRate\": 359,\"penaltyRate\": 68570,\"premiumDiscountAtIED\": 367,\"priceAtPurchaseDate\": 10001,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 95,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 10,\"lifeFloor\": 366,\"periodCap\": 31,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"4,5,221,51,210,156,42,3,85,61,219,78,163,86,166,217,150,196,32,132,193,157,6,94,108,69,109,188,6,117,17,149\"),stringToBytes32(\"2,17,225,157,92,98,27,49,17,197,14,129,189,187,137,251,9,89,134,240,116,198,177,65,197,245,130,139,81,60,227,95\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2,11,3,23,950,32074,257,130,10000,367,120,59,4899,121,4799,70,81,3,359,68570,367,10001,Definitions.IPS(401,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(68568,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(367,Definitions.P.M,Definitions.S.SHORT,true),10,366,31,1461000)"
            },
            {
              "js": "{\"lastEventTime\": 12,\"contractStatus\": 2,\"timeFromLastEvent\": 4800,\"nominalValue\": 10,\"nominalAccrued\": 15,\"feeAccrued\": 9,\"nominalRate\": 1461002,\"interestScalingMultiplier\": 48,\"nominalScalingMultiplier\": 16,\"contractRoleSign\": 5}",
              "sol": "Definitions.ContractState(12,Definitions.ContractStatus.DQ,4800,10,15,9,1461002,48,16,Definitions.ContractRole.PFL)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.021ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [35,198,170,220,127,170,213,234,210,113,240,38,28,167,104,2,113,251,40,42,35,146,77,108,7,74,216,132,108,23,206,160],\"legalEntityIdCounterparty\": [69,63,55,80,178,63,103,249,168,70,5,54,254,35,123,25,175,216,214,4,221,217,167,68,7,214,162,106,119,47,180,45],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 364,\"statusDate\": 15,\"initialExchangeDate\": 39,\"maturityDate\": 79,\"terminationDate\": 21,\"purchaseDate\": 256,\"capitalizationEndDate\": 140,\"cycleAnchorDateOfInterestPayment\": 1969,\"cycleAnchorDateOfRateReset\": 4800,\"cycleAnchorDateOfScalingIndex\": 2014223715,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 2446,\"nominalInterestRate\": 8,\"feeAccrued\": 4899,\"accruedInterest\": 32076,\"rateMultiplier\": 32075,\"rateSpread\": 86400,\"feeRate\": 146097,\"nextResetRate\": 2,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 8,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146098,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4901,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 86400,\"lifeFloor\": 1969,\"periodCap\": 146098,\"periodFloor\": 1971}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"35,198,170,220,127,170,213,234,210,113,240,38,28,167,104,2,113,251,40,42,35,146,77,108,7,74,216,132,108,23,206,160\"),stringToBytes32(\"69,63,55,80,178,63,103,249,168,70,5,54,254,35,123,25,175,216,214,4,221,217,167,68,7,214,162,106,119,47,180,45\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,364,15,39,79,21,256,140,1969,4800,2014223715,901,2446,8,4899,32076,32075,86400,146097,2,2446,8,68568,Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(146098,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4901,Definitions.P.D,Definitions.S.SHORT,true),86400,1969,146098,1971)"
            },
            {
              "js": "{\"lastEventTime\": 1969,\"contractStatus\": 0,\"timeFromLastEvent\": 146097,\"nominalValue\": 70,\"nominalAccrued\": 39,\"feeAccrued\": 18,\"nominalRate\": 5,\"interestScalingMultiplier\": 8,\"nominalScalingMultiplier\": 10000,\"contractRoleSign\": 8}",
              "sol": "Definitions.ContractState(1969,Definitions.ContractStatus.PF,146097,70,39,18,5,8,10000,Definitions.ContractRole.GUA)"
            },
            {
              "js": "{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 7,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 4}",
              "sol": "Definitions.ProtoEvent(18,10001,7,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.029ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [157,173,252,96,135,17,171,202,9,224,186,49,143,195,196,222,38,152,181,113,43,72,87,65,148,32,47,29,8,135,218,115],\"legalEntityIdCounterparty\": [193,212,152,59,106,197,85,127,248,236,238,66,28,253,127,242,150,209,145,64,246,195,28,105,203,75,135,137,235,154,92,116],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 111,\"statusDate\": 64,\"initialExchangeDate\": 365,\"maturityDate\": 161,\"terminationDate\": 140,\"purchaseDate\": 2448,\"capitalizationEndDate\": 5,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 139,\"cycleAnchorDateOfFee\": 14,\"notionalPrincipal\": 66,\"nominalInterestRate\": 361,\"feeAccrued\": 256,\"accruedInterest\": 99,\"rateMultiplier\": 69,\"rateSpread\": 256,\"feeRate\": 2447,\"nextResetRate\": 18,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 951,\"priceAtPurchaseDate\": 0,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 50,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 100,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 4899,\"lifeFloor\": 256,\"periodCap\": 149,\"periodFloor\": 1338}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"157,173,252,96,135,17,171,202,9,224,186,49,143,195,196,222,38,152,181,113,43,72,87,65,148,32,47,29,8,135,218,115\"),stringToBytes32(\"193,212,152,59,106,197,85,127,248,236,238,66,28,253,127,242,150,209,145,64,246,195,28,105,203,75,135,137,235,154,92,116\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,111,64,365,161,140,2448,5,13,2014223715,139,14,66,361,256,99,69,256,2447,18,20,951,0,Definitions.IPS(2440588,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(50,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(100,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,false),4899,256,149,1338)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [107,89,76,241,160,242,177,29,33,3,110,92,140,98,226,135,68,95,109,13,66,4,253,201,41,42,172,254,244,246,74,221],\"legalEntityIdCounterparty\": [50,160,17,112,35,78,89,88,246,55,183,250,1,147,243,11,207,87,14,158,135,103,148,129,186,61,25,139,155,25,213,19],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 15,\"statusDate\": 20,\"initialExchangeDate\": 1460,\"maturityDate\": 4799,\"terminationDate\": 1,\"purchaseDate\": 49,\"capitalizationEndDate\": 2448,\"cycleAnchorDateOfInterestPayment\": 1969,\"cycleAnchorDateOfRateReset\": 120,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 25,\"notionalPrincipal\": 899,\"nominalInterestRate\": 2014223714,\"feeAccrued\": 4901,\"accruedInterest\": 17,\"rateMultiplier\": 17,\"rateSpread\": 2447,\"feeRate\": 80,\"nextResetRate\": 25,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 110,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4001,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 31,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 61,\"lifeFloor\": 1461,\"periodCap\": 68568,\"periodFloor\": 10000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"107,89,76,241,160,242,177,29,33,3,110,92,140,98,226,135,68,95,109,13,66,4,253,201,41,42,172,254,244,246,74,221\"),stringToBytes32(\"50,160,17,112,35,78,89,88,246,55,183,250,1,147,243,11,207,87,14,158,135,103,148,129,186,61,25,139,155,25,213,19\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,15,20,1460,4799,1,49,2448,1969,120,48,25,899,2014223714,4901,17,17,2447,80,25,1460,1970,110,Definitions.IPS(1461001,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(111,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.H,Definitions.S.LONG,true),61,1461,68568,10000)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [57,227,249,169,229,92,184,213,55,29,17,208,197,112,196,154,184,112,217,212,112,122,141,85,31,13,207,70,39,203,132,174],\"legalEntityIdCounterparty\": [199,173,227,89,247,115,77,114,42,188,11,210,61,46,253,196,49,179,36,30,79,131,99,67,175,55,216,35,103,138,153,102],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 254,\"statusDate\": 40,\"initialExchangeDate\": 256,\"maturityDate\": 69,\"terminationDate\": 1532892063,\"purchaseDate\": 899,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 41,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 951,\"nominalInterestRate\": 21,\"feeAccrued\": 59,\"accruedInterest\": 20,\"rateMultiplier\": 120,\"rateSpread\": 0,\"feeRate\": 1969,\"nextResetRate\": 159,\"penaltyRate\": 50,\"premiumDiscountAtIED\": 0,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 63,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 39,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 25,\"lifeFloor\": 79,\"periodCap\": 86400,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"57,227,249,169,229,92,184,213,55,29,17,208,197,112,196,154,184,112,217,212,112,122,141,85,31,13,207,70,39,203,132,174\"),stringToBytes32(\"199,173,227,89,247,115,77,114,42,188,11,210,61,46,253,196,49,179,36,30,79,131,99,67,175,55,216,35,103,138,153,102\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,254,40,256,69,1532892063,899,2,90,141,41,18,951,21,59,20,120,0,1969,159,50,0,8,Definitions.IPS(361,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(63,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(39,Definitions.P.D,Definitions.S.LONG,false),25,79,86400,19)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [146,81,202,23,120,228,65,246,112,171,16,36,102,173,108,49,230,49,151,91,100,228,253,33,72,109,66,151,127,142,98,23],\"legalEntityIdCounterparty\": [218,71,242,172,221,100,252,41,32,203,192,187,153,64,60,7,163,24,128,128,58,232,2,244,51,162,144,171,127,148,78,213],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2014223714,\"statusDate\": 26,\"initialExchangeDate\": 41,\"maturityDate\": 950,\"terminationDate\": 4801,\"purchaseDate\": 1532892062,\"capitalizationEndDate\": 71,\"cycleAnchorDateOfInterestPayment\": 1338,\"cycleAnchorDateOfRateReset\": 81,\"cycleAnchorDateOfScalingIndex\": 26,\"cycleAnchorDateOfFee\": 31,\"notionalPrincipal\": 256,\"nominalInterestRate\": 365,\"feeAccrued\": 10000,\"accruedInterest\": 10001,\"rateMultiplier\": 10,\"rateSpread\": 2440588,\"feeRate\": 1461001,\"nextResetRate\": 17,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 79,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 18,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440587,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 400,\"lifeFloor\": 119,\"periodCap\": 18,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"146,81,202,23,120,228,65,246,112,171,16,36,102,173,108,49,230,49,151,91,100,228,253,33,72,109,66,151,127,142,98,23\"),stringToBytes32(\"218,71,242,172,221,100,252,41,32,203,192,187,153,64,60,7,163,24,128,128,58,232,2,244,51,162,144,171,127,148,78,213\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2014223714,26,41,950,4801,1532892062,71,1338,81,26,31,256,365,10000,10001,10,2440588,1461001,17,14,159,79,Definitions.IPS(367,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(18,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(3,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2440587,Definitions.P.Q,Definitions.S.LONG,true),400,119,18,60)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [186,143,216,139,32,188,101,2,237,112,167,105,236,14,180,116,156,136,0,154,56,248,111,125,135,212,140,129,30,95,116,130],\"legalEntityIdCounterparty\": [19,86,44,5,26,113,61,153,73,219,176,79,25,0,188,5,103,213,29,67,168,17,74,52,106,102,242,250,154,91,174,130],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 17,\"statusDate\": 65,\"initialExchangeDate\": 32,\"maturityDate\": 71,\"terminationDate\": 14,\"purchaseDate\": 0,\"capitalizationEndDate\": 1969,\"cycleAnchorDateOfInterestPayment\": 2,\"cycleAnchorDateOfRateReset\": 2440587,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 1461002,\"notionalPrincipal\": 64,\"nominalInterestRate\": 364,\"feeAccrued\": 139,\"accruedInterest\": 4,\"rateMultiplier\": 32075,\"rateSpread\": 161,\"feeRate\": 39,\"nextResetRate\": 256,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 68569,\"cycleOfInterestPayment\": {\"i\": 10,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 950,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1461000,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 360,\"lifeFloor\": 27,\"periodCap\": 21,\"periodFloor\": 1461001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"186,143,216,139,32,188,101,2,237,112,167,105,236,14,180,116,156,136,0,154,56,248,111,125,135,212,140,129,30,95,116,130\"),stringToBytes32(\"19,86,44,5,26,113,61,153,73,219,176,79,25,0,188,5,103,213,29,67,168,17,74,52,106,102,242,250,154,91,174,130\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,17,65,32,71,14,0,1969,2,2440587,63,1461002,64,364,139,4,32075,161,39,256,367,257,68569,Definitions.IPS(10,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(950,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1461000,Definitions.P.W,Definitions.S.SHORT,true),360,27,21,1461001)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [53,203,78,219,135,200,218,108,213,6,97,163,255,196,39,180,55,210,107,212,22,178,171,146,111,128,190,108,193,168,91,236],\"legalEntityIdCounterparty\": [219,253,92,232,52,79,90,22,185,228,166,122,196,219,131,238,44,130,58,153,210,35,92,239,213,63,235,176,134,231,71,70],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 65,\"statusDate\": 91,\"initialExchangeDate\": 951,\"maturityDate\": 0,\"terminationDate\": 150,\"purchaseDate\": 2448,\"capitalizationEndDate\": 17,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 367,\"notionalPrincipal\": 6,\"nominalInterestRate\": 1338,\"feeAccrued\": 1971,\"accruedInterest\": 59,\"rateMultiplier\": 64,\"rateSpread\": 151,\"feeRate\": 20,\"nextResetRate\": 254,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10001,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 86401,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 95,\"lifeFloor\": 2014223714,\"periodCap\": 109,\"periodFloor\": 101}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"53,203,78,219,135,200,218,108,213,6,97,163,255,196,39,180,55,210,107,212,22,178,171,146,111,128,190,108,193,168,91,236\"),stringToBytes32(\"219,253,92,232,52,79,90,22,185,228,166,122,196,219,131,238,44,130,58,153,210,35,92,239,213,63,235,176,134,231,71,70\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,65,91,951,0,150,2448,17,6,6,950,367,6,1338,1971,59,64,151,20,254,1532892062,51,899,Definitions.IPS(16,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(10001,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(86401,Definitions.P.D,Definitions.S.LONG,false),95,2014223714,109,101)"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [143,30,218,248,112,82,79,13,72,149,127,58,149,95,180,246,163,232,79,250,27,102,49,96,196,72,207,254,197,42,149,80],\"legalEntityIdCounterparty\": [178,66,94,24,29,201,171,64,184,165,217,160,129,122,189,253,112,215,239,215,196,193,72,46,22,154,89,116,135,21,165,226],\"dayCountConvention\": 2,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1969,\"statusDate\": 80,\"initialExchangeDate\": 1532892064,\"maturityDate\": 4900,\"terminationDate\": 10000,\"purchaseDate\": 7,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 28,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 12,\"feeAccrued\": 150,\"accruedInterest\": 150,\"rateMultiplier\": 1971,\"rateSpread\": 23,\"feeRate\": 24,\"nextResetRate\": 1970,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 28,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 31,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68569,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 399,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 4001,\"lifeFloor\": 81,\"periodCap\": 4001,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"143,30,218,248,112,82,79,13,72,149,127,58,149,95,180,246,163,232,79,250,27,102,49,96,196,72,207,254,197,42,149,80\"),stringToBytes32(\"178,66,94,24,29,201,171,64,184,165,217,160,129,122,189,253,112,215,239,215,196,193,72,46,22,154,89,116,135,21,165,226\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1969,80,1532892064,4900,10000,7,1,10001,4,28,28,1532892064,12,150,150,1971,23,24,1970,25,28,899,Definitions.IPS(31,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(68569,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1970,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.H,Definitions.S.LONG,true),4001,81,4001,51)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [93,73,128,1,168,192,225,86,104,25,220,206,14,182,147,63,126,206,54,245,198,250,123,1,78,28,82,159,50,174,137,163],\"legalEntityIdCounterparty\": [237,254,146,99,213,114,66,208,75,149,94,4,33,192,236,87,16,114,226,33,149,25,248,150,150,242,14,135,74,93,70,12],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 361,\"statusDate\": 99,\"initialExchangeDate\": 10000,\"maturityDate\": 49,\"terminationDate\": 66,\"purchaseDate\": 101,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 81,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 109,\"nominalInterestRate\": 90,\"feeAccrued\": 151,\"accruedInterest\": 1461000,\"rateMultiplier\": 63,\"rateSpread\": 10,\"feeRate\": 99,\"nextResetRate\": 10000,\"penaltyRate\": 161,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 17,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1338,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 3999,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 19,\"lifeFloor\": 1336,\"periodCap\": 146097,\"periodFloor\": 23}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"93,73,128,1,168,192,225,86,104,25,220,206,14,182,147,63,126,206,54,245,198,250,123,1,78,28,82,159,50,174,137,163\"),stringToBytes32(\"237,254,146,99,213,114,66,208,75,149,94,4,33,192,236,87,16,114,226,33,149,25,248,150,150,242,14,135,74,93,70,12\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,361,99,10000,49,66,101,0,81,91,8,139,109,90,151,1461000,63,10,99,10000,161,86400,2,Definitions.IPS(17,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1338,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(129,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(3999,Definitions.P.Y,Definitions.S.SHORT,false),19,1336,146097,23)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [73,74,97,182,175,62,210,137,179,185,82,63,232,196,61,138,161,66,244,97,64,117,161,141,200,29,82,199,188,155,223,135],\"legalEntityIdCounterparty\": [134,3,69,181,115,215,21,141,67,50,32,85,42,51,230,205,13,87,128,102,31,243,70,244,177,79,0,63,35,150,12,118],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 131,\"statusDate\": 367,\"initialExchangeDate\": 361,\"maturityDate\": 1971,\"terminationDate\": 1461000,\"purchaseDate\": 66,\"capitalizationEndDate\": 31,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 24,\"nominalInterestRate\": 10000,\"feeAccrued\": 61,\"accruedInterest\": 1532892063,\"rateMultiplier\": 1970,\"rateSpread\": 949,\"feeRate\": 7,\"nextResetRate\": 28,\"penaltyRate\": 150,\"premiumDiscountAtIED\": 70,\"priceAtPurchaseDate\": 24,\"cycleOfInterestPayment\": {\"i\": 60,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 90,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 109,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 401,\"lifeFloor\": 32074,\"periodCap\": 26,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"73,74,97,182,175,62,210,137,179,185,82,63,232,196,61,138,161,66,244,97,64,117,161,141,200,29,82,199,188,155,223,135\"),stringToBytes32(\"134,3,69,181,115,215,21,141,67,50,32,85,42,51,230,205,13,87,128,102,31,243,70,244,177,79,0,63,35,150,12,118\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,131,367,361,1971,1461000,66,31,6,1461,81,1461,24,10000,61,1532892063,1970,949,7,28,150,70,24,Definitions.IPS(60,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(90,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(59,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(109,Definitions.P.W,Definitions.S.LONG,true),401,32074,26,0)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [44,136,71,155,187,231,51,175,223,172,74,231,72,251,86,110,244,89,76,14,66,92,110,232,205,34,251,102,24,243,180,37],\"legalEntityIdCounterparty\": [83,67,90,163,220,20,135,65,241,76,181,79,118,1,25,228,143,119,32,150,27,129,249,175,74,32,84,207,162,74,48,109],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1532892064,\"statusDate\": 14,\"initialExchangeDate\": 26,\"maturityDate\": 1461001,\"terminationDate\": 86401,\"purchaseDate\": 91,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 4801,\"notionalPrincipal\": 63,\"nominalInterestRate\": 69,\"feeAccrued\": 255,\"accruedInterest\": 360,\"rateMultiplier\": 2446,\"rateSpread\": 13,\"feeRate\": 950,\"nextResetRate\": 65,\"penaltyRate\": -1,\"premiumDiscountAtIED\": 2014223714,\"priceAtPurchaseDate\": 61,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 39,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2448,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 151,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 254,\"lifeFloor\": 5,\"periodCap\": 0,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"44,136,71,155,187,231,51,175,223,172,74,231,72,251,86,110,244,89,76,14,66,92,110,232,205,34,251,102,24,243,180,37\"),stringToBytes32(\"83,67,90,163,220,20,135,65,241,76,181,79,118,1,25,228,143,119,32,150,27,129,249,175,74,32,84,207,162,74,48,109\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1532892064,14,26,1461001,86401,91,8,4001,26,1461001,4801,63,69,255,360,2446,13,950,65,-1,2014223714,61,Definitions.IPS(81,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(39,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.W,Definitions.S.SHORT,false),254,5,0,949)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [84,108,57,168,141,63,89,85,176,100,142,8,240,66,24,100,87,158,167,228,197,13,199,168,240,155,28,182,21,35,128,233],\"legalEntityIdCounterparty\": [118,170,5,147,47,202,212,186,19,42,103,129,219,4,235,203,126,113,155,110,152,167,151,208,32,54,189,136,17,129,130,210],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 31,\"statusDate\": 97,\"initialExchangeDate\": 5,\"maturityDate\": 1461002,\"terminationDate\": 160,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 900,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 1336,\"notionalPrincipal\": 4801,\"nominalInterestRate\": 0,\"feeAccrued\": 48,\"accruedInterest\": 48,\"rateMultiplier\": 1532892063,\"rateSpread\": 4801,\"feeRate\": 4000,\"nextResetRate\": 140,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1462,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 64,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 399,\"periodCap\": 15,\"periodFloor\": 120}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"84,108,57,168,141,63,89,85,176,100,142,8,240,66,24,100,87,158,167,228,197,13,199,168,240,155,28,182,21,35,128,233\"),stringToBytes32(\"118,170,5,147,47,202,212,186,19,42,103,129,219,4,235,203,126,113,155,110,152,167,151,208,32,54,189,136,17,129,130,210\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,31,97,5,1461002,160,0,0,900,68570,0,1336,4801,0,48,48,1532892063,4801,4000,140,1,86400,32074,Definitions.IPS(81,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(9999,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(1462,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(64,Definitions.P.W,Definitions.S.LONG,false),4000,399,15,120)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [58,142,202,238,187,243,14,56,212,182,71,48,25,223,220,230,182,13,240,96,236,169,106,14,249,42,174,92,212,83,49,236],\"legalEntityIdCounterparty\": [80,114,50,17,210,185,232,83,223,170,128,251,143,66,48,191,80,71,195,78,168,102,1,37,135,193,251,80,74,94,242,117],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 86400,\"statusDate\": 901,\"initialExchangeDate\": 4001,\"maturityDate\": 32074,\"terminationDate\": 5,\"purchaseDate\": 89,\"capitalizationEndDate\": 99,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 10,\"cycleAnchorDateOfScalingIndex\": 2440588,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 0,\"nominalInterestRate\": 7,\"feeAccrued\": 2446,\"accruedInterest\": 41,\"rateMultiplier\": 1532892063,\"rateSpread\": 109,\"feeRate\": 9,\"nextResetRate\": 40,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 119,\"priceAtPurchaseDate\": 366,\"cycleOfInterestPayment\": {\"i\": 109,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 8,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 2440587,\"lifeFloor\": 146096,\"periodCap\": 4001,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"58,142,202,238,187,243,14,56,212,182,71,48,25,223,220,230,182,13,240,96,236,169,106,14,249,42,174,92,212,83,49,236\"),stringToBytes32(\"80,114,50,17,210,185,232,83,223,170,128,251,143,66,48,191,80,71,195,78,168,102,1,37,135,193,251,80,74,94,242,117\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,86400,901,4001,32074,5,89,99,2014223714,10,2440588,8,0,7,2446,41,1532892063,109,9,40,71,119,366,Definitions.IPS(109,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1970,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(8,Definitions.P.Y,Definitions.S.SHORT,false),2440587,146096,4001,1532892064)"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [130,172,192,200,86,237,122,250,106,122,220,35,68,59,102,231,52,8,201,166,86,185,186,151,145,122,182,180,69,78,111,43],\"legalEntityIdCounterparty\": [7,234,233,165,74,90,158,228,92,171,91,170,200,4,76,87,103,27,70,38,143,142,211,12,89,205,66,173,215,48,190,16],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 130,\"statusDate\": 1532892063,\"initialExchangeDate\": 10000,\"maturityDate\": 39,\"terminationDate\": 13,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 2014223714,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 110,\"nominalInterestRate\": 0,\"feeAccrued\": 2447,\"accruedInterest\": 14,\"rateMultiplier\": 401,\"rateSpread\": 13,\"feeRate\": 254,\"nextResetRate\": 10000,\"penaltyRate\": 161,\"premiumDiscountAtIED\": 146098,\"priceAtPurchaseDate\": 400,\"cycleOfInterestPayment\": {\"i\": 24,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 365,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68569,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 160,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 4799,\"lifeFloor\": 15,\"periodCap\": 1532892063,\"periodFloor\": 256}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"130,172,192,200,86,237,122,250,106,122,220,35,68,59,102,231,52,8,201,166,86,185,186,151,145,122,182,180,69,78,111,43\"),stringToBytes32(\"7,234,233,165,74,90,158,228,92,171,91,170,200,4,76,87,103,27,70,38,143,142,211,12,89,205,66,173,215,48,190,16\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,130,1532892063,10000,39,13,0,0,899,0,2014223714,2440588,110,0,2447,14,401,13,254,10000,161,146098,400,Definitions.IPS(24,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(365,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(68569,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(160,Definitions.P.Y,Definitions.S.SHORT,true),4799,15,1532892063,256)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [87,169,196,226,128,125,19,216,157,30,94,55,188,67,134,223,227,71,125,7,119,135,69,253,131,34,222,164,79,48,206,194],\"legalEntityIdCounterparty\": [91,242,224,96,202,101,169,244,143,21,178,134,163,47,110,116,220,219,61,24,152,245,49,188,88,87,230,9,109,160,133,60],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 79,\"statusDate\": 401,\"initialExchangeDate\": 1532892063,\"maturityDate\": 3,\"terminationDate\": 1532892062,\"purchaseDate\": 359,\"capitalizationEndDate\": 900,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 70,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 119,\"feeAccrued\": 1462,\"accruedInterest\": 71,\"rateMultiplier\": 100,\"rateSpread\": 27,\"feeRate\": 9999,\"nextResetRate\": 140,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 59,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223716,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 139,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 21,\"lifeFloor\": 23,\"periodCap\": 14,\"periodFloor\": 9999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"87,169,196,226,128,125,19,216,157,30,94,55,188,67,134,223,227,71,125,7,119,135,69,253,131,34,222,164,79,48,206,194\"),stringToBytes32(\"91,242,224,96,202,101,169,244,143,21,178,134,163,47,110,116,220,219,61,24,152,245,49,188,88,87,230,9,109,160,133,60\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,79,401,1532892063,3,1532892062,359,900,2448,6,2,70,1461001,119,1462,71,100,27,9999,140,2440589,59,60,Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(139,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2446,Definitions.P.Y,Definitions.S.LONG,false),21,23,14,9999)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [90,131,68,201,247,175,23,50,0,157,71,59,209,128,239,201,37,102,159,213,12,132,128,89,102,174,12,216,25,33,247,200],\"legalEntityIdCounterparty\": [99,131,205,213,129,181,97,126,95,30,142,131,49,164,194,118,156,129,211,11,219,73,20,66,75,186,167,152,220,155,201,32],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4001,\"statusDate\": 141,\"initialExchangeDate\": 110,\"maturityDate\": 25,\"terminationDate\": 51,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 32075,\"nominalInterestRate\": 0,\"feeAccrued\": 399,\"accruedInterest\": 360,\"rateMultiplier\": 4799,\"rateSpread\": 2440589,\"feeRate\": 13,\"nextResetRate\": 121,\"penaltyRate\": 360,\"premiumDiscountAtIED\": -1,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 1338,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 14,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 0,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 4800,\"lifeFloor\": 86399,\"periodCap\": 109,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"90,131,68,201,247,175,23,50,0,157,71,59,209,128,239,201,37,102,159,213,12,132,128,89,102,174,12,216,25,33,247,200\"),stringToBytes32(\"99,131,205,213,129,181,97,126,95,30,142,131,49,164,194,118,156,129,211,11,219,73,20,66,75,186,167,152,220,155,201,32\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4001,141,110,25,51,0,0,17,49,119,0,32075,0,399,360,4799,2440589,13,121,360,-1,160,Definitions.IPS(1338,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1461,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(14,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(0,Definitions.P.H,Definitions.S.LONG,true),4800,86399,109,4801)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [18,146,199,53,39,203,127,156,147,79,3,137,30,5,3,180,45,47,109,239,53,234,0,125,190,119,142,83,227,70,56,86],\"legalEntityIdCounterparty\": [128,224,173,181,160,57,21,80,84,183,81,233,185,0,188,212,132,95,7,109,116,250,83,92,45,121,50,123,132,69,112,121],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 14,\"statusDate\": 69,\"initialExchangeDate\": 1461002,\"maturityDate\": 8,\"terminationDate\": 64,\"purchaseDate\": 4899,\"capitalizationEndDate\": 401,\"cycleAnchorDateOfInterestPayment\": 12,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 80,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 68569,\"nominalInterestRate\": 1532892062,\"feeAccrued\": 8,\"accruedInterest\": 159,\"rateMultiplier\": 359,\"rateSpread\": 18,\"feeRate\": 21,\"nextResetRate\": 32075,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 109,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9999,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 64,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 14,\"lifeFloor\": 1338,\"periodCap\": 1970,\"periodFloor\": 2446}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"18,146,199,53,39,203,127,156,147,79,3,137,30,5,3,180,45,47,109,239,53,234,0,125,190,119,142,83,227,70,56,86\"),stringToBytes32(\"128,224,173,181,160,57,21,80,84,183,81,233,185,0,188,212,132,95,7,109,116,250,83,92,45,121,50,123,132,69,112,121\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,14,69,1461002,8,64,4899,401,12,2014223714,80,111,68569,1532892062,8,159,359,18,21,32075,99,101,2,Definitions.IPS(109,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(9999,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(64,Definitions.P.M,Definitions.S.LONG,true),14,1338,1970,2446)"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [91,190,109,226,174,95,177,252,47,170,117,250,187,7,163,247,87,211,156,252,153,220,207,244,214,223,223,4,234,170,12,93],\"legalEntityIdCounterparty\": [117,236,70,30,82,164,98,7,78,203,67,250,109,235,97,99,114,39,245,7,80,253,105,120,103,135,166,193,236,189,123,203],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 63,\"statusDate\": 32075,\"initialExchangeDate\": 1338,\"maturityDate\": 256,\"terminationDate\": 16,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 29,\"cycleAnchorDateOfRateReset\": 149,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 61,\"nominalInterestRate\": 0,\"feeAccrued\": 39,\"accruedInterest\": 151,\"rateMultiplier\": 1461002,\"rateSpread\": 65,\"feeRate\": 1970,\"nextResetRate\": 400,\"penaltyRate\": 361,\"premiumDiscountAtIED\": 69,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 21,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 64,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1460,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 949,\"lifeFloor\": 121,\"periodCap\": 1461001,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"91,190,109,226,174,95,177,252,47,170,117,250,187,7,163,247,87,211,156,252,153,220,207,244,214,223,223,4,234,170,12,93\"),stringToBytes32(\"117,236,70,30,82,164,98,7,78,203,67,250,109,235,97,99,114,39,245,7,80,253,105,120,103,135,166,193,236,189,123,203\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,63,32075,1338,256,16,0,0,29,149,0,1532892064,61,0,39,151,1461002,65,1970,400,361,69,23,Definitions.IPS(4000,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(64,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.Q,Definitions.S.LONG,false),949,121,1461001,28)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [58,190,103,9,64,209,79,169,23,124,232,155,76,104,95,30,118,242,63,171,137,50,126,88,56,243,221,126,111,192,132,145],\"legalEntityIdCounterparty\": [235,166,111,36,63,168,188,73,224,82,177,246,173,30,21,17,28,123,207,194,75,221,48,206,123,215,119,86,255,92,138,190],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 130,\"statusDate\": 32074,\"initialExchangeDate\": 63,\"maturityDate\": 401,\"terminationDate\": 2447,\"purchaseDate\": 7,\"capitalizationEndDate\": 368,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 949,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 6,\"nominalInterestRate\": 149,\"feeAccrued\": 159,\"accruedInterest\": 32,\"rateMultiplier\": 51,\"rateSpread\": 1461002,\"feeRate\": 8,\"nextResetRate\": 99,\"penaltyRate\": 1337,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 4901,\"cycleOfInterestPayment\": {\"i\": 2448,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 26,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 50,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 131,\"lifeFloor\": 1970,\"periodCap\": 89,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"58,190,103,9,64,209,79,169,23,124,232,155,76,104,95,30,118,242,63,171,137,50,126,88,56,243,221,126,111,192,132,145\"),stringToBytes32(\"235,166,111,36,63,168,188,73,224,82,177,246,173,30,21,17,28,123,207,194,75,221,48,206,123,215,119,86,255,92,138,190\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,130,32074,63,401,2447,7,368,13,949,1336,32,6,149,159,32,51,1461002,8,99,1337,2014223715,4901,Definitions.IPS(2448,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(26,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.D,Definitions.S.SHORT,true),131,1970,89,51)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [37,32,180,164,234,160,202,15,56,172,218,146,127,68,216,199,165,35,219,60,212,65,89,162,27,214,146,75,27,15,214,100],\"legalEntityIdCounterparty\": [21,145,249,231,107,72,70,167,103,42,61,170,94,120,249,108,5,214,188,164,74,112,102,65,25,69,102,82,83,182,128,88],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1971,\"statusDate\": 4000,\"initialExchangeDate\": 2448,\"maturityDate\": 146096,\"terminationDate\": 6,\"purchaseDate\": 254,\"capitalizationEndDate\": 20,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 41,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 1461002,\"notionalPrincipal\": 96,\"nominalInterestRate\": 40,\"feeAccrued\": 361,\"accruedInterest\": 1532892064,\"rateMultiplier\": 16,\"rateSpread\": 2440588,\"feeRate\": 366,\"nextResetRate\": 8,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 80,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 161,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 7,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 81,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 81,\"periodCap\": 86400,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"37,32,180,164,234,160,202,15,56,172,218,146,127,68,216,199,165,35,219,60,212,65,89,162,27,214,146,75,27,15,214,100\"),stringToBytes32(\"21,145,249,231,107,72,70,167,103,42,61,170,94,120,249,108,5,214,188,164,74,112,102,65,25,69,102,82,83,182,128,88\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1971,4000,2448,146096,6,254,20,1337,41,96,1461002,96,40,361,1532892064,16,2440588,366,8,1532892064,68570,81,Definitions.IPS(80,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(161,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(7,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(81,Definitions.P.H,Definitions.S.SHORT,false),4000,81,86400,951)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [154,236,199,51,97,127,25,142,41,190,37,246,149,44,171,165,19,6,109,127,15,103,5,136,196,8,184,184,47,104,221,187],\"legalEntityIdCounterparty\": [197,208,118,19,201,14,86,136,239,163,80,89,208,8,23,208,237,196,0,41,89,197,45,110,82,228,122,171,80,2,147,56],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 5,\"statusDate\": 1461000,\"initialExchangeDate\": 48,\"maturityDate\": 12,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1336,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 86400,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 5,\"nominalInterestRate\": 0,\"feeAccrued\": 359,\"accruedInterest\": 17,\"rateMultiplier\": 7,\"rateSpread\": 1,\"feeRate\": 1971,\"nextResetRate\": 12,\"penaltyRate\": 401,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 2014223715,\"cycleOfInterestPayment\": {\"i\": 119,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 16,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461002,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 254,\"lifeFloor\": 2014223714,\"periodCap\": 95,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"154,236,199,51,97,127,25,142,41,190,37,246,149,44,171,165,19,6,109,127,15,103,5,136,196,8,184,184,47,104,221,187\"),stringToBytes32(\"197,208,118,19,201,14,86,136,239,163,80,89,208,8,23,208,237,196,0,41,89,197,45,110,82,228,122,171,80,2,147,56\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,5,1461000,48,12,0,0,0,1336,2014223714,86400,140,5,0,359,17,7,1,1971,12,401,100,2014223715,Definitions.IPS(119,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(16,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(50,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461002,Definitions.P.Q,Definitions.S.SHORT,false),254,2014223714,95,8)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [34,234,155,191,104,78,239,20,32,4,192,238,136,184,146,202,139,180,196,116,147,241,23,187,120,209,223,184,192,149,72,215],\"legalEntityIdCounterparty\": [34,142,200,247,148,19,102,3,121,210,20,184,125,146,109,156,82,59,4,84,141,228,11,181,87,158,6,68,35,216,13,114],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 401,\"statusDate\": 10000,\"initialExchangeDate\": 2014223715,\"maturityDate\": 21,\"terminationDate\": 900,\"purchaseDate\": 2,\"capitalizationEndDate\": 900,\"cycleAnchorDateOfInterestPayment\": 1969,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 24,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 5,\"nominalInterestRate\": 365,\"feeAccrued\": 4,\"accruedInterest\": 97,\"rateMultiplier\": 1337,\"rateSpread\": 949,\"feeRate\": 80,\"nextResetRate\": 254,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 359,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 68569,\"lifeFloor\": 9,\"periodCap\": 256,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"34,234,155,191,104,78,239,20,32,4,192,238,136,184,146,202,139,180,196,116,147,241,23,187,120,209,223,184,192,149,72,215\"),stringToBytes32(\"34,142,200,247,148,19,102,3,121,210,20,184,125,146,109,156,82,59,4,84,141,228,11,181,87,158,6,68,35,216,13,114\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,401,10000,2014223715,21,900,2,900,1969,48,24,901,5,365,4,97,1337,949,80,254,160,48,146097,Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1969,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(6,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(359,Definitions.P.Y,Definitions.S.LONG,true),68569,9,256,10001)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [11,175,199,213,128,70,147,1,5,57,182,226,64,84,208,43,84,194,121,137,242,192,238,33,125,141,91,196,33,42,32,181],\"legalEntityIdCounterparty\": [131,17,47,231,230,53,14,85,175,243,10,67,231,2,87,24,47,75,71,222,226,153,208,246,129,234,235,93,148,102,61,136],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 86401,\"statusDate\": 256,\"initialExchangeDate\": 160,\"maturityDate\": 159,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 1462,\"cycleAnchorDateOfScalingIndex\": 15,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 40,\"nominalInterestRate\": 0,\"feeAccrued\": 161,\"accruedInterest\": 255,\"rateMultiplier\": 1,\"rateSpread\": 21,\"feeRate\": 101,\"nextResetRate\": 28,\"penaltyRate\": 950,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 4901,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 256,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 32075,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 69,\"lifeFloor\": 255,\"periodCap\": 99,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"11,175,199,213,128,70,147,1,5,57,182,226,64,84,208,43,84,194,121,137,242,192,238,33,125,141,91,196,33,42,32,181\"),stringToBytes32(\"131,17,47,231,230,53,14,85,175,243,10,67,231,2,87,24,47,75,71,222,226,153,208,246,129,234,235,93,148,102,61,136\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,86401,256,160,159,0,0,0,4900,1462,15,1338,40,0,161,255,1,21,101,28,950,365,12,Definitions.IPS(4901,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(256,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(900,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(32075,Definitions.P.M,Definitions.S.LONG,true),69,255,99,89)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.086ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:04:20.108ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}