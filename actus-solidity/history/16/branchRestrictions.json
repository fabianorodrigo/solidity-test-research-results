,{
  "2020-11-12T12:16:39.058ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.060ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.060ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.061ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.062ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.062ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.063ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month<=0",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.066ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.067ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.068ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.068ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.068ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.069ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.070ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.073ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.073ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.073ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.074ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.074ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.074ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.075ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.075ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.076ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.076ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.076ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.077ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.077ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.078ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.078ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.078ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.079ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.079ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.080ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.080ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 950,
                "sol": 950
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.081ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 32077,
                "sol": 32077
              },
              {
                "js": "32076",
                "sol": "32076"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.082ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461003,
                "sol": 1461003
              },
              {
                "js": "1461002",
                "sol": "1461002"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.082ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 141,
                "sol": 141
              },
              {
                "js": "140",
                "sol": "140"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.083ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223715,
                "sol": 2014223715
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.084ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4002,
                "sol": 4002
              },
              {
                "js": "4001",
                "sol": "4001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.086ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.087ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.090ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.093ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "899",
                "sol": "899"
              },
              {
                "js": 898,
                "sol": 898
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": 13,
                "sol": 13
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2448",
                "sol": "2448"
              },
              {
                "js": 2447,
                "sol": 2447
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "119",
                "sol": "119"
              },
              {
                "js": 118,
                "sol": 118
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "359",
                "sol": "359"
              },
              {
                "js": 358,
                "sol": 358
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T12:16:39.097ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.097ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.097ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.098ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.099ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{\"i\": 68568,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(68568,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{\"i\": 1461001,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461001,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{\"i\": 3999,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3999,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{\"i\": 150,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(150,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.101ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.102ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.103ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.117ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.122ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.126ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.126ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.132ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2440589,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2440589,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 27,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(27,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 71,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(71,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 2446,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2446,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 99,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(99,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 159,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.137ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{\"i\": 9999,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(9999,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{\"i\": 20,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(20,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 89,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(89,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{\"i\": 120,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(120,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{\"i\": 65,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(65,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{\"i\": 121,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(121,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{\"i\": 1338,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1338,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{\"i\": 25,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(25,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.146ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1461002,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461002,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 18,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 49,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(49,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 161,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(161,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 1,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 29,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.150ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 159,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 5},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 1970,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 63,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 4899,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 79,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 79,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 4899,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 16},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 2440587,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 400,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 9,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 9,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 31,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 950,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 32074,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 86399,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 3,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 146096,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 109,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 86399,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 4000,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 129,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 150,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 110,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 28,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 68569,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 4901,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 99,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 1532892063,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 400,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 1532892064,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 6,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 1,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 2447,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 2},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 256,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 360,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 0},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 140,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 1461000,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 2446,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 151,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 2,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 1969,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 146096,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 60,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 1532892063,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 17,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 66,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 13,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 9999,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 86400,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 901,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 95,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 4801,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 86401,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 367,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 146097,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 64,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 18,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 2440588,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 360,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 257,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 366,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1461000,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 63,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 15,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(10,60,159,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PR),Definitions.ProtoEvent(4000,10,1970,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(59,159,63,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(80,86401,4899,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(41,2447,79,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(109,1337,79,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(69,68570,4899,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.DV),Definitions.ProtoEvent(2,97,2440587,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(71,2440589,400,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(29,4801,9,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(2,26,9,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(131,360,31,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(401,1532892064,950,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(91,367,32074,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(2014223715,951,86399,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(6,66,3,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(4,24,146096,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(1969,255,109,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(401,9999,86399,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(19,131,4000,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(64,146097,129,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(3,4801,150,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(7,901,110,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(1338,10000,28,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(63,257,68569,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(68569,139,4901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(4899,2447,99,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(27,5,1532892063,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(901,25,400,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(2014223714,140,1532892064,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(255,361,6,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(367,4899,1,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(120,97,2447,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.AD),Definitions.ProtoEvent(257,146098,256,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(100,95,360,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SD),Definitions.ProtoEvent(160,11,140,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(4001,150,1461000,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(101,0,2446,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(899,2440588,151,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(41,27,2,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(48,86401,1969,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(32,2446,146096,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(110,48,60,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(25,367,1532892063,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(63,63,17,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(150,901,66,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(901,14,13,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(59,2447,9999,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(86401,119,86400,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(146097,2440589,901,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461000,2447,95,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(360,27,4801,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(66,26,86401,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(901,364,367,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(68569,360,146097,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(31,900,64,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(254,1969,18,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(50,1336,2440588,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(96,1969,360,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(900,68569,257,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(10000,96,366,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(1461,129,1461000,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(1338,51,63,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(366,159,15,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY)]"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.164ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 9999,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 49,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 131,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 111,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 111,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 256,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 10001,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 6,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 159,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 6},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 359,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 0},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 7,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 111,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 29,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 14,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 89,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 2440588,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 13,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 401,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 4},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 1461,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 68570,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 141,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 401,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 10},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 65,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 4,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 95,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 4001,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 400,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2440589,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 2014223715,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 40,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 4899,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 2014223715,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 951,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 8,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 8,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 69,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 121,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 401,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 146096,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 161,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 4000,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 29,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 399,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 1460,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 86400,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 900,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 359,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 12},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 26,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 15,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 28,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 4001,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 11},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 86401,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 31,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 1},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 26,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 97,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 60,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 65,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 86401,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 4899,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 63,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 2440587,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 29,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 18,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 18}]",
              "sol": "[Definitions.ProtoEvent(1,13,9999,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(364,130,49,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(151,131,131,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(13,81,111,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(4001,150,111,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(254,0,256,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(18,1532892064,10001,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(2014223714,16,6,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(2446,32076,159,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PP),Definitions.ProtoEvent(368,95,359,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SD),Definitions.ProtoEvent(146097,1337,7,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(2447,27,111,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(150,90,1,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(2447,255,29,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(899,901,14,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(1338,367,89,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(32075,96,2440588,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(80,146096,13,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(40,146098,401,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IP),Definitions.ProtoEvent(9999,12,1461,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(18,96,68570,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(40,81,141,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(71,2440587,401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.TD),Definitions.ProtoEvent(2448,2447,65,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(32,59,4,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(21,21,95,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(129,50,4001,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2448,2448,400,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(1,160,2440589,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(4799,40,2014223715,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(1338,86400,40,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(3,141,4899,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(120,160,2014223715,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(80,146097,951,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(159,10000,8,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(7,10001,8,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(146098,49,69,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(61,1532892064,121,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(10,120,401,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(100,121,146096,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(367,160,161,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(2447,1971,4000,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(101,257,29,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(61,150,399,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(12,30,1460,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(110,159,86400,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(64,901,900,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(101,4,359,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RR),Definitions.ProtoEvent(1970,120,26,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(401,99,15,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(949,3,28,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(6,3999,4001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCI),Definitions.ProtoEvent(151,2440589,86401,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1969,100,31,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MD),Definitions.ProtoEvent(146098,16,26,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(399,365,97,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(1969,10000,60,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(24,1970,65,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(81,70,86401,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(161,89,4899,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(951,11,63,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(149,79,2440587,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(900,4899,29,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(11,11,18,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB)]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.184ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.187ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [156,118,81,1,241,209,22,179,41,109,2,84,17,171,91,148,23,59,54,51,43,42,221,254,197,126,28,11,232,130,209,249],\"legalEntityIdCounterparty\": [224,69,194,57,158,165,242,119,207,54,161,55,120,230,254,204,150,138,220,234,245,204,37,130,111,239,90,159,58,50,23,197],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 254,\"statusDate\": 91,\"initialExchangeDate\": 2014223715,\"maturityDate\": 901,\"terminationDate\": 39,\"purchaseDate\": 900,\"capitalizationEndDate\": 359,\"cycleAnchorDateOfInterestPayment\": 80,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 1971,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 30,\"nominalInterestRate\": 100,\"feeAccrued\": 5,\"accruedInterest\": 95,\"rateMultiplier\": 150,\"rateSpread\": 900,\"feeRate\": 150,\"nextResetRate\": 19,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 51,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 23,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 17,\"lifeFloor\": 81,\"periodCap\": 901,\"periodFloor\": 2440587}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"156,118,81,1,241,209,22,179,41,109,2,84,17,171,91,148,23,59,54,51,43,42,221,254,197,126,28,11,232,130,209,249\"),stringToBytes32(\"224,69,194,57,158,165,242,119,207,54,161,55,120,230,254,204,150,138,220,234,245,204,37,130,111,239,90,159,58,50,23,197\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,254,91,2014223715,901,39,900,359,80,951,1971,66,30,100,5,95,150,900,150,19,1460,29,4,Definitions.IPS(69,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(51,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(23,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,true),17,81,901,2440587)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.189ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [36,244,218,25,227,99,27,37,115,19,158,78,188,21,230,87,137,214,72,117,45,86,224,101,1,5,126,200,119,72,100,163],\"legalEntityIdCounterparty\": [130,237,163,149,151,139,137,101,251,4,137,131,144,160,36,190,91,86,150,129,120,206,21,8,70,40,164,229,210,5,31,225],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 29,\"statusDate\": 59,\"initialExchangeDate\": 89,\"maturityDate\": 71,\"terminationDate\": 9,\"purchaseDate\": 130,\"capitalizationEndDate\": 10,\"cycleAnchorDateOfInterestPayment\": 1336,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 26,\"nominalInterestRate\": 68570,\"feeAccrued\": 8,\"accruedInterest\": 32,\"rateMultiplier\": 64,\"rateSpread\": 70,\"feeRate\": 9,\"nextResetRate\": 4000,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 66,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 109,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32075,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 367,\"lifeFloor\": 86401,\"periodCap\": 121,\"periodFloor\": 150}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"36,244,218,25,227,99,27,37,115,19,158,78,188,21,230,87,137,214,72,117,45,86,224,101,1,5,126,200,119,72,100,163\"),stringToBytes32(\"130,237,163,149,151,139,137,101,251,4,137,131,144,160,36,190,91,86,150,129,120,206,21,8,70,40,164,229,210,5,31,225\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,29,59,89,71,9,130,10,1336,4001,81,141,26,68570,8,32,64,70,9,4000,3,146097,4899,Definitions.IPS(66,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(109,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(32075,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(68569,Definitions.P.D,Definitions.S.LONG,false),367,86401,121,150)"
            },
            {
              "js": "{\"lastEventTime\": 1532892062,\"contractStatus\": 3,\"timeFromLastEvent\": 1460,\"nominalValue\": 2,\"nominalAccrued\": 81,\"feeAccrued\": 899,\"nominalRate\": 901,\"interestScalingMultiplier\": 1461,\"nominalScalingMultiplier\": 4001,\"contractRoleSign\": 4}",
              "sol": "Definitions.ContractState(1532892062,Definitions.ContractStatus.DF,1460,2,81,899,901,1461,4001,Definitions.ContractRole.RFL)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.192ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [60,191,138,5,9,254,87,166,34,19,245,87,206,207,217,88,128,206,185,244,105,116,173,150,188,241,127,143,145,164,2,125],\"legalEntityIdCounterparty\": [90,83,79,238,162,212,136,120,4,90,25,36,29,231,147,133,102,46,97,176,52,153,233,12,244,53,6,7,52,231,164,70],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 121,\"statusDate\": 27,\"initialExchangeDate\": 360,\"maturityDate\": 120,\"terminationDate\": 91,\"purchaseDate\": 110,\"capitalizationEndDate\": 68570,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 146096,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 4899,\"notionalPrincipal\": 365,\"nominalInterestRate\": 15,\"feeAccrued\": 2440587,\"accruedInterest\": 48,\"rateMultiplier\": 7,\"rateSpread\": 3,\"feeRate\": 86401,\"nextResetRate\": 68570,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 64,\"priceAtPurchaseDate\": 95,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 130,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461001,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 119,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 2440589,\"lifeFloor\": 109,\"periodCap\": 160,\"periodFloor\": 140}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"60,191,138,5,9,254,87,166,34,19,245,87,206,207,217,88,128,206,185,244,105,116,173,150,188,241,127,143,145,164,2,125\"),stringToBytes32(\"90,83,79,238,162,212,136,120,4,90,25,36,29,231,147,133,102,46,97,176,52,153,233,12,244,53,6,7,52,231,164,70\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,121,27,360,120,91,110,68570,364,146096,70,4899,365,15,2440587,48,7,3,86401,68570,49,64,95,Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(130,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1461001,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.D,Definitions.S.SHORT,true),2440589,109,160,140)"
            },
            {
              "js": "{\"lastEventTime\": 48,\"contractStatus\": 0,\"timeFromLastEvent\": 20,\"nominalValue\": 69,\"nominalAccrued\": 24,\"feeAccrued\": 48,\"nominalRate\": 21,\"interestScalingMultiplier\": 257,\"nominalScalingMultiplier\": 15,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(48,Definitions.ContractStatus.PF,20,69,24,48,21,257,15,Definitions.ContractRole.RPA)"
            },
            {
              "js": "{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 159,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 5}",
              "sol": "Definitions.ProtoEvent(1461001,51,159,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.200ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [205,153,183,99,48,175,133,224,26,219,162,158,76,116,45,172,109,157,20,20,11,41,229,35,78,22,127,86,55,202,236,251],\"legalEntityIdCounterparty\": [132,210,14,18,105,223,12,217,5,5,68,160,46,99,1,233,44,247,145,167,211,207,8,44,61,134,112,109,55,210,185,212],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 4001,\"statusDate\": 401,\"initialExchangeDate\": 1532892064,\"maturityDate\": 140,\"terminationDate\": 100,\"purchaseDate\": 20,\"capitalizationEndDate\": 12,\"cycleAnchorDateOfInterestPayment\": 86401,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 9999,\"cycleAnchorDateOfFee\": 50,\"notionalPrincipal\": 96,\"nominalInterestRate\": 1336,\"feeAccrued\": 86401,\"accruedInterest\": 99,\"rateMultiplier\": 41,\"rateSpread\": 90,\"feeRate\": 40,\"nextResetRate\": 131,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 80,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 8,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 359,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 15,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 97,\"lifeFloor\": 1461000,\"periodCap\": 32076,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"205,153,183,99,48,175,133,224,26,219,162,158,76,116,45,172,109,157,20,20,11,41,229,35,78,22,127,86,55,202,236,251\"),stringToBytes32(\"132,210,14,18,105,223,12,217,5,5,68,160,46,99,1,233,44,247,145,167,211,207,8,44,61,134,112,109,55,210,185,212\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,4001,401,1532892064,140,100,20,12,86401,11,9999,50,96,1336,86401,99,41,90,40,131,1532892064,1337,159,Definitions.IPS(80,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(8,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(15,Definitions.P.Q,Definitions.S.LONG,false),97,1461000,32076,60)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [92,180,248,150,33,93,37,226,202,10,139,176,127,18,120,187,86,138,80,199,152,38,78,112,167,61,228,207,133,85,10,87],\"legalEntityIdCounterparty\": [242,48,181,88,223,92,38,239,236,209,105,240,208,62,173,189,104,185,38,173,230,201,133,207,188,231,164,28,186,225,86,108],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 951,\"statusDate\": 129,\"initialExchangeDate\": 1461002,\"maturityDate\": 121,\"terminationDate\": 8,\"purchaseDate\": 64,\"capitalizationEndDate\": 25,\"cycleAnchorDateOfInterestPayment\": 32075,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 161,\"nominalInterestRate\": 146098,\"feeAccrued\": 96,\"accruedInterest\": 4000,\"rateMultiplier\": 359,\"rateSpread\": 950,\"feeRate\": 1337,\"nextResetRate\": 2446,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 10000,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 11,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 91,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 1970,\"lifeFloor\": 901,\"periodCap\": 1461000,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"92,180,248,150,33,93,37,226,202,10,139,176,127,18,120,187,86,138,80,199,152,38,78,112,167,61,228,207,133,85,10,87\"),stringToBytes32(\"242,48,181,88,223,92,38,239,236,209,105,240,208,62,173,189,104,185,38,173,230,201,133,207,188,231,164,28,186,225,86,108\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,951,129,1461002,121,8,64,25,32075,20,146097,7,161,146098,96,4000,359,950,1337,2446,0,10000,3,Definitions.IPS(25,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(11,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(80,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(91,Definitions.P.Y,Definitions.S.LONG,false),1970,901,1461000,2448)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [165,169,134,234,139,234,70,255,132,40,145,190,32,20,61,67,90,177,236,152,128,120,118,53,219,135,33,110,86,153,112,166],\"legalEntityIdCounterparty\": [59,75,85,243,90,191,71,178,118,147,210,187,25,65,21,104,136,104,152,54,61,79,116,101,76,204,149,103,84,85,98,246],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4800,\"statusDate\": 1460,\"initialExchangeDate\": 4899,\"maturityDate\": 6,\"terminationDate\": 2446,\"purchaseDate\": 159,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 2448,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 86400,\"notionalPrincipal\": 15,\"nominalInterestRate\": 2440588,\"feeAccrued\": 11,\"accruedInterest\": 71,\"rateMultiplier\": 19,\"rateSpread\": 61,\"feeRate\": 4899,\"nextResetRate\": 119,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 951,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 111,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 4001,\"lifeFloor\": 60,\"periodCap\": 3999,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"165,169,134,234,139,234,70,255,132,40,145,190,32,20,61,67,90,177,236,152,128,120,118,53,219,135,33,110,86,153,112,166\"),stringToBytes32(\"59,75,85,243,90,191,71,178,118,147,210,187,25,65,21,104,136,104,152,54,61,79,116,101,76,204,149,103,84,85,98,246\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4800,1460,4899,6,2446,159,30,50,2448,141,86400,15,2440588,11,71,19,61,4899,119,4799,159,254,Definitions.IPS(361,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(951,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.D,Definitions.S.LONG,true),4001,60,3999,129)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [50,186,105,185,2,64,192,47,16,243,239,94,72,51,3,50,95,62,117,184,206,51,1,71,14,43,105,147,242,36,176,47],\"legalEntityIdCounterparty\": [185,255,58,48,136,209,202,59,166,94,226,28,199,166,245,251,52,185,234,160,170,93,71,90,15,115,115,148,2,15,25,101],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 120,\"statusDate\": 21,\"initialExchangeDate\": 13,\"maturityDate\": 160,\"terminationDate\": 99,\"purchaseDate\": 32076,\"capitalizationEndDate\": 4899,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 1,\"cycleAnchorDateOfScalingIndex\": 4801,\"cycleAnchorDateOfFee\": 119,\"notionalPrincipal\": 9999,\"nominalInterestRate\": 1,\"feeAccrued\": 141,\"accruedInterest\": 900,\"rateMultiplier\": 101,\"rateSpread\": 89,\"feeRate\": 1461002,\"nextResetRate\": 65,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 18,\"priceAtPurchaseDate\": 146096,\"cycleOfInterestPayment\": {\"i\": 40,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 26,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 360,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 86401,\"lifeFloor\": 32076,\"periodCap\": 20,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"50,186,105,185,2,64,192,47,16,243,239,94,72,51,3,50,95,62,117,184,206,51,1,71,14,43,105,147,242,36,176,47\"),stringToBytes32(\"185,255,58,48,136,209,202,59,166,94,226,28,199,166,245,251,52,185,234,160,170,93,71,90,15,115,115,148,2,15,25,101\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,120,21,13,160,99,32076,4899,50,1,4801,119,9999,1,141,900,101,89,1461002,65,5,18,146096,Definitions.IPS(40,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(9,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(26,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(360,Definitions.P.D,Definitions.S.LONG,true),86401,32076,20,400)"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [152,87,177,79,247,17,228,247,84,26,68,231,15,142,39,180,152,20,90,9,22,122,169,230,49,135,83,91,231,52,35,138],\"legalEntityIdCounterparty\": [217,160,149,22,125,12,196,213,231,164,138,239,132,103,130,149,135,182,51,230,233,140,218,98,139,129,243,80,185,46,92,32],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 5,\"statusDate\": 16,\"initialExchangeDate\": 146096,\"maturityDate\": 95,\"terminationDate\": 399,\"purchaseDate\": 0,\"capitalizationEndDate\": 32076,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 359,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 31,\"notionalPrincipal\": 949,\"nominalInterestRate\": 9999,\"feeAccrued\": 91,\"accruedInterest\": 4899,\"rateMultiplier\": 3,\"rateSpread\": 59,\"feeRate\": 900,\"nextResetRate\": 140,\"penaltyRate\": 4799,\"premiumDiscountAtIED\": 159,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 49,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4801,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 4,\"lifeFloor\": 5,\"periodCap\": 1461001,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"152,87,177,79,247,17,228,247,84,26,68,231,15,142,39,180,152,20,90,9,22,122,169,230,49,135,83,91,231,52,35,138\"),stringToBytes32(\"217,160,149,22,125,12,196,213,231,164,138,239,132,103,130,149,135,182,51,230,233,140,218,98,139,129,243,80,185,46,92,32\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,5,16,146096,95,399,0,32076,90,359,1337,31,949,9999,91,4899,3,59,900,140,4799,159,4799,Definitions.IPS(4799,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,false),4,5,1461001,1532892064)"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [16,254,188,228,118,17,58,40,142,85,96,24,203,244,68,177,136,180,97,50,187,255,94,64,233,173,68,194,81,58,152,243],\"legalEntityIdCounterparty\": [246,33,115,31,86,154,62,137,253,62,169,163,181,33,14,190,24,67,64,237,19,167,252,23,137,115,99,206,95,140,154,188],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 129,\"statusDate\": 900,\"initialExchangeDate\": 900,\"maturityDate\": 360,\"terminationDate\": 80,\"purchaseDate\": 2440588,\"capitalizationEndDate\": 40,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 4899,\"cycleAnchorDateOfFee\": 49,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 367,\"feeAccrued\": 9999,\"accruedInterest\": 31,\"rateMultiplier\": 18,\"rateSpread\": 121,\"feeRate\": 146096,\"nextResetRate\": 41,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 367,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 359,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 15,\"periodCap\": 161,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"16,254,188,228,118,17,58,40,142,85,96,24,203,244,68,177,136,180,97,50,187,255,94,64,233,173,68,194,81,58,152,243\"),stringToBytes32(\"246,33,115,31,86,154,62,137,253,62,169,163,181,33,14,190,24,67,64,237,19,167,252,23,137,115,99,206,95,140,154,188\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,129,900,900,360,80,2440588,40,131,17,4899,49,3999,367,9999,31,18,121,146096,41,5,1,6,Definitions.IPS(11,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(119,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(359,Definitions.P.W,Definitions.S.LONG,false),41,15,161,24)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [158,227,12,68,233,57,194,246,111,197,117,195,121,229,144,89,37,20,173,108,233,240,157,139,16,57,139,246,36,52,102,20],\"legalEntityIdCounterparty\": [196,125,60,116,4,17,180,221,21,11,213,159,150,250,56,114,66,144,158,191,33,2,54,223,133,183,120,166,166,69,3,111],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 130,\"statusDate\": 86401,\"initialExchangeDate\": 1460,\"maturityDate\": 25,\"terminationDate\": 150,\"purchaseDate\": 2440587,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 80,\"cycleAnchorDateOfScalingIndex\": 3,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 86401,\"nominalInterestRate\": 59,\"feeAccrued\": 361,\"accruedInterest\": 401,\"rateMultiplier\": 149,\"rateSpread\": 146098,\"feeRate\": 40,\"nextResetRate\": 160,\"penaltyRate\": 1336,\"premiumDiscountAtIED\": 4,\"priceAtPurchaseDate\": 7,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32076,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 51,\"lifeFloor\": 39,\"periodCap\": 401,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"158,227,12,68,233,57,194,246,111,197,117,195,121,229,144,89,37,20,173,108,233,240,157,139,16,57,139,246,36,52,102,20\"),stringToBytes32(\"196,125,60,116,4,17,180,221,21,11,213,159,150,250,56,114,66,144,158,191,33,2,54,223,133,183,120,166,166,69,3,111\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,130,86401,1460,25,150,2440587,16,15,80,3,140,86401,59,361,401,149,146098,40,160,1336,4,7,Definitions.IPS(139,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(51,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(17,Definitions.P.Q,Definitions.S.LONG,true),51,39,401,368)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [230,139,19,184,218,26,194,215,15,66,7,47,221,38,163,114,144,30,109,141,192,210,152,140,161,188,45,217,170,234,60,67],\"legalEntityIdCounterparty\": [167,31,10,28,207,34,247,13,29,198,244,158,122,75,83,254,194,206,175,28,228,23,116,51,223,211,123,211,24,3,211,163],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 3,\"statusDate\": 97,\"initialExchangeDate\": 951,\"maturityDate\": 60,\"terminationDate\": 4800,\"purchaseDate\": 399,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 151,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 366,\"feeAccrued\": 4001,\"accruedInterest\": 2014223714,\"rateMultiplier\": 951,\"rateSpread\": 361,\"feeRate\": 2440588,\"nextResetRate\": 9999,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 111,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 51,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 8,\"lifeFloor\": 20,\"periodCap\": 68568,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"230,139,19,184,218,26,194,215,15,66,7,47,221,38,163,114,144,30,109,141,192,210,152,140,161,188,45,217,170,234,60,67\"),stringToBytes32(\"167,31,10,28,207,34,247,13,29,198,244,158,122,75,83,254,194,206,175,28,228,23,116,51,223,211,123,211,24,3,211,163\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,3,97,951,60,4800,399,0,18,3999,151,110,1532892063,366,4001,2014223714,951,361,2440588,9999,40,1970,111,Definitions.IPS(139,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(51,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(120,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.Y,Definitions.S.LONG,false),8,20,68568,86399)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [101,145,250,24,62,201,50,35,227,125,136,59,135,178,121,13,143,12,86,68,213,1,72,192,153,151,137,209,175,0,238,107],\"legalEntityIdCounterparty\": [110,243,211,95,154,206,33,105,116,150,115,243,238,60,141,21,84,170,207,25,80,195,77,204,120,1,213,14,62,166,7,93],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 119,\"statusDate\": 1461001,\"initialExchangeDate\": 0,\"maturityDate\": 25,\"terminationDate\": 10000,\"purchaseDate\": 63,\"capitalizationEndDate\": 64,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 146096,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 901,\"nominalInterestRate\": 401,\"feeAccrued\": 10,\"accruedInterest\": 4800,\"rateMultiplier\": 32,\"rateSpread\": 1,\"feeRate\": 100,\"nextResetRate\": 32,\"penaltyRate\": 29,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146098,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2448,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 159,\"lifeFloor\": 0,\"periodCap\": 949,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"101,145,250,24,62,201,50,35,227,125,136,59,135,178,121,13,143,12,86,68,213,1,72,192,153,151,137,209,175,0,238,107\"),stringToBytes32(\"110,243,211,95,154,206,33,105,116,150,115,243,238,60,141,21,84,170,207,25,80,195,77,204,120,1,213,14,62,166,7,93\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,119,1461001,0,25,10000,63,64,17,146096,17,151,901,401,10,4800,32,1,100,32,29,2440589,129,Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(146098,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(401,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.H,Definitions.S.LONG,true),159,0,949,146096)"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [158,32,49,207,196,213,86,213,195,94,125,168,51,44,209,227,137,133,33,204,198,148,123,240,5,1,150,184,78,55,213,16],\"legalEntityIdCounterparty\": [229,102,44,22,110,199,49,9,183,183,203,34,169,34,177,89,111,74,110,118,243,150,99,141,141,48,214,149,60,100,30,104],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 161,\"statusDate\": 4,\"initialExchangeDate\": 146096,\"maturityDate\": 8,\"terminationDate\": 0,\"purchaseDate\": 68568,\"capitalizationEndDate\": 95,\"cycleAnchorDateOfInterestPayment\": 17,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 131,\"notionalPrincipal\": 110,\"nominalInterestRate\": 364,\"feeAccrued\": 2448,\"accruedInterest\": 1532892063,\"rateMultiplier\": 365,\"rateSpread\": 1461001,\"feeRate\": 1336,\"nextResetRate\": 359,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 32,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 7,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 20,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 2014223715,\"lifeFloor\": 3,\"periodCap\": 1970,\"periodFloor\": 3}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"158,32,49,207,196,213,86,213,195,94,125,168,51,44,209,227,137,133,33,204,198,148,123,240,5,1,150,184,78,55,213,16\"),stringToBytes32(\"229,102,44,22,110,199,49,9,183,183,203,34,169,34,177,89,111,74,110,118,243,150,99,141,141,48,214,149,60,100,30,104\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,161,4,146096,8,0,68568,95,17,28,68570,131,110,364,2448,1532892063,365,1461001,1336,359,4001,32,66,Definitions.IPS(90,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(7,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(20,Definitions.P.H,Definitions.S.LONG,true),2014223715,3,1970,3)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [180,108,1,1,157,254,166,222,59,75,141,141,203,245,89,21,254,76,230,60,124,234,109,240,19,240,54,18,100,20,142,228],\"legalEntityIdCounterparty\": [190,6,203,110,254,52,62,98,97,68,47,185,55,235,84,126,56,131,179,11,110,253,42,142,34,96,206,151,220,95,22,232],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 81,\"statusDate\": 20,\"initialExchangeDate\": 50,\"maturityDate\": 89,\"terminationDate\": 86399,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 368,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 49,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 110,\"nominalInterestRate\": 0,\"feeAccrued\": 69,\"accruedInterest\": 2447,\"rateMultiplier\": 32,\"rateSpread\": 68569,\"feeRate\": 7,\"nextResetRate\": 4799,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 49,\"priceAtPurchaseDate\": 2446,\"cycleOfInterestPayment\": {\"i\": 2440587,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 365,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 901,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 1,\"lifeFloor\": 401,\"periodCap\": 17,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"180,108,1,1,157,254,166,222,59,75,141,141,203,245,89,21,254,76,230,60,124,234,109,240,19,240,54,18,100,20,142,228\"),stringToBytes32(\"190,6,203,110,254,52,62,98,97,68,47,185,55,235,84,126,56,131,179,11,110,253,42,142,34,96,206,151,220,95,22,232\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,81,20,50,89,86399,0,0,368,0,49,1969,110,0,69,2447,32,68569,7,4799,6,49,2446,Definitions.IPS(2440587,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(365,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(27,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(901,Definitions.P.H,Definitions.S.SHORT,true),1,401,17,900)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [61,172,158,106,233,144,69,11,98,151,80,200,119,226,178,22,218,71,189,59,129,74,78,82,91,101,23,145,193,148,243,231],\"legalEntityIdCounterparty\": [76,137,64,65,52,74,87,250,172,67,171,169,236,90,97,142,255,86,54,195,80,103,67,106,211,54,107,171,23,127,247,78],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 100,\"statusDate\": 65,\"initialExchangeDate\": 27,\"maturityDate\": 367,\"terminationDate\": 2440587,\"purchaseDate\": 2440589,\"capitalizationEndDate\": 4001,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 360,\"notionalPrincipal\": 1461002,\"nominalInterestRate\": 3,\"feeAccrued\": 1969,\"accruedInterest\": 160,\"rateMultiplier\": 16,\"rateSpread\": 28,\"feeRate\": 1532892062,\"nextResetRate\": 1,\"penaltyRate\": 29,\"premiumDiscountAtIED\": 50,\"priceAtPurchaseDate\": 146098,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 359,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 150,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 951,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 256,\"lifeFloor\": 99,\"periodCap\": 10000,\"periodFloor\": 32075}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"61,172,158,106,233,144,69,11,98,151,80,200,119,226,178,22,218,71,189,59,129,74,78,82,91,101,23,145,193,148,243,231\"),stringToBytes32(\"76,137,64,65,52,74,87,250,172,67,171,169,236,90,97,142,255,86,54,195,80,103,67,106,211,54,107,171,23,127,247,78\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,100,65,27,367,2440587,2440589,4001,50,5,254,360,1461002,3,1969,160,16,28,1532892062,1,29,50,146098,Definitions.IPS(81,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(359,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(150,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(951,Definitions.P.Q,Definitions.S.SHORT,false),256,99,10000,32075)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [169,120,255,171,107,15,28,70,249,188,188,188,153,181,25,126,209,254,187,243,121,52,225,58,208,221,152,109,116,162,95,172],\"legalEntityIdCounterparty\": [255,189,50,210,142,137,39,126,92,181,249,34,24,145,15,117,100,240,35,214,174,121,72,175,133,204,208,114,123,11,215,137],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 39,\"statusDate\": 1532892063,\"initialExchangeDate\": 149,\"maturityDate\": 3999,\"terminationDate\": 1461002,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 3,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 1970,\"notionalPrincipal\": 26,\"nominalInterestRate\": 0,\"feeAccrued\": 6,\"accruedInterest\": 400,\"rateMultiplier\": 86400,\"rateSpread\": 4800,\"feeRate\": 2440589,\"nextResetRate\": 6,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 4899,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 11,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 69,\"lifeFloor\": 2,\"periodCap\": 32074,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"169,120,255,171,107,15,28,70,249,188,188,188,153,181,25,126,209,254,187,243,121,52,225,58,208,221,152,109,116,162,95,172\"),stringToBytes32(\"255,189,50,210,142,137,39,126,92,181,249,34,24,145,15,117,100,240,35,214,174,121,72,175,133,204,208,114,123,11,215,137\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,39,1532892063,149,3999,1461002,0,0,3,0,10001,1970,26,0,6,400,86400,4800,2440589,6,1460,9,60,Definitions.IPS(4899,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(110,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(11,Definitions.P.M,Definitions.S.LONG,true),69,2,32074,4899)"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [173,177,183,20,15,95,56,206,219,156,45,215,39,236,66,80,97,178,130,156,240,200,188,136,4,189,184,172,145,173,91,140],\"legalEntityIdCounterparty\": [6,193,146,106,4,189,194,68,165,35,140,174,231,190,9,119,159,122,63,202,148,93,112,50,75,112,83,86,97,136,244,91],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 120,\"statusDate\": 24,\"initialExchangeDate\": 4900,\"maturityDate\": 96,\"terminationDate\": 59,\"purchaseDate\": 159,\"capitalizationEndDate\": 257,\"cycleAnchorDateOfInterestPayment\": 1532892063,\"cycleAnchorDateOfRateReset\": 159,\"cycleAnchorDateOfScalingIndex\": 361,\"cycleAnchorDateOfFee\": 900,\"notionalPrincipal\": 368,\"nominalInterestRate\": 2,\"feeAccrued\": 1338,\"accruedInterest\": 16,\"rateMultiplier\": 15,\"rateSpread\": 66,\"feeRate\": 4799,\"nextResetRate\": 3999,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 99,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 31,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 81,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 13,\"lifeFloor\": 4799,\"periodCap\": 79,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"173,177,183,20,15,95,56,206,219,156,45,215,39,236,66,80,97,178,130,156,240,200,188,136,4,189,184,172,145,173,91,140\"),stringToBytes32(\"6,193,146,106,4,189,194,68,165,35,140,174,231,190,9,119,159,122,63,202,148,93,112,50,75,112,83,86,97,136,244,91\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,120,24,4900,96,59,159,257,1532892063,159,361,900,368,2,1338,16,15,66,4799,3999,40,99,949,Definitions.IPS(31,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(81,Definitions.P.W,Definitions.S.SHORT,true),13,4799,79,1461000)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [195,87,146,65,199,167,72,50,180,13,242,77,203,209,172,39,223,63,187,14,251,218,160,246,193,81,213,90,79,188,230,232],\"legalEntityIdCounterparty\": [196,28,86,67,216,194,231,93,40,53,70,171,103,121,206,148,248,238,34,92,101,85,51,4,236,111,149,133,236,155,134,96],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 2440587,\"statusDate\": 1532892062,\"initialExchangeDate\": 2446,\"maturityDate\": 400,\"terminationDate\": 400,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 139,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 10000,\"nominalInterestRate\": 0,\"feeAccrued\": 3,\"accruedInterest\": 63,\"rateMultiplier\": 2440589,\"rateSpread\": 64,\"feeRate\": 950,\"nextResetRate\": 30,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 1461000,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 20,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 1532892062,\"lifeFloor\": 31,\"periodCap\": 951,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"195,87,146,65,199,167,72,50,180,13,242,77,203,209,172,39,223,63,187,14,251,218,160,246,193,81,213,90,79,188,230,232\"),stringToBytes32(\"196,28,86,67,216,194,231,93,40,53,70,171,103,121,206,148,248,238,34,92,101,85,51,4,236,111,149,133,236,155,134,96\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,2440587,1532892062,2446,400,400,0,0,18,139,141,0,10000,0,3,63,2440589,64,950,30,1460,1461000,3,Definitions.IPS(19,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4901,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(20,Definitions.P.M,Definitions.S.LONG,true),1532892062,31,951,4800)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [52,59,236,21,248,168,31,250,117,208,54,21,48,163,7,243,105,133,30,131,132,167,13,212,190,144,202,100,152,37,186,167],\"legalEntityIdCounterparty\": [174,112,150,142,236,73,85,100,205,171,164,90,85,25,185,154,211,146,119,142,211,204,208,6,9,108,141,116,145,202,41,53],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4899,\"statusDate\": 1338,\"initialExchangeDate\": 97,\"maturityDate\": 7,\"terminationDate\": 95,\"purchaseDate\": 1462,\"capitalizationEndDate\": 256,\"cycleAnchorDateOfInterestPayment\": 63,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 129,\"cycleAnchorDateOfFee\": 119,\"notionalPrincipal\": 121,\"nominalInterestRate\": 2440587,\"feeAccrued\": 101,\"accruedInterest\": 4900,\"rateMultiplier\": 4000,\"rateSpread\": 110,\"feeRate\": 400,\"nextResetRate\": 255,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 9999,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 4901,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 7,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 30,\"lifeFloor\": 365,\"periodCap\": 2014223714,\"periodFloor\": 61}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"52,59,236,21,248,168,31,250,117,208,54,21,48,163,7,243,105,133,30,131,132,167,13,212,190,144,202,100,152,37,186,167\"),stringToBytes32(\"174,112,150,142,236,73,85,100,205,171,164,90,85,25,185,154,211,146,119,142,211,204,208,6,9,108,141,116,145,202,41,53\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4899,1338,97,7,95,1462,256,63,26,129,119,121,2440587,101,4900,4000,110,400,255,71,9999,10,Definitions.IPS(4901,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(7,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(21,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.H,Definitions.S.SHORT,true),30,365,2014223714,61)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [97,37,116,171,148,11,193,204,24,55,136,69,160,191,80,86,129,234,154,132,219,239,27,45,138,103,149,70,96,132,93,93],\"legalEntityIdCounterparty\": [241,16,49,58,42,3,105,57,144,145,38,59,223,105,42,178,100,93,150,216,94,100,39,18,86,192,254,158,51,169,197,204],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 900,\"statusDate\": 151,\"initialExchangeDate\": 361,\"maturityDate\": 1338,\"terminationDate\": 26,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 950,\"cycleAnchorDateOfRateReset\": 17,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 16,\"nominalInterestRate\": 0,\"feeAccrued\": 9,\"accruedInterest\": 1,\"rateMultiplier\": 1,\"rateSpread\": 63,\"feeRate\": 6,\"nextResetRate\": 11,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 97,\"priceAtPurchaseDate\": 140,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4801,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 255,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 950,\"lifeFloor\": 68568,\"periodCap\": 68570,\"periodFloor\": 50}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"97,37,116,171,148,11,193,204,24,55,136,69,160,191,80,86,129,234,154,132,219,239,27,45,138,103,149,70,96,132,93,93\"),stringToBytes32(\"241,16,49,58,42,3,105,57,144,145,38,59,223,105,42,178,100,93,150,216,94,100,39,18,86,192,254,158,51,169,197,204\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,900,151,361,1338,26,0,0,950,17,0,2,16,0,9,1,1,63,6,11,160,97,140,Definitions.IPS(2,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(1532892062,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.D,Definitions.S.SHORT,true),950,68568,68570,50)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [42,177,61,90,99,133,199,221,209,60,220,129,57,0,114,136,110,54,177,191,193,98,147,162,94,162,175,224,215,200,160,210],\"legalEntityIdCounterparty\": [38,96,143,103,126,12,243,131,193,247,185,78,104,123,187,2,9,33,157,141,140,9,149,28,204,255,4,241,157,228,70,207],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 111,\"statusDate\": 16,\"initialExchangeDate\": 1461001,\"maturityDate\": 131,\"terminationDate\": 61,\"purchaseDate\": 32074,\"capitalizationEndDate\": 254,\"cycleAnchorDateOfInterestPayment\": 23,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 14,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 69,\"nominalInterestRate\": 399,\"feeAccrued\": 1461001,\"accruedInterest\": 4000,\"rateMultiplier\": 14,\"rateSpread\": 361,\"feeRate\": 91,\"nextResetRate\": 7,\"penaltyRate\": 161,\"premiumDiscountAtIED\": 4900,\"priceAtPurchaseDate\": 91,\"cycleOfInterestPayment\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 366,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 25,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 367,\"lifeFloor\": 26,\"periodCap\": 2,\"periodFloor\": 29}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"42,177,61,90,99,133,199,221,209,60,220,129,57,0,114,136,110,54,177,191,193,98,147,162,94,162,175,224,215,200,160,210\"),stringToBytes32(\"38,96,143,103,126,12,243,131,193,247,185,78,104,123,187,2,9,33,157,141,140,9,149,28,204,255,4,241,157,228,70,207\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,111,16,1461001,131,61,32074,254,23,2014223715,14,949,69,399,1461001,4000,14,361,91,7,161,4900,91,Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(25,Definitions.P.D,Definitions.S.LONG,true),367,26,2,29)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [212,167,34,167,180,70,198,230,241,232,221,110,75,164,100,189,179,244,56,110,52,141,175,169,247,19,73,245,80,96,129,142],\"legalEntityIdCounterparty\": [74,60,32,103,78,28,49,211,141,72,4,37,90,139,36,39,58,253,212,118,57,124,143,101,56,76,179,52,88,128,155,160],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2447,\"statusDate\": 365,\"initialExchangeDate\": 68570,\"maturityDate\": 71,\"terminationDate\": 1532892062,\"purchaseDate\": 1970,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 40,\"cycleAnchorDateOfRateReset\": 14,\"cycleAnchorDateOfScalingIndex\": 4800,\"cycleAnchorDateOfFee\": 80,\"notionalPrincipal\": 30,\"nominalInterestRate\": 10001,\"feeAccrued\": 2014223716,\"accruedInterest\": 29,\"rateMultiplier\": 1461000,\"rateSpread\": 101,\"feeRate\": 1461000,\"nextResetRate\": 91,\"penaltyRate\": 899,\"premiumDiscountAtIED\": 39,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 140,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 140,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 131,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 14,\"lifeFloor\": 367,\"periodCap\": 21,\"periodFloor\": 32}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"212,167,34,167,180,70,198,230,241,232,221,110,75,164,100,189,179,244,56,110,52,141,175,169,247,19,73,245,80,96,129,142\"),stringToBytes32(\"74,60,32,103,78,28,49,211,141,72,4,37,90,139,36,39,58,253,212,118,57,124,143,101,56,76,179,52,88,128,155,160\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2447,365,68570,71,1532892062,1970,86401,40,14,4800,80,30,10001,2014223716,29,1461000,101,1461000,91,899,39,30,Definitions.IPS(139,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(140,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(140,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(131,Definitions.P.Y,Definitions.S.SHORT,true),14,367,21,32)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [185,12,57,183,87,188,131,67,30,133,124,213,81,135,32,164,73,44,1,214,113,49,161,252,68,85,88,204,23,117,190,8],\"legalEntityIdCounterparty\": [100,225,102,94,44,40,115,221,117,25,125,35,195,104,95,153,34,181,212,81,115,116,157,39,22,81,27,245,34,216,212,112],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 40,\"statusDate\": 901,\"initialExchangeDate\": 1337,\"maturityDate\": 150,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10000,\"cycleAnchorDateOfRateReset\": 2014223715,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 30,\"notionalPrincipal\": 2014223716,\"nominalInterestRate\": 0,\"feeAccrued\": 900,\"accruedInterest\": 365,\"rateMultiplier\": 12,\"rateSpread\": 4899,\"feeRate\": 1462,\"nextResetRate\": 26,\"penaltyRate\": 48,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 129,\"cycleOfInterestPayment\": {\"i\": 1532892064,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 119,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440588,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1971,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 4900,\"lifeFloor\": 130,\"periodCap\": 14,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"185,12,57,183,87,188,131,67,30,133,124,213,81,135,32,164,73,44,1,214,113,49,161,252,68,85,88,204,23,117,190,8\"),stringToBytes32(\"100,225,102,94,44,40,115,221,117,25,125,35,195,104,95,153,34,181,212,81,115,116,157,39,22,81,27,245,34,216,212,112\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,40,901,1337,150,0,0,0,10000,2014223715,110,30,2014223716,0,900,365,12,4899,1462,26,48,21,129,Definitions.IPS(1532892064,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(119,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1971,Definitions.P.M,Definitions.S.LONG,true),4900,130,14,64)"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [213,242,100,201,27,71,239,141,137,40,120,143,201,210,236,121,149,133,145,127,122,67,169,215,117,183,32,149,80,73,180,210],\"legalEntityIdCounterparty\": [211,239,79,107,139,138,168,109,155,87,247,9,173,80,46,172,220,104,196,198,39,150,179,51,46,27,229,81,65,194,165,172],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 70,\"statusDate\": 6,\"initialExchangeDate\": 5,\"maturityDate\": 14,\"terminationDate\": 361,\"purchaseDate\": 14,\"capitalizationEndDate\": 29,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 81,\"nominalInterestRate\": 359,\"feeAccrued\": 29,\"accruedInterest\": 13,\"rateMultiplier\": 20,\"rateSpread\": 32076,\"feeRate\": 39,\"nextResetRate\": 68569,\"penaltyRate\": 361,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 70,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 7,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 8,\"lifeFloor\": 2446,\"periodCap\": 361,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"213,242,100,201,27,71,239,141,137,40,120,143,201,210,236,121,149,133,145,127,122,67,169,215,117,183,32,149,80,73,180,210\"),stringToBytes32(\"211,239,79,107,139,138,168,109,155,87,247,9,173,80,46,172,220,104,196,198,39,150,179,51,46,27,229,81,65,194,165,172\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,70,6,5,14,361,14,29,131,9999,150,3999,81,359,29,13,20,32076,39,68569,361,109,368,Definitions.IPS(365,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(7,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.SHORT,false),8,2446,361,60)"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [65,152,199,69,231,117,231,199,57,42,171,62,176,234,156,20,255,171,142,185,8,134,240,223,62,88,70,84,110,154,18,22],\"legalEntityIdCounterparty\": [71,211,112,177,43,187,21,179,127,207,221,173,132,24,11,232,252,11,44,98,143,229,163,139,78,221,22,213,113,58,249,6],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 9999,\"statusDate\": 4001,\"initialExchangeDate\": 1971,\"maturityDate\": 71,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4899,\"cycleAnchorDateOfRateReset\": 39,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 0,\"feeAccrued\": 60,\"accruedInterest\": 66,\"rateMultiplier\": 151,\"rateSpread\": 68568,\"feeRate\": 2440587,\"nextResetRate\": 1969,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4001,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 5,\"lifeFloor\": 1532892062,\"periodCap\": 1461002,\"periodFloor\": 159}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"65,152,199,69,231,117,231,199,57,42,171,62,176,234,156,20,255,171,142,185,8,134,240,223,62,88,70,84,110,154,18,22\"),stringToBytes32(\"71,211,112,177,43,187,21,179,127,207,221,173,132,24,11,232,252,11,44,98,143,229,163,139,78,221,22,213,113,58,249,6\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,9999,4001,1971,71,0,0,0,4899,39,81,120,3999,0,60,66,151,68568,2440587,1969,4900,2014223715,96,Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4001,Definitions.P.M,Definitions.S.SHORT,false),5,1532892062,1461002,159)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.251ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T12:16:39.272ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}