,{
  "2020-11-12T00:16:46.396ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "399",
                "sol": "399"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.400ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.401ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.403ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.404ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.405ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.407ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month<=0",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.430ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.435ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.435ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.435ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.436ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.436ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.438ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.442ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.442ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.442ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.443ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.443ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.443ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.444ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.444ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.444ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.446ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.446ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.446ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.447ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.447ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.448ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.448ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.448ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.449ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.449ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.450ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440589,
                "sol": 2440589
              },
              {
                "js": "2440588",
                "sol": "2440588"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.450ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.451ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10001,
                "sol": 10001
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.452ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 32075,
                "sol": 32075
              },
              {
                "js": "32074",
                "sol": "32074"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.453ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 30,
                "sol": 30
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.454ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 86401,
                "sol": 86401
              },
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.456ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.458ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "86399",
                "sol": "86399"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.462ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.ContractRole.GUA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.467ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "364",
                "sol": "364"
              },
              {
                "js": 363,
                "sol": 363
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 30,
                "sol": 30
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": 59,
                "sol": 59
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "3999",
                "sol": "3999"
              },
              {
                "js": 3998,
                "sol": 3998
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4001",
                "sol": "4001"
              },
              {
                "js": 4000,
                "sol": 4000
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T00:16:46.472ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.473ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.473ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.473ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.475ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{\"i\": 89,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(89,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 2446,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2446,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{\"i\": 79,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{\"i\": 146098,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146098,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.478ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.479ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.480ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.483ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.489ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.493ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.495ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.499ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2447,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 146097,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(146097,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 9999,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(9999,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 368,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(368,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 31,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(31,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 146097,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(146097,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.503ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{\"i\": 159,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{\"i\": 160,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(160,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{\"i\": 1336,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1336,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{\"i\": 1461001,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1461001,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{\"i\": 68570,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(68570,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{\"i\": 365,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(365,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{\"i\": 900,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(900,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 254,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(254,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{\"i\": 4001,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4001,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.511ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 11,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(11,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 359,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(359,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 899,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(899,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 61,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(61,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 1461000,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1461000,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 15,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.514ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 120,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 17},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 13,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 12,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 2446,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 13},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 26,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 160,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 0},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 139,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 150,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 64,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 4901,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 59,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 10000,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 4000,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 49,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 5,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 255,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 48,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 161,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 59,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 949,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 140,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 17,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 2014223715,\"eventType\": 11,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 3,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 60,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 2440588,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 1336,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 254,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2446,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 130,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 256,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1970,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 3999,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 4899,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 121,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 367,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 32074,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 2014223714,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 2448,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 4801,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 17},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 2448,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 359,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 129,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 2440589,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 32076,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 365,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 359,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 160,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 399,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 129,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 130,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 255,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 950,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 27,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 1532892064,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 159,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 368,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 399,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 2014223714,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 6,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 2,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 10},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 4801,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 364,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 951,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 12}]",
              "sol": "[Definitions.ProtoEvent(109,2447,120,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MR),Definitions.ProtoEvent(15,21,13,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(90,1461000,12,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(401,20,2446,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RRY),Definitions.ProtoEvent(129,86399,26,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(109,1970,160,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SD),Definitions.ProtoEvent(119,4901,139,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(91,949,150,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(79,6,64,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(256,1337,4901,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(1971,4,59,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(400,90,10000,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(141,5,4000,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(254,121,49,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(400,146096,5,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(1461,16,255,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(129,32,48,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(361,6,161,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(50,4000,59,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(24,146098,949,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(121,146097,140,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(4001,1336,17,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(399,31,2014223715,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(9,366,3,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(50,61,60,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(4899,65,2440588,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(367,14,1336,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(23,1971,254,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(359,10001,2446,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(360,146096,130,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(1,359,256,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(17,2446,1970,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(1532892063,900,3999,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(360,89,4899,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(1462,1461001,121,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(120,365,367,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(68569,159,32074,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(49,101,2014223714,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(367,1461000,2448,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(1461000,71,4801,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MR),Definitions.ProtoEvent(12,399,2448,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(16,360,359,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(86400,1971,129,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(48,2440589,2440589,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(18,901,32076,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(4001,1532892063,365,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(400,26,359,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(1336,4800,160,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(1461,19,399,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(150,160,129,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(368,10001,130,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(65,12,255,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(150,91,950,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(146096,161,27,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(131,95,1532892064,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(32074,4799,159,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(146097,4001,368,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(4899,40,399,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(149,66,2014223714,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(27,368,6,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(86400,41,2,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.TD),Definitions.ProtoEvent(2014223715,949,4801,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(97,360,364,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(2014223715,24,951,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR)]"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.527ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 49,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 1532892062,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 17},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 17,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 368,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 19},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 12,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 899,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 1971,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 4,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 32075,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 21,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 367,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 255,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 1338,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 900,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 254,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 2,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 257,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 32,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 32075,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 89,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 7},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 41,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 255,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 400,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 8},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 159,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 32075,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 26,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 4900,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 121,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1532892062,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 9,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 27,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 2440588,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 146097,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 4801,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 366,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 399,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 17},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 1969,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 0,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 30,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 161,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 161,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 26,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 24,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 159,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 14,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 17,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 4899,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 366,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4000,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 100,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 6},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 9999,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 66,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 17},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 2440587,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 81,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 1338,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 10000,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 146098,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 949,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 2440587,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 161,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 32,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 1532892064,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 61,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 120,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 16}]",
              "sol": "[Definitions.ProtoEvent(10,366,49,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(949,254,1532892062,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MR),Definitions.ProtoEvent(19,66,17,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(1338,13,368,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.STD),Definitions.ProtoEvent(899,4799,12,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(71,63,899,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(1532892063,4001,1971,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(64,14,4,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(254,79,32075,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(4800,367,21,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(151,10001,367,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(901,950,255,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(1969,9999,1338,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(8,366,900,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(21,80,254,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(1969,359,2,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(10000,90,257,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(900,26,32,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(950,1461000,32075,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(139,2014223714,89,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PY),Definitions.ProtoEvent(1971,6,41,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(68569,254,255,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(255,121,400,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.FP),Definitions.ProtoEvent(1,16,159,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(27,30,32075,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(51,6,26,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(254,9,4900,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(71,111,121,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(151,4801,1532892062,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(48,99,9,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(360,2446,27,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(1532892063,399,2440588,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(361,4900,146097,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(59,28,4801,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(365,401,366,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(31,20,399,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MR),Definitions.ProtoEvent(361,31,1969,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(13,1461001,0,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(40,63,30,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(11,28,161,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(3,21,161,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(146097,160,26,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(4000,69,24,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(119,1461000,159,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(4899,96,14,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(110,1462,17,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(70,140,4899,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(359,4901,366,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(401,21,4000,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(9999,6,100,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PP),Definitions.ProtoEvent(64,64,9999,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(68568,1338,66,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MR),Definitions.ProtoEvent(1971,361,2440587,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(91,159,81,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(2447,950,1338,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(1461000,4800,10000,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(257,254,146098,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(2440589,9999,949,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(41,140,2440587,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(39,5,161,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(140,257,32,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(159,91,1532892064,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(2448,9,61,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(4000,1336,120,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV)]"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.549ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.552ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [42,36,75,181,236,235,228,203,100,223,23,138,91,149,173,231,149,226,115,124,233,187,198,212,188,230,6,249,1,61,173,127],\"legalEntityIdCounterparty\": [81,38,117,151,48,253,60,159,112,123,59,200,206,186,129,177,246,162,196,53,80,127,14,116,107,54,15,210,80,56,6,151],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 8,\"statusDate\": 139,\"initialExchangeDate\": 950,\"maturityDate\": 4901,\"terminationDate\": 151,\"purchaseDate\": 146097,\"capitalizationEndDate\": 2440589,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 89,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 14,\"notionalPrincipal\": 81,\"nominalInterestRate\": 101,\"feeAccrued\": 4799,\"accruedInterest\": 110,\"rateMultiplier\": 68568,\"rateSpread\": 40,\"feeRate\": 949,\"nextResetRate\": 41,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 1462,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 69,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1970,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 366,\"lifeFloor\": 9999,\"periodCap\": 95,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"42,36,75,181,236,235,228,203,100,223,23,138,91,149,173,231,149,226,115,124,233,187,198,212,188,230,6,249,1,61,173,127\"),stringToBytes32(\"81,38,117,151,48,253,60,159,112,123,59,200,206,186,129,177,246,162,196,53,80,127,14,116,107,54,15,210,80,56,6,151\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,8,139,950,4901,151,146097,2440589,2446,89,20,14,81,101,4799,110,68568,40,949,41,19,255,139,Definitions.IPS(1462,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(69,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(59,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1970,Definitions.P.Y,Definitions.S.LONG,true),366,9999,95,31)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.557ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [29,119,178,57,109,233,210,158,35,161,239,60,18,4,202,8,253,216,194,227,21,103,156,201,245,224,0,215,199,228,225,169],\"legalEntityIdCounterparty\": [98,149,152,155,95,188,166,63,17,128,132,57,1,216,31,155,122,133,253,7,100,113,202,196,157,225,203,7,185,56,87,62],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 60,\"statusDate\": 111,\"initialExchangeDate\": 65,\"maturityDate\": 1461,\"terminationDate\": 65,\"purchaseDate\": 1461000,\"capitalizationEndDate\": 81,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 4799,\"cycleAnchorDateOfScalingIndex\": 65,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 16,\"nominalInterestRate\": 951,\"feeAccrued\": 3999,\"accruedInterest\": 97,\"rateMultiplier\": 359,\"rateSpread\": 16,\"feeRate\": 1461001,\"nextResetRate\": 150,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 149,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 66,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 70,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 32076,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 1970,\"lifeFloor\": 159,\"periodCap\": 400,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"29,119,178,57,109,233,210,158,35,161,239,60,18,4,202,8,253,216,194,227,21,103,156,201,245,224,0,215,199,228,225,169\"),stringToBytes32(\"98,149,152,155,95,188,166,63,17,128,132,57,1,216,31,155,122,133,253,7,100,113,202,196,157,225,203,7,185,56,87,62\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,60,111,65,1461,65,1461000,81,15,4799,65,120,16,951,3999,97,359,16,1461001,150,79,149,49,Definitions.IPS(66,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(70,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(13,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(32076,Definitions.P.M,Definitions.S.SHORT,true),1970,159,400,4800)"
            },
            {
              "js": "{\"lastEventTime\": 6,\"contractStatus\": 2,\"timeFromLastEvent\": 64,\"nominalValue\": 86401,\"nominalAccrued\": 11,\"feeAccrued\": 10001,\"nominalRate\": 1,\"interestScalingMultiplier\": 30,\"nominalScalingMultiplier\": 2,\"contractRoleSign\": 2}",
              "sol": "Definitions.ContractState(6,Definitions.ContractStatus.DQ,64,86401,11,10001,1,30,2,Definitions.ContractRole.LG)"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.561ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [46,22,155,32,181,139,16,82,220,10,250,11,19,154,122,64,149,170,169,199,192,116,211,161,21,10,194,65,52,233,36,5],\"legalEntityIdCounterparty\": [155,98,169,90,47,78,129,132,44,153,83,84,214,123,244,120,171,78,73,55,252,149,141,19,70,227,124,166,58,254,205,4],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 91,\"statusDate\": 15,\"initialExchangeDate\": 1336,\"maturityDate\": 20,\"terminationDate\": 2440588,\"purchaseDate\": 141,\"capitalizationEndDate\": 111,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 9,\"cycleAnchorDateOfScalingIndex\": 256,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 2,\"nominalInterestRate\": 140,\"feeAccrued\": 4001,\"accruedInterest\": 4901,\"rateMultiplier\": 401,\"rateSpread\": 2447,\"feeRate\": 364,\"nextResetRate\": 2014223715,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 254,\"priceAtPurchaseDate\": 367,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 12,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1336,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 4901,\"lifeFloor\": 32,\"periodCap\": 48,\"periodFloor\": 13}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"46,22,155,32,181,139,16,82,220,10,250,11,19,154,122,64,149,170,169,199,192,116,211,161,21,10,194,65,52,233,36,5\"),stringToBytes32(\"155,98,169,90,47,78,129,132,44,153,83,84,214,123,244,120,171,78,73,55,252,149,141,19,70,227,124,166,58,254,205,4\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,91,15,1336,20,2440588,141,111,160,9,256,2448,2,140,4001,4901,401,2447,364,2014223715,4899,254,367,Definitions.IPS(16,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(12,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1336,Definitions.P.W,Definitions.S.SHORT,false),4901,32,48,13)"
            },
            {
              "js": "{\"lastEventTime\": 66,\"contractStatus\": 2,\"timeFromLastEvent\": 1,\"nominalValue\": 2,\"nominalAccrued\": 26,\"feeAccrued\": 368,\"nominalRate\": 257,\"interestScalingMultiplier\": 949,\"nominalScalingMultiplier\": 7,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(66,Definitions.ContractStatus.DQ,1,2,26,368,257,949,7,Definitions.ContractRole.RPL)"
            },
            {
              "js": "{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 12}",
              "sol": "Definitions.ProtoEvent(64,2446,1,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR)"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.569ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [194,93,203,222,160,192,187,21,152,167,205,160,237,2,18,207,168,252,175,217,148,163,136,244,33,193,202,166,255,237,127,233],\"legalEntityIdCounterparty\": [128,67,17,150,98,120,215,91,42,171,88,203,255,44,141,43,189,49,217,144,246,251,143,101,119,101,63,47,145,37,153,154],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1532892062,\"statusDate\": 1,\"initialExchangeDate\": 89,\"maturityDate\": 51,\"terminationDate\": 146098,\"purchaseDate\": 1969,\"capitalizationEndDate\": 81,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 119,\"feeAccrued\": 1532892064,\"accruedInterest\": 4899,\"rateMultiplier\": 81,\"rateSpread\": 4801,\"feeRate\": 146097,\"nextResetRate\": 254,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 3999,\"priceAtPurchaseDate\": 367,\"cycleOfInterestPayment\": {\"i\": 40,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 111,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4799,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 899,\"lifeFloor\": 2014223716,\"periodCap\": 26,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"194,93,203,222,160,192,187,21,152,167,205,160,237,2,18,207,168,252,175,217,148,163,136,244,33,193,202,166,255,237,127,233\"),stringToBytes32(\"128,67,17,150,98,120,215,91,42,171,88,203,255,44,141,43,189,49,217,144,246,251,143,101,119,101,63,47,145,37,153,154\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1532892062,1,89,51,146098,1969,81,24,1532892064,0,2447,1461000,119,1532892064,4899,81,4801,146097,254,1532892062,3999,367,Definitions.IPS(40,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(63,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.LONG,false),899,2014223716,26,950)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [191,248,54,179,44,8,13,72,83,99,125,252,122,67,68,4,205,220,144,236,108,139,88,36,130,192,111,202,21,220,133,146],\"legalEntityIdCounterparty\": [42,155,216,104,7,34,165,134,222,180,22,11,185,143,95,97,104,182,241,113,6,205,124,160,185,63,64,163,223,135,231,71],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 63,\"statusDate\": 63,\"initialExchangeDate\": 146097,\"maturityDate\": 2448,\"terminationDate\": 1971,\"purchaseDate\": 26,\"capitalizationEndDate\": 1532892064,\"cycleAnchorDateOfInterestPayment\": 40,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 2,\"nominalInterestRate\": 79,\"feeAccrued\": 90,\"accruedInterest\": 41,\"rateMultiplier\": 146097,\"rateSpread\": 86400,\"feeRate\": 255,\"nextResetRate\": 1,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 16,\"priceAtPurchaseDate\": 2440588,\"cycleOfInterestPayment\": {\"i\": 68569,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4799,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 4800,\"lifeFloor\": 90,\"periodCap\": 10001,\"periodFloor\": 1337}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"191,248,54,179,44,8,13,72,83,99,125,252,122,67,68,4,205,220,144,236,108,139,88,36,130,192,111,202,21,220,133,146\"),stringToBytes32(\"42,155,216,104,7,34,165,134,222,180,22,11,185,143,95,97,104,182,241,113,6,205,124,160,185,63,64,163,223,135,231,71\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,63,63,146097,2448,1971,26,1532892064,40,91,81,1969,2,79,90,41,146097,86400,255,1,71,16,2440588,Definitions.IPS(68569,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4000,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.Q,Definitions.S.SHORT,true),4800,90,10001,1337)"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [239,9,11,164,61,105,155,109,38,158,51,25,184,245,219,150,103,214,58,85,112,150,41,255,191,6,140,127,132,29,54,8],\"legalEntityIdCounterparty\": [7,113,86,106,54,43,69,114,108,86,142,221,163,78,57,176,234,82,158,241,200,199,58,160,22,22,253,253,164,130,153,213],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 19,\"statusDate\": 3999,\"initialExchangeDate\": 131,\"maturityDate\": 3999,\"terminationDate\": 86401,\"purchaseDate\": 254,\"capitalizationEndDate\": 95,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 12,\"cycleAnchorDateOfScalingIndex\": 10000,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 70,\"nominalInterestRate\": 141,\"feeAccrued\": 1337,\"accruedInterest\": 51,\"rateMultiplier\": 1970,\"rateSpread\": 81,\"feeRate\": 130,\"nextResetRate\": 111,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 10001,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 1462,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 18,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 109,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 3999,\"lifeFloor\": 6,\"periodCap\": 86399,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"239,9,11,164,61,105,155,109,38,158,51,25,184,245,219,150,103,214,58,85,112,150,41,255,191,6,140,127,132,29,54,8\"),stringToBytes32(\"7,113,86,106,54,43,69,114,108,86,142,221,163,78,57,176,234,82,158,241,200,199,58,160,22,22,253,253,164,130,153,213\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,19,3999,131,3999,86401,254,95,359,12,10000,32,70,141,1337,51,1970,81,130,111,109,10001,8,Definitions.IPS(1462,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(18,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(901,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(109,Definitions.P.Q,Definitions.S.SHORT,false),3999,6,86399,4801)"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [117,97,241,233,28,236,136,44,226,56,145,121,129,45,13,241,172,47,84,123,103,70,216,72,146,127,188,102,224,120,97,119],\"legalEntityIdCounterparty\": [4,57,184,157,178,180,43,0,136,124,84,76,232,6,192,80,150,113,100,122,142,101,141,54,55,4,50,140,5,27,137,113],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 900,\"statusDate\": 366,\"initialExchangeDate\": 99,\"maturityDate\": 1461,\"terminationDate\": 159,\"purchaseDate\": 368,\"capitalizationEndDate\": 109,\"cycleAnchorDateOfInterestPayment\": 32,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 18,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 10001,\"nominalInterestRate\": 10001,\"feeAccrued\": 81,\"accruedInterest\": 1,\"rateMultiplier\": 51,\"rateSpread\": 111,\"feeRate\": 69,\"nextResetRate\": 17,\"penaltyRate\": 26,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 96,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 86401,\"lifeFloor\": 68570,\"periodCap\": 1336,\"periodFloor\": 7}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"117,97,241,233,28,236,136,44,226,56,145,121,129,45,13,241,172,47,84,123,103,70,216,72,146,127,188,102,224,120,97,119\"),stringToBytes32(\"4,57,184,157,178,180,43,0,136,124,84,76,232,6,192,80,150,113,100,122,142,101,141,54,55,4,50,140,5,27,137,113\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,900,366,99,1461,159,368,109,32,4001,18,254,10001,10001,81,1,51,111,69,17,26,1460,1461,Definitions.IPS(2,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.D,Definitions.S.LONG,false),86401,68570,1336,7)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [226,107,85,205,60,164,116,255,207,31,37,177,187,245,183,80,10,137,157,87,167,185,137,225,230,222,91,211,93,90,14,108],\"legalEntityIdCounterparty\": [242,62,127,25,242,120,53,212,251,194,177,95,161,200,138,124,162,48,222,54,255,216,212,147,33,147,165,118,0,165,60,61],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 68568,\"statusDate\": 150,\"initialExchangeDate\": 141,\"maturityDate\": 121,\"terminationDate\": 26,\"purchaseDate\": 0,\"capitalizationEndDate\": 81,\"cycleAnchorDateOfInterestPayment\": 1338,\"cycleAnchorDateOfRateReset\": 1,\"cycleAnchorDateOfScalingIndex\": 900,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 28,\"nominalInterestRate\": 1,\"feeAccrued\": 91,\"accruedInterest\": 111,\"rateMultiplier\": 27,\"rateSpread\": 4,\"feeRate\": 0,\"nextResetRate\": 2440589,\"penaltyRate\": 100,\"premiumDiscountAtIED\": 30,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 121,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1460,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 399,\"lifeFloor\": 97,\"periodCap\": 95,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"226,107,85,205,60,164,116,255,207,31,37,177,187,245,183,80,10,137,157,87,167,185,137,225,230,222,91,211,93,90,14,108\"),stringToBytes32(\"242,62,127,25,242,120,53,212,251,194,177,95,161,200,138,124,162,48,222,54,255,216,212,147,33,147,165,118,0,165,60,61\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,68568,150,141,121,26,0,81,1338,1,900,365,28,1,91,111,27,4,0,2440589,100,30,40,Definitions.IPS(121,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(160,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1460,Definitions.P.M,Definitions.S.SHORT,true),399,97,95,0)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [145,90,59,18,215,31,253,171,208,139,30,103,90,32,131,20,214,38,135,143,156,95,252,95,242,182,251,219,245,76,74,71],\"legalEntityIdCounterparty\": [21,161,79,78,81,186,200,199,201,182,123,27,219,58,159,53,224,123,56,81,79,188,190,119,59,248,142,42,95,17,159,143],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4,\"statusDate\": 89,\"initialExchangeDate\": 9999,\"maturityDate\": 899,\"terminationDate\": 65,\"purchaseDate\": 160,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 2447,\"cycleAnchorDateOfRateReset\": 80,\"cycleAnchorDateOfScalingIndex\": 360,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 130,\"feeAccrued\": 79,\"accruedInterest\": 27,\"rateMultiplier\": 109,\"rateSpread\": 10,\"feeRate\": 0,\"nextResetRate\": 71,\"penaltyRate\": 4800,\"premiumDiscountAtIED\": 4001,\"priceAtPurchaseDate\": 111,\"cycleOfInterestPayment\": {\"i\": 32075,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 146098,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 367,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 364,\"lifeFloor\": 32,\"periodCap\": 149,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"145,90,59,18,215,31,253,171,208,139,30,103,90,32,131,20,214,38,135,143,156,95,252,95,242,182,251,219,245,76,74,71\"),stringToBytes32(\"21,161,79,78,81,186,200,199,201,182,123,27,219,58,159,53,224,123,56,81,79,188,190,119,59,248,142,42,95,17,159,143\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4,89,9999,899,65,160,60,2447,80,360,366,4000,130,79,27,109,10,0,71,4800,4001,111,Definitions.IPS(32075,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(146098,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(63,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.W,Definitions.S.LONG,false),364,32,149,1532892064)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [44,100,56,215,3,99,86,40,173,128,21,246,139,210,205,252,208,16,156,215,48,24,208,182,218,248,201,229,188,72,130,224],\"legalEntityIdCounterparty\": [89,161,214,119,57,81,82,44,15,198,85,203,17,39,221,10,151,126,138,178,164,117,183,156,128,143,39,103,35,129,66,161],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 18,\"statusDate\": 146098,\"initialExchangeDate\": 4799,\"maturityDate\": 4799,\"terminationDate\": 65,\"purchaseDate\": 400,\"capitalizationEndDate\": 1971,\"cycleAnchorDateOfInterestPayment\": 146096,\"cycleAnchorDateOfRateReset\": 130,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 101,\"nominalInterestRate\": 254,\"feeAccrued\": 1461001,\"accruedInterest\": 4001,\"rateMultiplier\": 151,\"rateSpread\": 97,\"feeRate\": 28,\"nextResetRate\": 14,\"penaltyRate\": 30,\"premiumDiscountAtIED\": 365,\"priceAtPurchaseDate\": 28,\"cycleOfInterestPayment\": {\"i\": 40,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 96,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 0,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 111,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 23,\"lifeFloor\": 120,\"periodCap\": 899,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"44,100,56,215,3,99,86,40,173,128,21,246,139,210,205,252,208,16,156,215,48,24,208,182,218,248,201,229,188,72,130,224\"),stringToBytes32(\"89,161,214,119,57,81,82,44,15,198,85,203,17,39,221,10,151,126,138,178,164,117,183,156,128,143,39,103,35,129,66,161\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,18,146098,4799,4799,65,400,1971,146096,130,10001,3999,101,254,1461001,4001,151,97,28,14,30,365,28,Definitions.IPS(40,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(0,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.D,Definitions.S.LONG,true),23,120,899,14)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [102,26,197,239,114,218,69,104,144,95,235,220,92,27,61,3,168,225,132,109,232,22,68,242,186,134,155,156,57,233,204,196],\"legalEntityIdCounterparty\": [172,201,117,50,129,151,197,203,0,27,130,72,101,173,42,14,53,235,102,46,231,32,6,183,182,83,116,164,27,254,116,67],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 65,\"statusDate\": 5,\"initialExchangeDate\": 32074,\"maturityDate\": 70,\"terminationDate\": 1461002,\"purchaseDate\": 11,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 32076,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 951,\"nominalInterestRate\": 151,\"feeAccrued\": 7,\"accruedInterest\": 40,\"rateMultiplier\": 32075,\"rateSpread\": 4799,\"feeRate\": 2440588,\"nextResetRate\": 25,\"penaltyRate\": 365,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 5,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 91,\"lifeFloor\": 130,\"periodCap\": 2014223714,\"periodFloor\": 146097}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"102,26,197,239,114,218,69,104,144,95,235,220,92,27,61,3,168,225,132,109,232,22,68,242,186,134,155,156,57,233,204,196\"),stringToBytes32(\"172,201,117,50,129,151,197,203,0,27,130,72,101,173,42,14,53,235,102,46,231,32,6,183,182,83,116,164,27,254,116,67\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,65,5,32074,70,1461002,11,0,360,32076,10001,39,951,151,7,40,32075,4799,2440588,25,365,1462,68570,Definitions.IPS(4799,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(5,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(129,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(17,Definitions.P.W,Definitions.S.SHORT,false),91,130,2014223714,146097)"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [91,207,139,109,31,126,169,152,41,9,109,43,79,152,145,209,182,126,105,73,112,252,255,105,144,26,135,179,84,72,228,96],\"legalEntityIdCounterparty\": [240,129,70,221,234,12,70,58,89,234,242,80,245,226,156,130,65,103,152,124,175,230,253,143,228,60,103,35,226,10,184,227],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 25,\"statusDate\": 10001,\"initialExchangeDate\": 89,\"maturityDate\": 10001,\"terminationDate\": 2,\"purchaseDate\": 899,\"capitalizationEndDate\": 48,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 15,\"nominalInterestRate\": 28,\"feeAccrued\": 25,\"accruedInterest\": 10,\"rateMultiplier\": 400,\"rateSpread\": 146096,\"feeRate\": 30,\"nextResetRate\": 950,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 111,\"cycleOfInterestPayment\": {\"i\": 1532892062,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 10,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 100,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 10001,\"lifeFloor\": 86399,\"periodCap\": 150,\"periodFloor\": 9}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"91,207,139,109,31,126,169,152,41,9,109,43,79,152,145,209,182,126,105,73,112,252,255,105,144,26,135,179,84,72,228,96\"),stringToBytes32(\"240,129,70,221,234,12,70,58,89,234,242,80,245,226,156,130,65,103,152,124,175,230,253,143,228,60,103,35,226,10,184,227\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,25,10001,89,10001,2,899,48,6,13,81,366,15,28,25,10,400,146096,30,950,366,25,111,Definitions.IPS(1532892062,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(10,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(100,Definitions.P.W,Definitions.S.LONG,false),10001,86399,150,9)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [4,236,103,204,238,59,11,66,91,208,78,110,140,36,90,66,98,134,84,254,170,97,255,40,165,141,108,24,103,132,251,45],\"legalEntityIdCounterparty\": [207,75,70,2,228,92,154,231,210,138,168,85,145,132,9,66,95,224,64,126,123,5,15,190,119,25,28,146,34,243,57,41],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 95,\"initialExchangeDate\": 2446,\"maturityDate\": 10001,\"terminationDate\": 141,\"purchaseDate\": 28,\"capitalizationEndDate\": 64,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 254,\"cycleAnchorDateOfFee\": 10001,\"notionalPrincipal\": 6,\"nominalInterestRate\": 254,\"feeAccrued\": 90,\"accruedInterest\": 2014223714,\"rateMultiplier\": 14,\"rateSpread\": 2446,\"feeRate\": 1,\"nextResetRate\": 368,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 60,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 150,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 2,\"lifeFloor\": 27,\"periodCap\": 99,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"4,236,103,204,238,59,11,66,91,208,78,110,140,36,90,66,98,134,84,254,170,97,255,40,165,141,108,24,103,132,251,45\"),stringToBytes32(\"207,75,70,2,228,92,154,231,210,138,168,85,145,132,9,66,95,224,64,126,123,5,15,190,119,25,28,146,34,243,57,41\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1461,95,2446,10001,141,28,64,949,90,254,10001,6,254,90,2014223714,14,2446,1,368,4899,5,66,Definitions.IPS(368,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2447,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(150,Definitions.P.M,Definitions.S.SHORT,false),2,27,99,1336)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [58,241,146,229,86,175,10,199,197,172,186,75,13,169,154,55,172,224,173,8,197,33,153,203,218,208,122,233,132,35,162,19],\"legalEntityIdCounterparty\": [174,206,180,110,40,167,220,218,159,19,202,67,154,37,88,172,246,151,94,249,155,12,68,27,23,63,81,235,231,59,166,174],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 5,\"statusDate\": 120,\"initialExchangeDate\": 71,\"maturityDate\": 11,\"terminationDate\": 68568,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 91,\"nominalInterestRate\": 0,\"feeAccrued\": 109,\"accruedInterest\": 30,\"rateMultiplier\": 1338,\"rateSpread\": 19,\"feeRate\": 366,\"nextResetRate\": 146097,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 10000,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 899,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 49,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1969,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 146098,\"lifeFloor\": 1,\"periodCap\": 4899,\"periodFloor\": 121}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"58,241,146,229,86,175,10,199,197,172,186,75,13,169,154,55,172,224,173,8,197,33,153,203,218,208,122,233,132,35,162,19\"),stringToBytes32(\"174,206,180,110,40,167,220,218,159,19,202,67,154,37,88,172,246,151,94,249,155,12,68,27,23,63,81,235,231,59,166,174\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,5,120,71,11,68568,0,0,31,27,119,2440588,91,0,109,30,1338,19,366,146097,366,10000,1336,Definitions.IPS(899,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(49,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(32074,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1969,Definitions.P.M,Definitions.S.SHORT,false),146098,1,4899,121)"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [79,113,152,119,221,29,207,197,94,95,252,147,197,248,186,30,75,225,206,150,107,49,87,19,225,227,87,168,42,55,203,191],\"legalEntityIdCounterparty\": [148,119,127,178,220,105,146,210,47,129,253,212,47,31,8,241,135,38,32,89,87,64,101,229,109,60,146,189,69,101,196,240],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 367,\"statusDate\": 130,\"initialExchangeDate\": 131,\"maturityDate\": 131,\"terminationDate\": 101,\"purchaseDate\": 31,\"capitalizationEndDate\": 68568,\"cycleAnchorDateOfInterestPayment\": 2,\"cycleAnchorDateOfRateReset\": 24,\"cycleAnchorDateOfScalingIndex\": 23,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 1532892062,\"feeAccrued\": 26,\"accruedInterest\": 91,\"rateMultiplier\": 111,\"rateSpread\": 97,\"feeRate\": 367,\"nextResetRate\": 901,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 4899,\"priceAtPurchaseDate\": 1969,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 61,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 23,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 20,\"lifeFloor\": 65,\"periodCap\": 130,\"periodFloor\": 4799}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"79,113,152,119,221,29,207,197,94,95,252,147,197,248,186,30,75,225,206,150,107,49,87,19,225,227,87,168,42,55,203,191\"),stringToBytes32(\"148,119,127,178,220,105,146,210,47,129,253,212,47,31,8,241,135,38,32,89,87,64,101,229,109,60,146,189,69,101,196,240\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,367,130,131,131,101,31,68568,2,24,23,1532892063,32074,1532892062,26,91,111,97,367,901,6,4899,1969,Definitions.IPS(16,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(61,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4800,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(23,Definitions.P.D,Definitions.S.LONG,false),20,65,130,4799)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [190,236,77,8,221,29,155,204,120,127,111,207,98,3,250,114,69,141,75,179,173,51,68,235,95,146,105,127,226,168,195,182],\"legalEntityIdCounterparty\": [142,106,29,29,2,42,232,46,254,242,184,230,148,47,113,75,164,181,53,58,61,86,81,73,21,209,148,87,165,14,163,164],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1461001,\"statusDate\": 64,\"initialExchangeDate\": 2014223714,\"maturityDate\": 2014223714,\"terminationDate\": 1461000,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 41,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 16,\"nominalInterestRate\": 0,\"feeAccrued\": 13,\"accruedInterest\": 90,\"rateMultiplier\": 60,\"rateSpread\": 21,\"feeRate\": 1971,\"nextResetRate\": 32,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 63,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 21,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 95,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 121,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 49,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 1337,\"lifeFloor\": 1971,\"periodCap\": 25,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"190,236,77,8,221,29,155,204,120,127,111,207,98,3,250,114,69,141,75,179,173,51,68,235,95,146,105,127,226,168,195,182\"),stringToBytes32(\"142,106,29,29,2,42,232,46,254,242,184,230,148,47,113,75,164,181,53,58,61,86,81,73,21,209,148,87,165,14,163,164\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1461001,64,2014223714,2014223714,1461000,0,0,41,0,11,2,16,0,13,90,60,21,1971,32,3,63,1,Definitions.IPS(21,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(95,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(121,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.M,Definitions.S.SHORT,false),1337,1971,25,28)"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [152,227,2,133,152,68,49,204,205,234,177,132,0,185,61,131,26,144,253,250,108,174,193,146,177,18,25,178,23,29,68,216],\"legalEntityIdCounterparty\": [109,76,181,155,222,149,105,5,182,164,202,87,201,94,140,35,247,78,18,19,239,38,182,152,224,210,3,92,124,94,172,252],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 255,\"statusDate\": 27,\"initialExchangeDate\": 120,\"maturityDate\": 110,\"terminationDate\": 4799,\"purchaseDate\": 30,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 89,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 160,\"nominalInterestRate\": 15,\"feeAccrued\": 109,\"accruedInterest\": 2014223715,\"rateMultiplier\": 1969,\"rateSpread\": 254,\"feeRate\": 1532892062,\"nextResetRate\": 64,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 27,\"cycleOfInterestPayment\": {\"i\": 5,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 18,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2014223715,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 899,\"lifeFloor\": 2440588,\"periodCap\": 1969,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"152,227,2,133,152,68,49,204,205,234,177,132,0,185,61,131,26,144,253,250,108,174,193,146,177,18,25,178,23,29,68,216\"),stringToBytes32(\"109,76,181,155,222,149,105,5,182,164,202,87,201,94,140,35,247,78,18,19,239,38,182,152,224,210,3,92,124,94,172,252\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,255,27,120,110,4799,30,96,1532892062,90,89,130,160,15,109,2014223715,1969,254,1532892062,64,2440587,29,27,Definitions.IPS(5,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(18,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(32,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.LONG,true),899,2440588,1969,368)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [237,221,199,244,240,238,188,39,39,127,94,170,223,201,218,77,85,33,145,157,145,140,144,199,236,163,111,128,70,255,139,50],\"legalEntityIdCounterparty\": [57,143,8,146,33,117,133,40,87,141,60,28,56,12,224,255,196,100,29,74,67,185,15,43,255,159,122,106,50,140,252,158],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 256,\"statusDate\": 2446,\"initialExchangeDate\": 256,\"maturityDate\": 367,\"terminationDate\": 121,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 63,\"cycleAnchorDateOfRateReset\": 2014223716,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 32076,\"nominalInterestRate\": 0,\"feeAccrued\": 140,\"accruedInterest\": 9999,\"rateMultiplier\": 2,\"rateSpread\": 368,\"feeRate\": 1461000,\"nextResetRate\": 1337,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 254,\"priceAtPurchaseDate\": 28,\"cycleOfInterestPayment\": {\"i\": 65,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 367,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 899,\"lifeFloor\": 15,\"periodCap\": 29,\"periodFloor\": 23}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"237,221,199,244,240,238,188,39,39,127,94,170,223,201,218,77,85,33,145,157,145,140,144,199,236,163,111,128,70,255,139,50\"),stringToBytes32(\"57,143,8,146,33,117,133,40,87,141,60,28,56,12,224,255,196,100,29,74,67,185,15,43,255,159,122,106,50,140,252,158\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,256,2446,256,367,121,0,0,63,2014223716,3999,0,32076,0,140,9999,2,368,1461000,1337,5,254,28,Definitions.IPS(65,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(367,Definitions.P.H,Definitions.S.SHORT,false),899,15,29,23)"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [195,159,131,155,177,32,203,110,172,193,98,216,98,114,210,95,219,214,113,0,63,86,14,18,21,200,206,249,255,252,47,194],\"legalEntityIdCounterparty\": [48,45,21,72,246,163,95,175,160,124,29,212,66,246,85,74,66,29,88,93,72,114,135,141,90,193,147,182,233,46,235,34],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 12,\"statusDate\": 2448,\"initialExchangeDate\": 9999,\"maturityDate\": 71,\"terminationDate\": 121,\"purchaseDate\": 149,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 3,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 79,\"nominalInterestRate\": 25,\"feeAccrued\": 18,\"accruedInterest\": 86399,\"rateMultiplier\": 159,\"rateSpread\": 50,\"feeRate\": 5,\"nextResetRate\": 2014223714,\"penaltyRate\": 2014223714,\"premiumDiscountAtIED\": 1532892064,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 5,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 254,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2014223715,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 899,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 51,\"lifeFloor\": 68569,\"periodCap\": 28,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"195,159,131,155,177,32,203,110,172,193,98,216,98,114,210,95,219,214,113,0,63,86,14,18,21,200,206,249,255,252,47,194\"),stringToBytes32(\"48,45,21,72,246,163,95,175,160,124,29,212,66,246,85,74,66,29,88,93,72,114,135,141,90,193,147,182,233,46,235,34\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,12,2448,9999,71,121,149,61,3,6,71,2440588,79,25,18,86399,159,50,5,2014223714,2014223714,1532892064,4799,Definitions.IPS(5,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(254,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(899,Definitions.P.D,Definitions.S.SHORT,true),51,68569,28,400)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [120,83,58,232,167,175,74,207,249,1,75,39,41,175,114,130,252,202,87,219,107,60,132,209,0,158,249,44,253,38,191,223],\"legalEntityIdCounterparty\": [43,78,125,35,71,146,115,67,194,146,52,243,17,115,232,97,109,138,66,174,253,103,60,76,12,42,155,0,75,70,82,52],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 161,\"statusDate\": 950,\"initialExchangeDate\": 146098,\"maturityDate\": 9,\"terminationDate\": 1,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 364,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 255,\"nominalInterestRate\": 0,\"feeAccrued\": 254,\"accruedInterest\": 1,\"rateMultiplier\": 3999,\"rateSpread\": 4000,\"feeRate\": 68570,\"nextResetRate\": 100,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 0,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 10001,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 1336,\"periodCap\": 3,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"120,83,58,232,167,175,74,207,249,1,75,39,41,175,114,130,252,202,87,219,107,60,132,209,0,158,249,44,253,38,191,223\"),stringToBytes32(\"43,78,125,35,71,146,115,67,194,146,52,243,17,115,232,97,109,138,66,174,253,103,60,76,12,42,155,0,75,70,82,52\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,161,950,146098,9,1,0,0,27,364,0,120,255,0,254,1,3999,4000,68570,100,1532892062,2,101,Definitions.IPS(0,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1970,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(10001,Definitions.P.Q,Definitions.S.LONG,false),4000,1336,3,10001)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [246,62,114,67,220,63,162,153,162,79,146,171,0,0,233,208,38,87,158,225,184,2,194,219,74,246,217,165,60,28,53,97],\"legalEntityIdCounterparty\": [23,207,135,137,74,159,188,89,249,157,128,243,59,68,108,48,73,63,68,176,228,221,244,144,169,202,180,88,107,56,161,5],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 23,\"statusDate\": 949,\"initialExchangeDate\": 2,\"maturityDate\": 81,\"terminationDate\": 1461000,\"purchaseDate\": 31,\"capitalizationEndDate\": 4001,\"cycleAnchorDateOfInterestPayment\": 254,\"cycleAnchorDateOfRateReset\": 40,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 146098,\"notionalPrincipal\": 365,\"nominalInterestRate\": 18,\"feeAccrued\": 99,\"accruedInterest\": 2440587,\"rateMultiplier\": 1460,\"rateSpread\": 99,\"feeRate\": 2,\"nextResetRate\": 4900,\"penaltyRate\": 41,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 2440587,\"cycleOfInterestPayment\": {\"i\": 4001,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 59,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 2014223715,\"lifeFloor\": 4801,\"periodCap\": 10,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"246,62,114,67,220,63,162,153,162,79,146,171,0,0,233,208,38,87,158,225,184,2,194,219,74,246,217,165,60,28,53,97\"),stringToBytes32(\"23,207,135,137,74,159,188,89,249,157,128,243,59,68,108,48,73,63,68,176,228,221,244,144,169,202,180,88,107,56,161,5\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,23,949,2,81,1461000,31,4001,254,40,161,146098,365,18,99,2440587,1460,99,2,4900,41,21,2440587,Definitions.IPS(4001,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(59,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(30,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2,Definitions.P.W,Definitions.S.LONG,false),2014223715,4801,10,14)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [59,93,189,158,75,132,40,89,145,221,208,157,60,41,166,248,72,10,249,166,45,250,105,92,219,68,100,67,236,3,217,249],\"legalEntityIdCounterparty\": [29,144,6,224,36,252,204,18,45,175,175,221,245,193,12,54,37,52,253,93,81,240,209,222,48,204,251,39,170,197,231,67],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2440588,\"statusDate\": 13,\"initialExchangeDate\": 4901,\"maturityDate\": 2440588,\"terminationDate\": 109,\"purchaseDate\": 31,\"capitalizationEndDate\": 361,\"cycleAnchorDateOfInterestPayment\": 366,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 79,\"cycleAnchorDateOfFee\": 4800,\"notionalPrincipal\": 97,\"nominalInterestRate\": 95,\"feeAccrued\": 11,\"accruedInterest\": 30,\"rateMultiplier\": 95,\"rateSpread\": 951,\"feeRate\": 140,\"nextResetRate\": 109,\"penaltyRate\": 1337,\"premiumDiscountAtIED\": 68568,\"priceAtPurchaseDate\": 5,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 48,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440587,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 131,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 161,\"lifeFloor\": 27,\"periodCap\": 150,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"59,93,189,158,75,132,40,89,145,221,208,157,60,41,166,248,72,10,249,166,45,250,105,92,219,68,100,67,236,3,217,249\"),stringToBytes32(\"29,144,6,224,36,252,204,18,45,175,175,221,245,193,12,54,37,52,253,93,81,240,209,222,48,204,251,39,170,197,231,67\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2440588,13,4901,2440588,109,31,361,366,111,79,4800,97,95,11,30,95,951,140,109,1337,68568,5,Definitions.IPS(4799,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(131,Definitions.P.D,Definitions.S.LONG,false),161,27,150,81)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [179,8,56,192,82,95,98,240,77,122,132,147,61,170,37,130,252,136,192,150,55,93,174,209,37,11,98,111,208,29,55,212],\"legalEntityIdCounterparty\": [176,253,62,158,142,77,18,197,47,210,50,90,124,163,99,136,90,19,81,31,9,168,85,231,187,202,185,103,36,18,31,88],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1971,\"statusDate\": 86400,\"initialExchangeDate\": 90,\"maturityDate\": 19,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1461000,\"cycleAnchorDateOfRateReset\": 68568,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 97,\"nominalInterestRate\": 0,\"feeAccrued\": 2014223715,\"accruedInterest\": 13,\"rateMultiplier\": 95,\"rateSpread\": 366,\"feeRate\": 1460,\"nextResetRate\": 79,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 366,\"priceAtPurchaseDate\": 39,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146098,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 32076,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 361,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 366,\"lifeFloor\": 120,\"periodCap\": 257,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"179,8,56,192,82,95,98,240,77,122,132,147,61,170,37,130,252,136,192,150,55,93,174,209,37,11,98,111,208,29,55,212\"),stringToBytes32(\"176,253,62,158,142,77,18,197,47,210,50,90,124,163,99,136,90,19,81,31,9,168,85,231,187,202,185,103,36,18,31,88\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1971,86400,90,19,0,0,0,1461000,68568,257,2440588,97,0,2014223715,13,95,366,1460,79,79,366,39,Definitions.IPS(1461002,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(146098,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(361,Definitions.P.M,Definitions.S.LONG,true),366,120,257,160)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [31,127,31,81,72,77,254,34,8,12,167,136,221,69,88,149,26,20,10,96,223,16,154,245,140,106,157,128,23,38,46,61],\"legalEntityIdCounterparty\": [32,145,83,134,126,178,101,17,144,127,150,47,47,162,104,109,13,255,6,157,167,155,64,50,38,20,98,121,56,1,0,166],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 23,\"statusDate\": 119,\"initialExchangeDate\": 401,\"maturityDate\": 86400,\"terminationDate\": 366,\"purchaseDate\": 139,\"capitalizationEndDate\": 3999,\"cycleAnchorDateOfInterestPayment\": 68568,\"cycleAnchorDateOfRateReset\": 1970,\"cycleAnchorDateOfScalingIndex\": 86400,\"cycleAnchorDateOfFee\": 15,\"notionalPrincipal\": 25,\"nominalInterestRate\": 2448,\"feeAccrued\": 146098,\"accruedInterest\": 91,\"rateMultiplier\": 401,\"rateSpread\": 16,\"feeRate\": 2440588,\"nextResetRate\": 61,\"penaltyRate\": 1336,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 1461002,\"cycleOfInterestPayment\": {\"i\": 366,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4001,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 86399,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 139,\"lifeFloor\": 146098,\"periodCap\": 950,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"31,127,31,81,72,77,254,34,8,12,167,136,221,69,88,149,26,20,10,96,223,16,154,245,140,106,157,128,23,38,46,61\"),stringToBytes32(\"32,145,83,134,126,178,101,17,144,127,150,47,47,162,104,109,13,255,6,157,167,155,64,50,38,20,98,121,56,1,0,166\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,23,119,401,86400,366,139,3999,68568,1970,86400,15,25,2448,146098,91,401,16,2440588,61,1336,2440589,1461002,Definitions.IPS(366,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(256,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.D,Definitions.S.SHORT,false),139,146098,950,139)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [27,226,123,175,243,129,114,82,100,226,114,73,155,79,112,44,182,226,225,95,182,217,8,187,170,125,24,122,217,127,42,244],\"legalEntityIdCounterparty\": [45,236,109,119,227,77,21,111,18,1,70,187,109,207,24,55,109,186,15,206,127,114,87,70,131,163,208,129,210,110,198,163],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 6,\"statusDate\": 146097,\"initialExchangeDate\": 366,\"maturityDate\": 364,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 18,\"notionalPrincipal\": 1336,\"nominalInterestRate\": 0,\"feeAccrued\": 1,\"accruedInterest\": 1532892064,\"rateMultiplier\": 2,\"rateSpread\": 4001,\"feeRate\": 28,\"nextResetRate\": 949,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 90,\"priceAtPurchaseDate\": 0,\"cycleOfInterestPayment\": {\"i\": 68570,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223714,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 146097,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 32075,\"lifeFloor\": 361,\"periodCap\": 1338,\"periodFloor\": 21}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"27,226,123,175,243,129,114,82,100,226,114,73,155,79,112,44,182,226,225,95,182,217,8,187,170,125,24,122,217,127,42,244\"),stringToBytes32(\"45,236,109,119,227,77,21,111,18,1,70,187,109,207,24,55,109,186,15,206,127,114,87,70,131,163,208,129,210,110,198,163\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,6,146097,366,364,0,0,0,68569,1532892064,48,18,1336,0,1,1532892064,2,4001,28,949,1461,90,0,Definitions.IPS(68570,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2014223714,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(146097,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,true),32075,361,1338,21)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.624ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T00:16:46.647ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}