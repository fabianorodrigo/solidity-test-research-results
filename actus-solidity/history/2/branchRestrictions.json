,{
  "2020-11-10T11:16:53.520ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "68570",
                "sol": "68570"
              },
              {
                "js": "4800",
                "sol": "4800"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.522ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.522ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.535ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.537ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.537ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.538ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month>12",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.541ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.544ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.544ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.544ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.545ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.545ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.546ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.549ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.549ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.550ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.550ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.550ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.551ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.551ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.551ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.552ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.552ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.552ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.553ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.553ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.553ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.554ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.554ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.555ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.555ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.561ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.561ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461003,
                "sol": 1461003
              },
              {
                "js": "1461002",
                "sol": "1461002"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.562ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223716,
                "sol": 2014223716
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.563ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2014223717",
              "sol": "2014223717"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223718,
                "sol": 2014223718
              },
              {
                "js": "2014223717",
                "sol": "2014223717"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.563ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 162,
                "sol": 162
              },
              {
                "js": "161",
                "sol": "161"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.564ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 86400,
                "sol": 86400
              },
              {
                "js": "86399",
                "sol": "86399"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.565ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 256,
                "sol": 256
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.568ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.570ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "111",
                "sol": "111"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.574ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.579ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "21",
                "sol": "21"
              },
              {
                "js": 20,
                "sol": 20
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4801",
                "sol": "4801"
              },
              {
                "js": 4800,
                "sol": 4800
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": 1459,
                "sol": 1459
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": 48,
                "sol": 48
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "950",
                "sol": "950"
              },
              {
                "js": 949,
                "sol": 949
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:16:53.583ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.583ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.584ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.585ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.586ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{\"i\": 2440589,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2440589,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{\"i\": 3,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(3,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{\"i\": 48,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(48,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{\"i\": 257,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(257,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.588ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.589ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.590ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.594ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.596ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.601ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.602ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.611ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1532892063,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 119,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(119,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 65,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(65,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 140,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(140,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 257,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(257,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 1,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32076,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.614ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{\"i\": 32076,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(32076,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{\"i\": 86399,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86399,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{\"i\": 86401,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86401,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{\"i\": 1969,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1969,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{\"i\": 32076,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32076,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 1461002,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1461002,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{\"i\": 1337,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1337,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 140,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(140,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{\"i\": 28,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(28,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.624ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 159,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(159,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 11,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(11,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1460,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1460,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 4799,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4799,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 146097,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(146097,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1970,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.628ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 400,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 30,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 32075,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 61,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 26,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 61,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 96,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 1532892064,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 949,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 2448,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 120,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 10,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 3999,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 66,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 399,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 146098,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 2014223715,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 119,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 70,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 2014223717,\"scheduleTime\": 1460,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 86399,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 29,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 20},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 1532892064,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 949,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 399,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 131,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 3999,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 69,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 48,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 1460,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 17,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 17,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 161,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 17,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 28,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 3999,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 17},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 146096,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 101,\"eventType\": 0,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 68569,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 119,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1969,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 400,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 12,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 59,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1337,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 2014223715,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 254,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 150,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 14},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 2014223715,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 6,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 9},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 50,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 10001,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 400,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 63,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 161,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 16,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 7,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 2448,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 86400,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 901,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 91,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 18,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 80,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 86400,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 20}]",
              "sol": "[Definitions.ProtoEvent(63,109,400,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(3999,99,30,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(12,257,32075,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(400,2448,61,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(70,10,26,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(68568,2446,61,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(1460,23,96,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(10001,15,1532892064,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(10000,60,949,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(1460,4,2448,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(101,2440588,120,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(68569,2014223716,10,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(365,1336,3999,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(5,65,66,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(7,10,399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(160,4000,146098,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(51,368,2014223715,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(3,97,119,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(1532892063,119,70,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(3999,2014223717,1460,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(1338,1462,86399,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(0,3999,29,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.Child),Definitions.ProtoEvent(1338,18,1532892064,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(160,365,949,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(1461,146097,399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(1338,141,131,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(1461000,1337,3999,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(4001,51,69,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(63,5,48,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(1460,91,1460,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(66,119,17,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(1460,71,17,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(150,161,161,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(4000,69,17,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(899,160,28,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(49,146096,3999,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MR),Definitions.ProtoEvent(1337,150,146096,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(1,10,101,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(60,17,68569,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(23,28,119,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(129,1461002,1969,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(1461,10000,400,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(1460,4901,12,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(20,25,59,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(89,101,1337,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(950,32076,2014223715,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(70,149,254,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(13,950,150,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SC),Definitions.ProtoEvent(950,90,2014223715,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(119,32074,6,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PRD),Definitions.ProtoEvent(119,3,50,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(401,2440589,10001,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(24,101,400,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(1461000,15,63,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(129,150,161,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(71,366,16,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(68570,400,7,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(140,2440589,2448,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(151,1336,86400,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(27,86400,901,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(68568,32,91,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(1971,32076,18,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(12,2446,80,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(2447,59,86400,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child)]"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.642ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1460,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 4901,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 146098,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 361,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 68569,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 1337,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 14,\"eventType\": 4,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 86399,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 365,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 90,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 150,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 4001,\"eventType\": 1,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 2014223715,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 149,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 19},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 254,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 6},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 119,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 5},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 1532892064,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 19},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 1462,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 2014223717,\"scheduleTime\": 9,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 15,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 0,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 32075,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 9},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 80,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 50,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 1462,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 1969,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 1462,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 150,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 80,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 49,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 159,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 6},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 1338,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 4900,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 9},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1532892063,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 365,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 2014223714,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 18},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 129,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 4000,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 90,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 27,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 21,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 32074,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 25,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 81,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 18},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 367,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 949,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 901,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 10},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 32,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 1461001,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 151,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 1970,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 4000,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 257,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 399,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 4901,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 61,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 27,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 20},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 4001,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 950,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 4801,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 401,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 161,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 4801,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 359,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 10}]",
              "sol": "[Definitions.ProtoEvent(65,1338,1460,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(17,139,4901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(257,950,146098,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(4799,4901,361,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(0,1461,68569,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(149,4,1337,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(2014223715,81,14,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(68569,68568,86399,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(899,364,365,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(4000,3999,90,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(2014223714,400,150,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(28,120,4001,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(255,9999,2014223715,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(368,400,149,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.STD),Definitions.ProtoEvent(71,28,254,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PP),Definitions.ProtoEvent(5,2446,119,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PR),Definitions.ProtoEvent(256,32074,1532892064,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.STD),Definitions.ProtoEvent(1969,86401,1462,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(91,2014223717,9,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(4,399,15,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(1461002,1462,0,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(1337,71,32075,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PRD),Definitions.ProtoEvent(90,4800,80,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(160,68568,50,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(1462,1461002,1462,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(32074,60,1969,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(50,64,1462,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(365,69,150,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223714,951,80,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(27,139,49,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(160,141,159,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PP),Definitions.ProtoEvent(9,120,1338,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(18,66,4900,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PRD),Definitions.ProtoEvent(15,90,1532892063,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(146098,41,365,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(361,161,2014223714,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCB),Definitions.ProtoEvent(110,1532892064,129,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(26,2014223715,4000,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(119,4899,90,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(86401,900,27,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(59,161,21,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(89,4801,32074,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(50,24,25,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(95,359,81,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461001,65,367,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(16,4901,949,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(71,1336,901,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.TD),Definitions.ProtoEvent(365,4000,32,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(40,120,1461001,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(400,25,151,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(149,21,1970,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(5,49,4000,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(256,1970,257,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(1461002,4001,399,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(59,899,4901,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(255,66,61,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(86399,364,27,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.Child),Definitions.ProtoEvent(20,17,4001,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(41,30,950,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(4901,29,4801,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(60,2,401,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(51,111,161,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(32,2440587,4801,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(18,50,359,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD)]"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.665ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.667ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [25,132,178,232,143,120,29,41,140,142,153,93,157,115,250,191,172,105,11,0,58,22,129,69,41,1,220,240,234,32,0,246],\"legalEntityIdCounterparty\": [91,36,134,243,43,98,217,162,40,203,198,144,158,78,11,107,121,5,134,245,219,191,14,100,129,98,228,117,226,143,181,32],\"dayCountConvention\": 0,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 255,\"statusDate\": 4899,\"initialExchangeDate\": 4001,\"maturityDate\": 51,\"terminationDate\": 1337,\"purchaseDate\": 131,\"capitalizationEndDate\": 32076,\"cycleAnchorDateOfInterestPayment\": 399,\"cycleAnchorDateOfRateReset\": 71,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 255,\"notionalPrincipal\": 1532892062,\"nominalInterestRate\": 368,\"feeAccrued\": 2014223717,\"accruedInterest\": 4001,\"rateMultiplier\": 361,\"rateSpread\": 2014223714,\"feeRate\": 1532892062,\"nextResetRate\": 150,\"penaltyRate\": 30,\"premiumDiscountAtIED\": 151,\"priceAtPurchaseDate\": 16,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2014223717,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1971,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 111,\"lifeFloor\": 2014223715,\"periodCap\": 89,\"periodFloor\": 2014223715}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"25,132,178,232,143,120,29,41,140,142,153,93,157,115,250,191,172,105,11,0,58,22,129,69,41,1,220,240,234,32,0,246\"),stringToBytes32(\"91,36,134,243,43,98,217,162,40,203,198,144,158,78,11,107,121,5,134,245,219,191,14,100,129,98,228,117,226,143,181,32\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,255,4899,4001,51,1337,131,32076,399,71,4901,255,1532892062,368,2014223717,4001,361,2014223714,1532892062,150,30,151,16,Definitions.IPS(949,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(2014223717,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(366,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1971,Definitions.P.D,Definitions.S.LONG,true),111,2014223715,89,2014223715)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.671ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [31,215,134,68,140,76,41,128,24,38,191,172,236,41,36,213,164,52,28,136,65,183,14,140,39,144,215,106,10,96,245,149],\"legalEntityIdCounterparty\": [32,159,38,146,236,190,93,5,210,91,30,61,11,29,174,158,29,153,118,237,205,116,104,3,165,208,209,14,116,166,43,108],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4,\"statusDate\": 64,\"initialExchangeDate\": 13,\"maturityDate\": 1971,\"terminationDate\": 1461,\"purchaseDate\": 950,\"capitalizationEndDate\": 254,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 2014223714,\"cycleAnchorDateOfFee\": 25,\"notionalPrincipal\": 951,\"nominalInterestRate\": 368,\"feeAccrued\": 101,\"accruedInterest\": 1461002,\"rateMultiplier\": 1461000,\"rateSpread\": 19,\"feeRate\": 32074,\"nextResetRate\": 4900,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 4000,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 12,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 96,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 10,\"lifeFloor\": 399,\"periodCap\": 119,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"31,215,134,68,140,76,41,128,24,38,191,172,236,41,36,213,164,52,28,136,65,183,14,140,39,144,215,106,10,96,245,149\"),stringToBytes32(\"32,159,38,146,236,190,93,5,210,91,30,61,11,29,174,158,29,153,118,237,205,116,104,3,165,208,209,14,116,166,43,108\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4,64,13,1971,1461,950,254,2446,2446,2014223714,25,951,368,101,1461002,1461000,19,32074,4900,111,4000,2,Definitions.IPS(12,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(96,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.Y,Definitions.S.SHORT,false),10,399,119,254)"
            },
            {
              "js": "{\"lastEventTime\": 120,\"contractStatus\": 3,\"timeFromLastEvent\": 111,\"nominalValue\": 3999,\"nominalAccrued\": 17,\"feeAccrued\": 19,\"nominalRate\": 80,\"interestScalingMultiplier\": 400,\"nominalScalingMultiplier\": 10001,\"contractRoleSign\": 2}",
              "sol": "Definitions.ContractState(120,Definitions.ContractStatus.DF,111,3999,17,19,80,400,10001,Definitions.ContractRole.LG)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.677ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [76,121,94,70,84,254,103,90,60,210,19,0,151,51,46,234,76,192,91,178,168,207,196,181,210,150,237,152,173,238,45,102],\"legalEntityIdCounterparty\": [10,248,73,168,187,40,17,211,151,205,95,134,197,189,128,157,208,243,149,23,143,129,91,45,239,106,232,255,171,23,239,238],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 68569,\"statusDate\": 1336,\"initialExchangeDate\": 63,\"maturityDate\": 86401,\"terminationDate\": 5,\"purchaseDate\": 949,\"capitalizationEndDate\": 4,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 2014223715,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 900,\"nominalInterestRate\": 51,\"feeAccrued\": 21,\"accruedInterest\": 32074,\"rateMultiplier\": 19,\"rateSpread\": 1461,\"feeRate\": 119,\"nextResetRate\": 257,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 64,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 81,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 1532892063,\"lifeFloor\": 365,\"periodCap\": 141,\"periodFloor\": 150}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"76,121,94,70,84,254,103,90,60,210,19,0,151,51,46,234,76,192,91,178,168,207,196,181,210,150,237,152,173,238,45,102\"),stringToBytes32(\"10,248,73,168,187,40,17,211,151,205,95,134,197,189,128,157,208,243,149,23,143,129,91,45,239,106,232,255,171,23,239,238\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,68569,1336,63,86401,5,949,4,120,140,2014223715,400,900,51,21,32074,19,1461,119,257,95,31,89,Definitions.IPS(64,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(81,Definitions.P.M,Definitions.S.SHORT,true),1532892063,365,141,150)"
            },
            {
              "js": "{\"lastEventTime\": 15,\"contractStatus\": 3,\"timeFromLastEvent\": 2440589,\"nominalValue\": 51,\"nominalAccrued\": 110,\"feeAccrued\": 149,\"nominalRate\": 257,\"interestScalingMultiplier\": 68569,\"nominalScalingMultiplier\": 2014223717,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(15,Definitions.ContractStatus.DF,2440589,51,110,149,257,68569,2014223717,Definitions.ContractRole.SEL)"
            },
            {
              "js": "{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 91,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 20}",
              "sol": "Definitions.ProtoEvent(149,4899,91,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child)"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.685ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [30,240,156,255,171,111,236,218,189,247,112,179,208,45,204,200,13,175,102,56,241,150,126,143,67,194,243,162,108,140,91,208],\"legalEntityIdCounterparty\": [85,198,7,198,144,94,41,18,95,33,201,131,139,37,107,136,88,11,142,45,21,163,167,173,32,240,109,238,137,49,58,37],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 51,\"statusDate\": 95,\"initialExchangeDate\": 64,\"maturityDate\": 1,\"terminationDate\": 100,\"purchaseDate\": 1461000,\"capitalizationEndDate\": 129,\"cycleAnchorDateOfInterestPayment\": 64,\"cycleAnchorDateOfRateReset\": 50,\"cycleAnchorDateOfScalingIndex\": 2014223715,\"cycleAnchorDateOfFee\": 949,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 79,\"feeAccrued\": 50,\"accruedInterest\": 4800,\"rateMultiplier\": 4801,\"rateSpread\": 901,\"feeRate\": 1461,\"nextResetRate\": 64,\"penaltyRate\": 257,\"premiumDiscountAtIED\": 4,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2448,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1969,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 60,\"lifeFloor\": 63,\"periodCap\": 31,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"30,240,156,255,171,111,236,218,189,247,112,179,208,45,204,200,13,175,102,56,241,150,126,143,67,194,243,162,108,140,91,208\"),stringToBytes32(\"85,198,7,198,144,94,41,18,95,33,201,131,139,37,107,136,88,11,142,45,21,163,167,173,32,240,109,238,137,49,58,37\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,51,95,64,1,100,1461000,129,64,50,2014223715,949,1969,79,50,4800,4801,901,1461,64,257,4,3999,Definitions.IPS(1,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2448,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.M,Definitions.S.SHORT,false),60,63,31,1532892064)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [252,224,25,97,92,206,10,115,53,243,252,55,213,17,130,30,134,1,135,203,58,73,211,216,116,68,22,195,238,189,170,26],\"legalEntityIdCounterparty\": [31,65,41,125,167,90,246,169,69,3,252,141,227,205,230,217,158,173,170,132,216,11,221,118,164,243,50,4,31,5,96,105],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 367,\"statusDate\": 86400,\"initialExchangeDate\": 17,\"maturityDate\": 2447,\"terminationDate\": 4,\"purchaseDate\": 86399,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 81,\"cycleAnchorDateOfRateReset\": 257,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 360,\"notionalPrincipal\": 39,\"nominalInterestRate\": 120,\"feeAccrued\": 2440588,\"accruedInterest\": 80,\"rateMultiplier\": 1532892063,\"rateSpread\": 366,\"feeRate\": 86399,\"nextResetRate\": 13,\"penaltyRate\": 140,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 399,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 364,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 11,\"lifeFloor\": 96,\"periodCap\": 4901,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"252,224,25,97,92,206,10,115,53,243,252,55,213,17,130,30,134,1,135,203,58,73,211,216,116,68,22,195,238,189,170,26\"),stringToBytes32(\"31,65,41,125,167,90,246,169,69,3,252,141,227,205,230,217,158,173,170,132,216,11,221,118,164,243,50,4,31,5,96,105\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,367,86400,17,2447,4,86399,10000,81,257,70,360,39,120,2440588,80,1532892063,366,86399,13,140,86400,60,Definitions.IPS(1969,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(364,Definitions.P.Q,Definitions.S.SHORT,false),11,96,4901,80)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [149,49,27,5,51,119,11,24,69,159,1,115,203,194,178,154,220,215,5,56,143,230,28,221,209,243,127,197,218,111,155,33],\"legalEntityIdCounterparty\": [76,79,111,174,122,27,166,118,68,202,183,202,80,239,129,183,159,88,234,76,64,108,79,76,152,225,14,157,22,58,144,222],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 95,\"statusDate\": 900,\"initialExchangeDate\": 15,\"maturityDate\": 1336,\"terminationDate\": 4799,\"purchaseDate\": 32,\"capitalizationEndDate\": 1460,\"cycleAnchorDateOfInterestPayment\": 10000,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 2014223715,\"notionalPrincipal\": 101,\"nominalInterestRate\": 3,\"feeAccrued\": 32076,\"accruedInterest\": 21,\"rateMultiplier\": 4001,\"rateSpread\": 2014223715,\"feeRate\": 49,\"nextResetRate\": 80,\"penaltyRate\": 111,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 1462,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10000,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2448,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 96,\"lifeFloor\": 951,\"periodCap\": 361,\"periodFloor\": 100}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"149,49,27,5,51,119,11,24,69,159,1,115,203,194,178,154,220,215,5,56,143,230,28,221,209,243,127,197,218,111,155,33\"),stringToBytes32(\"76,79,111,174,122,27,166,118,68,202,183,202,80,239,129,183,159,88,234,76,64,108,79,76,152,225,14,157,22,58,144,222\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,95,900,15,1336,4799,32,1460,10000,9999,119,2014223715,101,3,32076,21,4001,2014223715,49,80,111,101,1462,Definitions.IPS(139,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(10000,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(24,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2448,Definitions.P.Q,Definitions.S.LONG,true),96,951,361,100)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [176,98,132,119,163,203,238,39,23,209,136,80,152,156,252,106,84,87,220,21,177,189,137,166,131,237,29,213,57,56,186,63],\"legalEntityIdCounterparty\": [186,189,41,110,153,134,204,35,223,175,115,22,63,233,47,8,27,64,155,49,169,157,182,164,144,72,112,140,216,130,8,242],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 11,\"statusDate\": 9,\"initialExchangeDate\": 32074,\"maturityDate\": 4801,\"terminationDate\": 71,\"purchaseDate\": 2447,\"capitalizationEndDate\": 10,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 2448,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 1338,\"feeAccrued\": 361,\"accruedInterest\": 63,\"rateMultiplier\": 111,\"rateSpread\": 100,\"feeRate\": 64,\"nextResetRate\": 2448,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 1461000,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 10001,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 361,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": -1,\"lifeFloor\": 149,\"periodCap\": 119,\"periodFloor\": 1462}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"176,98,132,119,163,203,238,39,23,209,136,80,152,156,252,106,84,87,220,21,177,189,137,166,131,237,29,213,57,56,186,63\"),stringToBytes32(\"186,189,41,110,153,134,204,35,223,175,115,22,63,233,47,8,27,64,155,49,169,157,182,164,144,72,112,140,216,130,8,242\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,11,9,32074,4801,71,2447,10,1337,2448,68570,66,4900,1338,361,63,111,100,64,2448,14,86400,1461000,Definitions.IPS(8,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(10001,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(361,Definitions.P.Y,Definitions.S.SHORT,false),-1,149,119,1462)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [213,50,35,68,97,174,129,193,254,185,110,251,202,168,20,170,105,91,212,166,224,60,9,195,221,219,51,120,116,128,193,152],\"legalEntityIdCounterparty\": [126,216,37,190,44,188,148,22,163,43,55,53,114,17,172,104,46,237,88,221,180,63,31,180,240,253,237,7,54,227,188,130],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 100,\"statusDate\": 60,\"initialExchangeDate\": 11,\"maturityDate\": 256,\"terminationDate\": 31,\"purchaseDate\": 0,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 255,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 19,\"nominalInterestRate\": 86399,\"feeAccrued\": 2440589,\"accruedInterest\": 31,\"rateMultiplier\": 2440589,\"rateSpread\": 31,\"feeRate\": 365,\"nextResetRate\": 11,\"penaltyRate\": 401,\"premiumDiscountAtIED\": 151,\"priceAtPurchaseDate\": 18,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 24,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 9999,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223716,\"lifeFloor\": 1,\"periodCap\": 86400,\"periodFloor\": 32}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"213,50,35,68,97,174,129,193,254,185,110,251,202,168,20,170,105,91,212,166,224,60,9,195,221,219,51,120,116,128,193,152\"),stringToBytes32(\"126,216,37,190,44,188,148,22,163,43,55,53,114,17,172,104,46,237,88,221,180,63,31,180,240,253,237,7,54,227,188,130\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,100,60,11,256,31,0,1,360,19,255,400,19,86399,2440589,31,2440589,31,365,11,401,151,18,Definitions.IPS(399,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(24,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(9999,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(68569,Definitions.P.Y,Definitions.S.SHORT,true),2014223716,1,86400,32)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [211,23,57,27,96,125,4,218,140,186,174,208,67,168,70,41,90,15,111,197,146,224,197,136,238,197,154,92,199,196,1,146],\"legalEntityIdCounterparty\": [39,79,146,109,182,89,36,122,80,115,210,229,169,185,178,8,185,214,16,46,110,244,2,242,158,223,211,242,12,195,34,102],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 140,\"initialExchangeDate\": 1462,\"maturityDate\": 26,\"terminationDate\": 361,\"purchaseDate\": 256,\"capitalizationEndDate\": 4000,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 2014223714,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 949,\"nominalInterestRate\": 2014223714,\"feeAccrued\": 41,\"accruedInterest\": 2448,\"rateMultiplier\": 97,\"rateSpread\": 129,\"feeRate\": 401,\"nextResetRate\": 14,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 6,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 360,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1971,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4001,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 146097,\"lifeFloor\": 129,\"periodCap\": 2448,\"periodFloor\": 150}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"211,23,57,27,96,125,4,218,140,186,174,208,67,168,70,41,90,15,111,197,146,224,197,136,238,197,154,92,199,196,1,146\"),stringToBytes32(\"39,79,146,109,182,89,36,122,80,115,210,229,169,185,178,8,185,214,16,46,110,244,2,242,158,223,211,242,12,195,34,102\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1461,140,1462,26,361,256,4000,130,2014223714,8,28,949,2014223714,41,2448,97,129,401,14,901,399,9,Definitions.IPS(6,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1971,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4001,Definitions.P.H,Definitions.S.LONG,false),146097,129,2448,150)"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [218,92,35,80,64,227,162,118,64,175,181,159,145,126,180,41,243,121,12,238,17,51,175,180,54,95,172,33,118,49,187,247],\"legalEntityIdCounterparty\": [43,36,148,119,227,85,138,177,23,71,174,207,104,195,114,14,186,200,75,113,55,20,209,203,40,16,116,145,12,23,242,4],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 70,\"initialExchangeDate\": 4,\"maturityDate\": 86400,\"terminationDate\": 4800,\"purchaseDate\": 4800,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 16,\"notionalPrincipal\": 79,\"nominalInterestRate\": 2447,\"feeAccrued\": 40,\"accruedInterest\": 1,\"rateMultiplier\": 17,\"rateSpread\": 10,\"feeRate\": 3,\"nextResetRate\": 2448,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 4001,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 63,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4001,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 951,\"lifeFloor\": 359,\"periodCap\": 39,\"periodFloor\": 1460}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"218,92,35,80,64,227,162,118,64,175,181,159,145,126,180,41,243,121,12,238,17,51,175,180,54,95,172,33,118,49,187,247\"),stringToBytes32(\"43,36,148,119,227,85,138,177,23,71,174,207,104,195,114,14,186,200,75,113,55,20,209,203,40,16,116,145,12,23,242,4\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,21,70,4,86400,4800,4800,2,9999,3999,68570,16,79,2447,40,1,17,10,3,2448,256,4001,40,Definitions.IPS(63,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4001,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.W,Definitions.S.LONG,true),951,359,39,1460)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [53,92,214,21,170,58,179,46,181,1,209,79,114,67,119,173,66,40,234,164,59,138,1,152,133,174,167,215,115,114,109,104],\"legalEntityIdCounterparty\": [184,137,153,24,212,136,34,42,50,245,90,20,92,171,200,174,102,161,40,217,72,61,131,73,231,17,72,111,62,56,255,85],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 150,\"statusDate\": 255,\"initialExchangeDate\": 401,\"maturityDate\": 48,\"terminationDate\": 1338,\"purchaseDate\": 2014223717,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 5,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 97,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 4000,\"nominalInterestRate\": 59,\"feeAccrued\": 91,\"accruedInterest\": 368,\"rateMultiplier\": 254,\"rateSpread\": 21,\"feeRate\": 68568,\"nextResetRate\": 7,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 2014223714,\"cycleOfInterestPayment\": {\"i\": 3,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2014223716,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1971,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 18,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 7,\"lifeFloor\": 368,\"periodCap\": 1532892062,\"periodFloor\": 39}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"53,92,214,21,170,58,179,46,181,1,209,79,114,67,119,173,66,40,234,164,59,138,1,152,133,174,167,215,115,114,109,104\"),stringToBytes32(\"184,137,153,24,212,136,34,42,50,245,90,20,92,171,200,174,102,161,40,217,72,61,131,73,231,17,72,111,62,56,255,85\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,150,255,401,48,1338,2014223717,0,5,365,97,4901,4000,59,91,368,254,21,68568,7,69,146097,2014223714,Definitions.IPS(3,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2014223716,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(1971,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(18,Definitions.P.M,Definitions.S.SHORT,true),7,368,1532892062,39)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [17,15,238,238,114,249,62,235,169,36,176,86,27,222,87,122,138,81,28,157,83,32,24,131,223,123,95,74,175,127,128,154],\"legalEntityIdCounterparty\": [210,172,172,254,51,133,242,241,104,211,206,30,134,101,119,160,116,5,241,119,202,15,252,3,137,41,149,93,179,34,207,249],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 2,\"initialExchangeDate\": 4000,\"maturityDate\": 4799,\"terminationDate\": 111,\"purchaseDate\": 950,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 2014223717,\"cycleAnchorDateOfFee\": 951,\"notionalPrincipal\": 6,\"nominalInterestRate\": 86400,\"feeAccrued\": 48,\"accruedInterest\": 1336,\"rateMultiplier\": 86399,\"rateSpread\": 161,\"feeRate\": 100,\"nextResetRate\": 12,\"penaltyRate\": 8,\"premiumDiscountAtIED\": 1461001,\"priceAtPurchaseDate\": 146098,\"cycleOfInterestPayment\": {\"i\": 366,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 79,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 23,\"lifeFloor\": 2448,\"periodCap\": 254,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"17,15,238,238,114,249,62,235,169,36,176,86,27,222,87,122,138,81,28,157,83,32,24,131,223,123,95,74,175,127,128,154\"),stringToBytes32(\"210,172,172,254,51,133,242,241,104,211,206,30,134,101,119,160,116,5,241,119,202,15,252,3,137,41,149,93,179,34,207,249\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1461,2,4000,4799,111,950,7,2014223714,2446,2014223717,951,6,86400,48,1336,86399,161,100,12,8,1461001,146098,Definitions.IPS(366,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(368,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(79,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(79,Definitions.P.W,Definitions.S.SHORT,true),23,2448,254,257)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [61,252,207,197,125,160,244,76,121,181,47,195,42,37,20,208,17,206,151,2,243,121,216,184,67,227,180,178,226,165,139,206],\"legalEntityIdCounterparty\": [26,40,142,58,182,42,51,167,124,31,189,126,59,87,147,44,59,55,180,183,151,2,216,196,32,168,76,31,73,192,93,21],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 161,\"statusDate\": 86399,\"initialExchangeDate\": 50,\"maturityDate\": 2,\"terminationDate\": 109,\"purchaseDate\": 1532892062,\"capitalizationEndDate\": 3,\"cycleAnchorDateOfInterestPayment\": 159,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 29,\"nominalInterestRate\": 949,\"feeAccrued\": 10,\"accruedInterest\": 2014223714,\"rateMultiplier\": 24,\"rateSpread\": 81,\"feeRate\": 1460,\"nextResetRate\": 4799,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 12,\"priceAtPurchaseDate\": 1461000,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 12,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 9,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 367,\"lifeFloor\": 2014223716,\"periodCap\": 2014223715,\"periodFloor\": 1461}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"61,252,207,197,125,160,244,76,121,181,47,195,42,37,20,208,17,206,151,2,243,121,216,184,67,227,180,178,226,165,139,206\"),stringToBytes32(\"26,40,142,58,182,42,51,167,124,31,189,126,59,87,147,44,59,55,180,183,151,2,216,196,32,168,76,31,73,192,93,21\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,161,86399,50,2,109,1532892062,3,159,1461,257,1532892063,29,949,10,2014223714,24,81,1460,4799,2440589,12,1461000,Definitions.IPS(131,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(12,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(41,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(9,Definitions.P.D,Definitions.S.SHORT,false),367,2014223716,2014223715,1461)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [46,204,226,155,145,79,194,248,31,47,206,17,234,12,113,167,43,245,189,242,97,152,239,72,148,244,212,176,229,164,6,129],\"legalEntityIdCounterparty\": [6,216,122,111,110,190,72,176,58,148,21,156,9,151,132,233,251,22,43,250,54,153,137,252,194,182,158,241,237,104,52,133],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1462,\"statusDate\": 2446,\"initialExchangeDate\": 119,\"maturityDate\": 10000,\"terminationDate\": 119,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 69,\"cycleAnchorDateOfRateReset\": 12,\"cycleAnchorDateOfScalingIndex\": 899,\"cycleAnchorDateOfFee\": 59,\"notionalPrincipal\": 17,\"nominalInterestRate\": 0,\"feeAccrued\": 16,\"accruedInterest\": 50,\"rateMultiplier\": 400,\"rateSpread\": 32076,\"feeRate\": 360,\"nextResetRate\": 141,\"penaltyRate\": 24,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 70,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2440589,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 16,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 63,\"lifeFloor\": 15,\"periodCap\": 2446,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"46,204,226,155,145,79,194,248,31,47,206,17,234,12,113,167,43,245,189,242,97,152,239,72,148,244,212,176,229,164,6,129\"),stringToBytes32(\"6,216,122,111,110,190,72,176,58,148,21,156,9,151,132,233,251,22,43,250,54,153,137,252,194,182,158,241,237,104,52,133\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1462,2446,119,10000,119,0,0,69,12,899,59,17,0,16,50,400,32076,360,141,24,24,96,Definitions.IPS(91,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2440589,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(16,Definitions.P.H,Definitions.S.SHORT,false),63,15,2446,139)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [43,202,19,7,249,203,99,39,249,85,226,157,254,165,17,44,113,175,58,180,159,198,11,4,137,54,15,166,218,172,55,50],\"legalEntityIdCounterparty\": [72,70,156,92,70,172,3,101,162,1,0,86,173,32,83,210,201,178,220,156,170,158,227,183,178,66,24,231,202,119,141,15],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1461000,\"statusDate\": 86400,\"initialExchangeDate\": 66,\"maturityDate\": 31,\"terminationDate\": 69,\"purchaseDate\": 3,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 146098,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 12,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 14,\"nominalInterestRate\": 19,\"feeAccrued\": 18,\"accruedInterest\": 59,\"rateMultiplier\": 1970,\"rateSpread\": 86401,\"feeRate\": 28,\"nextResetRate\": 899,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 140,\"priceAtPurchaseDate\": 10001,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 39,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 24,\"lifeFloor\": 949,\"periodCap\": 949,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"43,202,19,7,249,203,99,39,249,85,226,157,254,165,17,44,113,175,58,180,159,198,11,4,137,54,15,166,218,172,55,50\"),stringToBytes32(\"72,70,156,92,70,172,3,101,162,1,0,86,173,32,83,210,201,178,220,156,170,158,227,183,178,66,24,231,202,119,141,15\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1461000,86400,66,31,69,3,27,146098,131,12,1,14,19,18,59,1970,86401,28,899,146096,140,10001,Definitions.IPS(30,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(2440588,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(1,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(39,Definitions.P.Q,Definitions.S.LONG,true),24,949,949,139)"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [19,161,178,162,99,200,15,235,41,146,27,131,147,235,226,63,191,111,213,25,103,118,189,39,30,102,195,24,94,136,3,248],\"legalEntityIdCounterparty\": [27,51,30,43,102,41,209,92,121,225,234,208,42,218,159,100,226,47,172,27,248,113,60,18,57,84,40,11,127,189,131,151],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 110,\"statusDate\": 255,\"initialExchangeDate\": 15,\"maturityDate\": 146097,\"terminationDate\": 2014223714,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 140,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 368,\"notionalPrincipal\": 159,\"nominalInterestRate\": 0,\"feeAccrued\": 61,\"accruedInterest\": 2440589,\"rateMultiplier\": 1337,\"rateSpread\": 71,\"feeRate\": 9,\"nextResetRate\": 26,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 121,\"priceAtPurchaseDate\": 59,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 120,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 19,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 71,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 146097,\"lifeFloor\": 18,\"periodCap\": 951,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"19,161,178,162,99,200,15,235,41,146,27,131,147,235,226,63,191,111,213,25,103,118,189,39,30,102,195,24,94,136,3,248\"),stringToBytes32(\"27,51,30,43,102,41,209,92,121,225,234,208,42,218,159,100,226,47,172,27,248,113,60,18,57,84,40,11,127,189,131,151\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,110,255,15,146097,2014223714,0,0,140,0,5,368,159,0,61,2440589,1337,71,9,26,1338,121,59,Definitions.IPS(111,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(120,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(71,Definitions.P.W,Definitions.S.SHORT,true),146097,18,951,2440589)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [50,23,183,209,32,46,34,72,112,67,117,2,35,66,220,141,118,19,255,185,201,248,11,8,34,15,185,234,204,94,15,103],\"legalEntityIdCounterparty\": [209,105,211,51,200,21,124,41,14,146,181,131,252,127,3,3,247,152,91,52,42,145,79,36,201,23,83,192,236,246,250,32],\"dayCountConvention\": 2,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 121,\"statusDate\": 63,\"initialExchangeDate\": 69,\"maturityDate\": 1971,\"terminationDate\": 4000,\"purchaseDate\": 6,\"capitalizationEndDate\": 1336,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 149,\"cycleAnchorDateOfScalingIndex\": 80,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 257,\"nominalInterestRate\": 4000,\"feeAccrued\": 96,\"accruedInterest\": 4800,\"rateMultiplier\": 1,\"rateSpread\": 59,\"feeRate\": 1461,\"nextResetRate\": 4001,\"penaltyRate\": 17,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 24,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4900,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 30,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": 41,\"periodCap\": 3999,\"periodFloor\": 110}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"50,23,183,209,32,46,34,72,112,67,117,2,35,66,220,141,118,19,255,185,201,248,11,8,34,15,185,234,204,94,15,103\"),stringToBytes32(\"209,105,211,51,200,21,124,41,14,146,181,131,252,127,3,3,247,152,91,52,42,145,79,36,201,23,83,192,236,246,250,32\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,121,63,69,1971,4000,6,1336,120,149,80,111,257,4000,96,4800,1,59,1461,4001,17,364,25,Definitions.IPS(24,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1970,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4900,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(30,Definitions.P.M,Definitions.S.LONG,true),2446,41,3999,110)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [209,252,7,174,169,34,122,41,42,166,126,79,137,57,227,102,143,62,150,43,188,176,224,252,118,42,254,107,57,103,46,144],\"legalEntityIdCounterparty\": [85,213,7,230,192,17,194,168,234,236,202,17,193,118,212,178,140,21,203,210,208,145,76,81,218,134,40,44,30,0,21,196],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4801,\"statusDate\": 6,\"initialExchangeDate\": 7,\"maturityDate\": 2440589,\"terminationDate\": 2014223715,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 12,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 50,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 0,\"feeAccrued\": 359,\"accruedInterest\": 96,\"rateMultiplier\": 2440589,\"rateSpread\": 254,\"feeRate\": 1462,\"nextResetRate\": 41,\"penaltyRate\": 255,\"premiumDiscountAtIED\": 140,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 39,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32075,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 49,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 130,\"lifeFloor\": 4799,\"periodCap\": 368,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"209,252,7,174,169,34,122,41,42,166,126,79,137,57,227,102,143,62,150,43,188,176,224,252,118,42,254,107,57,103,46,144\"),stringToBytes32(\"85,213,7,230,192,17,194,168,234,236,202,17,193,118,212,178,140,21,203,210,208,145,76,81,218,134,40,44,30,0,21,196\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4801,6,7,2440589,2014223715,0,0,12,1336,50,0,2448,0,359,96,2440589,254,1462,41,255,140,1336,Definitions.IPS(39,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(2447,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(32075,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.Q,Definitions.S.LONG,true),130,4799,368,900)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [96,12,161,101,60,43,125,17,28,123,52,75,58,224,160,60,64,185,55,202,14,43,199,158,151,90,172,237,193,107,208,206],\"legalEntityIdCounterparty\": [56,21,107,196,160,237,11,23,3,248,209,25,64,115,177,5,224,13,142,50,255,128,80,88,99,180,30,44,117,80,25,171],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 139,\"statusDate\": 364,\"initialExchangeDate\": 900,\"maturityDate\": 4,\"terminationDate\": 28,\"purchaseDate\": 0,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 255,\"cycleAnchorDateOfRateReset\": 159,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 71,\"nominalInterestRate\": 2014223715,\"feeAccrued\": 1532892063,\"accruedInterest\": 21,\"rateMultiplier\": 91,\"rateSpread\": 3,\"feeRate\": 97,\"nextResetRate\": 119,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 81,\"priceAtPurchaseDate\": 20,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461001,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 131,\"lifeFloor\": 365,\"periodCap\": 5,\"periodFloor\": 4000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"96,12,161,101,60,43,125,17,28,123,52,75,58,224,160,60,64,185,55,202,14,43,199,158,151,90,172,237,193,107,208,206\"),stringToBytes32(\"56,21,107,196,160,237,11,23,3,248,209,25,64,115,177,5,224,13,142,50,255,128,80,88,99,180,30,44,117,80,25,171\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,139,364,900,4,28,0,30,255,159,1970,64,71,2014223715,1532892063,21,91,3,97,119,146098,81,20,Definitions.IPS(130,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1461001,Definitions.P.M,Definitions.S.LONG,false),131,365,5,4000)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [1,45,94,39,46,4,214,38,87,19,204,37,108,95,229,105,57,53,182,101,243,205,21,176,20,8,149,13,151,39,254,66],\"legalEntityIdCounterparty\": [139,168,132,191,216,189,217,39,242,250,223,77,193,118,181,57,115,32,153,234,229,95,14,210,158,87,140,151,15,38,189,150],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 2440589,\"statusDate\": 1338,\"initialExchangeDate\": 14,\"maturityDate\": 141,\"terminationDate\": 1337,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4799,\"cycleAnchorDateOfRateReset\": 110,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 129,\"nominalInterestRate\": 0,\"feeAccrued\": 32076,\"accruedInterest\": 110,\"rateMultiplier\": 1461,\"rateSpread\": 146098,\"feeRate\": 365,\"nextResetRate\": 2446,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 12,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461000,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 48,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 27,\"lifeFloor\": 9,\"periodCap\": 160,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"1,45,94,39,46,4,214,38,87,19,204,37,108,95,229,105,57,53,182,101,243,205,21,176,20,8,149,13,151,39,254,66\"),stringToBytes32(\"139,168,132,191,216,189,217,39,242,250,223,77,193,118,181,57,115,32,153,234,229,95,14,210,158,87,140,151,15,38,189,150\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,2440589,1338,14,141,1337,0,0,4799,110,0,141,129,0,32076,110,1461,146098,365,2446,3999,91,32075,Definitions.IPS(111,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1461000,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.Q,Definitions.S.LONG,true),27,9,160,71)"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [65,205,50,2,115,100,156,95,4,254,7,42,4,236,182,169,197,136,123,63,135,51,117,105,7,99,185,177,125,68,95,197],\"legalEntityIdCounterparty\": [194,44,55,228,14,230,228,43,47,108,55,203,103,246,69,124,102,221,102,90,95,186,46,67,112,57,4,38,245,188,39,93],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 364,\"statusDate\": 401,\"initialExchangeDate\": 2014223714,\"maturityDate\": 9,\"terminationDate\": 109,\"purchaseDate\": 51,\"capitalizationEndDate\": 2014223714,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 32076,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 129,\"notionalPrincipal\": 951,\"nominalInterestRate\": 2014223714,\"feeAccrued\": 140,\"accruedInterest\": 1461,\"rateMultiplier\": 160,\"rateSpread\": 14,\"feeRate\": 160,\"nextResetRate\": 161,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 1461002,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 2014223717,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 80,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 15,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 1462,\"lifeFloor\": 1970,\"periodCap\": 119,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"65,205,50,2,115,100,156,95,4,254,7,42,4,236,182,169,197,136,123,63,135,51,117,105,7,99,185,177,125,68,95,197\"),stringToBytes32(\"194,44,55,228,14,230,228,43,47,108,55,203,103,246,69,124,102,221,102,90,95,186,46,67,112,57,4,38,245,188,39,93\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,364,401,2014223714,9,109,51,2014223714,68570,32076,68570,129,951,2014223714,140,1461,160,14,160,161,2446,1461002,121,Definitions.IPS(2014223717,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(80,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(15,Definitions.P.Q,Definitions.S.LONG,false),1462,1970,119,1532892063)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [19,152,183,136,166,28,199,61,231,82,111,58,82,183,182,43,9,105,128,48,253,219,144,153,146,88,89,104,79,189,201,191],\"legalEntityIdCounterparty\": [88,194,49,253,210,155,44,84,251,146,174,189,105,43,180,51,77,93,157,112,138,250,129,219,11,157,254,153,7,137,205,206],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 3999,\"initialExchangeDate\": 4799,\"maturityDate\": 3999,\"terminationDate\": 16,\"purchaseDate\": 80,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 364,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 140,\"nominalInterestRate\": 3,\"feeAccrued\": 10000,\"accruedInterest\": 79,\"rateMultiplier\": 1461001,\"rateSpread\": 48,\"feeRate\": 139,\"nextResetRate\": 1461000,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 139,\"priceAtPurchaseDate\": 161,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 399,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 32075,\"lifeFloor\": 63,\"periodCap\": 86400,\"periodFloor\": 9999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"19,152,183,136,166,28,199,61,231,82,111,58,82,183,182,43,9,105,128,48,253,219,144,153,146,88,89,104,79,189,201,191\"),stringToBytes32(\"88,194,49,253,210,155,44,84,251,146,174,189,105,43,180,51,77,93,157,112,138,250,129,219,11,157,254,153,7,137,205,206\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,101,3999,4799,3999,16,80,7,2446,364,1336,71,140,3,10000,79,1461001,48,139,1461000,1461002,139,161,Definitions.IPS(9,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.LONG,false),32075,63,86400,9999)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [35,161,151,82,100,159,157,216,198,94,82,0,94,169,65,17,213,87,151,193,5,58,58,136,57,101,251,243,112,94,205,130],\"legalEntityIdCounterparty\": [244,177,80,32,50,20,76,130,6,242,67,147,136,3,126,197,179,195,192,13,86,43,101,48,235,228,217,226,54,130,179,236],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1461,\"statusDate\": 97,\"initialExchangeDate\": 256,\"maturityDate\": 10000,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 15,\"cycleAnchorDateOfScalingIndex\": 2014223714,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 27,\"nominalInterestRate\": 0,\"feeAccrued\": 1461001,\"accruedInterest\": 1338,\"rateMultiplier\": 3999,\"rateSpread\": 16,\"feeRate\": 71,\"nextResetRate\": 89,\"penaltyRate\": 4800,\"premiumDiscountAtIED\": 86401,\"priceAtPurchaseDate\": 151,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10001,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 66,\"lifeFloor\": 23,\"periodCap\": 70,\"periodFloor\": 899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"35,161,151,82,100,159,157,216,198,94,82,0,94,169,65,17,213,87,151,193,5,58,58,136,57,101,251,243,112,94,205,130\"),stringToBytes32(\"244,177,80,32,50,20,76,130,6,242,67,147,136,3,126,197,179,195,192,13,86,43,101,48,235,228,217,226,54,130,179,236\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1461,97,256,10000,0,0,0,121,15,2014223714,160,27,0,1461001,1338,3999,16,71,89,4800,86401,151,Definitions.IPS(949,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(79,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(10001,Definitions.P.H,Definitions.S.LONG,true),66,23,70,899)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [202,214,214,211,114,229,153,243,107,203,239,26,7,237,200,176,26,183,207,178,4,89,221,49,52,185,245,194,187,103,57,223],\"legalEntityIdCounterparty\": [213,136,100,237,193,236,196,114,228,241,130,47,10,172,111,29,139,226,209,60,60,10,58,94,55,108,53,44,136,217,72,200],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 10001,\"statusDate\": 4001,\"initialExchangeDate\": 4899,\"maturityDate\": 2440587,\"terminationDate\": 1336,\"purchaseDate\": 11,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 1460,\"cycleAnchorDateOfScalingIndex\": 4799,\"cycleAnchorDateOfFee\": 50,\"notionalPrincipal\": 66,\"nominalInterestRate\": 140,\"feeAccrued\": 901,\"accruedInterest\": 95,\"rateMultiplier\": 81,\"rateSpread\": 900,\"feeRate\": 23,\"nextResetRate\": 4799,\"penaltyRate\": 68570,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 89,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 69,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 159,\"lifeFloor\": 6,\"periodCap\": 71,\"periodFloor\": 110}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"202,214,214,211,114,229,153,243,107,203,239,26,7,237,200,176,26,183,207,178,4,89,221,49,52,185,245,194,187,103,57,223\"),stringToBytes32(\"213,136,100,237,193,236,196,114,228,241,130,47,10,172,111,29,139,226,209,60,60,10,58,94,55,108,53,44,136,217,72,200\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,10001,4001,4899,2440587,1336,11,96,24,1460,4799,50,66,140,901,95,81,900,23,4799,68570,1532892063,4799,Definitions.IPS(159,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(69,Definitions.P.D,Definitions.S.LONG,false),159,6,71,110)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [59,171,60,28,153,197,185,224,67,107,81,180,147,16,148,103,197,216,116,97,187,110,139,125,7,6,37,230,246,99,233,152],\"legalEntityIdCounterparty\": [119,115,128,38,200,122,99,71,231,183,107,180,247,219,165,252,101,54,232,120,130,92,181,194,204,230,42,106,215,121,114,216],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 0,\"statusDate\": 361,\"initialExchangeDate\": 20,\"maturityDate\": 80,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 109,\"cycleAnchorDateOfRateReset\": 80,\"cycleAnchorDateOfScalingIndex\": 63,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 0,\"feeAccrued\": 30,\"accruedInterest\": 61,\"rateMultiplier\": 99,\"rateSpread\": 364,\"feeRate\": 65,\"nextResetRate\": 130,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 86401,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 80,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 71,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 71,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 159,\"lifeFloor\": 159,\"periodCap\": 2447,\"periodFloor\": 950}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"59,171,60,28,153,197,185,224,67,107,81,180,147,16,148,103,197,216,116,97,187,110,139,125,7,6,37,230,246,99,233,152\"),stringToBytes32(\"119,115,128,38,200,122,99,71,231,183,107,180,247,219,165,252,101,54,232,120,130,92,181,194,204,230,42,106,215,121,114,216\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,0,361,20,80,0,0,0,109,80,63,32076,1532892064,0,30,61,99,364,65,130,1532892064,19,86401,Definitions.IPS(90,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(80,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(71,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(71,Definitions.P.W,Definitions.S.SHORT,true),159,159,2447,950)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.736ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:16:53.758ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}