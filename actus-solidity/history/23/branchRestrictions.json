,{
  "2020-11-13T03:21:26.138ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "367",
                "sol": "367"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.140ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.140ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.141ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.142ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.143ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.144ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month<=0",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.146ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.149ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.150ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.150ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.150ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.151ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.152ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.156ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.156ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.156ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.157ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.157ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.157ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.157ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.158ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.158ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.159ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.159ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.160ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.160ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.161ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.161ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.162ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.162ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.163ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.163ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.163ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.164ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2449,
                "sol": 2449
              },
              {
                "js": "2448",
                "sol": "2448"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.165ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.166ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.166ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146098,
                "sol": 146098
              },
              {
                "js": "146097",
                "sol": "146097"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.167ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68569,
                "sol": 68569
              },
              {
                "js": "68568",
                "sol": "68568"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.169ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.170ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "149",
                "sol": "149"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.173ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.ContractRole.SEL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.186ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1971",
                "sol": "1971"
              },
              {
                "js": 1970,
                "sol": 1970
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2447",
                "sol": "2447"
              },
              {
                "js": 2446,
                "sol": 2446
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2447",
                "sol": "2447"
              },
              {
                "js": 2446,
                "sol": 2446
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T03:21:26.189ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.190ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.191ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.191ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.193ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{\"i\": 4799,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4799,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{\"i\": 401,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(401,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{\"i\": 1532892062,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{\"i\": 367,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(367,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.196ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.196ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.201ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.203ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.207ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.211ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.212ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.216ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1969,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(1969,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2446,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2446,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 28,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(28,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 19,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(19,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 146097,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146097,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 32076,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32076,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 149,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.223ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{\"i\": 364,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(364,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{\"i\": 4799,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4799,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{\"i\": 367,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(367,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{\"i\": 60,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(60,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{\"i\": 255,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(255,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{\"i\": 7,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(7,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 8,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(8,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{\"i\": 86401,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(86401,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.232ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1336,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1336,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 949,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(949,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 6,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(6,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 70,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(70,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 68568,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(68568,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 32075,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(32075,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2014223714,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.236ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 32074,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 1336,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 10},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 360,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 2014223716,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 97,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 1970,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 364,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 129,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 10,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 399,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 2},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 1461,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 21,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 69,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 2,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1337,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 32075,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 6},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 12,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 89,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 367,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 10000,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 11,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 4800,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 100,\"eventType\": 4,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 3},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 80,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 111,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 101,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 8,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 70,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 361,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 21,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 400,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 7},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 1532892064,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 32075,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 4799,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 2},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 101,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 20,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 1},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 1462,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 15},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 50,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 16},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 2440589,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 21,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 17,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 901,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 9,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 9,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 13},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 90,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 4800,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 360,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 4799,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 2446,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 90,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 17,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 16},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 21,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 1},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 91,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 1532892063,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 32,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 80,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 2014223714,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 69,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 146096,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 119,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 8},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 28,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 254,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 9},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 150,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 97,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 2}]",
              "sol": "[Definitions.ProtoEvent(32074,23,32074,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(6,20,1336,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.TD),Definitions.ProtoEvent(6,27,360,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(31,66,2014223716,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(900,139,97,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(0,4800,1970,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(29,1336,364,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(1462,2014223714,129,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(2014223715,7,10,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(86399,255,399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.AD),Definitions.ProtoEvent(96,399,1461,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(89,4800,21,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(951,4000,69,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(161,59,2,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(23,27,1337,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(900,8,32075,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PP),Definitions.ProtoEvent(949,27,12,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(91,25,89,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(255,1461001,367,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(899,130,10000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,11,11,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(90,4900,4800,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(39,9,100,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IED),Definitions.ProtoEvent(91,32,80,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(80,257,111,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(69,68570,101,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(6,39,8,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(141,86399,70,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(151,110,361,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(63,2014223716,21,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(10000,2440587,400,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PY),Definitions.ProtoEvent(68569,149,1532892064,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(361,8,32075,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(149,161,4799,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.AD),Definitions.ProtoEvent(364,4801,101,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(1532892064,141,20,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MD),Definitions.ProtoEvent(21,9999,1462,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD),Definitions.ProtoEvent(120,11,50,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.DV),Definitions.ProtoEvent(63,61,2440589,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(10001,23,21,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(10001,21,17,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(2440588,359,901,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(71,4,9,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(1338,367,9,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY),Definitions.ProtoEvent(256,1969,90,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(110,4899,4800,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(121,86401,360,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(1532892064,9,4799,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(51,68568,2446,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(31,1338,90,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(6,2,17,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.DV),Definitions.ProtoEvent(121,13,21,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MD),Definitions.ProtoEvent(96,10000,91,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(86399,8,1532892063,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(8,146096,32,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,8,80,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(130,1461001,2014223714,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(80,95,69,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(367,31,146096,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(31,21,119,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.FP),Definitions.ProtoEvent(365,1461002,28,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(140,68568,254,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PRD),Definitions.ProtoEvent(160,111,150,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(139,1971,97,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD)]"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.250ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 10,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 12},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 1337,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 257,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 2014223714,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 100,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 11,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 28,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 146097,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 2446,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 4899,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 12,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 121,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 951,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 3,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 10001,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 3999,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 6,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 0},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1970,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 4},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1532892063,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 10},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1337,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 19,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 10},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 1462,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 255,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 41,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 70,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 2446,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 16},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 32074,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 29,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 7,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 360,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 71,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 11},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 96,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 4000,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 32074,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 4,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 401,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 27,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 4799,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 951,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 9},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 130,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 15},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 364,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 26,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 10001,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 71,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 63,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 139,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 32074,\"eventType\": 5,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 4901,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 139,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 100,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 31,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 99,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 50,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2014223716,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 15},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 146096,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 97,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 63,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 7,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 14},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 1969,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 149,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 10000,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 130,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 4801,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 20}]",
              "sol": "[Definitions.ProtoEvent(120,40,10,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RR),Definitions.ProtoEvent(4800,4801,1337,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(4899,2440589,257,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(2446,2447,2014223714,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(25,4799,100,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(69,7,11,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(29,3,28,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(69,23,146097,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(10,41,2446,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(1462,66,4899,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(146097,2014223716,12,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(2448,257,121,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(11,12,951,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(151,950,3,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(60,18,10001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,7,3999,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(100,5,6,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SD),Definitions.ProtoEvent(60,29,1970,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IP),Definitions.ProtoEvent(1,101,1532892063,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(1461,146098,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.TD),Definitions.ProtoEvent(1532892064,1338,1337,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(150,150,19,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.TD),Definitions.ProtoEvent(2014223715,66,1462,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PRD),Definitions.ProtoEvent(129,26,255,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(86400,146098,41,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(66,90,70,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(4800,91,2446,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.DV),Definitions.ProtoEvent(64,39,32074,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(1461,49,29,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(146097,160,7,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(1461000,68569,360,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(901,160,71,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCI),Definitions.ProtoEvent(4800,1532892064,96,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(1338,66,4000,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(950,39,32074,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(111,141,4,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(17,32,401,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(9999,49,27,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(949,1,4799,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(4,11,951,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PRD),Definitions.ProtoEvent(949,12,130,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.CD),Definitions.ProtoEvent(899,50,364,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(2446,140,26,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(2014223715,1460,10001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(140,2448,71,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(146096,1338,63,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(10000,121,139,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(256,24,32074,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(110,121,4901,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(4801,40,139,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(366,68569,100,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(110,1338,31,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(96,80,99,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(90,2446,50,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(950,10001,2014223716,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.CD),Definitions.ProtoEvent(1532892064,1971,146096,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(366,90,97,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(9999,81,63,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(1,68568,7,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SC),Definitions.ProtoEvent(951,400,1969,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(4899,399,149,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223715,121,10000,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(1461001,0,130,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(51,29,4801,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child)]"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.271ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.273ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [191,69,214,65,80,99,29,165,38,105,106,194,74,155,38,233,204,210,125,36,236,5,156,24,246,46,196,73,251,148,139,40],\"legalEntityIdCounterparty\": [185,118,182,19,114,15,25,73,214,232,92,198,217,236,201,153,250,124,189,55,59,184,40,245,129,223,222,45,245,20,252,48],\"dayCountConvention\": 2,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 119,\"statusDate\": 32074,\"initialExchangeDate\": 366,\"maturityDate\": 1532892064,\"terminationDate\": 120,\"purchaseDate\": 364,\"capitalizationEndDate\": 3999,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 2440587,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": -1,\"nominalInterestRate\": 899,\"feeAccrued\": 18,\"accruedInterest\": 68568,\"rateMultiplier\": 901,\"rateSpread\": 1971,\"feeRate\": 401,\"nextResetRate\": 401,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 50,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 59,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 0,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 86400,\"lifeFloor\": 367,\"periodCap\": 40,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"191,69,214,65,80,99,29,165,38,105,106,194,74,155,38,233,204,210,125,36,236,5,156,24,246,46,196,73,251,148,139,40\"),stringToBytes32(\"185,118,182,19,114,15,25,73,214,232,92,198,217,236,201,153,250,124,189,55,59,184,40,245,129,223,222,45,245,20,252,48\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,119,32074,366,1532892064,120,364,3999,2014223714,97,2440587,4901,-1,899,18,68568,901,1971,401,401,2014223716,50,32074,Definitions.IPS(59,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1969,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(0,Definitions.P.Y,Definitions.S.SHORT,true),86400,367,40,129)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.277ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [214,196,42,208,1,100,87,164,131,77,46,163,123,95,5,20,83,10,171,148,153,146,1,157,128,184,192,200,239,18,85,20],\"legalEntityIdCounterparty\": [192,89,251,221,144,203,229,162,251,13,253,15,245,7,38,252,79,90,46,128,132,71,32,247,204,57,249,112,62,230,76,254],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 364,\"statusDate\": 2014223716,\"initialExchangeDate\": 2440588,\"maturityDate\": 1461002,\"terminationDate\": 1462,\"purchaseDate\": 101,\"capitalizationEndDate\": 86399,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 23,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 140,\"notionalPrincipal\": 26,\"nominalInterestRate\": 146096,\"feeAccrued\": 401,\"accruedInterest\": 256,\"rateMultiplier\": 951,\"rateSpread\": 161,\"feeRate\": 13,\"nextResetRate\": 4801,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 65,\"priceAtPurchaseDate\": 70,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 949,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 141,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1338,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 399,\"lifeFloor\": 146097,\"periodCap\": 254,\"periodFloor\": 59}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"214,196,42,208,1,100,87,164,131,77,46,163,123,95,5,20,83,10,171,148,153,146,1,157,128,184,192,200,239,18,85,20\"),stringToBytes32(\"192,89,251,221,144,203,229,162,251,13,253,15,245,7,38,252,79,90,46,128,132,71,32,247,204,57,249,112,62,230,76,254\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,364,2014223716,2440588,1461002,1462,101,86399,130,23,141,140,26,146096,401,256,951,161,13,4801,19,65,70,Definitions.IPS(50,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(949,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(141,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.H,Definitions.S.SHORT,true),399,146097,254,59)"
            },
            {
              "js": "{\"lastEventTime\": 14,\"contractStatus\": 3,\"timeFromLastEvent\": 8,\"nominalValue\": 40,\"nominalAccrued\": 70,\"feeAccrued\": 4000,\"nominalRate\": 19,\"interestScalingMultiplier\": 399,\"nominalScalingMultiplier\": 1,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(14,Definitions.ContractStatus.DF,8,40,70,4000,19,399,1,Definitions.ContractRole.SEL)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.283ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [232,249,209,51,10,235,70,213,157,24,139,76,214,203,28,7,54,45,214,3,89,131,46,30,189,52,52,107,169,221,218,91],\"legalEntityIdCounterparty\": [214,111,238,142,20,103,197,83,96,55,89,6,112,115,58,16,209,74,72,97,242,232,245,78,250,241,84,133,219,80,171,211],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 13,\"statusDate\": 6,\"initialExchangeDate\": 13,\"maturityDate\": 81,\"terminationDate\": 32,\"purchaseDate\": 1461002,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 1336,\"cycleAnchorDateOfRateReset\": 950,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 951,\"nominalInterestRate\": 49,\"feeAccrued\": 86399,\"accruedInterest\": 949,\"rateMultiplier\": 29,\"rateSpread\": 8,\"feeRate\": 21,\"nextResetRate\": 81,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 4,\"priceAtPurchaseDate\": 4801,\"cycleOfInterestPayment\": {\"i\": 30,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 23,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 1,\"lifeFloor\": 13,\"periodCap\": 8,\"periodFloor\": 367}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"232,249,209,51,10,235,70,213,157,24,139,76,214,203,28,7,54,45,214,3,89,131,46,30,189,52,52,107,169,221,218,91\"),stringToBytes32(\"214,111,238,142,20,103,197,83,96,55,89,6,112,115,58,16,209,74,72,97,242,232,245,78,250,241,84,133,219,80,171,211\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,13,6,13,81,32,1461002,96,1336,950,96,130,951,49,86399,949,29,8,21,81,4899,4,4801,Definitions.IPS(30,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(23,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(61,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,true),1,13,8,367)"
            },
            {
              "js": "{\"lastEventTime\": 71,\"contractStatus\": 2,\"timeFromLastEvent\": 1461001,\"nominalValue\": 1337,\"nominalAccrued\": 26,\"feeAccrued\": 12,\"nominalRate\": 1,\"interestScalingMultiplier\": 1337,\"nominalScalingMultiplier\": 1461001,\"contractRoleSign\": 4}",
              "sol": "Definitions.ContractState(71,Definitions.ContractStatus.DQ,1461001,1337,26,12,1,1337,1461001,Definitions.ContractRole.RFL)"
            },
            {
              "js": "{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 69,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 0}",
              "sol": "Definitions.ProtoEvent(151,146098,69,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.291ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [66,54,229,121,107,22,237,252,85,186,250,80,198,238,8,93,177,65,229,245,247,199,2,185,52,162,88,28,239,123,35,11],\"legalEntityIdCounterparty\": [102,218,23,100,46,239,6,5,180,77,232,216,109,240,53,13,172,175,94,106,219,201,252,21,80,52,214,97,95,87,209,222],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 950,\"statusDate\": 256,\"initialExchangeDate\": 365,\"maturityDate\": 21,\"terminationDate\": 30,\"purchaseDate\": 12,\"capitalizationEndDate\": 59,\"cycleAnchorDateOfInterestPayment\": 12,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 4001,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 99,\"nominalInterestRate\": 101,\"feeAccrued\": 68569,\"accruedInterest\": 14,\"rateMultiplier\": 121,\"rateSpread\": 13,\"feeRate\": 68569,\"nextResetRate\": 10000,\"penaltyRate\": 41,\"premiumDiscountAtIED\": 901,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 19,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 15,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 99,\"lifeFloor\": 79,\"periodCap\": 20,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"66,54,229,121,107,22,237,252,85,186,250,80,198,238,8,93,177,65,229,245,247,199,2,185,52,162,88,28,239,123,35,11\"),stringToBytes32(\"102,218,23,100,46,239,6,5,180,77,232,216,109,240,53,13,172,175,94,106,219,201,252,21,80,52,214,97,95,87,209,222\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,950,256,365,21,30,12,59,12,20,4001,2440588,99,101,68569,14,121,13,68569,10000,41,901,1,Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(19,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(120,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(15,Definitions.P.Q,Definitions.S.LONG,false),99,79,20,1336)"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [34,6,251,190,213,43,7,200,35,44,46,109,233,241,95,247,59,168,48,135,147,182,51,48,123,131,77,191,189,73,16,38],\"legalEntityIdCounterparty\": [97,126,93,65,64,72,211,41,254,253,105,100,224,54,115,51,220,193,126,255,81,228,164,210,94,154,117,177,193,249,115,84],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 360,\"initialExchangeDate\": 899,\"maturityDate\": 27,\"terminationDate\": 255,\"purchaseDate\": 100,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 4801,\"cycleAnchorDateOfScalingIndex\": 79,\"cycleAnchorDateOfFee\": 131,\"notionalPrincipal\": 41,\"nominalInterestRate\": 86399,\"feeAccrued\": 29,\"accruedInterest\": 1970,\"rateMultiplier\": 24,\"rateSpread\": 86399,\"feeRate\": 1532892064,\"nextResetRate\": 89,\"penaltyRate\": 70,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 951,\"cycleOfInterestPayment\": {\"i\": 64,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 50,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4899,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 4800,\"lifeFloor\": 1461002,\"periodCap\": 149,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"34,6,251,190,213,43,7,200,35,44,46,109,233,241,95,247,59,168,48,135,147,182,51,48,123,131,77,191,189,73,16,38\"),stringToBytes32(\"97,126,93,65,64,72,211,41,254,253,105,100,224,54,115,51,220,193,126,255,81,228,164,210,94,154,117,177,193,249,115,84\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,101,360,899,27,255,100,60,68569,4801,79,131,41,86399,29,1970,24,86399,1532892064,89,70,4800,951,Definitions.IPS(64,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(2014223716,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(4899,Definitions.P.W,Definitions.S.LONG,true),4800,1461002,149,1532892063)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [36,159,254,212,249,224,154,129,25,163,222,230,204,120,4,36,241,50,41,125,91,174,183,52,213,195,91,189,6,116,24,188],\"legalEntityIdCounterparty\": [217,107,118,150,89,132,162,153,77,90,60,99,56,41,49,145,80,203,60,135,75,30,31,107,26,90,151,194,80,57,11,29],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1338,\"statusDate\": 17,\"initialExchangeDate\": 109,\"maturityDate\": 1532892063,\"terminationDate\": 129,\"purchaseDate\": 1462,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 949,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 25,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 30,\"nominalInterestRate\": 21,\"feeAccrued\": 68568,\"accruedInterest\": 68570,\"rateMultiplier\": 146096,\"rateSpread\": 41,\"feeRate\": 31,\"nextResetRate\": 129,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 255,\"priceAtPurchaseDate\": 4901,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1969,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461000,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 90,\"lifeFloor\": 4799,\"periodCap\": 1532892064,\"periodFloor\": 4900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"36,159,254,212,249,224,154,129,25,163,222,230,204,120,4,36,241,50,41,125,91,174,183,52,213,195,91,189,6,116,24,188\"),stringToBytes32(\"217,107,118,150,89,132,162,153,77,90,60,99,56,41,49,145,80,203,60,135,75,30,31,107,26,90,151,194,80,57,11,29\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1338,17,109,1532892063,129,1462,86401,949,28,25,32,30,21,68568,68570,146096,41,31,129,3,255,4901,Definitions.IPS(364,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(3,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1461000,Definitions.P.H,Definitions.S.LONG,false),90,4799,1532892064,4900)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [40,127,215,153,76,247,224,142,184,171,73,6,100,210,179,72,80,218,193,64,208,237,173,19,64,109,37,76,159,55,66,83],\"legalEntityIdCounterparty\": [233,66,176,102,121,205,178,93,213,88,190,223,73,126,170,209,136,103,203,157,96,203,188,68,188,1,15,14,41,223,116,22],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 86400,\"statusDate\": 51,\"initialExchangeDate\": 2014223715,\"maturityDate\": 361,\"terminationDate\": 255,\"purchaseDate\": 119,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 64,\"cycleAnchorDateOfRateReset\": 257,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 63,\"notionalPrincipal\": 130,\"nominalInterestRate\": 400,\"feeAccrued\": 10000,\"accruedInterest\": 64,\"rateMultiplier\": 50,\"rateSpread\": 120,\"feeRate\": 86399,\"nextResetRate\": 2014223714,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 17,\"priceAtPurchaseDate\": 130,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 900,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1338,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 9,\"lifeFloor\": 139,\"periodCap\": 141,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"40,127,215,153,76,247,224,142,184,171,73,6,100,210,179,72,80,218,193,64,208,237,173,19,64,109,37,76,159,55,66,83\"),stringToBytes32(\"233,66,176,102,121,205,178,93,213,88,190,223,73,126,170,209,136,103,203,157,96,203,188,68,188,1,15,14,41,223,116,22\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,86400,51,2014223715,361,255,119,7,64,257,150,63,130,400,10000,64,50,120,86399,2014223714,99,17,130,Definitions.IPS(90,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(31,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.D,Definitions.S.LONG,false),9,139,141,19)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [11,74,199,178,130,138,228,203,88,105,198,115,71,186,227,166,90,191,188,252,228,169,204,65,134,46,195,19,242,168,186,92],\"legalEntityIdCounterparty\": [207,156,160,190,104,116,166,65,10,43,17,192,51,178,135,118,187,134,93,158,139,67,81,143,115,237,207,171,198,87,10,97],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1461002,\"statusDate\": 2,\"initialExchangeDate\": 146098,\"maturityDate\": 2014223715,\"terminationDate\": 129,\"purchaseDate\": 0,\"capitalizationEndDate\": 32,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 359,\"cycleAnchorDateOfScalingIndex\": 4000,\"cycleAnchorDateOfFee\": 7,\"notionalPrincipal\": 9999,\"nominalInterestRate\": 121,\"feeAccrued\": 10001,\"accruedInterest\": 20,\"rateMultiplier\": 4000,\"rateSpread\": 121,\"feeRate\": 109,\"nextResetRate\": -1,\"penaltyRate\": 50,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 12,\"cycleOfInterestPayment\": {\"i\": 146097,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 949,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 140,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 15,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 129,\"lifeFloor\": 63,\"periodCap\": 161,\"periodFloor\": 32074}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"11,74,199,178,130,138,228,203,88,105,198,115,71,186,227,166,90,191,188,252,228,169,204,65,134,46,195,19,242,168,186,92\"),stringToBytes32(\"207,156,160,190,104,116,166,65,10,43,17,192,51,178,135,118,187,134,93,158,139,67,81,143,115,237,207,171,198,87,10,97\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1461002,2,146098,2014223715,129,0,32,97,359,4000,7,9999,121,10001,20,4000,121,109,-1,50,89,12,Definitions.IPS(146097,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(140,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(15,Definitions.P.H,Definitions.S.SHORT,false),129,63,161,32074)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [54,106,36,169,48,124,227,214,163,201,193,66,19,5,171,133,5,130,252,137,198,139,51,223,114,92,4,222,144,133,230,251],\"legalEntityIdCounterparty\": [5,11,104,137,224,181,245,255,229,218,123,36,180,104,196,47,156,56,57,87,75,63,35,216,223,149,24,95,5,240,170,206],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 4000,\"initialExchangeDate\": 66,\"maturityDate\": 366,\"terminationDate\": 256,\"purchaseDate\": 899,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 4901,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 255,\"notionalPrincipal\": 66,\"nominalInterestRate\": 11,\"feeAccrued\": 100,\"accruedInterest\": 899,\"rateMultiplier\": 146096,\"rateSpread\": 27,\"feeRate\": 4001,\"nextResetRate\": 401,\"penaltyRate\": 59,\"premiumDiscountAtIED\": 1461001,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 4000,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 949,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892064,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461000,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 79,\"lifeFloor\": 13,\"periodCap\": 9999,\"periodFloor\": 2440587}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"54,106,36,169,48,124,227,214,163,201,193,66,19,5,171,133,5,130,252,137,198,139,51,223,114,92,4,222,144,133,230,251\"),stringToBytes32(\"5,11,104,137,224,181,245,255,229,218,123,36,180,104,196,47,156,56,57,87,75,63,35,216,223,149,24,95,5,240,170,206\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,21,4000,66,366,256,899,4799,120,4901,8,255,66,11,100,899,146096,27,4001,401,59,1461001,4800,Definitions.IPS(4000,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1532892064,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461000,Definitions.P.H,Definitions.S.LONG,false),79,13,9999,2440587)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [176,77,126,255,9,244,96,69,163,238,195,129,174,17,132,175,102,175,85,155,125,158,155,207,61,228,42,83,148,76,158,118],\"legalEntityIdCounterparty\": [112,97,240,191,129,15,235,231,168,147,247,14,77,36,150,92,4,142,68,61,164,63,255,62,11,1,213,25,178,200,115,68],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 66,\"statusDate\": 65,\"initialExchangeDate\": 119,\"maturityDate\": 1338,\"terminationDate\": 60,\"purchaseDate\": 68568,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 131,\"nominalInterestRate\": 4901,\"feeAccrued\": 161,\"accruedInterest\": 1461000,\"rateMultiplier\": 121,\"rateSpread\": 1461002,\"feeRate\": 901,\"nextResetRate\": 146097,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 1338,\"priceAtPurchaseDate\": 1969,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 255,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 90,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 111,\"lifeFloor\": 10,\"periodCap\": 40,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"176,77,126,255,9,244,96,69,163,238,195,129,174,17,132,175,102,175,85,155,125,158,155,207,61,228,42,83,148,76,158,118\"),stringToBytes32(\"112,97,240,191,129,15,235,231,168,147,247,14,77,36,150,92,4,142,68,61,164,63,255,62,11,1,213,25,178,200,115,68\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,66,65,119,1338,60,68568,101,71,4000,1970,2440588,131,4901,161,1461000,121,1461002,901,146097,40,1338,1969,Definitions.IPS(399,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(90,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false),111,10,40,1336)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [93,153,245,19,135,249,213,156,86,234,99,196,200,17,42,84,248,9,204,141,117,86,31,5,184,107,48,217,26,11,254,218],\"legalEntityIdCounterparty\": [140,14,155,244,50,13,57,83,112,140,91,34,61,195,150,205,218,71,208,212,20,129,60,240,23,215,82,151,136,39,80,132],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 161,\"statusDate\": 28,\"initialExchangeDate\": 7,\"maturityDate\": 51,\"terminationDate\": 1532892064,\"purchaseDate\": 71,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 32074,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 255,\"nominalInterestRate\": 13,\"feeAccrued\": 4799,\"accruedInterest\": 146096,\"rateMultiplier\": 2447,\"rateSpread\": 365,\"feeRate\": 2446,\"nextResetRate\": 120,\"penaltyRate\": 159,\"premiumDiscountAtIED\": 121,\"priceAtPurchaseDate\": 9,\"cycleOfInterestPayment\": {\"i\": 4801,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 80,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892064,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 361,\"lifeFloor\": 146097,\"periodCap\": 90,\"periodFloor\": 32074}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"93,153,245,19,135,249,213,156,86,234,99,196,200,17,42,84,248,9,204,141,117,86,31,5,184,107,48,217,26,11,254,218\"),stringToBytes32(\"140,14,155,244,50,13,57,83,112,140,91,34,61,195,150,205,218,71,208,212,20,129,60,240,23,215,82,151,136,39,80,132\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,161,28,7,51,1532892064,71,0,1,1336,32074,28,255,13,4799,146096,2447,365,2446,120,159,121,9,Definitions.IPS(4801,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(80,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1532892064,Definitions.P.Y,Definitions.S.SHORT,false),361,146097,90,32074)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [118,48,212,184,154,107,225,195,235,43,253,85,216,96,180,165,95,115,188,193,15,46,192,91,254,83,39,173,220,115,67,79],\"legalEntityIdCounterparty\": [80,211,77,81,251,94,36,243,50,241,227,181,150,223,201,154,4,180,43,67,41,113,88,191,114,67,246,170,97,199,22,99],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 121,\"statusDate\": 16,\"initialExchangeDate\": 18,\"maturityDate\": 2440589,\"terminationDate\": 91,\"purchaseDate\": 899,\"capitalizationEndDate\": 68569,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 10001,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 1461,\"nominalInterestRate\": 110,\"feeAccrued\": -1,\"accruedInterest\": 96,\"rateMultiplier\": 4799,\"rateSpread\": 16,\"feeRate\": 40,\"nextResetRate\": 4901,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 2448,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 19,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4901,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 368,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 151,\"lifeFloor\": 1461001,\"periodCap\": 20,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"118,48,212,184,154,107,225,195,235,43,253,85,216,96,180,165,95,115,188,193,15,46,192,91,254,83,39,173,220,115,67,79\"),stringToBytes32(\"80,211,77,81,251,94,36,243,50,241,227,181,150,223,201,154,4,180,43,67,41,113,88,191,114,67,246,170,97,199,22,99\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,121,16,18,2440589,91,899,68569,131,10001,1,1,1461,110,-1,96,4799,16,40,4901,64,401,2448,Definitions.IPS(50,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(19,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4901,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(368,Definitions.P.Y,Definitions.S.SHORT,true),151,1461001,20,86399)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [231,207,139,95,172,160,51,11,31,184,82,42,145,243,212,189,23,87,202,112,95,172,118,209,22,208,163,181,12,107,194,209],\"legalEntityIdCounterparty\": [93,148,31,169,173,250,105,182,165,189,74,228,6,192,198,28,213,164,22,201,240,237,151,15,25,243,240,177,77,65,238,152],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 364,\"statusDate\": 140,\"initialExchangeDate\": 79,\"maturityDate\": 2440587,\"terminationDate\": 39,\"purchaseDate\": 401,\"capitalizationEndDate\": 2440589,\"cycleAnchorDateOfInterestPayment\": 399,\"cycleAnchorDateOfRateReset\": 4799,\"cycleAnchorDateOfScalingIndex\": 65,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 18,\"nominalInterestRate\": 255,\"feeAccrued\": 26,\"accruedInterest\": 12,\"rateMultiplier\": 101,\"rateSpread\": 111,\"feeRate\": 9999,\"nextResetRate\": 4799,\"penaltyRate\": 1461002,\"premiumDiscountAtIED\": 151,\"priceAtPurchaseDate\": 2448,\"cycleOfInterestPayment\": {\"i\": 29,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 71,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 99,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 146097,\"periodCap\": 399,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"231,207,139,95,172,160,51,11,31,184,82,42,145,243,212,189,23,87,202,112,95,172,118,209,22,208,163,181,12,107,194,209\"),stringToBytes32(\"93,148,31,169,173,250,105,182,165,189,74,228,6,192,198,28,213,164,22,201,240,237,151,15,25,243,240,177,77,65,238,152\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,364,140,79,2440587,39,401,2440589,399,4799,65,1,18,255,26,12,101,111,9999,4799,1461002,151,2448,Definitions.IPS(29,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(32074,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(71,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(99,Definitions.P.M,Definitions.S.SHORT,true),949,146097,399,1532892063)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [33,167,248,204,84,220,145,23,22,225,115,252,148,187,107,92,212,71,240,67,17,118,144,160,22,232,223,28,102,207,17,162],\"legalEntityIdCounterparty\": [43,220,252,78,143,127,66,164,157,87,107,212,67,209,199,238,103,210,68,158,87,111,236,4,92,194,98,214,90,48,14,180],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 9999,\"statusDate\": 146097,\"initialExchangeDate\": 359,\"maturityDate\": 4000,\"terminationDate\": 68569,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 2448,\"cycleAnchorDateOfScalingIndex\": 151,\"cycleAnchorDateOfFee\": 71,\"notionalPrincipal\": 96,\"nominalInterestRate\": 0,\"feeAccrued\": 40,\"accruedInterest\": 257,\"rateMultiplier\": 4901,\"rateSpread\": 1336,\"feeRate\": 119,\"nextResetRate\": 10000,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 120,\"priceAtPurchaseDate\": 32076,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 79,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 28,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 10001,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 71,\"lifeFloor\": 10000,\"periodCap\": 151,\"periodFloor\": 86401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"33,167,248,204,84,220,145,23,22,225,115,252,148,187,107,92,212,71,240,67,17,118,144,160,22,232,223,28,102,207,17,162\"),stringToBytes32(\"43,220,252,78,143,127,66,164,157,87,107,212,67,209,199,238,103,210,68,158,87,111,236,4,92,194,98,214,90,48,14,180\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,9999,146097,359,4000,68569,0,0,121,2448,151,71,96,0,40,257,4901,1336,119,10000,1,120,32076,Definitions.IPS(11,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(79,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(28,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(10001,Definitions.P.M,Definitions.S.LONG,false),71,10000,151,86401)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [113,152,28,223,217,184,79,245,31,28,110,37,137,169,179,183,106,149,226,5,33,199,61,172,197,203,168,206,216,174,206,208],\"legalEntityIdCounterparty\": [232,144,117,203,45,163,242,16,246,217,128,0,189,219,80,42,244,3,20,194,64,52,204,142,1,5,111,150,239,72,71,113],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 24,\"statusDate\": 4801,\"initialExchangeDate\": 131,\"maturityDate\": 69,\"terminationDate\": 1461002,\"purchaseDate\": 4899,\"capitalizationEndDate\": 2447,\"cycleAnchorDateOfInterestPayment\": 40,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 12,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 121,\"nominalInterestRate\": 4900,\"feeAccrued\": 97,\"accruedInterest\": 23,\"rateMultiplier\": 3999,\"rateSpread\": 256,\"feeRate\": 10000,\"nextResetRate\": 48,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 401,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 18,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 71,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 86400,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 48,\"lifeFloor\": 111,\"periodCap\": 51,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"113,152,28,223,217,184,79,245,31,28,110,37,137,169,179,183,106,149,226,5,33,199,61,172,197,203,168,206,216,174,206,208\"),stringToBytes32(\"232,144,117,203,45,163,242,16,246,217,128,0,189,219,80,42,244,3,20,194,64,52,204,142,1,5,111,150,239,72,71,113\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,24,4801,131,69,1461002,4899,2447,40,146097,12,68569,121,4900,97,23,3999,256,10000,48,146098,401,60,Definitions.IPS(18,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(71,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(86400,Definitions.P.Y,Definitions.S.SHORT,true),48,111,51,4899)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [29,77,93,123,4,101,145,220,251,33,81,209,116,200,55,210,59,1,154,54,154,97,32,190,155,198,180,117,164,169,44,17],\"legalEntityIdCounterparty\": [103,71,96,22,118,234,147,32,198,1,140,247,172,176,102,143,134,175,246,71,94,192,46,200,43,233,133,5,5,219,41,119],\"dayCountConvention\": 3,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4,\"statusDate\": 4801,\"initialExchangeDate\": 1460,\"maturityDate\": 159,\"terminationDate\": 18,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 27,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 399,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 25,\"nominalInterestRate\": 0,\"feeAccrued\": 32,\"accruedInterest\": 4901,\"rateMultiplier\": 17,\"rateSpread\": 4899,\"feeRate\": 129,\"nextResetRate\": 120,\"penaltyRate\": 2440589,\"premiumDiscountAtIED\": 367,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 99,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 31,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 23,\"lifeFloor\": 146098,\"periodCap\": 14,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"29,77,93,123,4,101,145,220,251,33,81,209,116,200,55,210,59,1,154,54,154,97,32,190,155,198,180,117,164,169,44,17\"),stringToBytes32(\"103,71,96,22,118,234,147,32,198,1,140,247,172,176,102,143,134,175,246,71,94,192,46,200,43,233,133,5,5,219,41,119\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4,4801,1460,159,18,0,0,27,0,399,1532892064,25,0,32,4901,17,4899,129,120,2440589,367,101,Definitions.IPS(99,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(32,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(31,Definitions.P.W,Definitions.S.LONG,true),23,146098,14,60)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [35,126,32,164,93,65,129,181,13,204,212,145,80,214,158,132,6,222,125,203,28,43,246,147,163,214,204,109,201,235,192,72],\"legalEntityIdCounterparty\": [91,117,213,199,180,182,139,229,177,42,115,87,65,227,35,157,173,77,118,37,2,103,78,170,88,16,213,161,179,178,32,191],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1461001,\"statusDate\": 4800,\"initialExchangeDate\": 96,\"maturityDate\": 0,\"terminationDate\": 2014223715,\"purchaseDate\": 80,\"capitalizationEndDate\": 1,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 146096,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 399,\"notionalPrincipal\": -1,\"nominalInterestRate\": 110,\"feeAccrued\": 86399,\"accruedInterest\": 2014223714,\"rateMultiplier\": 2,\"rateSpread\": 32076,\"feeRate\": 86399,\"nextResetRate\": 109,\"penaltyRate\": 1336,\"premiumDiscountAtIED\": 4899,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 39,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 361,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 69,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 60,\"lifeFloor\": 13,\"periodCap\": 951,\"periodFloor\": 41}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"35,126,32,164,93,65,129,181,13,204,212,145,80,214,158,132,6,222,125,203,28,43,246,147,163,214,204,109,201,235,192,72\"),stringToBytes32(\"91,117,213,199,180,182,139,229,177,42,115,87,65,227,35,157,173,77,118,37,2,103,78,170,88,16,213,161,179,178,32,191\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1461001,4800,96,0,2014223715,80,1,360,146096,4901,399,-1,110,86399,2014223714,2,32076,86399,109,1336,4899,1338,Definitions.IPS(39,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(4901,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(361,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(69,Definitions.P.W,Definitions.S.LONG,false),60,13,951,41)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [137,219,219,69,76,205,190,139,28,92,230,145,14,110,171,79,250,183,225,169,86,124,40,97,138,129,100,76,48,16,139,164],\"legalEntityIdCounterparty\": [54,63,103,245,232,105,42,173,49,155,217,80,224,236,47,86,39,110,118,21,174,253,86,196,215,127,105,42,57,14,87,74],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 28,\"statusDate\": 1336,\"initialExchangeDate\": 1969,\"maturityDate\": 64,\"terminationDate\": 16,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 32076,\"cycleAnchorDateOfScalingIndex\": 10,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 4001,\"nominalInterestRate\": 0,\"feeAccrued\": 17,\"accruedInterest\": 3,\"rateMultiplier\": 10001,\"rateSpread\": 48,\"feeRate\": 366,\"nextResetRate\": 14,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4001,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 130,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 9,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1532892064,\"lifeFloor\": 131,\"periodCap\": 65,\"periodFloor\": 2440588}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"137,219,219,69,76,205,190,139,28,92,230,145,14,110,171,79,250,183,225,169,86,124,40,97,138,129,100,76,48,16,139,164\"),stringToBytes32(\"54,63,103,245,232,105,42,173,49,155,217,80,224,236,47,86,39,110,118,21,174,253,86,196,215,127,105,42,57,14,87,74\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,28,1336,1969,64,16,0,0,951,32076,10,0,4001,0,17,3,10001,48,366,14,256,146097,4001,Definitions.IPS(81,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(130,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(9,Definitions.P.H,Definitions.S.SHORT,false),1532892064,131,65,2440588)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [9,30,76,214,28,101,14,169,60,56,71,121,94,110,240,144,110,50,211,244,228,130,40,187,194,180,120,200,101,200,255,254],\"legalEntityIdCounterparty\": [159,135,63,100,89,83,125,226,40,35,203,70,92,23,72,156,132,50,21,239,100,231,27,17,125,15,90,236,188,120,27,42],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 15,\"statusDate\": 23,\"initialExchangeDate\": 254,\"maturityDate\": 364,\"terminationDate\": 29,\"purchaseDate\": 16,\"capitalizationEndDate\": 401,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 13,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 32,\"notionalPrincipal\": 365,\"nominalInterestRate\": 1337,\"feeAccrued\": 368,\"accruedInterest\": 2014223714,\"rateMultiplier\": 4799,\"rateSpread\": 24,\"feeRate\": 1461,\"nextResetRate\": 17,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 141,\"priceAtPurchaseDate\": 141,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1336,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 254,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 39,\"lifeFloor\": 15,\"periodCap\": 49,\"periodFloor\": 16}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"9,30,76,214,28,101,14,169,60,56,71,121,94,110,240,144,110,50,211,244,228,130,40,187,194,180,120,200,101,200,255,254\"),stringToBytes32(\"159,135,63,100,89,83,125,226,40,35,203,70,92,23,72,156,132,50,21,239,100,231,27,17,125,15,90,236,188,120,27,42\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,15,23,254,364,29,16,401,899,13,364,32,365,1337,368,2014223714,4799,24,1461,17,5,141,141,Definitions.IPS(4800,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1336,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(254,Definitions.P.Q,Definitions.S.SHORT,false),39,15,49,16)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [111,213,191,178,51,76,13,175,97,191,135,130,143,16,33,84,232,89,6,186,100,133,245,99,3,178,44,171,141,133,43,132],\"legalEntityIdCounterparty\": [53,207,147,255,218,36,153,41,129,19,62,233,64,5,179,157,130,75,185,117,133,146,122,228,1,234,83,111,249,222,103,23],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 2014223714,\"statusDate\": 90,\"initialExchangeDate\": 79,\"maturityDate\": 29,\"terminationDate\": 4900,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 899,\"cycleAnchorDateOfRateReset\": 1969,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 66,\"nominalInterestRate\": 0,\"feeAccrued\": 99,\"accruedInterest\": 146096,\"rateMultiplier\": 160,\"rateSpread\": 32074,\"feeRate\": 1338,\"nextResetRate\": 160,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 256,\"cycleOfInterestPayment\": {\"i\": 151,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 110,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 81,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 71,\"lifeFloor\": 4901,\"periodCap\": -1,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"111,213,191,178,51,76,13,175,97,191,135,130,143,16,33,84,232,89,6,186,100,133,245,99,3,178,44,171,141,133,43,132\"),stringToBytes32(\"53,207,147,255,218,36,153,41,129,19,62,233,64,5,179,157,130,75,185,117,133,146,122,228,1,234,83,111,249,222,103,23\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,2014223714,90,79,29,4900,0,0,899,1969,0,2448,66,0,99,146096,160,32074,1338,160,146098,2,256,Definitions.IPS(151,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(110,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(81,Definitions.P.M,Definitions.S.SHORT,true),71,4901,-1,64)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [86,233,44,212,77,119,132,60,238,75,200,220,241,159,215,44,202,253,95,183,235,136,124,243,171,75,146,91,170,191,153,101],\"legalEntityIdCounterparty\": [36,73,21,61,32,177,155,137,44,64,11,180,88,138,174,146,33,86,12,63,122,109,250,70,144,96,243,236,10,50,59,101],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 20,\"statusDate\": 120,\"initialExchangeDate\": 69,\"maturityDate\": 160,\"terminationDate\": 97,\"purchaseDate\": 14,\"capitalizationEndDate\": 63,\"cycleAnchorDateOfInterestPayment\": 146098,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 2440588,\"cycleAnchorDateOfFee\": 49,\"notionalPrincipal\": 361,\"nominalInterestRate\": 140,\"feeAccrued\": 1532892063,\"accruedInterest\": 48,\"rateMultiplier\": 8,\"rateSpread\": 17,\"feeRate\": 59,\"nextResetRate\": 91,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3999,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2446,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 65,\"lifeFloor\": 32076,\"periodCap\": 17,\"periodFloor\": 359}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"86,233,44,212,77,119,132,60,238,75,200,220,241,159,215,44,202,253,95,183,235,136,124,243,171,75,146,91,170,191,153,101\"),stringToBytes32(\"36,73,21,61,32,177,155,137,44,64,11,180,88,138,174,146,33,86,12,63,122,109,250,70,144,96,243,236,10,50,59,101\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,20,120,69,160,97,14,63,146098,4000,2440588,49,361,140,1532892063,48,8,17,59,91,71,364,21,Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(3999,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(2446,Definitions.P.Y,Definitions.S.LONG,true),65,32076,17,359)"
            },
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [133,33,41,20,180,23,174,11,203,26,246,118,30,81,250,5,247,107,174,128,234,180,150,82,183,10,215,167,235,74,15,71],\"legalEntityIdCounterparty\": [158,36,97,154,249,103,16,142,212,153,177,19,53,17,112,135,210,239,75,199,49,236,252,184,12,12,49,129,0,115,164,203],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 255,\"statusDate\": 141,\"initialExchangeDate\": 79,\"maturityDate\": 89,\"terminationDate\": 161,\"purchaseDate\": 2,\"capitalizationEndDate\": 4900,\"cycleAnchorDateOfInterestPayment\": 14,\"cycleAnchorDateOfRateReset\": 101,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 4899,\"nominalInterestRate\": 1,\"feeAccrued\": 99,\"accruedInterest\": 159,\"rateMultiplier\": 91,\"rateSpread\": 1461002,\"feeRate\": 49,\"nextResetRate\": 129,\"penaltyRate\": 1338,\"premiumDiscountAtIED\": 129,\"priceAtPurchaseDate\": 26,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 48,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 141,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 949,\"periodCap\": 4799,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"133,33,41,20,180,23,174,11,203,26,246,118,30,81,250,5,247,107,174,128,234,180,150,82,183,10,215,167,235,74,15,71\"),stringToBytes32(\"158,36,97,154,249,103,16,142,212,153,177,19,53,17,112,135,210,239,75,199,49,236,252,184,12,12,49,129,0,115,164,203\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,255,141,79,89,161,2,4900,14,101,32,96,4899,1,99,159,91,1461002,49,129,1338,129,26,Definitions.IPS(90,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(68570,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(141,Definitions.P.W,Definitions.S.SHORT,false),4000,949,4799,111)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [76,102,164,248,149,135,66,70,107,165,39,94,125,14,15,216,170,246,123,215,247,168,20,240,124,47,78,106,231,25,64,158],\"legalEntityIdCounterparty\": [213,135,234,94,187,185,11,194,239,230,213,67,226,94,135,171,151,26,82,176,73,174,206,52,214,241,156,164,7,176,177,43],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 120,\"statusDate\": 68568,\"initialExchangeDate\": 91,\"maturityDate\": 0,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 4001,\"cycleAnchorDateOfFee\": 101,\"notionalPrincipal\": 3,\"nominalInterestRate\": 0,\"feeAccrued\": 48,\"accruedInterest\": 2446,\"rateMultiplier\": 4901,\"rateSpread\": 140,\"feeRate\": 68568,\"nextResetRate\": 949,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 90,\"priceAtPurchaseDate\": 10001,\"cycleOfInterestPayment\": {\"i\": 4901,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 49,\"lifeFloor\": 121,\"periodCap\": 8,\"periodFloor\": 90}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"76,102,164,248,149,135,66,70,107,165,39,94,125,14,15,216,170,246,123,215,247,168,20,240,124,47,78,106,231,25,64,158\"),stringToBytes32(\"213,135,234,94,187,185,11,194,239,230,213,67,226,94,135,171,151,26,82,176,73,174,206,52,214,241,156,164,7,176,177,43\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,120,68568,91,0,0,0,0,68570,19,4001,101,3,0,48,2446,4901,140,68568,949,130,90,10001,Definitions.IPS(4901,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,true),49,121,8,90)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [73,154,11,60,62,184,162,248,144,56,218,222,15,37,211,247,136,69,94,114,52,198,92,150,179,186,177,241,184,139,232,2],\"legalEntityIdCounterparty\": [42,74,8,226,145,80,126,71,169,238,252,98,90,54,207,16,161,5,59,131,128,170,149,12,190,217,41,242,147,68,182,83],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 13,\"statusDate\": 9,\"initialExchangeDate\": 255,\"maturityDate\": 4,\"terminationDate\": 1461000,\"purchaseDate\": 2014223716,\"capitalizationEndDate\": 4799,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 2440589,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 20,\"notionalPrincipal\": 86400,\"nominalInterestRate\": 11,\"feeAccrued\": 1,\"accruedInterest\": 68569,\"rateMultiplier\": 364,\"rateSpread\": 68569,\"feeRate\": 161,\"nextResetRate\": 161,\"penaltyRate\": 399,\"premiumDiscountAtIED\": 7,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 401,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 25,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 86400,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 89,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892062,\"lifeFloor\": 49,\"periodCap\": 49,\"periodFloor\": 2446}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"73,154,11,60,62,184,162,248,144,56,218,222,15,37,211,247,136,69,94,114,52,198,92,150,179,186,177,241,184,139,232,2\"),stringToBytes32(\"42,74,8,226,145,80,126,71,169,238,252,98,90,54,207,16,161,5,59,131,128,170,149,12,190,217,41,242,147,68,182,83\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,13,9,255,4,1461000,2014223716,4799,951,2440589,70,20,86400,11,1,68569,364,68569,161,161,399,7,1,Definitions.IPS(401,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(25,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(86400,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(89,Definitions.P.Q,Definitions.S.LONG,false),1532892062,49,49,2446)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [159,73,145,49,191,125,17,82,254,168,119,83,218,115,251,195,131,28,233,176,24,103,250,219,247,116,45,197,49,150,51,49],\"legalEntityIdCounterparty\": [219,42,253,13,94,66,70,85,205,53,167,114,244,170,89,189,12,78,183,147,158,149,227,224,174,186,153,204,80,146,169,107],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4899,\"statusDate\": 11,\"initialExchangeDate\": 10001,\"maturityDate\": 130,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 901,\"cycleAnchorDateOfScalingIndex\": 16,\"cycleAnchorDateOfFee\": 139,\"notionalPrincipal\": 24,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892063,\"accruedInterest\": 15,\"rateMultiplier\": 366,\"rateSpread\": 1,\"feeRate\": 131,\"nextResetRate\": 39,\"penaltyRate\": 10001,\"premiumDiscountAtIED\": 26,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461001,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 366,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 64,\"lifeFloor\": 68570,\"periodCap\": 399,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"159,73,145,49,191,125,17,82,254,168,119,83,218,115,251,195,131,28,233,176,24,103,250,219,247,116,45,197,49,150,51,49\"),stringToBytes32(\"219,42,253,13,94,66,70,85,205,53,167,114,244,170,89,189,12,78,183,147,158,149,227,224,174,186,153,204,80,146,169,107\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4899,11,10001,130,0,0,0,16,901,16,139,24,0,1532892063,15,366,1,131,39,10001,26,4799,Definitions.IPS(1,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461001,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(366,Definitions.P.Y,Definitions.S.LONG,false),64,68570,399,10001)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.339ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T03:21:26.363ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}