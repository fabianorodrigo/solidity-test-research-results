,{
  "2020-11-13T04:59:06.754ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "139",
                "sol": "139"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.755ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.756ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.756ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.757ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.757ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.758ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month<=0",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.761ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.763ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.763ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.764ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.765ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.765ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.767ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.771ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.771ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.771ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.772ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.772ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.773ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.774ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.774ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.774ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.775ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.775ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.776ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.776ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.776ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.777ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.777ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.778ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.778ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.778ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.779ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4802,
                "sol": 4802
              },
              {
                "js": "4801",
                "sol": "4801"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.779ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10000,
                "sol": 10000
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.781ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 369,
                "sol": 369
              },
              {
                "js": "368",
                "sol": "368"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.781ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223716,
                "sol": 2014223716
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.782ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.783ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4902,
                "sol": 4902
              },
              {
                "js": "4901",
                "sol": "4901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.785ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.786ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "401",
                "sol": "401"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.789ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.793ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": 255,
                "sol": 255
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "120",
                "sol": "120"
              },
              {
                "js": 119,
                "sol": 119
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": 86399,
                "sol": 86399
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": 68,
                "sol": 68
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "86399",
                "sol": "86399"
              },
              {
                "js": 86398,
                "sol": 86398
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T04:59:06.799ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.799ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.800ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.800ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.801ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{\"i\": 366,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(366,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{\"i\": 1337,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1337,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 131,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{\"i\": 1,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.805ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.806ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.807ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.810ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.813ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.817ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.818ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.821ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 51,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(51,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 367,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(367,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 110,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(110,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 25,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(25,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 59,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(59,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(39,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 367,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.827ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{\"i\": 68570,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(68570,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{\"i\": 79,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(79,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{\"i\": 32076,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32076,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{\"i\": 365,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(365,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{\"i\": 131,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{\"i\": 146096,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146096,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{\"i\": 146098,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146098,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{\"i\": 6,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(6,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{\"i\": 359,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(359,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.836ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2440587,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2440587,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 64,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(64,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 32074,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32074,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(366,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 4799,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4799,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 59,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(59,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 50,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.838ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 50,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 159,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 99,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 6,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 6,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 86399,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 28,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 13,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 359,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 257,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 151,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 16,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 12,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 1338,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 10},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 365,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 4799,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 111,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 1,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 898,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 11},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 23,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 5},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 96,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 121,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 898,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 130,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 10},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 90,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 59,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 9999,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 4901,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 1338,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 21,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 111,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 359,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 111,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 48,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 4901,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 14},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 64,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 131,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 12,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 60,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 68568,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 1969,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 151,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 14},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 21,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 131,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 19},{\"eventTime\": 898,\"eventTimeWithEpochOffset\": 48,\"scheduleTime\": 364,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 1532892063,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 69,\"eventType\": 6,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 20,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 0,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 1},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 41,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 17},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 160,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 4901,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 17},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 10,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 951,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 31,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 254,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 10},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 11,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 51,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 9},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 4001,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 898,\"scheduleTime\": 4001,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 20},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 14,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 8,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 15},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 1462,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 17}]",
              "sol": "[Definitions.ProtoEvent(4,101,50,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(63,69,159,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(254,2446,99,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(11,80,6,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(4800,61,6,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(32075,2014223714,86399,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(23,109,28,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(48,366,13,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(146097,32076,359,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(4799,27,257,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(96,129,151,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(254,68570,16,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(110,399,12,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(90,109,1338,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.TD),Definitions.ProtoEvent(11,79,365,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(40,4799,4799,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(149,4900,111,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(50,59,1,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(86399,121,898,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCI),Definitions.ProtoEvent(4,4901,23,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PR),Definitions.ProtoEvent(69,2446,96,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(91,2447,1,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(16,23,121,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(101,3999,898,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(1532892064,121,130,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.TD),Definitions.ProtoEvent(4801,4900,90,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(4901,11,59,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(256,101,9999,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(257,15,4901,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(4001,69,1338,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(109,900,21,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(140,1336,111,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(69,1970,359,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(5,149,111,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(97,359,48,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(121,32075,4901,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SC),Definitions.ProtoEvent(48,2440589,64,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(1532892062,17,131,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(81,366,12,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(41,951,60,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(25,4801,68568,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(1336,68570,1969,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(15,900,151,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SC),Definitions.ProtoEvent(81,109,21,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(899,63,131,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.STD),Definitions.ProtoEvent(898,48,364,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(119,4,1532892063,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(60,1461,69,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(13,4001,20,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(68568,65,0,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MD),Definitions.ProtoEvent(97,4901,41,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MR),Definitions.ProtoEvent(949,1,160,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(1461,39,4901,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MR),Definitions.ProtoEvent(111,129,10,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(3999,400,951,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(900,8,31,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(121,366,254,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.TD),Definitions.ProtoEvent(2446,109,11,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(23,1970,51,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PRD),Definitions.ProtoEvent(99,159,4001,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(99,898,4001,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.Child),Definitions.ProtoEvent(1970,68570,14,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(139,120,8,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.CD),Definitions.ProtoEvent(4900,65,1462,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR)]"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.850ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 2447,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 21,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 10,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 950,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 111,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 129,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 160,\"eventType\": 17,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 1461001,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 90,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 12},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 254,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 100,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 12},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 1462,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 68568,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 28,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 7,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 1462,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 146096,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 139,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 4799,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 2448,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 365,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 20},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 900,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 10,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 360,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 11},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 129,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 141,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 2},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1461000,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 90,\"eventType\": 0,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 1969,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 129,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 0},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 4899,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 1461000,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 366,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 48,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 0},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 359,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 146098,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 90,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 130,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 6},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 60,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 0},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4900,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 15,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 1461000,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 4899,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 4000,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 1460,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 4000,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 4801,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 30,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 13},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 96,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 11,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 1461000,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 120,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 4801,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 8},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 364,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 4801,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 100,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 151,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 19},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 13,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 5,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 4901,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 0},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 898,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 900,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 86399,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 1}]",
              "sol": "[Definitions.ProtoEvent(65,20,2447,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(359,97,21,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(2014223716,1,10,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(21,109,950,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(1461001,150,111,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(90,100,129,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(2440588,399,160,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(23,3,1461001,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(1462,96,90,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RR),Definitions.ProtoEvent(1532892062,4,254,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(949,1461002,100,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RR),Definitions.ProtoEvent(255,15,1462,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(19,4899,68568,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(4799,1970,28,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(49,66,7,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(89,4800,1462,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(49,1532892063,146096,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(8,365,139,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(1461001,130,4799,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(146096,32076,2448,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(39,149,365,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440587,2446,1,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.Child),Definitions.ProtoEvent(2446,26,900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(48,12,10,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(89,160,360,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCI),Definitions.ProtoEvent(400,4801,129,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(40,90,141,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.AD),Definitions.ProtoEvent(361,90,1461000,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(4900,2014223714,90,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(49,1462,1969,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(100,10,129,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SD),Definitions.ProtoEvent(31,361,4899,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(150,2014223714,1461000,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(899,69,366,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(367,21,48,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.SD),Definitions.ProtoEvent(101,1,359,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(10,2440588,146098,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(399,1971,90,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(899,366,130,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PP),Definitions.ProtoEvent(367,12,60,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.SD),Definitions.ProtoEvent(359,21,4900,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461000,1532892062,15,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(365,1460,1461000,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(900,360,4899,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(25,1461000,4000,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(40,32075,1460,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(26,32076,4000,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(95,80,4801,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(1971,2447,30,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RRY),Definitions.ProtoEvent(1461001,9999,96,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(65,146098,11,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(140,23,1461000,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(86400,68568,120,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(50,4,4801,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.FP),Definitions.ProtoEvent(359,2446,364,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(141,21,4801,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(64,49,100,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(950,4,151,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.STD),Definitions.ProtoEvent(359,1338,13,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(1461000,12,5,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(899,70,4901,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SD),Definitions.ProtoEvent(19,1532892062,898,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(9999,9999,900,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(149,24,86399,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD)]"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.867ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.869ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [69,177,98,118,210,225,43,243,30,158,57,15,251,202,23,251,136,162,45,240,140,128,104,110,170,212,26,101,35,74,151,168],\"legalEntityIdCounterparty\": [86,2,115,237,60,251,93,29,221,33,102,57,10,205,253,55,6,229,126,218,181,11,120,239,96,46,71,235,27,193,185,193],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 79,\"statusDate\": 160,\"initialExchangeDate\": 1971,\"maturityDate\": 2448,\"terminationDate\": 111,\"purchaseDate\": 146098,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 4801,\"notionalPrincipal\": 27,\"nominalInterestRate\": 15,\"feeAccrued\": 99,\"accruedInterest\": 146098,\"rateMultiplier\": 40,\"rateSpread\": 2,\"feeRate\": 2446,\"nextResetRate\": 86400,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 1532892064,\"priceAtPurchaseDate\": 10000,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 367,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 5,\"lifeFloor\": 1971,\"periodCap\": 4801,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"69,177,98,118,210,225,43,243,30,158,57,15,251,202,23,251,136,162,45,240,140,128,104,110,170,212,26,101,35,74,151,168\"),stringToBytes32(\"86,2,115,237,60,251,93,29,221,33,102,57,10,205,253,55,6,229,126,218,181,11,120,239,96,46,71,235,27,193,185,193\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,79,160,1971,2448,111,146098,27,1,951,68570,4801,27,15,99,146098,40,2,2446,86400,19,1532892064,10000,Definitions.IPS(367,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(61,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.M,Definitions.S.LONG,true),5,1971,4801,95)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.872ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [2,34,135,110,108,221,62,17,143,188,236,214,122,225,122,86,47,107,131,245,211,138,76,17,29,132,166,17,126,170,95,193],\"legalEntityIdCounterparty\": [231,136,225,145,201,197,32,155,152,51,54,168,253,114,139,252,56,162,15,189,224,143,188,12,181,60,89,190,203,107,15,126],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 17,\"statusDate\": 365,\"initialExchangeDate\": 131,\"maturityDate\": 97,\"terminationDate\": 32074,\"purchaseDate\": 10000,\"capitalizationEndDate\": 1970,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 4801,\"cycleAnchorDateOfScalingIndex\": 2014223715,\"cycleAnchorDateOfFee\": 9999,\"notionalPrincipal\": 139,\"nominalInterestRate\": 13,\"feeAccrued\": 3999,\"accruedInterest\": 139,\"rateMultiplier\": 13,\"rateSpread\": 91,\"feeRate\": 17,\"nextResetRate\": 27,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 4901,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 1971,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 110,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 400,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 10000,\"lifeFloor\": 3999,\"periodCap\": 4900,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"2,34,135,110,108,221,62,17,143,188,236,214,122,225,122,86,47,107,131,245,211,138,76,17,29,132,166,17,126,170,95,193\"),stringToBytes32(\"231,136,225,145,201,197,32,155,152,51,54,168,253,114,139,252,56,162,15,189,224,143,188,12,181,60,89,190,203,107,15,126\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,17,365,131,97,32074,10000,1970,121,4801,2014223715,9999,139,13,3999,139,13,91,17,27,2014223716,4901,32075,Definitions.IPS(1971,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(110,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(400,Definitions.P.M,Definitions.S.SHORT,false),10000,3999,4900,24)"
            },
            {
              "js": "{\"lastEventTime\": 141,\"contractStatus\": 1,\"timeFromLastEvent\": 41,\"nominalValue\": 899,\"nominalAccrued\": 0,\"feeAccrued\": 1461000,\"nominalRate\": 4901,\"interestScalingMultiplier\": 2447,\"nominalScalingMultiplier\": 151,\"contractRoleSign\": 2}",
              "sol": "Definitions.ContractState(141,Definitions.ContractStatus.DL,41,899,0,1461000,4901,2447,151,Definitions.ContractRole.LG)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.874ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [187,224,141,60,33,136,155,31,70,174,162,207,151,11,136,175,72,244,152,143,68,173,51,29,39,192,33,54,20,98,127,134],\"legalEntityIdCounterparty\": [5,238,133,187,189,118,53,186,186,18,188,3,226,165,221,45,161,194,248,180,20,137,83,216,251,248,25,109,34,224,122,148],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4901,\"statusDate\": 68569,\"initialExchangeDate\": 3,\"maturityDate\": 1460,\"terminationDate\": 2014223715,\"purchaseDate\": 146097,\"capitalizationEndDate\": 23,\"cycleAnchorDateOfInterestPayment\": 63,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 257,\"cycleAnchorDateOfFee\": 21,\"notionalPrincipal\": 21,\"nominalInterestRate\": 49,\"feeAccrued\": 4800,\"accruedInterest\": 20,\"rateMultiplier\": 366,\"rateSpread\": 1338,\"feeRate\": 151,\"nextResetRate\": 2014223714,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 2,\"priceAtPurchaseDate\": 66,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 71,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1462,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223716,\"lifeFloor\": 40,\"periodCap\": 4799,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"187,224,141,60,33,136,155,31,70,174,162,207,151,11,136,175,72,244,152,143,68,173,51,29,39,192,33,54,20,98,127,134\"),stringToBytes32(\"5,238,133,187,189,118,53,186,186,18,188,3,226,165,221,45,161,194,248,180,20,137,83,216,251,248,25,109,34,224,122,148\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4901,68569,3,1460,2014223715,146097,23,63,27,257,21,21,49,4800,20,366,1338,151,2014223714,49,2,66,Definitions.IPS(19,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(4901,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(71,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1462,Definitions.P.Y,Definitions.S.SHORT,true),2014223716,40,4799,89)"
            },
            {
              "js": "{\"lastEventTime\": 100,\"contractStatus\": 1,\"timeFromLastEvent\": 48,\"nominalValue\": 13,\"nominalAccrued\": 1532892063,\"feeAccrued\": 50,\"nominalRate\": 1338,\"interestScalingMultiplier\": 3999,\"nominalScalingMultiplier\": 401,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(100,Definitions.ContractStatus.DL,48,13,1532892063,50,1338,3999,401,Definitions.ContractRole.RPL)"
            },
            {
              "js": "{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 110,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 2}",
              "sol": "Definitions.ProtoEvent(71,68568,110,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD)"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.885ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [55,190,79,243,220,129,37,255,226,230,154,180,12,37,192,227,30,233,172,178,178,159,204,14,149,232,191,185,71,128,13,203],\"legalEntityIdCounterparty\": [23,83,98,249,245,41,143,112,34,117,95,207,33,27,239,34,156,239,182,202,81,39,74,114,2,195,189,17,50,156,173,169],\"dayCountConvention\": 0,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 100,\"statusDate\": 400,\"initialExchangeDate\": 91,\"maturityDate\": 1532892064,\"terminationDate\": 146097,\"purchaseDate\": 4000,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 24,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 1461001,\"notionalPrincipal\": 6,\"nominalInterestRate\": 901,\"feeAccrued\": 360,\"accruedInterest\": 898,\"rateMultiplier\": 41,\"rateSpread\": 10000,\"feeRate\": 30,\"nextResetRate\": 20,\"penaltyRate\": 86400,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 18,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 131,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 9,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 149,\"lifeFloor\": 9999,\"periodCap\": 96,\"periodFloor\": 254}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"55,190,79,243,220,129,37,255,226,230,154,180,12,37,192,227,30,233,172,178,178,159,204,14,149,232,191,185,71,128,13,203\"),stringToBytes32(\"23,83,98,249,245,41,143,112,34,117,95,207,33,27,239,34,156,239,182,202,81,39,74,114,2,195,189,17,50,156,173,169\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,100,400,91,1532892064,146097,4000,950,10001,24,59,1461001,6,901,360,898,41,10000,30,20,86400,1460,120,Definitions.IPS(18,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(131,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(48,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(9,Definitions.P.W,Definitions.S.LONG,true),149,9999,96,254)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [182,6,204,215,235,91,189,53,144,82,153,242,82,1,120,173,146,24,10,94,12,70,75,114,204,198,142,97,187,114,208,104],\"legalEntityIdCounterparty\": [245,65,193,63,85,182,224,225,51,182,158,163,192,173,48,95,114,141,121,127,248,10,178,60,212,1,20,138,155,151,29,217],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1532892062,\"statusDate\": 96,\"initialExchangeDate\": 21,\"maturityDate\": 4901,\"terminationDate\": 27,\"purchaseDate\": 64,\"capitalizationEndDate\": 901,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 90,\"nominalInterestRate\": 4799,\"feeAccrued\": 10001,\"accruedInterest\": 2,\"rateMultiplier\": 16,\"rateSpread\": 950,\"feeRate\": 1337,\"nextResetRate\": 89,\"penaltyRate\": 1337,\"premiumDiscountAtIED\": 24,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 26,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 13,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461000,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 32074,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 151,\"lifeFloor\": 27,\"periodCap\": 4899,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"182,6,204,215,235,91,189,53,144,82,153,242,82,1,120,173,146,24,10,94,12,70,75,114,204,198,142,97,187,114,208,104\"),stringToBytes32(\"245,65,193,63,85,182,224,225,51,182,158,163,192,173,48,95,114,141,121,127,248,10,178,60,212,1,20,138,155,151,29,217\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1532892062,96,21,4901,27,64,901,1462,1461001,364,32074,90,4799,10001,2,16,950,1337,89,1337,24,21,Definitions.IPS(26,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(13,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(1461000,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.H,Definitions.S.LONG,true),151,27,4899,89)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [15,12,78,201,14,186,35,115,5,16,180,101,76,163,191,130,32,57,50,90,161,228,244,65,175,155,156,87,98,48,207,171],\"legalEntityIdCounterparty\": [118,79,60,115,130,80,162,163,182,105,191,243,134,240,7,146,7,114,18,69,52,68,8,199,77,194,186,99,201,212,51,123],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 11,\"statusDate\": 64,\"initialExchangeDate\": 81,\"maturityDate\": 4900,\"terminationDate\": 1338,\"purchaseDate\": 31,\"capitalizationEndDate\": 1532892064,\"cycleAnchorDateOfInterestPayment\": 1337,\"cycleAnchorDateOfRateReset\": 2440588,\"cycleAnchorDateOfScalingIndex\": 10,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 86400,\"nominalInterestRate\": 1462,\"feeAccrued\": 50,\"accruedInterest\": 4901,\"rateMultiplier\": 1336,\"rateSpread\": 17,\"feeRate\": 898,\"nextResetRate\": 96,\"penaltyRate\": 26,\"premiumDiscountAtIED\": 4001,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 3,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 141,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 4799,\"lifeFloor\": 51,\"periodCap\": 24,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"15,12,78,201,14,186,35,115,5,16,180,101,76,163,191,130,32,57,50,90,161,228,244,65,175,155,156,87,98,48,207,171\"),stringToBytes32(\"118,79,60,115,130,80,162,163,182,105,191,243,134,240,7,146,7,114,18,69,52,68,8,199,77,194,186,99,201,212,51,123\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,11,64,81,4900,1338,31,1532892064,1337,2440588,10,96,86400,1462,50,4901,1336,17,898,96,26,4001,13,Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(3,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.H,Definitions.S.LONG,false),4799,51,24,1461002)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [178,101,113,171,75,154,99,28,31,2,35,20,154,115,56,225,17,20,141,189,82,39,73,157,75,213,26,181,11,254,3,48],\"legalEntityIdCounterparty\": [96,1,117,82,26,17,162,70,53,136,185,222,94,53,102,229,158,84,254,150,136,30,148,188,66,185,199,108,115,116,34,72],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 66,\"statusDate\": 361,\"initialExchangeDate\": 2014223716,\"maturityDate\": 99,\"terminationDate\": 91,\"purchaseDate\": 120,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 21,\"cycleAnchorDateOfRateReset\": 15,\"cycleAnchorDateOfScalingIndex\": 91,\"cycleAnchorDateOfFee\": 360,\"notionalPrincipal\": 1461001,\"nominalInterestRate\": 21,\"feeAccrued\": 66,\"accruedInterest\": 69,\"rateMultiplier\": 899,\"rateSpread\": 20,\"feeRate\": 365,\"nextResetRate\": 10000,\"penaltyRate\": 1532892064,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 16,\"cycleOfInterestPayment\": {\"i\": 899,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 19,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 99,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 19,\"lifeFloor\": 30,\"periodCap\": 10000,\"periodFloor\": 10000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"178,101,113,171,75,154,99,28,31,2,35,20,154,115,56,225,17,20,141,189,82,39,73,157,75,213,26,181,11,254,3,48\"),stringToBytes32(\"96,1,117,82,26,17,162,70,53,136,185,222,94,53,102,229,158,84,254,150,136,30,148,188,66,185,199,108,115,116,34,72\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,66,361,2014223716,99,91,120,4901,21,15,91,360,1461001,21,66,69,899,20,365,10000,1532892064,400,16,Definitions.IPS(899,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(50,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.D,Definitions.S.SHORT,false),19,30,10000,10000)"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [75,143,205,175,250,26,93,193,227,188,181,139,96,23,26,116,13,30,180,72,51,38,199,100,0,55,67,82,49,7,223,100],\"legalEntityIdCounterparty\": [189,202,249,119,90,62,31,143,148,18,18,45,24,183,109,241,62,143,183,59,124,108,230,34,227,119,11,220,108,132,44,71],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4901,\"statusDate\": 1,\"initialExchangeDate\": 2,\"maturityDate\": 68569,\"terminationDate\": 160,\"purchaseDate\": 0,\"capitalizationEndDate\": 365,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 1532892064,\"cycleAnchorDateOfScalingIndex\": 898,\"cycleAnchorDateOfFee\": 365,\"notionalPrincipal\": 900,\"nominalInterestRate\": 25,\"feeAccrued\": 146098,\"accruedInterest\": 2446,\"rateMultiplier\": 146098,\"rateSpread\": 130,\"feeRate\": 10000,\"nextResetRate\": 23,\"penaltyRate\": 4901,\"premiumDiscountAtIED\": 4801,\"priceAtPurchaseDate\": 401,\"cycleOfInterestPayment\": {\"i\": 28,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 6,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 65,\"lifeFloor\": 255,\"periodCap\": 12,\"periodFloor\": 151}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"75,143,205,175,250,26,93,193,227,188,181,139,96,23,26,116,13,30,180,72,51,38,199,100,0,55,67,82,49,7,223,100\"),stringToBytes32(\"189,202,249,119,90,62,31,143,148,18,18,45,24,183,109,241,62,143,183,59,124,108,230,34,227,119,11,220,108,132,44,71\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4901,1,2,68569,160,0,365,2014223716,1532892064,898,365,900,25,146098,2446,146098,130,10000,23,4901,4801,401,Definitions.IPS(28,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(13,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.H,Definitions.S.LONG,true),65,255,12,151)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [216,255,26,114,219,180,200,140,245,38,238,250,156,167,43,77,138,126,223,127,109,141,137,118,166,156,132,92,138,219,96,74],\"legalEntityIdCounterparty\": [68,197,66,194,245,200,129,69,77,55,107,5,135,81,180,19,91,98,154,234,138,83,149,79,63,242,229,36,111,145,204,28],\"dayCountConvention\": 5,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 89,\"statusDate\": 80,\"initialExchangeDate\": 1336,\"maturityDate\": 96,\"terminationDate\": 146097,\"purchaseDate\": 2448,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 111,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 109,\"nominalInterestRate\": 2447,\"feeAccrued\": 11,\"accruedInterest\": 16,\"rateMultiplier\": 400,\"rateSpread\": 10001,\"feeRate\": 4799,\"nextResetRate\": 8,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 10000,\"priceAtPurchaseDate\": 24,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 64,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 5,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 8,\"lifeFloor\": 255,\"periodCap\": 17,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"216,255,26,114,219,180,200,140,245,38,238,250,156,167,43,77,138,126,223,127,109,141,137,118,166,156,132,92,138,219,96,74\"),stringToBytes32(\"68,197,66,194,245,200,129,69,77,55,107,5,135,81,180,19,91,98,154,234,138,83,149,79,63,242,229,36,111,145,204,28\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,89,80,1336,96,146097,2448,950,4900,1461001,111,151,109,2447,11,16,400,10001,4799,8,96,10000,24,Definitions.IPS(10000,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1461,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(5,Definitions.P.M,Definitions.S.LONG,false),8,255,17,8)"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [62,32,182,164,86,97,19,253,36,241,216,149,35,50,217,210,218,38,110,125,122,70,205,200,197,17,175,124,248,34,189,214],\"legalEntityIdCounterparty\": [80,47,133,23,177,240,229,36,233,240,59,194,97,212,75,200,160,100,160,57,122,234,169,227,201,249,117,160,170,200,100,10],\"dayCountConvention\": 6,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 16,\"statusDate\": 2014223714,\"initialExchangeDate\": 21,\"maturityDate\": 1336,\"terminationDate\": 151,\"purchaseDate\": 14,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 41,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 361,\"nominalInterestRate\": 3999,\"feeAccrued\": 68569,\"accruedInterest\": 151,\"rateMultiplier\": 120,\"rateSpread\": 4801,\"feeRate\": 79,\"nextResetRate\": 86399,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 4799,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 80,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 14,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4901,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 401,\"lifeFloor\": 32,\"periodCap\": 19,\"periodFloor\": 4000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"62,32,182,164,86,97,19,253,36,241,216,149,35,50,217,210,218,38,110,125,122,70,205,200,197,17,175,124,248,34,189,214\"),stringToBytes32(\"80,47,133,23,177,240,229,36,233,240,59,194,97,212,75,200,160,100,160,57,122,234,169,227,201,249,117,160,170,200,100,10\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,16,2014223714,21,1336,151,14,60,1462,41,159,3999,361,3999,68569,151,120,4801,79,86399,1461,4799,900,Definitions.IPS(80,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(899,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(14,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(4901,Definitions.P.H,Definitions.S.LONG,false),401,32,19,4000)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [229,157,214,223,134,94,234,11,230,39,20,120,235,119,177,5,96,39,50,101,186,215,239,99,197,185,42,130,9,178,229,224],\"legalEntityIdCounterparty\": [46,59,40,97,236,177,105,106,170,19,251,72,99,186,210,9,45,190,227,174,19,252,49,255,212,171,250,48,80,96,90,166],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1532892063,\"statusDate\": 4800,\"initialExchangeDate\": 86401,\"maturityDate\": 17,\"terminationDate\": 120,\"purchaseDate\": 59,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 368,\"cycleAnchorDateOfRateReset\": 2446,\"cycleAnchorDateOfScalingIndex\": 32075,\"cycleAnchorDateOfFee\": 131,\"notionalPrincipal\": 109,\"nominalInterestRate\": 31,\"feeAccrued\": 160,\"accruedInterest\": 1461,\"rateMultiplier\": 3999,\"rateSpread\": 129,\"feeRate\": 120,\"nextResetRate\": 68569,\"penaltyRate\": 41,\"premiumDiscountAtIED\": 63,\"priceAtPurchaseDate\": 901,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 48,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 60,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 1,\"lifeFloor\": 901,\"periodCap\": 61,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"229,157,214,223,134,94,234,11,230,39,20,120,235,119,177,5,96,39,50,101,186,215,239,99,197,185,42,130,9,178,229,224\"),stringToBytes32(\"46,59,40,97,236,177,105,106,170,19,251,72,99,186,210,9,45,190,227,174,19,252,49,255,212,171,250,48,80,96,90,166\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1532892063,4800,86401,17,120,59,0,368,2446,32075,131,109,31,160,1461,3999,129,120,68569,41,63,901,Definitions.IPS(951,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(60,Definitions.P.D,Definitions.S.LONG,true),1,901,61,2448)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [187,203,155,75,53,17,240,43,64,5,156,54,192,49,80,135,203,200,177,188,178,3,133,229,99,194,39,89,85,228,138,154],\"legalEntityIdCounterparty\": [189,83,26,129,91,57,233,124,233,18,95,52,203,39,85,167,172,137,57,100,143,223,5,146,112,170,214,24,178,191,61,206],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 1461,\"statusDate\": 1461000,\"initialExchangeDate\": 2446,\"maturityDate\": 901,\"terminationDate\": 96,\"purchaseDate\": 4801,\"capitalizationEndDate\": 361,\"cycleAnchorDateOfInterestPayment\": 101,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 4799,\"notionalPrincipal\": 1971,\"nominalInterestRate\": 32074,\"feeAccrued\": 90,\"accruedInterest\": 10000,\"rateMultiplier\": 131,\"rateSpread\": 141,\"feeRate\": 949,\"nextResetRate\": 1461000,\"penaltyRate\": 900,\"premiumDiscountAtIED\": 32076,\"priceAtPurchaseDate\": 3999,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 146097,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 109,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 19,\"lifeFloor\": 1,\"periodCap\": 23,\"periodFloor\": 401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"187,203,155,75,53,17,240,43,64,5,156,54,192,49,80,135,203,200,177,188,178,3,133,229,99,194,39,89,85,228,138,154\"),stringToBytes32(\"189,83,26,129,91,57,233,124,233,18,95,52,203,39,85,167,172,137,57,100,143,223,5,146,112,170,214,24,178,191,61,206\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,1461,1461000,2446,901,96,4801,361,101,141,1,4799,1971,32074,90,10000,131,141,949,1461000,900,32076,3999,Definitions.IPS(10001,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(146097,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(367,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(109,Definitions.P.M,Definitions.S.SHORT,true),19,1,23,401)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [126,122,221,81,27,52,64,45,107,102,10,142,109,69,10,127,8,39,102,183,21,19,22,36,227,243,133,68,244,169,236,6],\"legalEntityIdCounterparty\": [34,80,85,174,43,84,238,33,39,218,252,126,13,97,71,137,154,20,76,146,218,83,164,29,79,32,33,186,252,142,230,32],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2014223715,\"statusDate\": 29,\"initialExchangeDate\": 3,\"maturityDate\": 5,\"terminationDate\": 951,\"purchaseDate\": 31,\"capitalizationEndDate\": 255,\"cycleAnchorDateOfInterestPayment\": 31,\"cycleAnchorDateOfRateReset\": 100,\"cycleAnchorDateOfScalingIndex\": 10001,\"cycleAnchorDateOfFee\": 255,\"notionalPrincipal\": 131,\"nominalInterestRate\": 95,\"feeAccrued\": 121,\"accruedInterest\": 1532892063,\"rateMultiplier\": 111,\"rateSpread\": 1971,\"feeRate\": 96,\"nextResetRate\": -1,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68570,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4900,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 150,\"lifeFloor\": 1337,\"periodCap\": 66,\"periodFloor\": 141}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"126,122,221,81,27,52,64,45,107,102,10,142,109,69,10,127,8,39,102,183,21,19,22,36,227,243,133,68,244,169,236,6\"),stringToBytes32(\"34,80,85,174,43,84,238,33,39,218,252,126,13,97,71,137,154,20,76,146,218,83,164,29,79,32,33,186,252,142,230,32\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2014223715,29,3,5,951,31,255,31,100,10001,255,131,95,121,1532892063,111,1971,96,-1,19,31,4001,Definitions.IPS(131,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(68570,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(4900,Definitions.P.M,Definitions.S.SHORT,true),150,1337,66,141)"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [242,1,96,201,40,222,66,241,223,237,228,60,86,103,124,75,22,175,148,55,234,0,146,136,21,33,120,181,4,130,146,57],\"legalEntityIdCounterparty\": [158,164,218,177,80,101,58,88,139,158,227,65,115,93,64,183,109,42,135,89,151,37,207,134,225,212,27,95,23,91,206,191],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 60,\"statusDate\": 1461000,\"initialExchangeDate\": 131,\"maturityDate\": 21,\"terminationDate\": 1461,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 120,\"cycleAnchorDateOfScalingIndex\": 2014223716,\"cycleAnchorDateOfFee\": 146097,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892064,\"accruedInterest\": 4799,\"rateMultiplier\": 24,\"rateSpread\": 1532892062,\"feeRate\": 254,\"nextResetRate\": 90,\"penaltyRate\": 1532892062,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 20,\"cycleOfInterestPayment\": {\"i\": 150,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 150,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 160,\"lifeFloor\": 4001,\"periodCap\": 21,\"periodFloor\": 26}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"242,1,96,201,40,222,66,241,223,237,228,60,86,103,124,75,22,175,148,55,234,0,146,136,21,33,120,181,4,130,146,57\"),stringToBytes32(\"158,164,218,177,80,101,58,88,139,158,227,65,115,93,64,183,109,42,135,89,151,37,207,134,225,212,27,95,23,91,206,191\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,60,1461000,131,21,1461,0,0,6,120,2014223716,146097,2448,0,1532892064,4799,24,1532892062,254,90,1532892062,1970,20,Definitions.IPS(150,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4900,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(150,Definitions.P.M,Definitions.S.SHORT,false),160,4001,21,26)"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [221,56,64,109,21,38,48,110,255,138,104,160,244,109,162,10,175,76,248,207,163,161,41,59,95,238,141,171,201,93,66,230],\"legalEntityIdCounterparty\": [203,123,35,41,5,243,148,214,31,210,93,135,186,31,124,64,2,200,221,82,32,185,87,179,214,96,4,108,60,121,2,186],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4901,\"statusDate\": 2448,\"initialExchangeDate\": 24,\"maturityDate\": 13,\"terminationDate\": 111,\"purchaseDate\": 1461001,\"capitalizationEndDate\": 1462,\"cycleAnchorDateOfInterestPayment\": 10,\"cycleAnchorDateOfRateReset\": 1970,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 130,\"nominalInterestRate\": 256,\"feeAccrued\": 95,\"accruedInterest\": 365,\"rateMultiplier\": -1,\"rateSpread\": 2446,\"feeRate\": 1461001,\"nextResetRate\": 146097,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 367,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 99,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4799,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 64,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 24,\"lifeFloor\": 1532892062,\"periodCap\": 4799,\"periodFloor\": 901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"221,56,64,109,21,38,48,110,255,138,104,160,244,109,162,10,175,76,248,207,163,161,41,59,95,238,141,171,201,93,66,230\"),stringToBytes32(\"203,123,35,41,5,243,148,214,31,210,93,135,186,31,124,64,2,200,221,82,32,185,87,179,214,96,4,108,60,121,2,186\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4901,2448,24,13,111,1461001,1462,10,1970,66,68569,130,256,95,365,-1,2446,1461001,146097,951,80,367,Definitions.IPS(1970,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(64,Definitions.P.H,Definitions.S.LONG,false),24,1532892062,4799,901)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [86,174,89,132,62,10,233,53,188,2,215,7,69,73,133,10,89,103,249,85,115,109,188,110,102,162,9,221,198,138,199,79],\"legalEntityIdCounterparty\": [138,150,113,43,91,245,141,231,47,192,251,57,71,227,187,97,74,125,227,157,7,73,53,1,142,100,38,67,48,238,159,151],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 4799,\"statusDate\": 368,\"initialExchangeDate\": 27,\"maturityDate\": 159,\"terminationDate\": 61,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 95,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 364,\"cycleAnchorDateOfFee\": 24,\"notionalPrincipal\": 1970,\"nominalInterestRate\": 0,\"feeAccrued\": 23,\"accruedInterest\": 366,\"rateMultiplier\": 130,\"rateSpread\": 19,\"feeRate\": 1462,\"nextResetRate\": 8,\"penaltyRate\": 86400,\"premiumDiscountAtIED\": 51,\"priceAtPurchaseDate\": 32075,\"cycleOfInterestPayment\": {\"i\": 365,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 26,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 951,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 255,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 1971,\"lifeFloor\": 1461,\"periodCap\": 20,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"86,174,89,132,62,10,233,53,188,2,215,7,69,73,133,10,89,103,249,85,115,109,188,110,102,162,9,221,198,138,199,79\"),stringToBytes32(\"138,150,113,43,91,245,141,231,47,192,251,57,71,227,187,97,74,125,227,157,7,73,53,1,142,100,38,67,48,238,159,151\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,4799,368,27,159,61,0,0,95,0,364,24,1970,0,23,366,130,19,1462,8,86400,51,32075,Definitions.IPS(365,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(26,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(951,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.Y,Definitions.S.SHORT,false),1971,1461,20,400)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [73,115,181,87,198,24,19,138,239,61,106,57,123,245,246,244,10,121,226,67,245,250,107,155,34,147,28,14,110,195,195,110],\"legalEntityIdCounterparty\": [182,190,203,137,198,109,102,150,178,235,101,50,97,119,174,73,102,231,101,212,37,253,194,251,254,73,83,73,93,98,244,186],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 24,\"statusDate\": 79,\"initialExchangeDate\": 90,\"maturityDate\": 24,\"terminationDate\": 32,\"purchaseDate\": 9999,\"capitalizationEndDate\": 2014223714,\"cycleAnchorDateOfInterestPayment\": 367,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 9999,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 79,\"nominalInterestRate\": 949,\"feeAccrued\": 900,\"accruedInterest\": 1,\"rateMultiplier\": 64,\"rateSpread\": 4000,\"feeRate\": 2,\"nextResetRate\": 30,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 367,\"priceAtPurchaseDate\": 1462,\"cycleOfInterestPayment\": {\"i\": 2014223714,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2440588,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 111,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 151,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 20,\"lifeFloor\": 70,\"periodCap\": 48,\"periodFloor\": 71}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"73,115,181,87,198,24,19,138,239,61,106,57,123,245,246,244,10,121,226,67,245,250,107,155,34,147,28,14,110,195,195,110\"),stringToBytes32(\"182,190,203,137,198,109,102,150,178,235,101,50,97,119,174,73,102,231,101,212,37,253,194,251,254,73,83,73,93,98,244,186\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,24,79,90,24,32,9999,2014223714,367,5,9999,86399,79,949,900,1,64,4000,2,30,4900,367,1462,Definitions.IPS(2014223714,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.H,Definitions.S.LONG,false),20,70,48,71)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [33,33,95,206,231,10,212,168,44,16,73,192,187,50,42,106,27,99,126,85,87,47,123,210,219,7,237,93,196,192,186,197],\"legalEntityIdCounterparty\": [200,87,245,120,205,202,18,227,164,123,245,192,209,229,10,215,247,35,103,203,238,52,21,208,2,148,247,107,157,103,245,144],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 5,\"statusDate\": 1336,\"initialExchangeDate\": 91,\"maturityDate\": 70,\"terminationDate\": 366,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 80,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 365,\"nominalInterestRate\": 0,\"feeAccrued\": 80,\"accruedInterest\": 71,\"rateMultiplier\": 899,\"rateSpread\": 1969,\"feeRate\": 3999,\"nextResetRate\": 39,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 27,\"priceAtPurchaseDate\": 60,\"cycleOfInterestPayment\": {\"i\": 15,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 15,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10001,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 8,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 401,\"lifeFloor\": 4901,\"periodCap\": 21,\"periodFloor\": 1532892062}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"33,33,95,206,231,10,212,168,44,16,73,192,187,50,42,106,27,99,126,85,87,47,123,210,219,7,237,93,196,192,186,197\"),stringToBytes32(\"200,87,245,120,205,202,18,227,164,123,245,192,209,229,10,215,247,35,103,203,238,52,21,208,2,148,247,107,157,103,245,144\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,5,1336,91,70,366,0,0,80,111,96,0,365,0,80,71,899,1969,3999,39,80,27,60,Definitions.IPS(15,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(15,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(10001,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(8,Definitions.P.D,Definitions.S.LONG,false),401,4901,21,1532892062)"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [58,54,122,46,210,220,243,113,67,154,131,167,119,9,2,141,60,19,250,135,202,81,255,1,49,118,14,157,95,99,217,137],\"legalEntityIdCounterparty\": [182,44,151,82,149,10,235,205,153,7,4,238,209,18,111,214,35,162,27,66,11,119,224,11,122,24,217,208,226,154,168,168],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1532892064,\"statusDate\": 16,\"initialExchangeDate\": 401,\"maturityDate\": 51,\"terminationDate\": 91,\"purchaseDate\": 6,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 2014223716,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 70,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 29,\"nominalInterestRate\": 81,\"feeAccrued\": 901,\"accruedInterest\": 2,\"rateMultiplier\": 257,\"rateSpread\": 24,\"feeRate\": 10001,\"nextResetRate\": 10000,\"penaltyRate\": 28,\"premiumDiscountAtIED\": 151,\"priceAtPurchaseDate\": 2014223715,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 900,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 12,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 4901,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1336,\"lifeFloor\": 139,\"periodCap\": -1,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"58,54,122,46,210,220,243,113,67,154,131,167,119,9,2,141,60,19,250,135,202,81,255,1,49,118,14,157,95,99,217,137\"),stringToBytes32(\"182,44,151,82,149,10,235,205,153,7,4,238,209,18,111,214,35,162,27,66,11,119,224,11,122,24,217,208,226,154,168,168\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1532892064,16,401,51,91,6,2014223715,2014223716,91,70,1462,29,81,901,2,257,24,10001,10000,28,151,2014223715,Definitions.IPS(130,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(12,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4901,Definitions.P.H,Definitions.S.SHORT,false),1336,139,-1,400)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [136,48,219,168,152,149,133,245,22,185,64,143,186,98,108,30,134,112,5,192,209,233,155,64,236,14,82,245,136,166,127,250],\"legalEntityIdCounterparty\": [189,8,234,1,202,225,141,35,204,7,161,70,229,162,81,142,180,142,201,165,51,5,59,246,120,164,157,197,10,1,52,153],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 900,\"statusDate\": 1460,\"initialExchangeDate\": 5,\"maturityDate\": 256,\"terminationDate\": 59,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1462,\"cycleAnchorDateOfRateReset\": 30,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 79,\"notionalPrincipal\": 129,\"nominalInterestRate\": 0,\"feeAccrued\": 95,\"accruedInterest\": 99,\"rateMultiplier\": 901,\"rateSpread\": 2440587,\"feeRate\": 361,\"nextResetRate\": 3,\"penaltyRate\": 32076,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 99,\"cycleOfInterestPayment\": {\"i\": 66,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 23,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 151,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 3999,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 1969,\"lifeFloor\": 4,\"periodCap\": 4899,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"136,48,219,168,152,149,133,245,22,185,64,143,186,98,108,30,134,112,5,192,209,233,155,64,236,14,82,245,136,166,127,250\"),stringToBytes32(\"189,8,234,1,202,225,141,35,204,7,161,70,229,162,81,142,180,142,201,165,51,5,59,246,120,164,157,197,10,1,52,153\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,900,1460,5,256,59,0,0,1462,30,0,79,129,0,95,99,901,2440587,361,3,32076,1462,99,Definitions.IPS(66,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(23,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(151,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(3999,Definitions.P.M,Definitions.S.SHORT,true),1969,4,4899,2)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [4,206,52,212,224,213,43,169,212,18,38,242,191,164,72,116,255,185,55,129,69,80,146,219,197,68,198,32,53,205,111,130],\"legalEntityIdCounterparty\": [62,91,81,40,30,5,28,69,32,36,150,111,127,92,155,50,227,198,131,36,100,54,87,25,32,234,36,45,39,56,249,124],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 4001,\"statusDate\": 7,\"initialExchangeDate\": 151,\"maturityDate\": 27,\"terminationDate\": 31,\"purchaseDate\": 2,\"capitalizationEndDate\": 21,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 99,\"cycleAnchorDateOfScalingIndex\": 17,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 4900,\"feeAccrued\": 99,\"accruedInterest\": 4800,\"rateMultiplier\": 13,\"rateSpread\": 8,\"feeRate\": 146097,\"nextResetRate\": -1,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 64,\"priceAtPurchaseDate\": -1,\"cycleOfInterestPayment\": {\"i\": 7,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 160,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 20,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 25,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 41,\"lifeFloor\": 366,\"periodCap\": 100,\"periodFloor\": 10000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"4,206,52,212,224,213,43,169,212,18,38,242,191,164,72,116,255,185,55,129,69,80,146,219,197,68,198,32,53,205,111,130\"),stringToBytes32(\"62,91,81,40,30,5,28,69,32,36,150,111,127,92,155,50,227,198,131,36,100,54,87,25,32,234,36,45,39,56,249,124\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,4001,7,151,27,31,2,21,951,99,17,1461,2448,4900,99,4800,13,8,146097,-1,79,64,-1,Definitions.IPS(7,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(160,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(20,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(25,Definitions.P.D,Definitions.S.SHORT,true),41,366,100,10000)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [202,217,222,169,40,156,102,68,33,0,134,163,15,146,185,119,8,154,182,184,65,16,251,147,21,201,144,200,103,150,226,58],\"legalEntityIdCounterparty\": [224,115,29,37,59,236,216,111,45,18,200,48,150,40,155,75,126,143,163,129,168,196,67,251,218,24,24,220,204,184,42,47],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2014223714,\"statusDate\": 32076,\"initialExchangeDate\": 80,\"maturityDate\": 68569,\"terminationDate\": 61,\"purchaseDate\": 1461002,\"capitalizationEndDate\": 2440589,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 368,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 21,\"nominalInterestRate\": 7,\"feeAccrued\": 10001,\"accruedInterest\": 2014223715,\"rateMultiplier\": 131,\"rateSpread\": 40,\"feeRate\": 4799,\"nextResetRate\": 4000,\"penaltyRate\": 32075,\"premiumDiscountAtIED\": 27,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 41,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 17,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4899,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 25,\"lifeFloor\": 10,\"periodCap\": 20,\"periodFloor\": 61}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"202,217,222,169,40,156,102,68,33,0,134,163,15,146,185,119,8,154,182,184,65,16,251,147,21,201,144,200,103,150,226,58\"),stringToBytes32(\"224,115,29,37,59,236,216,111,45,18,200,48,150,40,155,75,126,143,163,129,168,196,67,251,218,24,24,220,204,184,42,47\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2014223714,32076,80,68569,61,1461002,2440589,97,48,368,2440588,21,7,10001,2014223715,131,40,4799,4000,32075,27,121,Definitions.IPS(41,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(17,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4899,Definitions.P.H,Definitions.S.SHORT,true),25,10,20,61)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [211,114,102,145,65,31,20,123,210,102,130,191,104,84,52,222,174,119,235,20,44,133,189,10,26,237,3,231,1,147,1,186],\"legalEntityIdCounterparty\": [64,149,115,37,180,73,147,160,66,209,121,199,16,251,93,249,102,166,194,135,119,159,118,189,190,88,19,132,65,211,106,127],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 17,\"statusDate\": 16,\"initialExchangeDate\": 1461001,\"maturityDate\": 0,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 28,\"cycleAnchorDateOfRateReset\": 899,\"cycleAnchorDateOfScalingIndex\": 901,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 64,\"nominalInterestRate\": 0,\"feeAccrued\": 1337,\"accruedInterest\": 4001,\"rateMultiplier\": 0,\"rateSpread\": 2014223714,\"feeRate\": 20,\"nextResetRate\": 950,\"penaltyRate\": 2447,\"premiumDiscountAtIED\": 1461,\"priceAtPurchaseDate\": 18,\"cycleOfInterestPayment\": {\"i\": 1462,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 120,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 86399,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 130,\"lifeFloor\": 255,\"periodCap\": 1336,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"211,114,102,145,65,31,20,123,210,102,130,191,104,84,52,222,174,119,235,20,44,133,189,10,26,237,3,231,1,147,1,186\"),stringToBytes32(\"64,149,115,37,180,73,147,160,66,209,121,199,16,251,93,249,102,166,194,135,119,159,118,189,190,88,19,132,65,211,106,127\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,17,16,1461001,0,0,0,0,28,899,901,2447,64,0,1337,4001,0,2014223714,20,950,2447,1461,18,Definitions.IPS(1462,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(120,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(86399,Definitions.P.M,Definitions.S.SHORT,true),130,255,1336,1461002)"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [69,96,243,50,11,52,95,110,14,236,204,13,16,161,59,183,29,239,68,205,144,63,212,131,92,118,74,124,178,105,251,180],\"legalEntityIdCounterparty\": [72,106,44,111,185,64,243,29,168,128,244,136,45,177,17,157,34,90,203,202,112,85,137,166,108,171,230,246,48,191,60,48],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 70,\"statusDate\": 365,\"initialExchangeDate\": 1461002,\"maturityDate\": 901,\"terminationDate\": 51,\"purchaseDate\": 4901,\"capitalizationEndDate\": 99,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 146097,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 40,\"nominalInterestRate\": 139,\"feeAccrued\": 31,\"accruedInterest\": 149,\"rateMultiplier\": 16,\"rateSpread\": 149,\"feeRate\": 1461002,\"nextResetRate\": 1,\"penaltyRate\": 146098,\"premiumDiscountAtIED\": 81,\"priceAtPurchaseDate\": 4,\"cycleOfInterestPayment\": {\"i\": 41,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 21,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 51,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 86399,\"lifeFloor\": 130,\"periodCap\": 399,\"periodFloor\": 5}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"69,96,243,50,11,52,95,110,14,236,204,13,16,161,59,183,29,239,68,205,144,63,212,131,92,118,74,124,178,105,251,180\"),stringToBytes32(\"72,106,44,111,185,64,243,29,168,128,244,136,45,177,17,157,34,90,203,202,112,85,137,166,108,171,230,246,48,191,60,48\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,70,365,1461002,901,51,4901,99,100,146097,949,1338,40,139,31,149,16,149,1461002,1,146098,81,4,Definitions.IPS(41,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(21,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(51,Definitions.P.M,Definitions.S.LONG,false),86399,130,399,5)"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [242,128,222,206,157,191,42,21,50,69,181,20,60,251,137,41,76,12,254,232,205,194,173,169,154,3,168,162,15,251,116,47],\"legalEntityIdCounterparty\": [172,186,79,12,151,164,3,124,56,242,100,230,47,1,50,86,168,122,55,168,129,128,134,75,35,96,68,23,243,101,106,16],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 8,\"statusDate\": 121,\"initialExchangeDate\": 130,\"maturityDate\": 150,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 4801,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 1337,\"notionalPrincipal\": 71,\"nominalInterestRate\": 0,\"feeAccrued\": 4,\"accruedInterest\": 159,\"rateMultiplier\": 66,\"rateSpread\": 81,\"feeRate\": 119,\"nextResetRate\": 10000,\"penaltyRate\": 146097,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 901,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 151,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 151,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 1532892062,\"lifeFloor\": 28,\"periodCap\": 364,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"242,128,222,206,157,191,42,21,50,69,181,20,60,251,137,41,76,12,254,232,205,194,173,169,154,3,168,162,15,251,116,47\"),stringToBytes32(\"172,186,79,12,151,164,3,124,56,242,100,230,47,1,50,86,168,122,55,168,129,128,134,75,35,96,68,23,243,101,106,16\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,8,121,130,150,0,0,0,257,4801,1970,1337,71,0,4,159,66,81,119,10000,146097,2446,901,Definitions.IPS(61,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(151,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.W,Definitions.S.SHORT,true),1532892062,28,364,2)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.929ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T04:59:06.951ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}