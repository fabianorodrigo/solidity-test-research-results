,{
  "2020-11-12T04:26:12.646ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "151",
                "sol": "151"
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.647ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.648ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.648ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.649ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.650ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.651ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month<=0",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.657ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.661ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.662ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.662ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.662ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.663ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.664ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.669ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.669ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.670ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.670ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.670ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.671ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.671ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.672ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.672ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.672ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.674ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.674ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.675ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.675ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.676ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.676ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.677ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.677ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.678ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.678ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.679ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4901,
                "sol": 4901
              },
              {
                "js": "4900",
                "sol": "4900"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.680ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.682ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 110,
                "sol": 110
              },
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.683ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 400,
                "sol": 400
              },
              {
                "js": "399",
                "sol": "399"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.685ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4801,
                "sol": 4801
              },
              {
                "js": "4800",
                "sol": "4800"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.689ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.692ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "32075",
                "sol": "32075"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.696ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.ContractRole.SEL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.703ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4899",
                "sol": "4899"
              },
              {
                "js": 4898,
                "sol": 4898
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": 13,
                "sol": 13
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "19",
                "sol": "19"
              },
              {
                "js": 18,
                "sol": 18
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T04:26:12.709ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.710ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.710ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.710ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.714ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{\"i\": 7,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(7,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{\"i\": 4899,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4899,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{\"i\": 140,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(140,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{\"i\": 13,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(13,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.718ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.718ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.720ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractStatus.DQ"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.726ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.731ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.735ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.737ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.741ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 146096,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146096,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 3,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(3,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 99,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(99,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 100,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(100,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 65,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(65,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 26,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(26,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 366,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.748ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{\"i\": 160,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(160,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{\"i\": 11,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(11,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{\"i\": 1460,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1460,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{\"i\": 129,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(129,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{\"i\": 86400,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86400,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{\"i\": 5,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(5,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{\"i\": 949,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(949,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{\"i\": 10,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(10,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{\"i\": 70,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(70,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.760ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 50,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(50,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 14,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(14,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 28,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(28,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 109,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(109,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 257,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(257,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 64,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(64,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 146098,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.764ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 151,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 950,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 23,\"eventType\": 15,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 160,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 25,\"eventType\": 11,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 368,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 100,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 1532892063,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 79,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 366,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 18,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 31,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 2447,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 28,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1462,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 64,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 2014223715,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 8},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 949,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 12,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 13},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 131,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 97,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 1460,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 110,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 19},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 23,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 5,\"stfType\": 10},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 32,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 364,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 86399,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 159,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 149,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 66,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 365,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 19,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 19,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 68570,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 90,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 3},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 86401,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 68569,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 2440589,\"scheduleTime\": 119,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 7,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 4800,\"eventType\": 1,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 60,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 15},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 2440587,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 6},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 365,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 1461000,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 3,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 8,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 51,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 9},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 32075,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 365,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 0},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 2446,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 399,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 4001,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 149,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 71,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 1461000,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 68569,\"eventType\": 11,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 32075,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 950,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 23,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 0},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 160,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 16},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 28,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 18},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 149,\"scheduleTime\": 79,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 109,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(950,68570,151,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(4900,90,950,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(50,9,23,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(32075,129,160,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(366,359,25,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(51,8,368,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(39,10001,100,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(365,9999,1532892063,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(139,70,79,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(901,161,366,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(2,109,18,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(139,7,31,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(2014223714,1,2447,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(31,901,28,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(11,129,1462,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(364,146098,64,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(111,1461001,2014223715,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.FP),Definitions.ProtoEvent(2448,360,949,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(26,4000,12,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.RRY),Definitions.ProtoEvent(1971,1460,131,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(68568,11,97,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(146096,9999,1460,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(49,256,110,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.STD),Definitions.ProtoEvent(86401,1337,23,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.TD),Definitions.ProtoEvent(64,401,32,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(129,10,364,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(4799,10001,86399,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(120,69,159,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(86399,70,149,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(109,13,66,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(30,32,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(69,364,365,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(2014223714,110,19,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(28,254,19,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(41,949,68570,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(4000,50,90,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IED),Definitions.ProtoEvent(95,11,86401,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(68568,86400,68569,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(86400,2440589,119,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(30,1532892064,7,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(1532892064,97,4800,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(361,68569,60,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.CD),Definitions.ProtoEvent(1338,30,2440587,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PP),Definitions.ProtoEvent(96,90,365,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(10001,100,1461000,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(32,130,3,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(364,361,8,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(27,4000,51,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PRD),Definitions.ProtoEvent(27,130,32075,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(254,900,365,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SD),Definitions.ProtoEvent(2446,63,2446,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(8,2014223716,399,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(20,10,4001,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(68569,81,149,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(256,901,71,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(4000,16,1461000,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(68568,1,68569,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(19,60,32075,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(23,161,950,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(4001,64,23,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SD),Definitions.ProtoEvent(130,140,160,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.DV),Definitions.ProtoEvent(361,9999,28,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCB),Definitions.ProtoEvent(100,149,79,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(119,4800,109,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY)]"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.778ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4899,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 86399,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 80,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 2,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 32074,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 951,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 8},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 150,\"eventType\": 1,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 3,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 26,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 19},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 81,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 7},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 4,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 12,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 99,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 68570,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 32076,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 151,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 159,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 4901,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 71,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 13,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 901,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 12},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 32074,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 8,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 130,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 10000,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 50,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 2014223716,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 7,\"eventType\": 17,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 0},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 4900,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 25,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 10},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 13,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 949,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 7},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 1,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 8},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 71,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 2440588,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 16},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 4,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 146098,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 151,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 13},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 29,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 15},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 361,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 48,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 150,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 10001,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 27,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 1462,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 18,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 66,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 81,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 63,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 13},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 80,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 14,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 1461,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 24,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 110,\"eventType\": 14,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 32076,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 367,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 366,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 8},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 161,\"eventType\": 7,\"currency\": accounts[7],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 5,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 2,\"stfType\": 6},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 4800,\"eventType\": 14,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 14},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 20,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 140,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1338,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(2014223716,4801,4899,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(5,64,86399,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(18,2,80,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(96,91,2,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(68569,1532892062,32074,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(48,17,951,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.FP),Definitions.ProtoEvent(28,110,150,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(360,4001,3,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(146096,32,26,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.STD),Definitions.ProtoEvent(68568,95,81,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PY),Definitions.ProtoEvent(20,86400,4,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(109,1532892062,12,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(100,3,99,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(17,32074,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(68568,901,68570,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(68568,1338,32076,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(899,4000,151,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(130,150,159,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(901,90,4901,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(48,1338,71,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(254,9999,13,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(399,1532892064,901,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.RR),Definitions.ProtoEvent(10001,361,32074,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(100,64,8,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1532892063,17,130,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(86400,8,10000,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(68570,161,50,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(69,97,2014223716,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(28,68570,7,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SD),Definitions.ProtoEvent(99,32074,4900,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(146097,99,25,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.TD),Definitions.ProtoEvent(100,19,13,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(19,361,949,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PY),Definitions.ProtoEvent(32076,2014223716,1,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.FP),Definitions.ProtoEvent(99,109,71,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1460,41,2440588,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.DV),Definitions.ProtoEvent(4,2014223714,4,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(901,4801,146098,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(1461000,368,151,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RRY),Definitions.ProtoEvent(41,70,29,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.CD),Definitions.ProtoEvent(64,32076,361,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(1970,32075,48,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(68568,951,150,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(60,10000,10001,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461000,359,27,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(1462,3,18,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(64,131,66,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(401,25,81,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(27,99,63,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RRY),Definitions.ProtoEvent(3999,7,80,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(1337,255,14,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(1460,2014223715,1461,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(99,899,24,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(30,32076,110,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(1338,160,32076,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IED),Definitions.ProtoEvent(4001,4001,367,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(1,9999,366,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.FP),Definitions.ProtoEvent(4801,1,161,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(79,1532892062,5,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PP),Definitions.ProtoEvent(2014223716,101,1,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2,111,4800,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SC),Definitions.ProtoEvent(1460,95,20,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(17,14,140,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(1970,900,1338,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RRY)]"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.796ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.798ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [82,131,158,2,37,228,196,4,23,232,113,156,190,115,230,98,173,74,192,98,186,43,95,126,152,231,64,23,85,55,27,239],\"legalEntityIdCounterparty\": [248,152,74,47,35,191,109,30,206,166,221,45,186,4,190,198,162,50,126,105,120,29,67,38,107,226,93,216,174,62,55,136],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 28,\"statusDate\": 4800,\"initialExchangeDate\": 65,\"maturityDate\": 16,\"terminationDate\": 9999,\"purchaseDate\": 1338,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 31,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 3999,\"feeAccrued\": 257,\"accruedInterest\": 66,\"rateMultiplier\": 7,\"rateSpread\": 10001,\"feeRate\": 10001,\"nextResetRate\": 21,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 97,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1337,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 6,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 401,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 365,\"lifeFloor\": 4000,\"periodCap\": 2446,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"82,131,158,2,37,228,196,4,23,232,113,156,190,115,230,98,173,74,192,98,186,43,95,126,152,231,64,23,85,55,27,239\"),stringToBytes32(\"248,152,74,47,35,191,109,30,206,166,221,45,186,4,190,198,162,50,126,105,120,29,67,38,107,226,93,216,174,62,55,136\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,28,4800,65,16,9999,1338,60,1460,254,31,32075,1969,3999,257,66,7,10001,10001,21,3,97,50,Definitions.IPS(361,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1337,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(6,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.W,Definitions.S.SHORT,true),365,4000,2446,0)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.806ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [211,120,162,180,181,148,20,33,160,222,3,210,145,47,150,31,77,255,101,44,110,95,200,155,45,69,0,240,35,151,202,242],\"legalEntityIdCounterparty\": [50,224,23,6,37,43,220,197,78,62,190,206,240,68,170,57,207,88,250,175,17,5,41,96,69,12,150,241,240,231,206,169],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 86401,\"statusDate\": 110,\"initialExchangeDate\": 41,\"maturityDate\": 120,\"terminationDate\": 26,\"purchaseDate\": 1461,\"capitalizationEndDate\": 80,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 40,\"notionalPrincipal\": 901,\"nominalInterestRate\": 99,\"feeAccrued\": 0,\"accruedInterest\": 18,\"rateMultiplier\": 101,\"rateSpread\": 8,\"feeRate\": 1970,\"nextResetRate\": 3,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 71,\"priceAtPurchaseDate\": 1337,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892064,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 1337,\"lifeFloor\": 4901,\"periodCap\": 2014223714,\"periodFloor\": 121}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"211,120,162,180,181,148,20,33,160,222,3,210,145,47,150,31,77,255,101,44,110,95,200,155,45,69,0,240,35,151,202,242\"),stringToBytes32(\"50,224,23,6,37,43,220,197,78,62,190,206,240,68,170,57,207,88,250,175,17,5,41,96,69,12,150,241,240,231,206,169\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,86401,110,41,120,26,1461,80,1460,951,146097,40,901,99,0,18,101,8,1970,3,3,71,1337,Definitions.IPS(90,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(32,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(1532892064,Definitions.P.M,Definitions.S.LONG,true),1337,4901,2014223714,121)"
            },
            {
              "js": "{\"lastEventTime\": 2440587,\"contractStatus\": 0,\"timeFromLastEvent\": 901,\"nominalValue\": 1336,\"nominalAccrued\": 97,\"feeAccrued\": 51,\"nominalRate\": 121,\"interestScalingMultiplier\": 21,\"nominalScalingMultiplier\": 28,\"contractRoleSign\": 9}",
              "sol": "Definitions.ContractState(2440587,Definitions.ContractStatus.PF,901,1336,97,51,121,21,28,Definitions.ContractRole.OBL)"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.811ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [9,187,176,193,93,156,253,253,206,65,87,163,253,155,97,103,194,152,123,101,5,8,12,80,129,153,0,122,196,78,6,65],\"legalEntityIdCounterparty\": [169,105,97,159,36,203,15,35,39,183,194,137,217,92,233,161,210,157,100,9,227,164,103,232,52,233,202,152,123,144,181,47],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1532892064,\"statusDate\": 1336,\"initialExchangeDate\": 97,\"maturityDate\": 1461002,\"terminationDate\": 39,\"purchaseDate\": 66,\"capitalizationEndDate\": 66,\"cycleAnchorDateOfInterestPayment\": 59,\"cycleAnchorDateOfRateReset\": 950,\"cycleAnchorDateOfScalingIndex\": 1338,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 6,\"nominalInterestRate\": 255,\"feeAccrued\": 71,\"accruedInterest\": 96,\"rateMultiplier\": 146098,\"rateSpread\": 2014223716,\"feeRate\": 110,\"nextResetRate\": 2014223714,\"penaltyRate\": 399,\"premiumDiscountAtIED\": 121,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 97,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 30,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 15,\"lifeFloor\": 111,\"periodCap\": 1,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"9,187,176,193,93,156,253,253,206,65,87,163,253,155,97,103,194,152,123,101,5,8,12,80,129,153,0,122,196,78,6,65\"),stringToBytes32(\"169,105,97,159,36,203,15,35,39,183,194,137,217,92,233,161,210,157,100,9,227,164,103,232,52,233,202,152,123,144,181,47\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1532892064,1336,97,1461002,39,66,66,59,950,1338,65,6,255,71,96,146098,2014223716,110,2014223714,399,121,1338,Definitions.IPS(130,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(97,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(30,Definitions.P.Y,Definitions.S.LONG,true),15,111,1,24)"
            },
            {
              "js": "{\"lastEventTime\": 29,\"contractStatus\": 0,\"timeFromLastEvent\": 4,\"nominalValue\": 51,\"nominalAccrued\": 151,\"feeAccrued\": 4901,\"nominalRate\": 17,\"interestScalingMultiplier\": 399,\"nominalScalingMultiplier\": 4800,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(29,Definitions.ContractStatus.PF,4,51,151,4901,17,399,4800,Definitions.ContractRole.RPA)"
            },
            {
              "js": "{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 70,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 20}",
              "sol": "Definitions.ProtoEvent(1,20,70,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.822ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [242,85,212,58,18,20,54,78,172,158,81,49,251,146,79,73,50,118,154,207,24,138,26,15,73,21,245,102,226,75,137,2],\"legalEntityIdCounterparty\": [30,139,125,50,129,163,226,252,7,46,20,147,53,253,69,151,140,65,111,127,234,16,87,255,99,149,211,66,138,11,56,224],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 32076,\"statusDate\": 11,\"initialExchangeDate\": 2448,\"maturityDate\": 121,\"terminationDate\": 1461002,\"purchaseDate\": 254,\"capitalizationEndDate\": 15,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 131,\"cycleAnchorDateOfScalingIndex\": 1532892063,\"cycleAnchorDateOfFee\": 21,\"notionalPrincipal\": 9999,\"nominalInterestRate\": 2440589,\"feeAccrued\": 63,\"accruedInterest\": 110,\"rateMultiplier\": 255,\"rateSpread\": 401,\"feeRate\": 41,\"nextResetRate\": 0,\"penaltyRate\": 68569,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 91,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 81,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 23,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2447,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 400,\"lifeFloor\": 399,\"periodCap\": 64,\"periodFloor\": 1462}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"242,85,212,58,18,20,54,78,172,158,81,49,251,146,79,73,50,118,154,207,24,138,26,15,73,21,245,102,226,75,137,2\"),stringToBytes32(\"30,139,125,50,129,163,226,252,7,46,20,147,53,253,69,151,140,65,111,127,234,16,87,255,99,149,211,66,138,11,56,224\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,32076,11,2448,121,1461002,254,15,150,131,1532892063,21,9999,2440589,63,110,255,401,41,0,68569,86399,91,Definitions.IPS(4799,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(81,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(23,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(2447,Definitions.P.M,Definitions.S.SHORT,true),400,399,64,1462)"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [72,42,159,148,112,112,58,10,232,83,141,192,242,232,13,189,86,92,63,66,10,54,87,32,163,138,190,158,125,126,18,84],\"legalEntityIdCounterparty\": [156,178,17,45,161,19,250,204,102,161,144,29,81,229,54,117,214,16,8,133,129,53,223,37,75,210,107,41,211,46,186,82],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1,\"statusDate\": 32,\"initialExchangeDate\": 8,\"maturityDate\": 366,\"terminationDate\": 68570,\"purchaseDate\": 2447,\"capitalizationEndDate\": 49,\"cycleAnchorDateOfInterestPayment\": 1969,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 4899,\"notionalPrincipal\": 89,\"nominalInterestRate\": 80,\"feeAccrued\": 1461001,\"accruedInterest\": 4800,\"rateMultiplier\": 0,\"rateSpread\": 13,\"feeRate\": 4001,\"nextResetRate\": 1338,\"penaltyRate\": 79,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 366,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 31,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 949,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 6,\"lifeFloor\": 81,\"periodCap\": 254,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"72,42,159,148,112,112,58,10,232,83,141,192,242,232,13,189,86,92,63,66,10,54,87,32,163,138,190,158,125,126,18,84\"),stringToBytes32(\"156,178,17,45,161,19,250,204,102,161,144,29,81,229,54,117,214,16,8,133,129,53,223,37,75,210,107,41,211,46,186,82\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1,32,8,366,68570,2447,49,1969,90,141,4899,89,80,1461001,4800,0,13,4001,1338,79,2446,366,Definitions.IPS(86399,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(41,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(949,Definitions.P.W,Definitions.S.LONG,true),6,81,254,81)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [212,68,205,60,152,66,234,223,72,220,64,216,71,162,69,81,35,252,145,66,103,101,66,60,44,127,131,179,252,127,94,140],\"legalEntityIdCounterparty\": [16,13,67,176,192,106,251,203,207,102,76,141,45,37,167,183,209,214,242,138,189,236,173,216,209,38,68,175,227,11,69,122],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 51,\"statusDate\": 60,\"initialExchangeDate\": 120,\"maturityDate\": 11,\"terminationDate\": 1532892064,\"purchaseDate\": 86399,\"capitalizationEndDate\": 1336,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 1,\"cycleAnchorDateOfScalingIndex\": 365,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 40,\"feeAccrued\": 159,\"accruedInterest\": 400,\"rateMultiplier\": 111,\"rateSpread\": 4901,\"feeRate\": 364,\"nextResetRate\": 86401,\"penaltyRate\": 1462,\"premiumDiscountAtIED\": 11,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440587,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 50,\"lifeFloor\": 257,\"periodCap\": 1969,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"212,68,205,60,152,66,234,223,72,220,64,216,71,162,69,81,35,252,145,66,103,101,66,60,44,127,131,179,252,127,94,140\"),stringToBytes32(\"16,13,67,176,192,106,251,203,207,102,76,141,45,37,167,183,209,214,242,138,189,236,173,216,209,38,68,175,227,11,69,122\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,51,60,120,11,1532892064,86399,1336,1461,1,365,141,1461000,40,159,400,111,4901,364,86401,1462,11,86400,Definitions.IPS(9999,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(949,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2440587,Definitions.P.W,Definitions.S.SHORT,false),50,257,1969,81)"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [153,146,149,220,29,187,122,0,249,99,245,180,202,138,242,229,27,240,200,15,220,222,121,199,205,115,244,96,246,145,147,222],\"legalEntityIdCounterparty\": [142,87,73,198,14,35,9,82,219,50,216,143,119,178,60,41,90,10,186,136,129,28,228,145,171,163,191,73,30,44,17,138],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4001,\"statusDate\": 1532892064,\"initialExchangeDate\": 364,\"maturityDate\": 26,\"terminationDate\": 150,\"purchaseDate\": 24,\"capitalizationEndDate\": 32075,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 19,\"cycleAnchorDateOfScalingIndex\": 9999,\"cycleAnchorDateOfFee\": 2448,\"notionalPrincipal\": 149,\"nominalInterestRate\": 86401,\"feeAccrued\": 146098,\"accruedInterest\": 14,\"rateMultiplier\": 256,\"rateSpread\": 131,\"feeRate\": 901,\"nextResetRate\": 400,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 1532892063,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32076,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 141,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 2440589,\"lifeFloor\": 81,\"periodCap\": 6,\"periodFloor\": 32076}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"153,146,149,220,29,187,122,0,249,99,245,180,202,138,242,229,27,240,200,15,220,222,121,199,205,115,244,96,246,145,147,222\"),stringToBytes32(\"142,87,73,198,14,35,9,82,219,50,216,143,119,178,60,41,90,10,186,136,129,28,228,145,171,163,191,73,30,44,17,138\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4001,1532892064,364,26,150,24,32075,4001,19,9999,2448,149,86401,146098,14,256,131,901,400,71,1532892063,1,Definitions.IPS(130,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(24,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.H,Definitions.S.LONG,false),2440589,81,6,32076)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [166,41,76,26,29,15,237,236,243,34,124,9,92,142,167,121,150,248,196,74,43,130,18,199,84,208,34,134,209,65,120,180],\"legalEntityIdCounterparty\": [61,228,163,53,241,129,106,235,27,65,104,133,102,215,143,121,81,200,62,208,197,167,138,153,228,172,45,95,129,198,249,106],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 151,\"statusDate\": 89,\"initialExchangeDate\": 255,\"maturityDate\": 91,\"terminationDate\": 146096,\"purchaseDate\": 0,\"capitalizationEndDate\": 1461000,\"cycleAnchorDateOfInterestPayment\": 4799,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 30,\"notionalPrincipal\": 4900,\"nominalInterestRate\": 32,\"feeAccrued\": 146097,\"accruedInterest\": 30,\"rateMultiplier\": 139,\"rateSpread\": 1337,\"feeRate\": 399,\"nextResetRate\": 16,\"penaltyRate\": 20,\"premiumDiscountAtIED\": 2440587,\"priceAtPurchaseDate\": 71,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 361,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 29,\"periodCap\": 1461002,\"periodFloor\": 31}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"166,41,76,26,29,15,237,236,243,34,124,9,92,142,167,121,150,248,196,74,43,130,18,199,84,208,34,134,209,65,120,180\"),stringToBytes32(\"61,228,163,53,241,129,106,235,27,65,104,133,102,215,143,121,81,200,62,208,197,167,138,153,228,172,45,95,129,198,249,106\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,151,89,255,91,146096,0,1461000,4799,3999,141,30,4900,32,146097,30,139,1337,399,16,20,2440587,71,Definitions.IPS(1461002,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(361,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(364,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.SHORT,true),161,29,1461002,31)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [89,7,130,211,231,80,252,156,242,203,48,42,248,105,128,77,211,18,123,38,191,220,186,136,62,175,25,205,73,8,70,241],\"legalEntityIdCounterparty\": [2,65,173,92,249,169,84,194,180,69,53,73,251,80,212,24,132,243,99,17,170,87,124,183,54,3,140,83,71,207,0,166],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 359,\"initialExchangeDate\": 9999,\"maturityDate\": 13,\"terminationDate\": 48,\"purchaseDate\": 2440588,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 901,\"cycleAnchorDateOfRateReset\": 1969,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 1460,\"notionalPrincipal\": 19,\"nominalInterestRate\": 4,\"feeAccrued\": 9,\"accruedInterest\": 48,\"rateMultiplier\": 901,\"rateSpread\": 2440589,\"feeRate\": 1338,\"nextResetRate\": 149,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 121,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 9,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 12,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 100,\"lifeFloor\": 1,\"periodCap\": 1337,\"periodFloor\": 1337}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"89,7,130,211,231,80,252,156,242,203,48,42,248,105,128,77,211,18,123,38,191,220,186,136,62,175,25,205,73,8,70,241\"),stringToBytes32(\"2,65,173,92,249,169,84,194,180,69,53,73,251,80,212,24,132,243,99,17,170,87,124,183,54,3,140,83,71,207,0,166\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,32,359,9999,13,48,2440588,24,901,1969,4901,1460,19,4,9,48,901,2440589,1338,149,49,121,1461,Definitions.IPS(61,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(9,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(12,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1532892062,Definitions.P.M,Definitions.S.LONG,true),100,1,1337,1337)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [115,64,161,101,229,248,22,119,81,56,251,69,48,208,168,193,52,248,55,28,14,144,176,84,60,254,118,217,173,195,101,119],\"legalEntityIdCounterparty\": [6,57,191,241,25,171,215,186,217,52,109,108,191,71,50,110,128,73,51,213,112,18,228,72,116,162,38,76,245,192,120,220],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 146097,\"statusDate\": 69,\"initialExchangeDate\": 359,\"maturityDate\": 146098,\"terminationDate\": 1460,\"purchaseDate\": 3999,\"capitalizationEndDate\": 121,\"cycleAnchorDateOfInterestPayment\": 32076,\"cycleAnchorDateOfRateReset\": 95,\"cycleAnchorDateOfScalingIndex\": 15,\"cycleAnchorDateOfFee\": 109,\"notionalPrincipal\": 32,\"nominalInterestRate\": 151,\"feeAccrued\": 399,\"accruedInterest\": 51,\"rateMultiplier\": 400,\"rateSpread\": 131,\"feeRate\": 27,\"nextResetRate\": 0,\"penaltyRate\": 120,\"premiumDiscountAtIED\": 69,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 96,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 29,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 146097,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 2447,\"lifeFloor\": 4899,\"periodCap\": 901,\"periodFloor\": 68568}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"115,64,161,101,229,248,22,119,81,56,251,69,48,208,168,193,52,248,55,28,14,144,176,84,60,254,118,217,173,195,101,119\"),stringToBytes32(\"6,57,191,241,25,171,215,186,217,52,109,108,191,71,50,110,128,73,51,213,112,18,228,72,116,162,38,76,245,192,120,220\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,146097,69,359,146098,1460,3999,121,32076,95,15,109,32,151,399,51,400,131,27,0,120,69,1,Definitions.IPS(96,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(51,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(29,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(146097,Definitions.P.W,Definitions.S.SHORT,true),2447,4899,901,68568)"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [9,137,151,128,113,103,25,153,151,215,73,75,67,240,119,145,65,152,69,82,192,180,27,40,205,38,111,227,219,96,54,238],\"legalEntityIdCounterparty\": [79,10,117,109,68,72,95,10,87,97,214,144,198,128,64,20,214,86,153,188,237,80,155,170,67,130,204,108,108,238,179,21],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 146096,\"statusDate\": 17,\"initialExchangeDate\": 81,\"maturityDate\": 400,\"terminationDate\": 79,\"purchaseDate\": 150,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 6,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 159,\"cycleAnchorDateOfFee\": 14,\"notionalPrincipal\": 68568,\"nominalInterestRate\": 31,\"feeAccrued\": 364,\"accruedInterest\": 111,\"rateMultiplier\": 26,\"rateSpread\": 49,\"feeRate\": 4800,\"nextResetRate\": 32074,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 4001,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 21,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86399,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1462,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 365,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 119,\"lifeFloor\": 130,\"periodCap\": 257,\"periodFloor\": 401}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"9,137,151,128,113,103,25,153,151,215,73,75,67,240,119,145,65,152,69,82,192,180,27,40,205,38,111,227,219,96,54,238\"),stringToBytes32(\"79,10,117,109,68,72,95,10,87,97,214,144,198,128,64,20,214,86,153,188,237,80,155,170,67,130,204,108,108,238,179,21\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,146096,17,81,400,79,150,0,6,367,159,14,68568,31,364,111,26,49,4800,32074,1461000,4001,25,Definitions.IPS(21,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(86399,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1462,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(365,Definitions.P.M,Definitions.S.SHORT,false),119,130,257,401)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [54,66,142,196,141,117,95,202,151,87,28,185,104,121,104,239,185,21,158,243,42,74,112,72,79,87,228,150,64,232,213,221],\"legalEntityIdCounterparty\": [72,132,60,145,36,70,71,248,163,113,229,60,56,162,163,204,102,49,10,48,197,23,178,172,179,191,242,189,86,156,99,75],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 1460,\"statusDate\": 86401,\"initialExchangeDate\": 146096,\"maturityDate\": 401,\"terminationDate\": 139,\"purchaseDate\": 1337,\"capitalizationEndDate\": 150,\"cycleAnchorDateOfInterestPayment\": 151,\"cycleAnchorDateOfRateReset\": 1461000,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 2014223716,\"notionalPrincipal\": 3,\"nominalInterestRate\": 949,\"feeAccrued\": 86401,\"accruedInterest\": 361,\"rateMultiplier\": 4799,\"rateSpread\": 59,\"feeRate\": 1971,\"nextResetRate\": 24,\"penaltyRate\": 1460,\"premiumDiscountAtIED\": 2014223715,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 100,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 69,\"lifeFloor\": 11,\"periodCap\": 61,\"periodFloor\": 48}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"54,66,142,196,141,117,95,202,151,87,28,185,104,121,104,239,185,21,158,243,42,74,112,72,79,87,228,150,64,232,213,221\"),stringToBytes32(\"72,132,60,145,36,70,71,248,163,113,229,60,56,162,163,204,102,49,10,48,197,23,178,172,179,191,242,189,86,156,99,75\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,1460,86401,146096,401,139,1337,150,151,1461000,66,2014223716,3,949,86401,361,4799,59,1971,24,1460,2014223715,101,Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(70,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(100,Definitions.P.Y,Definitions.S.SHORT,false),69,11,61,48)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [211,117,210,96,8,251,234,113,138,71,124,129,135,125,134,206,184,195,51,61,196,182,59,212,27,99,38,159,135,21,240,209],\"legalEntityIdCounterparty\": [0,27,155,25,234,66,88,75,84,3,159,147,108,5,92,92,62,127,123,190,214,167,248,172,69,184,45,20,131,201,223,28],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 19,\"statusDate\": 100,\"initialExchangeDate\": 5,\"maturityDate\": 1,\"terminationDate\": 4,\"purchaseDate\": 3,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 4001,\"cycleAnchorDateOfScalingIndex\": 51,\"cycleAnchorDateOfFee\": 401,\"notionalPrincipal\": 254,\"nominalInterestRate\": 20,\"feeAccrued\": 80,\"accruedInterest\": 2,\"rateMultiplier\": 24,\"rateSpread\": 4000,\"feeRate\": 130,\"nextResetRate\": 23,\"penaltyRate\": 9999,\"premiumDiscountAtIED\": 23,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 401,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 950,\"lifeFloor\": 80,\"periodCap\": 31,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"211,117,210,96,8,251,234,113,138,71,124,129,135,125,134,206,184,195,51,61,196,182,59,212,27,99,38,159,135,21,240,209\"),stringToBytes32(\"0,27,155,25,234,66,88,75,84,3,159,147,108,5,92,92,62,127,123,190,214,167,248,172,69,184,45,20,131,201,223,28\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,19,100,5,1,4,3,2,360,4001,51,401,254,20,80,2,24,4000,130,23,9999,23,1338,Definitions.IPS(131,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(149,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(401,Definitions.P.Y,Definitions.S.LONG,false),950,80,31,2014223716)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [97,117,130,236,4,45,142,39,81,6,92,244,51,131,67,186,162,111,187,203,229,223,49,138,74,140,74,26,158,112,141,112],\"legalEntityIdCounterparty\": [18,71,56,17,178,123,169,221,153,229,251,131,28,157,50,183,134,237,135,197,37,52,175,11,120,6,182,59,201,169,187,52],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 951,\"statusDate\": 899,\"initialExchangeDate\": 65,\"maturityDate\": 109,\"terminationDate\": 63,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 1969,\"nominalInterestRate\": 0,\"feeAccrued\": 900,\"accruedInterest\": 400,\"rateMultiplier\": 1532892064,\"rateSpread\": 12,\"feeRate\": 4800,\"nextResetRate\": 1970,\"penaltyRate\": 13,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 151,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 17,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 1461000,\"lifeFloor\": 48,\"periodCap\": 360,\"periodFloor\": 61}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"97,117,130,236,4,45,142,39,81,6,92,244,51,131,67,186,162,111,187,203,229,223,49,138,74,140,74,26,158,112,141,112\"),stringToBytes32(\"18,71,56,17,178,123,169,221,153,229,251,131,28,157,50,183,134,237,135,197,37,52,175,11,120,6,182,59,201,169,187,52\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,951,899,65,109,63,0,0,139,254,96,26,1969,0,900,400,1532892064,12,4800,1970,13,1460,89,Definitions.IPS(151,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(68568,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(17,Definitions.P.D,Definitions.S.SHORT,true),1461000,48,360,61)"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [157,236,188,18,105,17,219,97,120,228,239,239,240,29,216,75,153,17,104,103,119,10,60,171,88,148,214,172,195,216,31,226],\"legalEntityIdCounterparty\": [50,173,58,105,103,55,73,127,141,224,168,100,245,212,105,153,120,222,97,141,35,138,27,249,219,172,154,151,205,80,148,198],\"dayCountConvention\": 6,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2440589,\"statusDate\": 68568,\"initialExchangeDate\": 2440589,\"maturityDate\": 401,\"terminationDate\": 48,\"purchaseDate\": 366,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 7,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 2014223716,\"cycleAnchorDateOfFee\": 141,\"notionalPrincipal\": 12,\"nominalInterestRate\": 1337,\"feeAccrued\": 24,\"accruedInterest\": 140,\"rateMultiplier\": 368,\"rateSpread\": 1532892062,\"feeRate\": 400,\"nextResetRate\": 121,\"penaltyRate\": 256,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 1460,\"cycleOfInterestPayment\": {\"i\": 101,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 3,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4900,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 49,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 149,\"lifeFloor\": 9,\"periodCap\": 1970,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"157,236,188,18,105,17,219,97,120,228,239,239,240,29,216,75,153,17,104,103,119,10,60,171,88,148,214,172,195,216,31,226\"),stringToBytes32(\"50,173,58,105,103,55,73,127,141,224,168,100,245,212,105,153,120,222,97,141,35,138,27,249,219,172,154,151,205,80,148,198\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2440589,68568,2440589,401,48,366,10000,7,119,2014223716,141,12,1337,24,140,368,1532892062,400,121,256,1337,1460,Definitions.IPS(101,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(3,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4900,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(49,Definitions.P.Y,Definitions.S.LONG,true),149,9,1970,2440589)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [75,190,53,171,99,101,11,160,21,108,9,236,194,87,144,120,220,211,233,96,80,169,48,15,255,19,56,209,58,143,26,120],\"legalEntityIdCounterparty\": [222,195,42,64,37,64,102,80,68,121,87,254,145,197,241,220,49,105,167,86,40,171,246,71,83,234,213,48,85,208,58,26],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 27,\"statusDate\": 11,\"initialExchangeDate\": 31,\"maturityDate\": 949,\"terminationDate\": 951,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 2014223716,\"notionalPrincipal\": 13,\"nominalInterestRate\": 0,\"feeAccrued\": 949,\"accruedInterest\": 3999,\"rateMultiplier\": 99,\"rateSpread\": 1337,\"feeRate\": 1461002,\"nextResetRate\": 68570,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 100,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 4899,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 5,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2014223715,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 11,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 15,\"lifeFloor\": 16,\"periodCap\": 3,\"periodFloor\": 4800}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"75,190,53,171,99,101,11,160,21,108,9,236,194,87,144,120,220,211,233,96,80,169,48,15,255,19,56,209,58,143,26,120\"),stringToBytes32(\"222,195,42,64,37,64,102,80,68,121,87,254,145,197,241,220,49,105,167,86,40,171,246,71,83,234,213,48,85,208,58,26\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,27,11,31,949,951,0,0,110,0,161,2014223716,13,0,949,3999,99,1337,1461002,68570,3,100,21,Definitions.IPS(4899,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(5,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(11,Definitions.P.H,Definitions.S.SHORT,false),15,16,3,4800)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [61,35,218,214,158,71,159,129,95,1,101,155,85,87,110,78,191,152,235,235,144,99,58,21,94,159,103,57,37,174,119,130],\"legalEntityIdCounterparty\": [53,37,1,82,64,109,160,84,230,71,159,34,73,177,164,226,254,68,82,36,98,68,243,220,208,217,243,162,114,57,131,212],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 51,\"statusDate\": 364,\"initialExchangeDate\": 2,\"maturityDate\": 111,\"terminationDate\": 21,\"purchaseDate\": 146097,\"capitalizationEndDate\": 25,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 257,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 129,\"notionalPrincipal\": 30,\"nominalInterestRate\": 32076,\"feeAccrued\": 28,\"accruedInterest\": 40,\"rateMultiplier\": 3999,\"rateSpread\": 139,\"feeRate\": 401,\"nextResetRate\": 1336,\"penaltyRate\": 2014223715,\"premiumDiscountAtIED\": 2014223714,\"priceAtPurchaseDate\": 1461001,\"cycleOfInterestPayment\": {\"i\": 900,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4001,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4901,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 899,\"lifeFloor\": 2440589,\"periodCap\": 1461002,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"61,35,218,214,158,71,159,129,95,1,101,155,85,87,110,78,191,152,235,235,144,99,58,21,94,159,103,57,37,174,119,130\"),stringToBytes32(\"53,37,1,82,64,109,160,84,230,71,159,34,73,177,164,226,254,68,82,36,98,68,243,220,208,217,243,162,114,57,131,212\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,51,364,2,111,21,146097,25,120,257,1336,129,30,32076,28,40,3999,139,401,1336,2014223715,2014223714,1461001,Definitions.IPS(900,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(4001,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4901,Definitions.P.D,Definitions.S.SHORT,false),899,2440589,1461002,95)"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [254,48,69,230,118,93,65,185,223,23,163,95,246,106,25,229,19,175,1,52,235,254,87,206,136,185,167,225,165,185,172,185],\"legalEntityIdCounterparty\": [73,188,147,48,104,111,207,146,150,94,47,99,80,111,160,193,190,92,28,227,165,202,55,27,251,149,4,61,86,145,110,180],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4899,\"statusDate\": 2446,\"initialExchangeDate\": 10,\"maturityDate\": 149,\"terminationDate\": 2440589,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4000,\"cycleAnchorDateOfRateReset\": 60,\"cycleAnchorDateOfScalingIndex\": 1461000,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 0,\"feeAccrued\": 2440588,\"accruedInterest\": 7,\"rateMultiplier\": 41,\"rateSpread\": 71,\"feeRate\": 1532892063,\"nextResetRate\": 60,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 100,\"cycleOfInterestPayment\": {\"i\": 15,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 256,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 27,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 4799,\"lifeFloor\": 79,\"periodCap\": 1460,\"periodFloor\": 110}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"254,48,69,230,118,93,65,185,223,23,163,95,246,106,25,229,19,175,1,52,235,254,87,206,136,185,167,225,165,185,172,185\"),stringToBytes32(\"73,188,147,48,104,111,207,146,150,94,47,99,80,111,160,193,190,92,28,227,165,202,55,27,251,149,4,61,86,145,110,180\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4899,2446,10,149,2440589,0,0,4000,60,1461000,0,68570,0,2440588,7,41,71,1532892063,60,160,89,100,Definitions.IPS(15,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(256,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(27,Definitions.P.M,Definitions.S.LONG,false),4799,79,1460,110)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [233,134,198,39,225,120,92,112,191,12,77,236,165,59,17,69,135,78,91,143,242,135,28,6,115,236,229,104,6,18,27,96],\"legalEntityIdCounterparty\": [179,237,127,255,66,166,108,66,126,128,254,25,120,39,41,200,142,69,58,196,105,185,184,99,50,250,57,0,218,156,69,124],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 2440589,\"statusDate\": 2440589,\"initialExchangeDate\": 3,\"maturityDate\": 161,\"terminationDate\": 13,\"purchaseDate\": 39,\"capitalizationEndDate\": 81,\"cycleAnchorDateOfInterestPayment\": 32,\"cycleAnchorDateOfRateReset\": 15,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 367,\"nominalInterestRate\": 257,\"feeAccrued\": 1,\"accruedInterest\": 95,\"rateMultiplier\": 1461002,\"rateSpread\": 141,\"feeRate\": 20,\"nextResetRate\": -1,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 49,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 146096,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 151,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1338,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 9,\"lifeFloor\": 367,\"periodCap\": 139,\"periodFloor\": 1462}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"233,134,198,39,225,120,92,112,191,12,77,236,165,59,17,69,135,78,91,143,242,135,28,6,115,236,229,104,6,18,27,96\"),stringToBytes32(\"179,237,127,255,66,166,108,66,126,128,254,25,120,39,41,200,142,69,58,196,105,185,184,99,50,250,57,0,218,156,69,124\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,2440589,2440589,3,161,13,39,81,32,15,950,90,367,257,1,95,1461002,141,20,-1,95,49,21,Definitions.IPS(146096,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.W,Definitions.S.LONG,true),9,367,139,1462)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [166,242,141,193,180,225,209,54,136,72,92,218,160,47,45,255,31,166,224,221,191,135,165,185,68,5,59,197,244,148,19,27],\"legalEntityIdCounterparty\": [102,190,21,6,100,44,172,177,128,45,133,6,198,132,18,177,63,159,193,20,10,246,71,60,142,4,107,203,234,153,237,168],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 11,\"statusDate\": 0,\"initialExchangeDate\": 1337,\"maturityDate\": 1337,\"terminationDate\": 151,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 159,\"cycleAnchorDateOfRateReset\": 141,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 25,\"notionalPrincipal\": 4,\"nominalInterestRate\": 0,\"feeAccrued\": 951,\"accruedInterest\": 1461000,\"rateMultiplier\": 401,\"rateSpread\": 1461002,\"feeRate\": 3999,\"nextResetRate\": 96,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 1969,\"priceAtPurchaseDate\": 950,\"cycleOfInterestPayment\": {\"i\": 65,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86399,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 399,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 32075,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223716,\"lifeFloor\": 86401,\"periodCap\": 41,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"166,242,141,193,180,225,209,54,136,72,92,218,160,47,45,255,31,166,224,221,191,135,165,185,68,5,59,197,244,148,19,27\"),stringToBytes32(\"102,190,21,6,100,44,172,177,128,45,133,6,198,132,18,177,63,159,193,20,10,246,71,60,142,4,107,203,234,153,237,168\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,11,0,1337,1337,151,0,0,159,141,0,25,4,0,951,1461000,401,1461002,3999,96,2440587,1969,950,Definitions.IPS(65,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(86399,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(399,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32075,Definitions.P.Q,Definitions.S.SHORT,true),2014223716,86401,41,40)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [217,143,39,175,41,254,106,107,241,61,136,145,70,12,223,175,78,101,20,110,210,132,244,14,201,187,152,2,147,202,43,211],\"legalEntityIdCounterparty\": [97,64,120,38,218,214,99,159,8,58,252,102,1,189,63,130,106,234,107,192,238,133,40,111,222,250,171,35,146,165,151,119],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 359,\"statusDate\": 4800,\"initialExchangeDate\": 29,\"maturityDate\": 256,\"terminationDate\": 2,\"purchaseDate\": 1461000,\"capitalizationEndDate\": 9999,\"cycleAnchorDateOfInterestPayment\": 2440589,\"cycleAnchorDateOfRateReset\": 59,\"cycleAnchorDateOfScalingIndex\": 900,\"cycleAnchorDateOfFee\": 109,\"notionalPrincipal\": 64,\"nominalInterestRate\": 32076,\"feeAccrued\": 70,\"accruedInterest\": 950,\"rateMultiplier\": 32,\"rateSpread\": 1532892064,\"feeRate\": 900,\"nextResetRate\": 1532892063,\"penaltyRate\": 10001,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 101,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 70,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 110,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 71,\"lifeFloor\": 0,\"periodCap\": 121,\"periodFloor\": 1461002}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"217,143,39,175,41,254,106,107,241,61,136,145,70,12,223,175,78,101,20,110,210,132,244,14,201,187,152,2,147,202,43,211\"),stringToBytes32(\"97,64,120,38,218,214,99,159,8,58,252,102,1,189,63,130,106,234,107,192,238,133,40,111,222,250,171,35,146,165,151,119\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,359,4800,29,256,2,1461000,9999,2440589,59,900,109,64,32076,70,950,32,1532892064,900,1532892063,10001,21,101,Definitions.IPS(9999,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(70,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(30,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.Q,Definitions.S.SHORT,true),71,0,121,1461002)"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [250,164,237,59,209,117,235,141,96,232,164,163,161,253,236,157,65,107,83,103,130,61,157,99,205,82,131,24,107,46,131,6],\"legalEntityIdCounterparty\": [237,76,138,10,43,176,111,183,164,229,67,23,230,91,165,53,247,226,96,41,238,33,33,87,231,82,65,55,55,228,0,216],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 41,\"statusDate\": 150,\"initialExchangeDate\": 79,\"maturityDate\": 2440589,\"terminationDate\": 365,\"purchaseDate\": 71,\"capitalizationEndDate\": 59,\"cycleAnchorDateOfInterestPayment\": 32,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 6,\"notionalPrincipal\": 64,\"nominalInterestRate\": 71,\"feeAccrued\": 14,\"accruedInterest\": 111,\"rateMultiplier\": 19,\"rateSpread\": 359,\"feeRate\": 15,\"nextResetRate\": 119,\"penaltyRate\": 1461,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 63,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 89,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 59,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892063,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 151,\"lifeFloor\": 10001,\"periodCap\": 1971,\"periodFloor\": 60}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"250,164,237,59,209,117,235,141,96,232,164,163,161,253,236,157,65,107,83,103,130,61,157,99,205,82,131,24,107,46,131,6\"),stringToBytes32(\"237,76,138,10,43,176,111,183,164,229,67,23,230,91,165,53,247,226,96,41,238,33,33,87,231,82,65,55,55,228,0,216\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,41,150,79,2440589,365,71,59,32,119,146097,6,64,71,14,111,19,359,15,119,1461,48,15,Definitions.IPS(63,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(89,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(59,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(1532892063,Definitions.P.W,Definitions.S.LONG,false),151,10001,1971,60)"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [127,179,51,233,156,157,234,82,110,1,134,117,30,232,17,99,193,137,147,74,65,245,191,209,34,159,12,15,78,99,168,200],\"legalEntityIdCounterparty\": [197,46,113,130,93,248,72,115,143,211,251,239,168,131,214,156,60,206,84,166,81,117,135,222,103,49,157,79,98,4,41,143],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1532892063,\"statusDate\": 27,\"initialExchangeDate\": 32,\"maturityDate\": 59,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1,\"cycleAnchorDateOfRateReset\": 1461002,\"cycleAnchorDateOfScalingIndex\": 9,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 59,\"nominalInterestRate\": 0,\"feeAccrued\": 63,\"accruedInterest\": 121,\"rateMultiplier\": 30,\"rateSpread\": 1970,\"feeRate\": 151,\"nextResetRate\": 1971,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 131,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 63,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146097,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 95,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 1532892063,\"lifeFloor\": 18,\"periodCap\": 2448,\"periodFloor\": 7}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"127,179,51,233,156,157,234,82,110,1,134,117,30,232,17,99,193,137,147,74,65,245,191,209,34,159,12,15,78,99,168,200\"),stringToBytes32(\"197,46,113,130,93,248,72,115,143,211,251,239,168,131,214,156,60,206,84,166,81,117,135,222,103,49,157,79,98,4,41,143\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1532892063,27,32,59,0,0,0,1,1461002,9,1532892063,59,0,63,121,30,1970,151,1971,80,131,120,Definitions.IPS(63,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(146097,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,false),1532892063,18,2448,7)"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [162,222,230,103,30,109,229,68,240,250,142,85,204,13,144,111,70,60,1,38,219,243,194,171,201,30,244,124,222,221,156,107],\"legalEntityIdCounterparty\": [176,73,44,234,16,238,53,125,231,135,18,63,190,9,147,173,187,146,202,92,194,9,36,254,148,21,102,161,144,80,226,224],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4001,\"statusDate\": 4799,\"initialExchangeDate\": 86399,\"maturityDate\": 2448,\"terminationDate\": 359,\"purchaseDate\": 900,\"capitalizationEndDate\": 63,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 120,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 29,\"notionalPrincipal\": 254,\"nominalInterestRate\": 1,\"feeAccrued\": 1971,\"accruedInterest\": 146098,\"rateMultiplier\": 70,\"rateSpread\": 257,\"feeRate\": 86400,\"nextResetRate\": 7,\"penaltyRate\": 10000,\"premiumDiscountAtIED\": 0,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 81,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 399,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 140,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 39,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 139,\"lifeFloor\": 7,\"periodCap\": 3,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"162,222,230,103,30,109,229,68,240,250,142,85,204,13,144,111,70,60,1,38,219,243,194,171,201,30,244,124,222,221,156,107\"),stringToBytes32(\"176,73,44,234,16,238,53,125,231,135,18,63,190,9,147,173,187,146,202,92,194,9,36,254,148,21,102,161,144,80,226,224\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4001,4799,86399,2448,359,900,63,1532892062,120,161,29,254,1,1971,146098,70,257,86400,7,10000,0,1,Definitions.IPS(81,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(399,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(140,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(39,Definitions.P.W,Definitions.S.SHORT,true),139,7,3,160)"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [61,18,241,40,176,1,195,126,174,76,2,177,250,202,234,40,10,118,134,95,154,118,42,167,132,99,40,179,34,40,122,127],\"legalEntityIdCounterparty\": [156,187,184,216,13,77,150,232,126,250,177,236,120,1,197,146,31,126,35,108,236,148,145,232,129,17,58,205,253,223,125,230],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 28,\"statusDate\": 18,\"initialExchangeDate\": 79,\"maturityDate\": 31,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 70,\"cycleAnchorDateOfRateReset\": 400,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 0,\"feeAccrued\": 1971,\"accruedInterest\": 21,\"rateMultiplier\": 360,\"rateSpread\": 254,\"feeRate\": 1971,\"nextResetRate\": 364,\"penaltyRate\": 86400,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 4800,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 80,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 899,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 95,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 95,\"lifeFloor\": 49,\"periodCap\": 40,\"periodFloor\": 1532892062}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"61,18,241,40,176,1,195,126,174,76,2,177,250,202,234,40,10,118,134,95,154,118,42,167,132,99,40,179,34,40,122,127\"),stringToBytes32(\"156,187,184,216,13,77,150,232,126,250,177,236,120,1,197,146,31,126,35,108,236,148,145,232,129,17,58,205,253,223,125,230\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,28,18,79,31,0,0,0,70,400,48,1,146097,0,1971,21,360,254,1971,364,86400,29,4800,Definitions.IPS(139,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(80,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(95,Definitions.P.D,Definitions.S.SHORT,false),95,49,40,1532892062)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.877ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T04:26:12.901ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}