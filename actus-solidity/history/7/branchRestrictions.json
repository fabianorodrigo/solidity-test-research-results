,{
  "2020-11-11T05:00:54.616ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "1461000",
                "sol": "1461000"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.618ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.618ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.619ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.619ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.620ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.621ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970",
            "month <= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970,month<=0",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.624ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.626ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.627ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.627ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.627ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.628ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.629ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.631ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.632ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.632ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.633ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.633ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.633ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.638ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.640ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.640ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.641ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.641ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.641ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.642ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.642ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.643ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.643ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.644ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.644ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.644ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.645ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 10002,
                "sol": 10002
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.647ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461,
                "sol": 1461
              },
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.647ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 950,
                "sol": 950
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.648ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.649ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892064,
                "sol": 1532892064
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.649ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": "1336",
                "sol": "1336"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.653ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.655ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "-1",
                "sol": "-1"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.658ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.ContractRole.RFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.662ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "79",
                "sol": "79"
              },
              {
                "js": 78,
                "sol": 78
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": 10000,
                "sol": 10000
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": 10000,
                "sol": 10000
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "4799",
                "sol": "4799"
              },
              {
                "js": 4798,
                "sol": 4798
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": 48,
                "sol": 48
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T05:00:54.667ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.667ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.668ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.668ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.670ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 68570,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(68570,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{\"i\": 131,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{\"i\": 86400,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86400,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{\"i\": 4799,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4799,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.673ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.673ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.675ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.679ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.682ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.688ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.689ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.693ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2014223715,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 71,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(71,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 39,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(39,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 119,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(119,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 68569,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(68569,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 1532892062,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.698ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 256,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(256,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{\"i\": 141,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(141,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "{\"i\": 367,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(367,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 949,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(949,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{\"i\": 139,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(139,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 146098,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(146098,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{\"i\": 59,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(59,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{\"i\": 4899,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4899,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{\"i\": 48,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(48,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.709ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 51,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(51,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 20,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(20,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1461001,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1461001,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1969,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1969,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1461,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1461,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2014223714,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223714,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 131,\"p\": 99999,\"s\": 1,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.712ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 91,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 68569,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 7},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 6,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 16},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 16,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 24,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 0},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 30,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 15},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 68570,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 18},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 48,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 4901,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 8,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 1336,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 20},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 59,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 1461000,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 3},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 401,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 95,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 1336,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 19},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 141,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 20,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 160,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 86399,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 161,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 97,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 70,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 950,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 401,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 5,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 368,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 1461002,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 1337,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 63,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 1461002,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 66,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 10,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 10000,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 109,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 66,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 17},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 10,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 13},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 360,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 95,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 65,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 13,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 25,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 1462,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 18},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 2440589,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 10},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 360,\"eventType\": 1,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 30,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 1,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 368,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 399,\"eventTimeWithEpochOffset\": 4799,\"scheduleTime\": 1461000,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 1970,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 401,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 254,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 4,\"stfType\": 4},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 161,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 10},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 949,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 71,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1461002,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 28,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 18},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 367,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 1,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 5,\"stfType\": 19},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 6,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 2448,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 1971,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 0,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 1461001,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 32,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 18}]",
              "sol": "[Definitions.ProtoEvent(0,951,91,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(10,2440588,68569,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PY),Definitions.ProtoEvent(15,2446,6,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV),Definitions.ProtoEvent(160,20,16,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(4900,109,24,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SD),Definitions.ProtoEvent(4899,11,30,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.CD),Definitions.ProtoEvent(86399,109,68570,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IPCB),Definitions.ProtoEvent(159,4901,48,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(65,0,4901,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(141,141,8,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(14,131,1336,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.Child),Definitions.ProtoEvent(5,60,59,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(69,365,1461000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IED),Definitions.ProtoEvent(51,901,401,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(899,121,95,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(101,25,1336,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.STD),Definitions.ProtoEvent(50,151,141,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(68569,68570,20,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(4801,1970,160,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(25,950,86399,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(68570,9,161,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(1460,25,97,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(14,19,70,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(26,9999,950,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(86399,100,401,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(255,1336,5,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(90,2,368,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(16,361,1461002,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(140,146098,1337,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(32075,15,63,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(5,4,1461002,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(8,2014223716,66,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(17,49,10,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(14,1460,10000,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(4000,120,109,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(257,41,66,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MR),Definitions.ProtoEvent(49,399,10,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RRY),Definitions.ProtoEvent(68569,146098,360,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(95,4000,65,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(4900,27,13,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(59,41,25,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(4799,29,1462,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB),Definitions.ProtoEvent(68568,81,2440589,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.TD),Definitions.ProtoEvent(1461002,80,360,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(68568,20,30,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(6,110,1,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(360,0,368,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(399,4799,1461000,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(111,150,1970,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(120,1532892062,401,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(39,366,254,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IP),Definitions.ProtoEvent(15,254,161,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.TD),Definitions.ProtoEvent(2440589,29,949,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(121,68568,71,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(8,951,1461002,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(9,41,28,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB),Definitions.ProtoEvent(256,3999,367,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(257,14,1,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.STD),Definitions.ProtoEvent(30,28,6,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(8,256,2448,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(51,257,1971,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(28,65,0,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(32,951,1461001,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(129,89,32,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCB)]"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.727ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 10,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 0},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 950,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 17},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 49,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 14},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 18,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 69,\"eventType\": 14,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 899,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 8,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 139,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 31,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 1532892062,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 101,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 1},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 399,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 18,\"stfType\": 11},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 129,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 16},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 32076,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 13},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 15,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 11},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 1969,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 4000,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 17},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 150,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 15},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 61,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 99,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 3},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 360,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 24,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 257,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 4,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 63,\"scheduleTime\": 63,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 141,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 4},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 365,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 366,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 9,\"stfType\": 12},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 141,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 31,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 40,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 130,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 129,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 161,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 0},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 4800,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 8},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 1532892063,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 91,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 1},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 26,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 1532892063,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 1461,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 16},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 80,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 2,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 68570,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 27,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 40,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 3,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 10001,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 21,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 16},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 9,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 40,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 11,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 4001,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 121,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 1969,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 900,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 6},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 21,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 4800,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 149,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 60,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 951,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 10},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 63,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 9},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 131,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 59,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 4800,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 18},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 89,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 15},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 29,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 2448,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 18}]",
              "sol": "[Definitions.ProtoEvent(66,15,10,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SD),Definitions.ProtoEvent(12,151,950,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.MR),Definitions.ProtoEvent(2014223715,399,49,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.SC),Definitions.ProtoEvent(1461,32074,18,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(2014223714,70,69,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(900,59,899,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(899,0,8,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(68570,10000,139,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(150,3,31,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(61,2446,1532892062,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(24,21,101,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MD),Definitions.ProtoEvent(160,119,399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCI),Definitions.ProtoEvent(1461000,950,129,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.DV),Definitions.ProtoEvent(9,68568,32076,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.RRY),Definitions.ProtoEvent(1460,109,15,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI),Definitions.ProtoEvent(366,1461000,1969,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(119,360,4000,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MR),Definitions.ProtoEvent(949,19,150,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.CD),Definitions.ProtoEvent(951,61,61,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(146098,9999,99,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IED),Definitions.ProtoEvent(146098,32076,360,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(0,949,24,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(140,32076,257,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(4899,9,4,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(3999,63,63,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(368,257,141,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IP),Definitions.ProtoEvent(359,146097,365,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(18,1461002,366,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RR),Definitions.ProtoEvent(26,119,141,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(27,69,31,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(32074,151,40,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(130,2,129,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(4900,1532892062,161,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SD),Definitions.ProtoEvent(13,366,4800,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.FP),Definitions.ProtoEvent(10001,8,1532892063,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(2014223714,6,91,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD),Definitions.ProtoEvent(9999,4900,26,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(1,61,1532892063,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(2446,146097,1461,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.DV),Definitions.ProtoEvent(1461,10000,80,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(26,32074,2,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(68570,10,27,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(40,30,3,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(129,119,10001,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(109,31,21,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.DV),Definitions.ProtoEvent(30,32074,9,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(151,365,40,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(366,1970,11,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(5,4800,4001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(110,79,121,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(901,1462,1969,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(23,68568,900,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(4800,24,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP),Definitions.ProtoEvent(1338,359,21,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(4000,159,4800,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(949,400,149,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(86401,1336,60,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(109,79,951,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.TD),Definitions.ProtoEvent(32,15,63,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PRD),Definitions.ProtoEvent(146096,1338,131,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(59,59,4800,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IPCB),Definitions.ProtoEvent(32076,120,89,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.CD),Definitions.ProtoEvent(368,131,29,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(4899,3999,2448,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCB)]"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.744ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.746ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [28,242,224,2,134,61,88,1,143,127,166,5,148,23,86,244,239,163,135,39,241,207,132,2,134,33,123,251,117,23,230,140],\"legalEntityIdCounterparty\": [198,9,152,9,197,96,234,9,224,239,42,237,206,95,137,252,86,152,22,87,58,241,36,124,57,116,134,227,112,38,2,67],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 8,\"statusDate\": 68568,\"initialExchangeDate\": 6,\"maturityDate\": 4000,\"terminationDate\": 13,\"purchaseDate\": 361,\"capitalizationEndDate\": 4900,\"cycleAnchorDateOfInterestPayment\": 41,\"cycleAnchorDateOfRateReset\": 70,\"cycleAnchorDateOfScalingIndex\": 25,\"cycleAnchorDateOfFee\": 146097,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 66,\"feeAccrued\": 401,\"accruedInterest\": 23,\"rateMultiplier\": 101,\"rateSpread\": 1461000,\"feeRate\": 1532892062,\"nextResetRate\": 2440588,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 61,\"priceAtPurchaseDate\": 901,\"cycleOfInterestPayment\": {\"i\": 39,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461000,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 16,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4799,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 2014223714,\"lifeFloor\": 899,\"periodCap\": 368,\"periodFloor\": -1}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"28,242,224,2,134,61,88,1,143,127,166,5,148,23,86,244,239,163,135,39,241,207,132,2,134,33,123,251,117,23,230,140\"),stringToBytes32(\"198,9,152,9,197,96,234,9,224,239,42,237,206,95,137,252,86,152,22,87,58,241,36,124,57,116,134,227,112,38,2,67\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,8,68568,6,4000,13,361,4900,41,70,25,146097,1337,66,401,23,101,1461000,1532892062,2440588,901,61,901,Definitions.IPS(39,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1461000,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(16,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.M,Definitions.S.SHORT,true),2014223714,899,368,-1)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.749ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [183,254,1,131,163,249,214,148,166,12,160,71,106,36,28,32,206,188,3,237,208,46,46,207,203,99,35,78,146,152,173,158],\"legalEntityIdCounterparty\": [130,213,88,89,2,37,131,31,25,146,88,139,16,79,168,99,9,143,37,171,102,179,224,64,91,199,246,73,229,48,207,60],\"dayCountConvention\": 3,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 139,\"statusDate\": 2448,\"initialExchangeDate\": 97,\"maturityDate\": 24,\"terminationDate\": 400,\"purchaseDate\": 1969,\"capitalizationEndDate\": 1460,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 2,\"cycleAnchorDateOfScalingIndex\": 400,\"cycleAnchorDateOfFee\": 2446,\"notionalPrincipal\": 111,\"nominalInterestRate\": 1532892063,\"feeAccrued\": 2448,\"accruedInterest\": 4900,\"rateMultiplier\": 41,\"rateSpread\": 359,\"feeRate\": 17,\"nextResetRate\": 11,\"penaltyRate\": 50,\"premiumDiscountAtIED\": 11,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 361,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 24,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 27,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 27,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 4901,\"lifeFloor\": 159,\"periodCap\": 139,\"periodFloor\": 66}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"183,254,1,131,163,249,214,148,166,12,160,71,106,36,28,32,206,188,3,237,208,46,46,207,203,99,35,78,146,152,173,158\"),stringToBytes32(\"130,213,88,89,2,37,131,31,25,146,88,139,16,79,168,99,9,143,37,171,102,179,224,64,91,199,246,73,229,48,207,60\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,139,2448,97,24,400,1969,1460,4900,2,400,2446,111,1532892063,2448,4900,41,359,17,11,50,11,32,Definitions.IPS(361,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(24,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(27,Definitions.P.Q,Definitions.S.LONG,true),4901,159,139,66)"
            },
            {
              "js": "{\"lastEventTime\": 139,\"contractStatus\": 1,\"timeFromLastEvent\": 4801,\"nominalValue\": 360,\"nominalAccrued\": 951,\"feeAccrued\": 3999,\"nominalRate\": 60,\"interestScalingMultiplier\": 120,\"nominalScalingMultiplier\": 68570,\"contractRoleSign\": 9}",
              "sol": "Definitions.ContractState(139,Definitions.ContractStatus.DL,4801,360,951,3999,60,120,68570,Definitions.ContractRole.OBL)"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.751ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [186,229,82,16,56,102,186,204,210,6,212,156,247,95,193,56,68,156,30,50,141,62,75,245,122,240,84,28,138,238,175,185],\"legalEntityIdCounterparty\": [18,83,132,203,43,55,151,143,129,134,4,77,227,156,239,41,182,161,64,251,195,106,133,230,234,58,185,61,105,128,212,236],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 361,\"statusDate\": 8,\"initialExchangeDate\": 4901,\"maturityDate\": 130,\"terminationDate\": 19,\"purchaseDate\": 70,\"capitalizationEndDate\": 2447,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 68570,\"cycleAnchorDateOfScalingIndex\": 4001,\"cycleAnchorDateOfFee\": 23,\"notionalPrincipal\": 146096,\"nominalInterestRate\": 31,\"feeAccrued\": 31,\"accruedInterest\": 29,\"rateMultiplier\": 21,\"rateSpread\": 27,\"feeRate\": 6,\"nextResetRate\": 15,\"penaltyRate\": 151,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 19,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 68568,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 15,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 146098,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 7,\"lifeFloor\": 5,\"periodCap\": 9,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"186,229,82,16,56,102,186,204,210,6,212,156,247,95,193,56,68,156,30,50,141,62,75,245,122,240,84,28,138,238,175,185\"),stringToBytes32(\"18,83,132,203,43,55,151,143,129,134,4,77,227,156,239,41,182,161,64,251,195,106,133,230,234,58,185,61,105,128,212,236\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,361,8,4901,130,19,70,2447,364,68570,4001,23,146096,31,31,29,21,27,6,15,151,364,13,Definitions.IPS(19,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(68568,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(15,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(146098,Definitions.P.D,Definitions.S.LONG,true),7,5,9,1532892063)"
            },
            {
              "js": "{\"lastEventTime\": 161,\"contractStatus\": 0,\"timeFromLastEvent\": 7,\"nominalValue\": 160,\"nominalAccrued\": 120,\"feeAccrued\": 4900,\"nominalRate\": 400,\"interestScalingMultiplier\": 364,\"nominalScalingMultiplier\": 86400,\"contractRoleSign\": 5}",
              "sol": "Definitions.ContractState(161,Definitions.ContractStatus.PF,7,160,120,4900,400,364,86400,Definitions.ContractRole.PFL)"
            },
            {
              "js": "{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 0,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 5}",
              "sol": "Definitions.ProtoEvent(49,146096,0,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR)"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.761ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [211,36,156,116,127,76,148,127,45,217,183,210,49,248,228,61,113,241,145,8,86,201,245,242,178,157,188,30,21,206,164,173],\"legalEntityIdCounterparty\": [89,179,45,171,131,76,59,241,203,47,99,115,226,192,226,15,131,125,56,11,68,98,173,0,247,10,206,93,108,147,199,69],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 26,\"statusDate\": 111,\"initialExchangeDate\": 4000,\"maturityDate\": 41,\"terminationDate\": 32,\"purchaseDate\": 1461,\"capitalizationEndDate\": 96,\"cycleAnchorDateOfInterestPayment\": 51,\"cycleAnchorDateOfRateReset\": 3999,\"cycleAnchorDateOfScalingIndex\": 32075,\"cycleAnchorDateOfFee\": 49,\"notionalPrincipal\": 19,\"nominalInterestRate\": 365,\"feeAccrued\": 89,\"accruedInterest\": 4800,\"rateMultiplier\": 40,\"rateSpread\": 4001,\"feeRate\": 86401,\"nextResetRate\": 361,\"penaltyRate\": 101,\"premiumDiscountAtIED\": 21,\"priceAtPurchaseDate\": 15,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32076,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 6,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 9999,\"lifeFloor\": 21,\"periodCap\": 1462,\"periodFloor\": 130}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"211,36,156,116,127,76,148,127,45,217,183,210,49,248,228,61,113,241,145,8,86,201,245,242,178,157,188,30,21,206,164,173\"),stringToBytes32(\"89,179,45,171,131,76,59,241,203,47,99,115,226,192,226,15,131,125,56,11,68,98,173,0,247,10,206,93,108,147,199,69\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,26,111,4000,41,32,1461,96,51,3999,32075,49,19,365,89,4800,40,4001,86401,361,101,21,15,Definitions.IPS(139,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(32076,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(6,Definitions.P.Q,Definitions.S.SHORT,true),9999,21,1462,130)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [130,56,49,26,183,135,36,202,19,146,196,218,19,48,57,41,94,60,55,40,1,99,172,255,10,90,107,204,231,132,175,157],\"legalEntityIdCounterparty\": [46,42,115,112,50,47,0,129,70,4,175,229,88,174,6,255,84,244,9,214,140,208,141,166,69,93,76,117,134,71,240,158],\"dayCountConvention\": 0,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2440587,\"statusDate\": 89,\"initialExchangeDate\": 21,\"maturityDate\": 257,\"terminationDate\": 25,\"purchaseDate\": 139,\"capitalizationEndDate\": 900,\"cycleAnchorDateOfInterestPayment\": 25,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 2014223714,\"cycleAnchorDateOfFee\": 4799,\"notionalPrincipal\": 949,\"nominalInterestRate\": 68569,\"feeAccrued\": 68568,\"accruedInterest\": 27,\"rateMultiplier\": 86399,\"rateSpread\": 900,\"feeRate\": 4899,\"nextResetRate\": 6,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 129,\"priceAtPurchaseDate\": 8,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 19,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 8,\"lifeFloor\": 159,\"periodCap\": 96,\"periodFloor\": 1971}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"130,56,49,26,183,135,36,202,19,146,196,218,19,48,57,41,94,60,55,40,1,99,172,255,10,90,107,204,231,132,175,157\"),stringToBytes32(\"46,42,115,112,50,47,0,129,70,4,175,229,88,174,6,255,84,244,9,214,140,208,141,166,69,93,76,117,134,71,240,158\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2440587,89,21,257,25,139,900,25,254,2014223714,4799,949,68569,68568,27,86399,900,4899,6,90,129,8,Definitions.IPS(4799,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(19,Definitions.P.Y,Definitions.S.LONG,true),8,159,96,1971)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [27,96,96,29,132,1,82,16,182,179,53,157,62,131,159,52,186,57,74,146,206,101,183,108,199,44,5,229,68,159,222,220],\"legalEntityIdCounterparty\": [182,27,182,146,205,193,198,105,222,107,39,40,175,123,118,12,48,179,197,36,88,125,179,169,100,2,70,71,217,71,24,173],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 51,\"statusDate\": 365,\"initialExchangeDate\": 1970,\"maturityDate\": 40,\"terminationDate\": 60,\"purchaseDate\": 4899,\"capitalizationEndDate\": 68570,\"cycleAnchorDateOfInterestPayment\": 151,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 24,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 25,\"nominalInterestRate\": 4799,\"feeAccrued\": 68568,\"accruedInterest\": 50,\"rateMultiplier\": 255,\"rateSpread\": 15,\"feeRate\": 2440587,\"nextResetRate\": 23,\"penaltyRate\": 70,\"premiumDiscountAtIED\": 28,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 63,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 14,\"lifeFloor\": 31,\"periodCap\": 368,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"27,96,96,29,132,1,82,16,182,179,53,157,62,131,159,52,186,57,74,146,206,101,183,108,199,44,5,229,68,159,222,220\"),stringToBytes32(\"182,27,182,146,205,193,198,105,222,107,39,40,175,123,118,12,48,179,197,36,88,125,179,169,100,2,70,71,217,71,24,173\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,51,365,1970,40,60,4899,68570,151,1461,24,2440588,25,4799,68568,50,255,15,2440587,23,70,28,899,Definitions.IPS(120,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(4,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(256,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(63,Definitions.P.W,Definitions.S.SHORT,true),14,31,368,81)"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [98,18,182,24,209,0,164,25,7,208,44,137,13,160,57,204,235,159,233,189,181,140,20,243,31,206,168,15,81,74,34,199],\"legalEntityIdCounterparty\": [23,103,245,96,179,60,35,87,12,152,240,186,216,191,182,208,144,127,36,10,15,104,66,44,236,55,188,237,244,163,2,18],\"dayCountConvention\": 5,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 99,\"initialExchangeDate\": 2014223716,\"maturityDate\": 950,\"terminationDate\": 16,\"purchaseDate\": 86400,\"capitalizationEndDate\": 101,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 9,\"notionalPrincipal\": 1461002,\"nominalInterestRate\": 32075,\"feeAccrued\": 91,\"accruedInterest\": 367,\"rateMultiplier\": 24,\"rateSpread\": 1461000,\"feeRate\": 79,\"nextResetRate\": 951,\"penaltyRate\": 4901,\"premiumDiscountAtIED\": 364,\"priceAtPurchaseDate\": 111,\"cycleOfInterestPayment\": {\"i\": 1461,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 16,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 79,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 80,\"lifeFloor\": 71,\"periodCap\": 1532892064,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"98,18,182,24,209,0,164,25,7,208,44,137,13,160,57,204,235,159,233,189,181,140,20,243,31,206,168,15,81,74,34,199\"),stringToBytes32(\"23,103,245,96,179,60,35,87,12,152,240,186,216,191,182,208,144,127,36,10,15,104,66,44,236,55,188,237,244,163,2,18\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,32,99,2014223716,950,16,86400,101,65,49,1461002,9,1461002,32075,91,367,24,1461000,79,951,4901,364,111,Definitions.IPS(1461,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(16,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(68568,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(79,Definitions.P.W,Definitions.S.SHORT,true),80,71,1532892064,64)"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [41,142,8,131,35,253,247,171,130,51,187,238,8,42,144,225,116,168,218,59,90,59,70,1,24,87,246,196,58,194,19,249],\"legalEntityIdCounterparty\": [249,172,171,104,129,172,248,54,61,84,100,23,176,34,87,27,196,214,226,196,160,115,43,166,88,252,104,148,243,235,226,83],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 950,\"statusDate\": 366,\"initialExchangeDate\": 2,\"maturityDate\": 10,\"terminationDate\": 81,\"purchaseDate\": 0,\"capitalizationEndDate\": 4,\"cycleAnchorDateOfInterestPayment\": 3999,\"cycleAnchorDateOfRateReset\": 130,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 120,\"nominalInterestRate\": 50,\"feeAccrued\": 21,\"accruedInterest\": 25,\"rateMultiplier\": 7,\"rateSpread\": 254,\"feeRate\": 68568,\"nextResetRate\": 2440589,\"penaltyRate\": 2014223715,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 2014223714,\"cycleOfInterestPayment\": {\"i\": 4800,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 146098,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1336,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 111,\"lifeFloor\": 5,\"periodCap\": 2,\"periodFloor\": 2447}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"41,142,8,131,35,253,247,171,130,51,187,238,8,42,144,225,116,168,218,59,90,59,70,1,24,87,246,196,58,194,19,249\"),stringToBytes32(\"249,172,171,104,129,172,248,54,61,84,100,23,176,34,87,27,196,214,226,196,160,115,43,166,88,252,104,148,243,235,226,83\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,950,366,2,10,81,0,4,3999,130,131,64,120,50,21,25,7,254,68568,2440589,2014223715,9,2014223714,Definitions.IPS(4800,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(1,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(146098,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1336,Definitions.P.H,Definitions.S.LONG,false),111,5,2,2447)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [147,13,156,239,82,148,207,136,2,232,238,163,205,91,53,180,60,227,218,47,168,75,61,173,193,84,103,151,108,184,177,88],\"legalEntityIdCounterparty\": [75,125,155,64,238,130,71,36,11,236,74,202,115,145,27,206,73,196,208,146,198,120,76,221,56,91,116,157,58,209,193,113],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2014223714,\"statusDate\": 19,\"initialExchangeDate\": 2447,\"maturityDate\": 12,\"terminationDate\": 32074,\"purchaseDate\": 86400,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 26,\"cycleAnchorDateOfScalingIndex\": 68570,\"cycleAnchorDateOfFee\": 368,\"notionalPrincipal\": 69,\"nominalInterestRate\": 401,\"feeAccrued\": 4001,\"accruedInterest\": 66,\"rateMultiplier\": 19,\"rateSpread\": 4000,\"feeRate\": 1461001,\"nextResetRate\": 2446,\"penaltyRate\": 950,\"premiumDiscountAtIED\": 2440588,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 32,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 159,\"lifeFloor\": 161,\"periodCap\": 79,\"periodFloor\": 1461001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"147,13,156,239,82,148,207,136,2,232,238,163,205,91,53,180,60,227,218,47,168,75,61,173,193,84,103,151,108,184,177,88\"),stringToBytes32(\"75,125,155,64,238,130,71,36,11,236,74,202,115,145,27,206,73,196,208,146,198,120,76,221,56,91,116,157,58,209,193,113\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2014223714,19,2447,12,32074,86400,8,13,26,68570,368,69,401,4001,66,19,4000,1461001,2446,950,2440588,89,Definitions.IPS(120,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(32,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(30,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.Q,Definitions.S.LONG,false),159,161,79,1461001)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [213,62,29,183,124,111,158,137,81,192,233,61,118,238,31,133,163,13,186,56,144,8,41,166,224,163,196,142,40,108,202,57],\"legalEntityIdCounterparty\": [132,115,98,65,25,205,118,69,182,176,241,148,204,37,204,244,132,200,229,191,114,121,165,134,144,214,169,157,97,68,34,245],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 86400,\"statusDate\": 86401,\"initialExchangeDate\": 32074,\"maturityDate\": 99,\"terminationDate\": 146098,\"purchaseDate\": 257,\"capitalizationEndDate\": 10000,\"cycleAnchorDateOfInterestPayment\": 1338,\"cycleAnchorDateOfRateReset\": 15,\"cycleAnchorDateOfScalingIndex\": 151,\"cycleAnchorDateOfFee\": 81,\"notionalPrincipal\": 25,\"nominalInterestRate\": 19,\"feeAccrued\": 130,\"accruedInterest\": 1461002,\"rateMultiplier\": 361,\"rateSpread\": 18,\"feeRate\": 39,\"nextResetRate\": 121,\"penaltyRate\": 80,\"premiumDiscountAtIED\": 6,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1462,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 2,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 1970,\"lifeFloor\": 65,\"periodCap\": 1337,\"periodFloor\": 255}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"213,62,29,183,124,111,158,137,81,192,233,61,118,238,31,133,163,13,186,56,144,8,41,166,224,163,196,142,40,108,202,57\"),stringToBytes32(\"132,115,98,65,25,205,118,69,182,176,241,148,204,37,204,244,132,200,229,191,114,121,165,134,144,214,169,157,97,68,34,245\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,86400,86401,32074,99,146098,257,10000,1338,15,151,81,25,19,130,1461002,361,18,39,121,80,6,368,Definitions.IPS(16,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1462,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(2,Definitions.P.D,Definitions.S.SHORT,false),1970,65,1337,255)"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [32,89,205,179,207,90,119,35,173,21,93,22,234,207,244,82,130,82,8,24,31,147,56,66,16,49,151,15,133,45,145,21],\"legalEntityIdCounterparty\": [33,6,197,14,233,79,22,211,242,63,111,118,94,20,150,216,219,108,173,56,131,23,214,177,177,47,24,18,237,219,188,203],\"dayCountConvention\": 5,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 3,\"statusDate\": 32076,\"initialExchangeDate\": 2,\"maturityDate\": 90,\"terminationDate\": 4900,\"purchaseDate\": 13,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2014223715,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 256,\"cycleAnchorDateOfFee\": 48,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 99,\"feeAccrued\": 129,\"accruedInterest\": 13,\"rateMultiplier\": 254,\"rateSpread\": 121,\"feeRate\": 89,\"nextResetRate\": 6,\"penaltyRate\": 48,\"premiumDiscountAtIED\": 256,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 16,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 399,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 365,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 401,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 900,\"lifeFloor\": 12,\"periodCap\": 12,\"periodFloor\": 61}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"32,89,205,179,207,90,119,35,173,21,93,22,234,207,244,82,130,82,8,24,31,147,56,66,16,49,151,15,133,45,145,21\"),stringToBytes32(\"33,6,197,14,233,79,22,211,242,63,111,118,94,20,150,216,219,108,173,56,131,23,214,177,177,47,24,18,237,219,188,203\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,3,32076,2,90,4900,13,0,2014223715,1336,256,48,32074,99,129,13,254,121,89,6,48,256,368,Definitions.IPS(16,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(399,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(365,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(401,Definitions.P.W,Definitions.S.LONG,true),900,12,12,61)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [199,191,111,178,234,16,141,21,154,244,84,66,65,146,90,254,165,221,68,159,80,224,135,184,200,45,98,226,188,93,165,39],\"legalEntityIdCounterparty\": [126,82,166,146,63,165,42,168,31,195,60,32,114,31,213,142,3,114,73,217,184,161,12,232,207,254,11,248,158,225,137,237],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 96,\"statusDate\": 1460,\"initialExchangeDate\": 149,\"maturityDate\": 24,\"terminationDate\": 31,\"purchaseDate\": 254,\"capitalizationEndDate\": 68568,\"cycleAnchorDateOfInterestPayment\": 16,\"cycleAnchorDateOfRateReset\": 71,\"cycleAnchorDateOfScalingIndex\": 361,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 160,\"nominalInterestRate\": 90,\"feeAccrued\": 99,\"accruedInterest\": 15,\"rateMultiplier\": 70,\"rateSpread\": 26,\"feeRate\": 2446,\"nextResetRate\": 29,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 2447,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 129,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4899,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 257,\"lifeFloor\": 110,\"periodCap\": 1,\"periodFloor\": 64}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"199,191,111,178,234,16,141,21,154,244,84,66,65,146,90,254,165,221,68,159,80,224,135,184,200,45,98,226,188,93,165,39\"),stringToBytes32(\"126,82,166,146,63,165,42,168,31,195,60,32,114,31,213,142,3,114,73,217,184,161,12,232,207,254,11,248,158,225,137,237\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,96,1460,149,24,31,254,68568,16,71,361,32074,160,90,99,15,70,26,2446,29,96,1462,4899,Definitions.IPS(4900,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(2447,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(129,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4899,Definitions.P.H,Definitions.S.LONG,false),257,110,1,64)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [59,126,106,130,201,212,27,135,173,104,221,198,70,164,69,54,91,108,189,228,146,122,24,182,19,51,206,41,110,60,58,38],\"legalEntityIdCounterparty\": [121,41,67,69,96,95,153,182,251,173,164,72,145,254,240,196,229,39,132,146,46,23,231,38,104,152,171,192,98,225,111,202],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2014223715,\"statusDate\": 0,\"initialExchangeDate\": 7,\"maturityDate\": 2440587,\"terminationDate\": 40,\"purchaseDate\": 86401,\"capitalizationEndDate\": 359,\"cycleAnchorDateOfInterestPayment\": 400,\"cycleAnchorDateOfRateReset\": 12,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 81,\"nominalInterestRate\": 3999,\"feeAccrued\": 15,\"accruedInterest\": 140,\"rateMultiplier\": 1461000,\"rateSpread\": 23,\"feeRate\": 13,\"nextResetRate\": 2440589,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 30,\"priceAtPurchaseDate\": 1337,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 29,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 161,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 9,\"lifeFloor\": 949,\"periodCap\": 39,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"59,126,106,130,201,212,27,135,173,104,221,198,70,164,69,54,91,108,189,228,146,122,24,182,19,51,206,41,110,60,58,38\"),stringToBytes32(\"121,41,67,69,96,95,153,182,251,173,164,72,145,254,240,196,229,39,132,146,46,23,231,38,104,152,171,192,98,225,111,202\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2014223715,0,7,2440587,40,86401,359,400,12,2448,2,81,3999,15,140,1461000,23,13,2440589,49,30,1337,Definitions.IPS(97,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(29,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(161,Definitions.P.W,Definitions.S.SHORT,true),9,949,39,2)"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [81,140,182,56,230,159,99,169,126,199,113,88,234,178,152,83,137,111,41,11,170,139,54,34,143,132,224,38,232,139,170,108],\"legalEntityIdCounterparty\": [184,139,51,179,10,181,221,224,73,88,36,4,181,243,187,7,134,107,107,231,173,36,191,109,3,211,147,245,36,96,175,221],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 79,\"statusDate\": 1337,\"initialExchangeDate\": 1970,\"maturityDate\": 65,\"terminationDate\": 1461001,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4900,\"cycleAnchorDateOfRateReset\": 1337,\"cycleAnchorDateOfScalingIndex\": 361,\"cycleAnchorDateOfFee\": 15,\"notionalPrincipal\": 81,\"nominalInterestRate\": 0,\"feeAccrued\": 4799,\"accruedInterest\": 1462,\"rateMultiplier\": 89,\"rateSpread\": 899,\"feeRate\": 1,\"nextResetRate\": 99,\"penaltyRate\": 31,\"premiumDiscountAtIED\": 368,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 131,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1461002,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1532892064,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 16,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 949,\"lifeFloor\": 110,\"periodCap\": 151,\"periodFloor\": 66}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"81,140,182,56,230,159,99,169,126,199,113,88,234,178,152,83,137,111,41,11,170,139,54,34,143,132,224,38,232,139,170,108\"),stringToBytes32(\"184,139,51,179,10,181,221,224,73,88,36,4,181,243,187,7,134,107,107,231,173,36,191,109,3,211,147,245,36,96,175,221\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.N,79,1337,1970,65,1461001,0,0,4900,1337,361,15,81,0,4799,1462,89,899,1,99,31,368,40,Definitions.IPS(131,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(1461002,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1532892064,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(16,Definitions.P.D,Definitions.S.SHORT,true),949,110,151,66)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [198,21,99,108,184,229,30,98,207,119,249,2,126,75,149,219,205,150,133,81,55,28,33,234,156,105,32,81,103,178,89,36],\"legalEntityIdCounterparty\": [42,65,83,247,170,158,118,177,47,231,153,42,108,247,244,113,134,90,147,196,189,142,21,194,229,148,18,243,34,148,59,206],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4000,\"statusDate\": 10000,\"initialExchangeDate\": 86401,\"maturityDate\": 9,\"terminationDate\": 1532892063,\"purchaseDate\": 1532892062,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 257,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 1532892063,\"cycleAnchorDateOfFee\": 1462,\"notionalPrincipal\": 29,\"nominalInterestRate\": 30,\"feeAccrued\": 64,\"accruedInterest\": 28,\"rateMultiplier\": 39,\"rateSpread\": 1969,\"feeRate\": 1461,\"nextResetRate\": 63,\"penaltyRate\": 146097,\"premiumDiscountAtIED\": 4000,\"priceAtPurchaseDate\": 6,\"cycleOfInterestPayment\": {\"i\": 159,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86400,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 9999,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 257,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 66,\"lifeFloor\": 2440588,\"periodCap\": 366,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"198,21,99,108,184,229,30,98,207,119,249,2,126,75,149,219,205,150,133,81,55,28,33,234,156,105,32,81,103,178,89,36\"),stringToBytes32(\"42,65,83,247,170,158,118,177,47,231,153,42,108,247,244,113,134,90,147,196,189,142,21,194,229,148,18,243,34,148,59,206\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4000,10000,86401,9,1532892063,1532892062,1532892062,257,48,1532892063,1462,29,30,64,28,39,1969,1461,63,146097,4000,6,Definitions.IPS(159,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(86400,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(9999,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(257,Definitions.P.Y,Definitions.S.SHORT,false),66,2440588,366,949)"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [90,24,71,180,34,181,157,151,22,249,253,149,171,213,2,100,22,105,170,227,145,48,158,143,80,183,253,80,87,246,151,229],\"legalEntityIdCounterparty\": [146,218,7,222,246,61,195,106,240,1,83,182,161,252,35,234,56,23,180,68,120,174,244,167,131,98,230,249,83,39,46,246],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 1462,\"statusDate\": 4000,\"initialExchangeDate\": 81,\"maturityDate\": 255,\"terminationDate\": 25,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 119,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 51,\"cycleAnchorDateOfFee\": 86399,\"notionalPrincipal\": 129,\"nominalInterestRate\": 0,\"feeAccrued\": 899,\"accruedInterest\": 110,\"rateMultiplier\": 119,\"rateSpread\": 27,\"feeRate\": 86401,\"nextResetRate\": 101,\"penaltyRate\": 26,\"premiumDiscountAtIED\": 10,\"priceAtPurchaseDate\": 151,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 120,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 21,\"lifeFloor\": 109,\"periodCap\": 4000,\"periodFloor\": 365}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"90,24,71,180,34,181,157,151,22,249,253,149,171,213,2,100,22,105,170,227,145,48,158,143,80,183,253,80,87,246,151,229\"),stringToBytes32(\"146,218,7,222,246,61,195,106,240,1,83,182,161,252,35,234,56,23,180,68,120,174,244,167,131,98,230,249,83,39,46,246\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,1462,4000,81,255,25,0,0,119,0,51,86399,129,0,899,110,119,27,86401,101,26,10,151,Definitions.IPS(368,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(120,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,true),21,109,4000,365)"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [220,100,86,10,201,165,207,246,237,127,176,48,226,77,1,203,169,76,207,176,231,197,11,209,199,99,96,174,143,124,51,129],\"legalEntityIdCounterparty\": [75,131,249,230,53,90,236,116,35,197,97,50,101,3,233,220,88,243,205,122,73,65,127,71,25,130,66,162,51,115,206,156],\"dayCountConvention\": 2,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 361,\"statusDate\": 68569,\"initialExchangeDate\": 86399,\"maturityDate\": 28,\"terminationDate\": 66,\"purchaseDate\": 129,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 2014223715,\"cycleAnchorDateOfFee\": 900,\"notionalPrincipal\": 31,\"nominalInterestRate\": 89,\"feeAccrued\": 90,\"accruedInterest\": 401,\"rateMultiplier\": 100,\"rateSpread\": 111,\"feeRate\": 68568,\"nextResetRate\": 86399,\"penaltyRate\": 951,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 31,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 70,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1532892062,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 7,\"periodCap\": 15,\"periodFloor\": 30}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"220,100,86,10,201,165,207,246,237,127,176,48,226,77,1,203,169,76,207,176,231,197,11,209,199,99,96,174,143,124,51,129\"),stringToBytes32(\"75,131,249,230,53,90,236,116,35,197,97,50,101,3,233,220,88,243,205,122,73,65,127,71,25,130,66,162,51,115,206,156\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,361,68569,86399,28,66,129,8,2440588,11,2014223715,900,31,89,90,401,100,111,68568,86399,951,5,159,Definitions.IPS(368,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(70,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1532892062,Definitions.P.M,Definitions.S.LONG,true),1461002,7,15,30)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [136,194,56,235,139,53,20,166,151,118,7,156,23,215,191,60,100,26,29,183,83,247,152,8,67,0,249,223,93,182,33,25],\"legalEntityIdCounterparty\": [95,212,26,250,23,91,109,41,111,107,180,17,91,141,205,18,111,142,163,237,133,54,64,222,53,197,122,69,123,231,46,89],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 111,\"statusDate\": 4901,\"initialExchangeDate\": 4000,\"maturityDate\": 90,\"terminationDate\": 81,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 4000,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 89,\"nominalInterestRate\": 0,\"feeAccrued\": 18,\"accruedInterest\": 68569,\"rateMultiplier\": 25,\"rateSpread\": 2447,\"feeRate\": 69,\"nextResetRate\": 4901,\"penaltyRate\": 66,\"premiumDiscountAtIED\": 30,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 146098,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 401,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 140,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 1460,\"lifeFloor\": 66,\"periodCap\": 5,\"periodFloor\": 99}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"136,194,56,235,139,53,20,166,151,118,7,156,23,215,191,60,100,26,29,183,83,247,152,8,67,0,249,223,93,182,33,25\"),stringToBytes32(\"95,212,26,250,23,91,109,41,111,107,180,17,91,141,205,18,111,142,163,237,133,54,64,222,53,197,122,69,123,231,46,89\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,111,4901,4000,90,81,0,0,4000,1461,141,0,89,0,18,68569,25,2447,69,4901,66,30,68568,Definitions.IPS(146098,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(401,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(140,Definitions.P.W,Definitions.S.SHORT,true),1460,66,5,99)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [192,235,227,96,37,44,92,168,174,96,82,221,98,3,9,201,124,59,110,88,52,236,210,64,198,71,11,65,40,105,97,66],\"legalEntityIdCounterparty\": [74,147,96,137,99,19,254,230,138,171,181,79,74,76,5,252,239,198,92,221,166,196,208,155,45,48,139,190,71,50,27,77],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 2014223714,\"statusDate\": 401,\"initialExchangeDate\": 97,\"maturityDate\": 1460,\"terminationDate\": 23,\"purchaseDate\": 63,\"capitalizationEndDate\": 69,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 68568,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 10001,\"nominalInterestRate\": 30,\"feeAccrued\": 18,\"accruedInterest\": 2448,\"rateMultiplier\": 26,\"rateSpread\": 1461000,\"feeRate\": 101,\"nextResetRate\": 14,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 39,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 140,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 31,\"p\": 3,\"s\": 1,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 0,\"periodCap\": 1460,\"periodFloor\": 2014223715}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"192,235,227,96,37,44,92,168,174,96,82,221,98,3,9,201,124,59,110,88,52,236,210,64,198,71,11,65,40,105,97,66\"),stringToBytes32(\"74,147,96,137,99,19,254,230,138,171,181,79,74,76,5,252,239,198,92,221,166,196,208,155,45,48,139,190,71,50,27,77\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,2014223714,401,97,1460,23,63,69,364,0,68568,96,10001,30,18,2448,26,1461000,101,14,146096,1336,949,Definitions.IPS(39,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(140,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(3999,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(31,Definitions.P.Q,Definitions.S.SHORT,false),18,0,1460,2014223715)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [164,223,128,251,46,163,118,108,97,214,216,53,99,41,225,249,229,24,253,50,103,170,233,82,43,147,134,140,36,156,0,122],\"legalEntityIdCounterparty\": [131,86,235,47,81,21,88,41,230,135,76,230,135,209,244,245,127,79,119,184,219,203,224,48,218,130,92,12,230,182,224,105],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 399,\"initialExchangeDate\": 129,\"maturityDate\": 29,\"terminationDate\": 1971,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 139,\"cycleAnchorDateOfRateReset\": 400,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 95,\"nominalInterestRate\": 0,\"feeAccrued\": 4899,\"accruedInterest\": 5,\"rateMultiplier\": 24,\"rateSpread\": 24,\"feeRate\": 65,\"nextResetRate\": 68568,\"penaltyRate\": 68568,\"premiumDiscountAtIED\": 91,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 1532892064,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 257,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 25,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 139,\"lifeFloor\": 2,\"periodCap\": 140,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"164,223,128,251,46,163,118,108,97,214,216,53,99,41,225,249,229,24,253,50,103,170,233,82,43,147,134,140,36,156,0,122\"),stringToBytes32(\"131,86,235,47,81,21,88,41,230,135,76,230,135,209,244,245,127,79,119,184,219,203,224,48,218,130,92,12,230,182,224,105\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,21,399,129,29,1971,0,0,139,400,0,26,95,0,4899,5,24,24,65,68568,68568,91,146097,Definitions.IPS(1532892064,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(257,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(25,Definitions.P.Y,Definitions.S.LONG,true),139,2,140,68569)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [149,171,251,40,64,173,4,18,102,246,198,167,131,156,126,151,146,74,106,104,158,7,217,208,192,83,117,229,30,190,228,224],\"legalEntityIdCounterparty\": [17,158,101,90,213,57,233,135,109,96,235,246,172,32,200,234,56,174,227,182,162,215,92,70,242,84,137,16,107,71,34,216],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 65,\"statusDate\": 255,\"initialExchangeDate\": 4,\"maturityDate\": 39,\"terminationDate\": 32075,\"purchaseDate\": 18,\"capitalizationEndDate\": 119,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 68569,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 89,\"nominalInterestRate\": 19,\"feeAccrued\": 23,\"accruedInterest\": 1,\"rateMultiplier\": 4899,\"rateSpread\": 146098,\"feeRate\": 367,\"nextResetRate\": 151,\"penaltyRate\": 32076,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 86399,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 120,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1969,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 49,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 20,\"lifeFloor\": 91,\"periodCap\": 32076,\"periodFloor\": 3999}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"149,171,251,40,64,173,4,18,102,246,198,167,131,156,126,151,146,74,106,104,158,7,217,208,192,83,117,229,30,190,228,224\"),stringToBytes32(\"17,158,101,90,213,57,233,135,109,96,235,246,172,32,200,234,56,174,227,182,162,215,92,70,242,84,137,16,107,71,34,216\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,65,255,4,39,32075,18,119,1460,1336,68569,32075,89,19,23,1,4899,146098,367,151,32076,9,1,Definitions.IPS(86399,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(120,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(49,Definitions.P.D,Definitions.S.LONG,true),20,91,32076,3999)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [33,51,174,118,196,231,92,47,35,57,22,197,253,7,93,122,209,1,179,184,176,228,175,37,120,23,97,208,81,43,31,42],\"legalEntityIdCounterparty\": [54,210,215,75,37,146,78,116,228,236,52,138,92,156,51,33,132,112,127,251,102,137,47,9,105,22,74,76,15,233,100,103],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 361,\"statusDate\": 161,\"initialExchangeDate\": 4800,\"maturityDate\": 4000,\"terminationDate\": 2440587,\"purchaseDate\": 26,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 151,\"cycleAnchorDateOfScalingIndex\": 1461002,\"cycleAnchorDateOfFee\": 68568,\"notionalPrincipal\": 28,\"nominalInterestRate\": 89,\"feeAccrued\": 146098,\"accruedInterest\": 900,\"rateMultiplier\": 139,\"rateSpread\": 146098,\"feeRate\": 1970,\"nextResetRate\": 130,\"penaltyRate\": 159,\"premiumDiscountAtIED\": 160,\"priceAtPurchaseDate\": 70,\"cycleOfInterestPayment\": {\"i\": 1970,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 95,\"lifeFloor\": 151,\"periodCap\": 1460,\"periodFloor\": 25}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"33,51,174,118,196,231,92,47,35,57,22,197,253,7,93,122,209,1,179,184,176,228,175,37,120,23,97,208,81,43,31,42\"),stringToBytes32(\"54,210,215,75,37,146,78,116,228,236,52,138,92,156,51,33,132,112,127,251,102,137,47,9,105,22,74,76,15,233,100,103\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,361,161,4800,4000,2440587,26,30,71,151,1461002,68568,28,89,146098,900,139,146098,1970,130,159,160,70,Definitions.IPS(1970,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2014223716,Definitions.P.Y,Definitions.S.SHORT,false),95,151,1460,25)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [121,154,22,138,166,120,207,239,125,190,227,219,112,253,72,176,20,131,126,44,14,26,134,105,156,102,245,151,110,116,222,192],\"legalEntityIdCounterparty\": [162,122,220,183,136,217,46,129,72,220,106,254,176,109,180,221,85,39,109,189,70,166,216,110,71,202,75,11,139,45,122,80],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 160,\"statusDate\": 8,\"initialExchangeDate\": 367,\"maturityDate\": 1461,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 366,\"cycleAnchorDateOfRateReset\": 1336,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 1338,\"notionalPrincipal\": 40,\"nominalInterestRate\": 0,\"feeAccrued\": 254,\"accruedInterest\": 64,\"rateMultiplier\": 39,\"rateSpread\": 2440588,\"feeRate\": 159,\"nextResetRate\": 7,\"penaltyRate\": 131,\"premiumDiscountAtIED\": 368,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 949,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1970,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 146096,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 95,\"lifeFloor\": 2,\"periodCap\": 1336,\"periodFloor\": 1336}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"121,154,22,138,166,120,207,239,125,190,227,219,112,253,72,176,20,131,126,44,14,26,134,105,156,102,245,151,110,116,222,192\"),stringToBytes32(\"162,122,220,183,136,217,46,129,72,220,106,254,176,109,180,221,85,39,109,189,70,166,216,110,71,202,75,11,139,45,122,80\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,160,8,367,1461,0,0,0,366,1336,96,1338,40,0,254,64,39,2440588,159,7,131,368,365,Definitions.IPS(1969,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(949,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1970,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(146096,Definitions.P.H,Definitions.S.LONG,true),95,2,1336,1336)"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [213,168,217,43,151,79,11,84,243,116,106,17,233,72,211,34,8,200,74,153,64,253,69,25,101,44,159,20,223,19,201,226],\"legalEntityIdCounterparty\": [251,195,47,25,165,96,130,32,9,59,87,224,174,102,64,198,96,216,104,178,79,228,117,83,18,215,35,159,225,142,22,181],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 3,\"statusDate\": 1532892062,\"initialExchangeDate\": 5,\"maturityDate\": 257,\"terminationDate\": 146096,\"purchaseDate\": 1338,\"capitalizationEndDate\": 23,\"cycleAnchorDateOfInterestPayment\": 1971,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 901,\"cycleAnchorDateOfFee\": 2446,\"notionalPrincipal\": 81,\"nominalInterestRate\": 951,\"feeAccrued\": 68568,\"accruedInterest\": 4901,\"rateMultiplier\": 4,\"rateSpread\": 15,\"feeRate\": 97,\"nextResetRate\": 64,\"penaltyRate\": 1969,\"premiumDiscountAtIED\": 1,\"priceAtPurchaseDate\": 97,\"cycleOfInterestPayment\": {\"i\": 95,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 86400,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 61,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 141,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 2447,\"lifeFloor\": 68569,\"periodCap\": 2447,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"213,168,217,43,151,79,11,84,243,116,106,17,233,72,211,34,8,200,74,153,64,253,69,25,101,44,159,20,223,19,201,226\"),stringToBytes32(\"251,195,47,25,165,96,130,32,9,59,87,224,174,102,64,198,96,216,104,178,79,228,117,83,18,215,35,159,225,142,22,181\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,3,1532892062,5,257,146096,1338,23,1971,65,901,2446,81,951,68568,4901,4,15,97,64,1969,1,97,Definitions.IPS(95,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(86400,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(61,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(141,Definitions.P.Q,Definitions.S.LONG,true),2447,68569,2447,139)"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [145,52,242,183,246,78,134,192,237,78,59,89,176,7,69,206,154,121,111,194,249,251,36,224,163,201,205,109,206,241,221,151],\"legalEntityIdCounterparty\": [28,132,152,222,242,154,188,204,54,115,177,148,47,224,226,17,184,117,78,99,166,124,44,227,34,236,202,43,140,111,142,73],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 14,\"statusDate\": 2014223716,\"initialExchangeDate\": 48,\"maturityDate\": 32074,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68568,\"cycleAnchorDateOfRateReset\": 146098,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 950,\"notionalPrincipal\": 899,\"nominalInterestRate\": 0,\"feeAccrued\": 95,\"accruedInterest\": 5,\"rateMultiplier\": 151,\"rateSpread\": 95,\"feeRate\": 19,\"nextResetRate\": 9999,\"penaltyRate\": 365,\"premiumDiscountAtIED\": 40,\"priceAtPurchaseDate\": 2014223715,\"cycleOfInterestPayment\": {\"i\": 2446,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 151,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 79,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 96,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 101,\"lifeFloor\": 254,\"periodCap\": 1336,\"periodFloor\": 146098}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"145,52,242,183,246,78,134,192,237,78,59,89,176,7,69,206,154,121,111,194,249,251,36,224,163,201,205,109,206,241,221,151\"),stringToBytes32(\"28,132,152,222,242,154,188,204,54,115,177,148,47,224,226,17,184,117,78,99,166,124,44,227,34,236,202,43,140,111,142,73\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,14,2014223716,48,32074,0,0,0,68568,146098,20,950,899,0,95,5,151,95,19,9999,365,40,2014223715,Definitions.IPS(2446,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(151,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(79,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.M,Definitions.S.LONG,false),101,254,1336,146098)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.808ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T05:00:54.831ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}