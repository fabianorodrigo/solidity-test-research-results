,{
  "2020-11-13T05:31:39.281ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "119",
                "sol": "119"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.283ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.284ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.285ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.286ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.286ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.287ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.289ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.291ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.291ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.291ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.292ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.292ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.293ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.307ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.308ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.309ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.309ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.310ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.310ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.310ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.311ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.311ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.312ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.312ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.313ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.313ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.313ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.314ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.314ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.315ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.315ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.316ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.316ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440590,
                "sol": 2440590
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.317ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 71,
                "sol": 71
              },
              {
                "js": "70",
                "sol": "70"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.319ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.320ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892064,
                "sol": 1532892064
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.320ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 140,
                "sol": 140
              },
              {
                "js": "139",
                "sol": "139"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.321ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 4801,
                "sol": 4801
              },
              {
                "js": "4800",
                "sol": "4800"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.323ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.324ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "361",
                "sol": "361"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.326ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractRole.ST"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.ContractRole.GUA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.336ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "2447",
                "sol": "2447"
              },
              {
                "js": 2446,
                "sol": 2446
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "18",
                "sol": "18"
              },
              {
                "js": 17,
                "sol": 17
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "149",
                "sol": "149"
              },
              {
                "js": 148,
                "sol": 148
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "69",
                "sol": "69"
              },
              {
                "js": 68,
                "sol": 68
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": 6,
              "sol": "Definitions.DayCountConvention.BUS_252"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "12",
                "sol": "12"
              },
              {
                "js": 11,
                "sol": 11
              },
              {
                "js": 6,
                "sol": "Definitions.DayCountConvention.BUS_252"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T05:31:39.341ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.341ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.342ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.343ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.344ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{\"i\": 111,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(111,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 32,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{\"i\": 23,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(23,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{\"i\": 900,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(900,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.346ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.348ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.349ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.352ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.356ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.359ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.360ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.366ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 120,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(120,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 21,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(21,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 4900,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(4900,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 130,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(130,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 41,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(41,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 901,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(901,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 950,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.371ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{\"i\": 91,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(91,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "{\"i\": 0,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(0,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{\"i\": 4901,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4901,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "{\"i\": 12,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(12,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{\"i\": 4799,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4799,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{\"i\": 399,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(399,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{\"i\": 10000,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(10000,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{\"i\": 50,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(50,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{\"i\": 28,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(28,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.380ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 150,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(150,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 21,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(21,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 0,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(0,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 90,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(90,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 17,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(17,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 949,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(949,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 1460,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.383ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 141,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 1},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 2440588,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 96,\"eventType\": 6,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 3999,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 4900,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 2},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 32074,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 4799,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 6},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 90,\"eventType\": 8,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 32076,\"scheduleTime\": 66,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 0},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 32074,\"eventType\": 2,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 254,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 1337,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 6},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 12,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 68568,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 2},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 4900,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 10000,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 1461001,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 14},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 9999,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 949,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 16},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 361,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 4},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 68570,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 61,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 6},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 61,\"scheduleTime\": 2447,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 4,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 254,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 9},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 1532892064,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 19},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 31,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 9,\"stfType\": 3},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 2448,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 4900,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 4,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 2447,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 7},{\"eventTime\": 48,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 899,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 9},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 65,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 27,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 17},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 6,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 10,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 149,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 8,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 20},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 255,\"eventType\": 12,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 400,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 63,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 59,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 4,\"stfType\": 14},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 130,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 60,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 10},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 9999,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 9999,\"eventType\": 12,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 256,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 96,\"eventTimeWithEpochOffset\": 1532892064,\"scheduleTime\": 4000,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 1461,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 899,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 6},{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 1461000,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 7,\"scheduleTime\": 48,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 12},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 15,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 1},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 59,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 2},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 5,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 1337,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 1461002,\"eventType\": 0,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 97,\"eventType\": 19,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 2440587,\"scheduleTime\": 40,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 1969,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 79,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 61,\"eventType\": 0,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 139,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 59,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 10}]",
              "sol": "[Definitions.ProtoEvent(131,60,141,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.MD),Definitions.ProtoEvent(1461,4000,2440588,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(1969,361,96,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(23,2446,3999,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(99,31,4900,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.AD),Definitions.ProtoEvent(129,4,32074,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(9,40,4799,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PP),Definitions.ProtoEvent(1337,121,90,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(21,32076,66,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.SD),Definitions.ProtoEvent(9,359,32074,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(9999,31,254,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461,21,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(159,49,1337,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PP),Definitions.ProtoEvent(97,899,12,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(20,68569,68568,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.AD),Definitions.ProtoEvent(32075,2447,4900,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(4899,6,10000,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(400,1532892064,1461001,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SC),Definitions.ProtoEvent(140,60,9999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(111,1461001,949,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.DV),Definitions.ProtoEvent(131,91,361,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IP),Definitions.ProtoEvent(0,90,68570,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(4000,899,61,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PP),Definitions.ProtoEvent(1338,61,2447,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(26,119,4,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(3,51,254,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PRD),Definitions.ProtoEvent(140,146097,1532892064,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.STD),Definitions.ProtoEvent(2440588,901,31,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IED),Definitions.ProtoEvent(1970,86400,2448,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(146096,2447,4900,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(10001,9999,4,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(39,1461,2447,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PY),Definitions.ProtoEvent(48,1461002,899,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PRD),Definitions.ProtoEvent(15,4000,65,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(70,129,27,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MR),Definitions.ProtoEvent(141,69,6,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(10,1969,149,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4,1532892062,8,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.Child),Definitions.ProtoEvent(50,95,255,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(14,4801,400,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(7,15,63,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PRD),Definitions.ProtoEvent(129,150,59,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.SC),Definitions.ProtoEvent(4801,4,130,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(65,2014223715,60,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.TD),Definitions.ProtoEvent(9,2,9999,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(17,2446,9999,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(30,400,256,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(96,1532892064,4000,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(119,4901,1461,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(1336,8,899,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP),Definitions.ProtoEvent(111,2448,1461000,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(10001,7,48,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.RR),Definitions.ProtoEvent(1336,1970,15,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MD),Definitions.ProtoEvent(368,1461002,59,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.AD),Definitions.ProtoEvent(21,141,5,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(120,899,1337,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(2447,1461001,1461002,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(79,18,97,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(129,2440587,40,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(66,90,1969,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(4001,951,79,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(1969,68569,61,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(1337,151,139,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(1971,19,59,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.TD)]"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.399ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 2014223714,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 2440588,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 1532892062,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 146096,\"eventType\": 3,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 109,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 1971,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 159,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 7,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 19},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1461001,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 2447,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 7},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 360,\"scheduleTime\": 71,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 139,\"eventType\": 6,\"currency\": accounts[8],\"pofType\": 11,\"stfType\": 13},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 48,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 17},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 70,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 10001,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 14},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 21,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 10000,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4799,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 10},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 401,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 97,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 1532892064,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 119,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 25,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 131,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 120,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 366,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 7,\"stfType\": 7},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 80,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 16},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 361,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 4801,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 20,\"stfType\": 0},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 366,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 20},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 1461001,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 1532892062,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 12},{\"eventTime\": 951,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 6,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 63,\"eventType\": 13,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 11},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 28,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 12},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 364,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 25,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 9},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 66,\"eventType\": 3,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 20,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 4799,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 146097,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 3999,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 15},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 12,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 17,\"stfType\": 3},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 367,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 949,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 6},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 400,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 10,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 14},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 900,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 2014223714,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 64,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 401,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 89,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 16},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 3,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 15,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 0,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 0},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 26,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 10},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 1461000,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 10,\"stfType\": 11},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 4800,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 17},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 129,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 20},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 2014223714,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 8},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 81,\"scheduleTime\": 361,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 29,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 14,\"eventType\": 7,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 101,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 79,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(2014223714,3,2440588,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(23,26,1532892062,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(10000,40,146096,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(366,949,109,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(101,65,1971,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(70,150,159,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(41,110,7,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.STD),Definitions.ProtoEvent(1532892064,900,1461001,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(139,28,2447,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PY),Definitions.ProtoEvent(899,360,71,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(86399,161,139,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.RRY),Definitions.ProtoEvent(4799,129,48,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MR),Definitions.ProtoEvent(64,24,70,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(366,2014223715,10001,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC),Definitions.ProtoEvent(14,109,21,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(140,2447,10000,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(68568,4801,4799,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.TD),Definitions.ProtoEvent(4001,10000,401,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(2440589,79,97,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(18,901,1532892064,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(256,900,119,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(141,27,25,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(79,9999,131,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(81,25,120,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(2,9,366,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PY),Definitions.ProtoEvent(79,1461000,80,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.DV),Definitions.ProtoEvent(68569,1461002,361,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(3999,40,4801,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SD),Definitions.ProtoEvent(4000,159,366,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.Child),Definitions.ProtoEvent(120,160,1461001,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(26,80,1532892062,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RR),Definitions.ProtoEvent(951,1461002,6,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(146096,4899,63,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCI),Definitions.ProtoEvent(8,59,28,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.RR),Definitions.ProtoEvent(1461,130,364,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(4801,39,25,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PRD),Definitions.ProtoEvent(99,13,66,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(14,899,20,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(63,24,4799,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(68568,950,146097,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(1461000,129,3999,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.CD),Definitions.ProtoEvent(2014223716,66,12,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IED),Definitions.ProtoEvent(1,1532892063,367,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(367,9999,949,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PP),Definitions.ProtoEvent(364,4901,400,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(110,2,10,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.SC),Definitions.ProtoEvent(13,70,900,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(69,96,2014223714,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(400,160,64,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(81,27,401,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(400,399,89,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.DV),Definitions.ProtoEvent(149,2014223714,3,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(66,254,15,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(1532892064,1532892062,0,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SD),Definitions.ProtoEvent(14,111,26,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD),Definitions.ProtoEvent(71,49,1461000,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCI),Definitions.ProtoEvent(141,96,4800,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MR),Definitions.ProtoEvent(91,1461002,129,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.Child),Definitions.ProtoEvent(41,51,2014223714,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.FP),Definitions.ProtoEvent(80,81,361,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(32074,49,29,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(150,24,14,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(151,151,101,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(361,68569,79,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY)]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.421ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.423ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [251,159,6,203,253,100,54,139,243,196,103,21,18,192,215,106,16,185,70,140,158,179,215,88,140,245,91,162,221,48,50,183],\"legalEntityIdCounterparty\": [117,214,244,8,165,53,100,224,177,185,27,106,191,144,204,143,35,134,124,151,24,144,81,87,209,76,220,131,93,85,189,177],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 131,\"statusDate\": 149,\"initialExchangeDate\": 1462,\"maturityDate\": 146096,\"terminationDate\": 111,\"purchaseDate\": 101,\"capitalizationEndDate\": 949,\"cycleAnchorDateOfInterestPayment\": 0,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 99,\"notionalPrincipal\": 81,\"nominalInterestRate\": 68570,\"feeAccrued\": 368,\"accruedInterest\": 25,\"rateMultiplier\": 64,\"rateSpread\": 901,\"feeRate\": 91,\"nextResetRate\": 3999,\"penaltyRate\": 86401,\"premiumDiscountAtIED\": 129,\"priceAtPurchaseDate\": 161,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1460,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 18,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 129,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 130,\"lifeFloor\": 1971,\"periodCap\": 86401,\"periodFloor\": 1532892064}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"251,159,6,203,253,100,54,139,243,196,103,21,18,192,215,106,16,185,70,140,158,179,215,88,140,245,91,162,221,48,50,183\"),stringToBytes32(\"117,214,244,8,165,53,100,224,177,185,27,106,191,144,204,143,35,134,124,151,24,144,81,87,209,76,220,131,93,85,189,177\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,131,149,1462,146096,111,101,949,0,1461,20,99,81,68570,368,25,64,901,91,3999,86401,129,161,Definitions.IPS(368,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(18,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(129,Definitions.P.D,Definitions.S.SHORT,false),130,1971,86401,1532892064)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.425ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [94,219,70,58,166,84,117,27,38,23,63,115,47,178,168,67,239,20,65,139,37,162,235,76,204,37,98,190,148,83,61,27],\"legalEntityIdCounterparty\": [197,166,122,123,162,94,50,243,195,215,89,48,0,14,27,7,120,187,211,203,58,167,134,168,160,163,163,232,33,224,157,211],\"dayCountConvention\": 3,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1461002,\"statusDate\": 2447,\"initialExchangeDate\": 4800,\"maturityDate\": 151,\"terminationDate\": 1337,\"purchaseDate\": 24,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 361,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 63,\"notionalPrincipal\": 899,\"nominalInterestRate\": 66,\"feeAccrued\": 59,\"accruedInterest\": 366,\"rateMultiplier\": 5,\"rateSpread\": 4900,\"feeRate\": -1,\"nextResetRate\": 39,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 366,\"priceAtPurchaseDate\": 64,\"cycleOfInterestPayment\": {\"i\": 32074,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4801,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1336,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 4,\"lifeFloor\": 146098,\"periodCap\": 10001,\"periodFloor\": 4000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"94,219,70,58,166,84,117,27,38,23,63,115,47,178,168,67,239,20,65,139,37,162,235,76,204,37,98,190,148,83,61,27\"),stringToBytes32(\"197,166,122,123,162,94,50,243,195,215,89,48,0,14,27,7,120,187,211,203,58,167,134,168,160,163,163,232,33,224,157,211\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1461002,2447,4800,151,1337,24,160,11,361,59,63,899,66,59,366,5,4900,-1,39,71,366,64,Definitions.IPS(32074,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4801,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(149,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(1336,Definitions.P.M,Definitions.S.LONG,false),4,146098,10001,4000)"
            },
            {
              "js": "{\"lastEventTime\": 48,\"contractStatus\": 1,\"timeFromLastEvent\": 32075,\"nominalValue\": 4799,\"nominalAccrued\": 367,\"feeAccrued\": 1460,\"nominalRate\": 2,\"interestScalingMultiplier\": 949,\"nominalScalingMultiplier\": 32,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(48,Definitions.ContractStatus.DL,32075,4799,367,1460,2,949,32,Definitions.ContractRole.BUY)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.433ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [239,210,197,155,3,246,13,65,131,91,57,9,84,96,40,255,34,36,155,238,212,211,138,163,150,179,134,254,54,218,209,70],\"legalEntityIdCounterparty\": [130,96,145,76,243,82,161,220,95,139,192,178,160,172,186,5,18,211,149,249,150,86,113,160,219,225,37,192,194,168,40,252],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 64,\"statusDate\": 32,\"initialExchangeDate\": 68570,\"maturityDate\": 2447,\"terminationDate\": 39,\"purchaseDate\": 3,\"capitalizationEndDate\": 1338,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 109,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 9999,\"notionalPrincipal\": 2447,\"nominalInterestRate\": 71,\"feeAccrued\": 16,\"accruedInterest\": 4001,\"rateMultiplier\": 12,\"rateSpread\": 109,\"feeRate\": 10000,\"nextResetRate\": 1970,\"penaltyRate\": 3,\"premiumDiscountAtIED\": 119,\"priceAtPurchaseDate\": 26,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 96,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 20,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 70,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 86399,\"lifeFloor\": 71,\"periodCap\": 140,\"periodFloor\": 2014223715}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"239,210,197,155,3,246,13,65,131,91,57,9,84,96,40,255,34,36,155,238,212,211,138,163,150,179,134,254,54,218,209,70\"),stringToBytes32(\"130,96,145,76,243,82,161,220,95,139,192,178,160,172,186,5,18,211,149,249,150,86,113,160,219,225,37,192,194,168,40,252\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,64,32,68570,2447,39,3,1338,24,109,8,9999,2447,71,16,4001,12,109,10000,1970,3,119,26,Definitions.IPS(25,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(96,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(20,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(70,Definitions.P.Y,Definitions.S.SHORT,true),86399,71,140,2014223715)"
            },
            {
              "js": "{\"lastEventTime\": 2448,\"contractStatus\": 1,\"timeFromLastEvent\": 64,\"nominalValue\": 2440589,\"nominalAccrued\": 1,\"feeAccrued\": 2440589,\"nominalRate\": 64,\"interestScalingMultiplier\": 149,\"nominalScalingMultiplier\": 68570,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(2448,Definitions.ContractStatus.DL,64,2440589,1,2440589,64,149,68570,Definitions.ContractRole.RPA)"
            },
            {
              "js": "{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 257,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 11}",
              "sol": "Definitions.ProtoEvent(129,2446,257,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI)"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.442ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [105,207,72,169,140,194,227,53,225,174,216,88,31,244,126,24,217,4,9,173,117,73,35,130,171,26,21,199,152,172,170,188],\"legalEntityIdCounterparty\": [159,69,114,102,128,190,212,146,170,200,98,142,230,147,9,79,88,40,11,92,145,250,57,83,174,245,49,91,158,158,65,134],\"dayCountConvention\": 0,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1336,\"statusDate\": 27,\"initialExchangeDate\": 10000,\"maturityDate\": 32075,\"terminationDate\": 32,\"purchaseDate\": 11,\"capitalizationEndDate\": 68570,\"cycleAnchorDateOfInterestPayment\": 121,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 1461001,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 359,\"nominalInterestRate\": 361,\"feeAccrued\": 140,\"accruedInterest\": -1,\"rateMultiplier\": 68570,\"rateSpread\": 5,\"feeRate\": 151,\"nextResetRate\": 146098,\"penaltyRate\": 146096,\"premiumDiscountAtIED\": 65,\"priceAtPurchaseDate\": 399,\"cycleOfInterestPayment\": {\"i\": 24,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 19,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4001,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 255,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 1336,\"lifeFloor\": 1338,\"periodCap\": 2440589,\"periodFloor\": 89}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"105,207,72,169,140,194,227,53,225,174,216,88,31,244,126,24,217,4,9,173,117,73,35,130,171,26,21,199,152,172,170,188\"),stringToBytes32(\"159,69,114,102,128,190,212,146,170,200,98,142,230,147,9,79,88,40,11,92,145,250,57,83,174,245,49,91,158,158,65,134\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1336,27,10000,32075,32,11,68570,121,1971,1461001,32074,359,361,140,-1,68570,5,151,146098,146096,65,399,Definitions.IPS(24,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(19,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4001,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(255,Definitions.P.W,Definitions.S.SHORT,false),1336,1338,2440589,89)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [102,227,83,118,231,11,145,5,110,122,103,187,97,63,34,138,26,8,107,208,196,21,43,84,73,108,100,81,238,157,138,122],\"legalEntityIdCounterparty\": [158,0,54,70,110,189,248,212,43,215,66,126,40,19,140,29,87,111,146,192,14,193,146,171,151,208,182,192,241,102,27,205],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 10,\"statusDate\": 364,\"initialExchangeDate\": 130,\"maturityDate\": 12,\"terminationDate\": 2440587,\"purchaseDate\": 39,\"capitalizationEndDate\": 130,\"cycleAnchorDateOfInterestPayment\": 4,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 1970,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 159,\"nominalInterestRate\": -1,\"feeAccrued\": 69,\"accruedInterest\": 140,\"rateMultiplier\": 1461001,\"rateSpread\": 1460,\"feeRate\": 400,\"nextResetRate\": 59,\"penaltyRate\": 5,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 4000,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892063,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 100,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 3999,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 139,\"lifeFloor\": 9,\"periodCap\": 3999,\"periodFloor\": 149}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"102,227,83,118,231,11,145,5,110,122,103,187,97,63,34,138,26,8,107,208,196,21,43,84,73,108,100,81,238,157,138,122\"),stringToBytes32(\"158,0,54,70,110,189,248,212,43,215,66,126,40,19,140,29,87,111,146,192,14,193,146,171,151,208,182,192,241,102,27,205\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,10,364,130,12,2440587,39,130,4,97,1970,0,159,-1,69,140,1461001,1460,400,59,5,1460,4000,Definitions.IPS(8,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1532892063,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(100,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(3999,Definitions.P.M,Definitions.S.SHORT,false),139,9,3999,149)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [102,43,211,140,55,44,142,196,192,144,138,69,67,231,115,11,144,82,200,103,250,156,27,76,190,180,105,80,214,59,215,53],\"legalEntityIdCounterparty\": [235,86,132,69,167,83,1,83,254,189,215,228,94,113,134,41,202,83,10,214,90,13,87,231,225,194,253,147,247,158,2,151],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 146098,\"statusDate\": 1461002,\"initialExchangeDate\": 4,\"maturityDate\": 32075,\"terminationDate\": 21,\"purchaseDate\": 86399,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 89,\"cycleAnchorDateOfScalingIndex\": 1336,\"cycleAnchorDateOfFee\": 16,\"notionalPrincipal\": 149,\"nominalInterestRate\": 30,\"feeAccrued\": 951,\"accruedInterest\": 79,\"rateMultiplier\": 1336,\"rateSpread\": 15,\"feeRate\": 2014223714,\"nextResetRate\": 10000,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 80,\"priceAtPurchaseDate\": 25,\"cycleOfInterestPayment\": {\"i\": 2014223714,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 901,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 51,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 21,\"lifeFloor\": 1461001,\"periodCap\": 949,\"periodFloor\": 257}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"102,43,211,140,55,44,142,196,192,144,138,69,67,231,115,11,144,82,200,103,250,156,27,76,190,180,105,80,214,59,215,53\"),stringToBytes32(\"235,86,132,69,167,83,1,83,254,189,215,228,94,113,134,41,202,83,10,214,90,13,87,231,225,194,253,147,247,158,2,151\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,146098,1461002,4,32075,21,86399,2,65,89,1336,16,149,30,951,79,1336,15,2014223714,10000,366,80,25,Definitions.IPS(2014223714,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(401,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(901,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(51,Definitions.P.M,Definitions.S.SHORT,true),21,1461001,949,257)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [239,228,23,114,14,142,243,25,90,101,116,165,112,54,251,32,69,8,61,32,231,103,29,16,129,93,210,83,87,161,75,145],\"legalEntityIdCounterparty\": [37,194,42,14,134,111,23,243,248,67,231,29,228,171,197,139,92,69,68,47,4,158,96,10,62,188,222,49,133,239,128,11],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 900,\"statusDate\": 32076,\"initialExchangeDate\": 4901,\"maturityDate\": 18,\"terminationDate\": 1,\"purchaseDate\": 159,\"capitalizationEndDate\": 2440587,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 5,\"cycleAnchorDateOfFee\": 900,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 4,\"feeAccrued\": 367,\"accruedInterest\": 361,\"rateMultiplier\": 146098,\"rateSpread\": 13,\"feeRate\": 366,\"nextResetRate\": 139,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 79,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 0,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 31,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68570,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 14,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 19,\"lifeFloor\": 2440589,\"periodCap\": 20,\"periodFloor\": 65}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"239,228,23,114,14,142,243,25,90,101,116,165,112,54,251,32,69,8,61,32,231,103,29,16,129,93,210,83,87,161,75,145\"),stringToBytes32(\"37,194,42,14,134,111,23,243,248,67,231,29,228,171,197,139,92,69,68,47,4,158,96,10,62,188,222,49,133,239,128,11\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,900,32076,4901,18,1,159,2440587,90,129,5,900,1337,4,367,361,146098,13,366,139,12,79,10,Definitions.IPS(0,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(31,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(68570,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(14,Definitions.P.Y,Definitions.S.LONG,true),19,2440589,20,65)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [181,234,70,163,189,220,142,35,57,51,85,238,166,102,44,63,59,174,96,32,168,159,45,15,45,91,207,166,240,37,156,90],\"legalEntityIdCounterparty\": [56,124,12,120,220,45,94,103,116,98,4,71,180,47,205,188,170,14,34,92,25,232,196,80,162,61,19,134,30,108,249,143],\"dayCountConvention\": 0,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 69,\"statusDate\": 2014223714,\"initialExchangeDate\": 64,\"maturityDate\": 10001,\"terminationDate\": 151,\"purchaseDate\": 0,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 8,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 950,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 150,\"nominalInterestRate\": 256,\"feeAccrued\": 255,\"accruedInterest\": 2440588,\"rateMultiplier\": 2,\"rateSpread\": 366,\"feeRate\": 256,\"nextResetRate\": 141,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 60,\"priceAtPurchaseDate\": 4799,\"cycleOfInterestPayment\": {\"i\": 5,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 0,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 901,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 69,\"lifeFloor\": 5,\"periodCap\": 160,\"periodFloor\": 366}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"181,234,70,163,189,220,142,35,57,51,85,238,166,102,44,63,59,174,96,32,168,159,45,15,45,91,207,166,240,37,156,90\"),stringToBytes32(\"56,124,12,120,220,45,94,103,116,98,4,71,180,47,205,188,170,14,34,92,25,232,196,80,162,61,19,134,30,108,249,143\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,69,2014223714,64,10001,151,0,19,8,9999,950,1461,150,256,255,2440588,2,366,256,141,90,60,4799,Definitions.IPS(5,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(0,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(901,Definitions.P.H,Definitions.S.LONG,false),69,5,160,366)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [185,98,161,25,11,171,199,143,105,176,240,28,226,127,72,207,19,252,62,6,201,129,55,13,192,170,141,101,53,96,23,223],\"legalEntityIdCounterparty\": [150,167,153,251,73,229,175,121,189,87,82,214,236,117,24,58,53,66,141,104,239,182,100,95,14,82,104,248,71,95,122,181],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 359,\"statusDate\": 1461002,\"initialExchangeDate\": 9,\"maturityDate\": 131,\"terminationDate\": 30,\"purchaseDate\": 51,\"capitalizationEndDate\": 9,\"cycleAnchorDateOfInterestPayment\": 101,\"cycleAnchorDateOfRateReset\": 254,\"cycleAnchorDateOfScalingIndex\": 1532892062,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 5,\"nominalInterestRate\": 32075,\"feeAccrued\": 97,\"accruedInterest\": 360,\"rateMultiplier\": 1461000,\"rateSpread\": 66,\"feeRate\": 950,\"nextResetRate\": 109,\"penaltyRate\": 3999,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 5,\"cycleOfInterestPayment\": {\"i\": 2448,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 141,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10000,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 951,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 1461,\"lifeFloor\": 1461001,\"periodCap\": 32076,\"periodFloor\": 70}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"185,98,161,25,11,171,199,143,105,176,240,28,226,127,72,207,19,252,62,6,201,129,55,13,192,170,141,101,53,96,23,223\"),stringToBytes32(\"150,167,153,251,73,229,175,121,189,87,82,214,236,117,24,58,53,66,141,104,239,182,100,95,14,82,104,248,71,95,122,181\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,359,1461002,9,131,30,51,9,101,254,1532892062,151,5,32075,97,360,1461000,66,950,109,3999,150,5,Definitions.IPS(2448,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(141,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(10000,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(951,Definitions.P.D,Definitions.S.SHORT,false),1461,1461001,32076,70)"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [143,34,29,172,82,20,172,99,123,255,27,225,192,83,145,203,49,191,130,170,181,223,80,187,69,60,89,89,83,77,99,23],\"legalEntityIdCounterparty\": [101,216,192,52,80,136,173,57,3,65,63,127,121,80,152,162,169,111,189,137,135,191,194,6,137,252,196,1,234,15,125,210],\"dayCountConvention\": 0,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 20,\"statusDate\": 141,\"initialExchangeDate\": 60,\"maturityDate\": 368,\"terminationDate\": 2014223716,\"purchaseDate\": 7,\"capitalizationEndDate\": 129,\"cycleAnchorDateOfInterestPayment\": 32076,\"cycleAnchorDateOfRateReset\": 367,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 9,\"notionalPrincipal\": 13,\"nominalInterestRate\": 99,\"feeAccrued\": 5,\"accruedInterest\": 119,\"rateMultiplier\": 366,\"rateSpread\": 30,\"feeRate\": 140,\"nextResetRate\": 901,\"penaltyRate\": -1,\"premiumDiscountAtIED\": 1338,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 68568,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 110,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 69,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 1461001,\"lifeFloor\": 13,\"periodCap\": 18,\"periodFloor\": 1971}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"143,34,29,172,82,20,172,99,123,255,27,225,192,83,145,203,49,191,130,170,181,223,80,187,69,60,89,89,83,77,99,23\"),stringToBytes32(\"101,216,192,52,80,136,173,57,3,65,63,127,121,80,152,162,169,111,189,137,135,191,194,6,137,252,196,1,234,15,125,210\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,20,141,60,368,2014223716,7,129,32076,367,2,9,13,99,5,119,366,30,140,901,-1,1338,159,Definitions.IPS(68568,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(110,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(41,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(69,Definitions.P.M,Definitions.S.SHORT,true),1461001,13,18,1971)"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [253,59,194,113,20,74,38,131,234,181,77,234,85,233,24,208,204,61,75,224,109,29,202,19,49,148,28,165,190,75,230,20],\"legalEntityIdCounterparty\": [177,129,208,75,164,19,53,68,241,137,105,15,89,82,244,95,83,3,247,173,95,173,26,199,221,101,188,23,138,34,172,24],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 10001,\"statusDate\": 49,\"initialExchangeDate\": 2448,\"maturityDate\": 255,\"terminationDate\": 0,\"purchaseDate\": 120,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 1461002,\"cycleAnchorDateOfRateReset\": 1970,\"cycleAnchorDateOfScalingIndex\": 86399,\"cycleAnchorDateOfFee\": 401,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 4000,\"feeAccrued\": 111,\"accruedInterest\": 109,\"rateMultiplier\": 17,\"rateSpread\": 2,\"feeRate\": 2440588,\"nextResetRate\": 21,\"penaltyRate\": 89,\"premiumDiscountAtIED\": 48,\"priceAtPurchaseDate\": 17,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 13,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 69,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 121,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 11,\"lifeFloor\": 2447,\"periodCap\": 150,\"periodFloor\": 109}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"253,59,194,113,20,74,38,131,234,181,77,234,85,233,24,208,204,61,75,224,109,29,202,19,49,148,28,165,190,75,230,20\"),stringToBytes32(\"177,129,208,75,164,19,53,68,241,137,105,15,89,82,244,95,83,3,247,173,95,173,26,199,221,101,188,23,138,34,172,24\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,10001,49,2448,255,0,120,0,1461002,1970,86399,401,2448,4000,111,109,17,2,2440588,21,89,48,17,Definitions.IPS(97,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(13,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(69,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(121,Definitions.P.Y,Definitions.S.SHORT,true),11,2447,150,109)"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [24,160,114,147,50,98,66,43,169,157,48,116,236,90,20,89,39,56,115,38,68,58,10,85,71,111,228,55,119,69,157,18],\"legalEntityIdCounterparty\": [26,26,238,221,18,203,175,54,132,139,142,3,204,65,236,65,113,38,210,118,150,218,148,32,235,130,42,254,197,193,19,136],\"dayCountConvention\": 5,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 40,\"statusDate\": 2448,\"initialExchangeDate\": 40,\"maturityDate\": 10000,\"terminationDate\": 40,\"purchaseDate\": 4899,\"capitalizationEndDate\": 2014223715,\"cycleAnchorDateOfInterestPayment\": 18,\"cycleAnchorDateOfRateReset\": 20,\"cycleAnchorDateOfScalingIndex\": 900,\"cycleAnchorDateOfFee\": 49,\"notionalPrincipal\": 39,\"nominalInterestRate\": 2447,\"feeAccrued\": 21,\"accruedInterest\": 4799,\"rateMultiplier\": 146098,\"rateSpread\": 401,\"feeRate\": 146096,\"nextResetRate\": 14,\"penaltyRate\": 32076,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 149,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 65,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2446,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 159,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 364,\"lifeFloor\": 7,\"periodCap\": 8,\"periodFloor\": 18}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"24,160,114,147,50,98,66,43,169,157,48,116,236,90,20,89,39,56,115,38,68,58,10,85,71,111,228,55,119,69,157,18\"),stringToBytes32(\"26,26,238,221,18,203,175,54,132,139,142,3,204,65,236,65,113,38,210,118,150,218,148,32,235,130,42,254,197,193,19,136\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,40,2448,40,10000,40,4899,2014223715,18,20,900,49,39,2447,21,4799,146098,401,146096,14,32076,1970,2014223716,Definitions.IPS(149,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(65,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2446,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(159,Definitions.P.W,Definitions.S.SHORT,true),364,7,8,18)"
            },
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [210,146,186,160,216,46,68,96,198,99,23,248,54,97,138,229,27,159,196,127,228,59,109,66,155,250,106,47,56,85,213,187],\"legalEntityIdCounterparty\": [215,55,211,38,127,92,205,81,230,253,90,63,168,62,122,7,11,64,165,19,236,218,105,219,167,101,218,67,252,209,224,51],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 96,\"statusDate\": 79,\"initialExchangeDate\": 1338,\"maturityDate\": 359,\"terminationDate\": 24,\"purchaseDate\": 32075,\"capitalizationEndDate\": 19,\"cycleAnchorDateOfInterestPayment\": 146097,\"cycleAnchorDateOfRateReset\": 2447,\"cycleAnchorDateOfScalingIndex\": 100,\"cycleAnchorDateOfFee\": 96,\"notionalPrincipal\": 17,\"nominalInterestRate\": 39,\"feeAccrued\": 30,\"accruedInterest\": 10,\"rateMultiplier\": 4801,\"rateSpread\": 151,\"feeRate\": 119,\"nextResetRate\": 1461002,\"penaltyRate\": 61,\"premiumDiscountAtIED\": 10,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 10,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 25,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 900,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 5,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 1462,\"lifeFloor\": 1969,\"periodCap\": 60,\"periodFloor\": 81}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"210,146,186,160,216,46,68,96,198,99,23,248,54,97,138,229,27,159,196,127,228,59,109,66,155,250,106,47,56,85,213,187\"),stringToBytes32(\"215,55,211,38,127,92,205,81,230,253,90,63,168,62,122,7,11,64,165,19,236,218,105,219,167,101,218,67,252,209,224,51\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,96,79,1338,359,24,32075,19,146097,2447,100,96,17,39,30,10,4801,151,119,1461002,61,10,3,Definitions.IPS(10,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(25,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(5,Definitions.P.H,Definitions.S.SHORT,true),1462,1969,60,81)"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [36,180,184,168,145,136,227,175,163,243,76,6,235,76,43,191,110,213,162,85,207,172,241,181,205,69,35,231,211,108,131,93],\"legalEntityIdCounterparty\": [219,7,30,41,167,114,18,70,110,77,62,57,173,67,184,212,240,35,216,250,135,193,139,201,22,184,200,249,133,153,162,154],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 2448,\"statusDate\": 2440589,\"initialExchangeDate\": 368,\"maturityDate\": 4901,\"terminationDate\": 1,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 14,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 130,\"cycleAnchorDateOfFee\": 1532892064,\"notionalPrincipal\": 9999,\"nominalInterestRate\": 0,\"feeAccrued\": 4900,\"accruedInterest\": 32074,\"rateMultiplier\": 66,\"rateSpread\": 6,\"feeRate\": 9999,\"nextResetRate\": 2,\"penaltyRate\": 399,\"premiumDiscountAtIED\": 101,\"priceAtPurchaseDate\": 256,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 0,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86401,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 3,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 11,\"lifeFloor\": 40,\"periodCap\": 16,\"periodFloor\": 69}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"36,180,184,168,145,136,227,175,163,243,76,6,235,76,43,191,110,213,162,85,207,172,241,181,205,69,35,231,211,108,131,93\"),stringToBytes32(\"219,7,30,41,167,114,18,70,110,77,62,57,173,67,184,212,240,35,216,250,135,193,139,201,22,184,200,249,133,153,162,154\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,2448,2440589,368,4901,1,0,0,14,32074,130,1532892064,9999,0,4900,32074,66,6,9999,2,399,101,256,Definitions.IPS(25,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(0,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(86401,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(3,Definitions.P.D,Definitions.S.SHORT,true),11,40,16,69)"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [102,111,211,80,78,199,29,235,216,67,85,18,144,139,96,177,166,219,120,177,147,109,223,48,124,84,245,106,29,192,150,110],\"legalEntityIdCounterparty\": [196,22,192,79,162,110,221,98,18,51,230,136,252,81,11,76,89,22,170,66,154,157,193,160,120,146,181,199,32,165,55,24],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 99,\"statusDate\": 1969,\"initialExchangeDate\": 131,\"maturityDate\": 1461002,\"terminationDate\": 20,\"purchaseDate\": 119,\"capitalizationEndDate\": 51,\"cycleAnchorDateOfInterestPayment\": 151,\"cycleAnchorDateOfRateReset\": 10,\"cycleAnchorDateOfScalingIndex\": 131,\"cycleAnchorDateOfFee\": 361,\"notionalPrincipal\": 399,\"nominalInterestRate\": 950,\"feeAccrued\": 1971,\"accruedInterest\": 69,\"rateMultiplier\": 255,\"rateSpread\": 99,\"feeRate\": 401,\"nextResetRate\": 256,\"penaltyRate\": 32,\"premiumDiscountAtIED\": 32074,\"priceAtPurchaseDate\": 1969,\"cycleOfInterestPayment\": {\"i\": 150,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 49,\"lifeFloor\": 9999,\"periodCap\": 1462,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"102,111,211,80,78,199,29,235,216,67,85,18,144,139,96,177,166,219,120,177,147,109,223,48,124,84,245,106,29,192,150,110\"),stringToBytes32(\"196,22,192,79,162,110,221,98,18,51,230,136,252,81,11,76,89,22,170,66,154,157,193,160,120,146,181,199,32,165,55,24\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,99,1969,131,1461002,20,119,51,151,10,131,361,399,950,1971,69,255,99,401,256,32,32074,1969,Definitions.IPS(150,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4901,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(364,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.D,Definitions.S.SHORT,false),49,9999,1462,8)"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [143,4,131,211,237,244,51,228,204,13,156,173,240,240,176,151,77,190,239,78,10,60,113,100,49,248,134,134,5,176,213,225],\"legalEntityIdCounterparty\": [158,153,116,44,43,33,208,44,153,46,151,50,233,213,204,60,121,130,214,65,204,129,144,132,76,0,216,152,232,128,231,61],\"dayCountConvention\": 1,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 359,\"statusDate\": 32074,\"initialExchangeDate\": 368,\"maturityDate\": 149,\"terminationDate\": 159,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10001,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 39,\"cycleAnchorDateOfFee\": 48,\"notionalPrincipal\": 90,\"nominalInterestRate\": 0,\"feeAccrued\": 60,\"accruedInterest\": 4800,\"rateMultiplier\": 8,\"rateSpread\": 1462,\"feeRate\": 66,\"nextResetRate\": 69,\"penaltyRate\": 17,\"premiumDiscountAtIED\": 68570,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 2014223716,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 110,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 29,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": -1,\"lifeFloor\": 2014223715,\"periodCap\": 7,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"143,4,131,211,237,244,51,228,204,13,156,173,240,240,176,151,77,190,239,78,10,60,113,100,49,248,134,134,5,176,213,225\"),stringToBytes32(\"158,153,116,44,43,33,208,44,153,46,151,50,233,213,204,60,121,130,214,65,204,129,144,132,76,0,216,152,232,128,231,61\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,359,32074,368,149,159,0,0,10001,0,39,48,90,0,60,4800,8,1462,66,69,17,68570,32,Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(110,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(29,Definitions.P.D,Definitions.S.SHORT,true),-1,2014223715,7,24)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [179,130,68,162,101,235,208,26,209,30,48,32,143,185,157,202,147,86,101,104,1,11,190,221,101,106,253,47,208,58,191,18],\"legalEntityIdCounterparty\": [143,211,17,98,31,193,193,3,174,99,134,221,145,52,176,144,230,103,112,102,214,74,188,63,197,142,123,182,122,244,103,153],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 66,\"statusDate\": 9999,\"initialExchangeDate\": 2014223714,\"maturityDate\": 950,\"terminationDate\": 361,\"purchaseDate\": 39,\"capitalizationEndDate\": 1461,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 5,\"cycleAnchorDateOfScalingIndex\": 900,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 399,\"nominalInterestRate\": 1461,\"feeAccrued\": 1971,\"accruedInterest\": 15,\"rateMultiplier\": 2014223715,\"rateSpread\": 4801,\"feeRate\": 30,\"nextResetRate\": 21,\"penaltyRate\": 21,\"premiumDiscountAtIED\": 120,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 1,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 951,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 86399,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4801,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 900,\"lifeFloor\": 3,\"periodCap\": 901,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"179,130,68,162,101,235,208,26,209,30,48,32,143,185,157,202,147,86,101,104,1,11,190,221,101,106,253,47,208,58,191,18\"),stringToBytes32(\"143,211,17,98,31,193,193,3,174,99,134,221,145,52,176,144,230,103,112,102,214,74,188,63,197,142,123,182,122,244,103,153\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,66,9999,2014223714,950,361,39,1461,360,5,900,90,399,1461,1971,15,2014223715,4801,30,21,21,120,81,Definitions.IPS(1,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(951,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(86399,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4801,Definitions.P.H,Definitions.S.LONG,true),900,3,901,2014223716)"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [161,172,139,25,23,66,14,160,218,38,146,21,70,148,147,182,254,194,54,114,44,137,82,179,61,62,251,206,185,196,45,87],\"legalEntityIdCounterparty\": [233,46,254,230,224,220,233,15,218,119,23,223,242,201,250,75,81,197,96,118,106,64,141,192,185,46,177,26,17,15,246,249],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 17,\"statusDate\": 899,\"initialExchangeDate\": 121,\"maturityDate\": 4800,\"terminationDate\": 399,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 30,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 160,\"nominalInterestRate\": 0,\"feeAccrued\": 13,\"accruedInterest\": 131,\"rateMultiplier\": 12,\"rateSpread\": 359,\"feeRate\": 32,\"nextResetRate\": 12,\"penaltyRate\": 66,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 14,\"cycleOfInterestPayment\": {\"i\": 97,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4900,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 12,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 19,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 8,\"periodCap\": 4000,\"periodFloor\": 139}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"161,172,139,25,23,66,14,160,218,38,146,21,70,148,147,182,254,194,54,114,44,137,82,179,61,62,251,206,185,196,45,87\"),stringToBytes32(\"233,46,254,230,224,220,233,15,218,119,23,223,242,201,250,75,81,197,96,118,106,64,141,192,185,46,177,26,17,15,246,249\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,17,899,121,4800,399,0,0,68570,30,1337,0,160,0,13,131,12,359,32,12,66,359,14,Definitions.IPS(97,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(4900,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(19,Definitions.P.W,Definitions.S.SHORT,false),18,8,4000,139)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [193,85,156,129,126,131,140,82,130,11,36,154,118,58,162,33,188,37,91,62,2,34,125,221,8,22,49,26,20,96,163,54],\"legalEntityIdCounterparty\": [171,175,232,50,209,25,1,191,135,67,190,98,164,251,188,96,26,106,140,134,94,52,63,129,9,160,213,8,149,161,194,170],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 139,\"statusDate\": 1532892063,\"initialExchangeDate\": 96,\"maturityDate\": 949,\"terminationDate\": 41,\"purchaseDate\": 950,\"capitalizationEndDate\": 66,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 19,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 2446,\"nominalInterestRate\": 366,\"feeAccrued\": 19,\"accruedInterest\": 89,\"rateMultiplier\": 1462,\"rateSpread\": 23,\"feeRate\": 2440588,\"nextResetRate\": 9,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 89,\"priceAtPurchaseDate\": 2014223716,\"cycleOfInterestPayment\": {\"i\": 1461000,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 109,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 14,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 17,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 146097,\"lifeFloor\": 71,\"periodCap\": 29,\"periodFloor\": 360}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"193,85,156,129,126,131,140,82,130,11,36,154,118,58,162,33,188,37,91,62,2,34,125,221,8,22,49,26,20,96,163,54\"),stringToBytes32(\"171,175,232,50,209,25,1,191,135,67,190,98,164,251,188,96,26,106,140,134,94,52,63,129,9,160,213,8,149,161,194,170\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,139,1532892063,96,949,41,950,66,256,79,19,254,2446,366,19,89,1462,23,2440588,9,97,89,2014223716,Definitions.IPS(1461000,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(109,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(14,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(17,Definitions.P.Y,Definitions.S.LONG,false),146097,71,29,360)"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [100,226,87,232,245,47,70,207,78,9,227,100,88,18,142,177,1,39,33,21,168,220,159,124,227,145,255,151,4,84,43,82],\"legalEntityIdCounterparty\": [124,213,14,188,138,208,50,125,132,88,99,154,107,242,8,9,115,66,235,199,25,131,46,134,135,54,90,177,22,244,63,30],\"dayCountConvention\": 6,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 4001,\"statusDate\": 1337,\"initialExchangeDate\": 4901,\"maturityDate\": 31,\"terminationDate\": 95,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 120,\"cycleAnchorDateOfRateReset\": 25,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 901,\"notionalPrincipal\": 13,\"nominalInterestRate\": 0,\"feeAccrued\": 10,\"accruedInterest\": 27,\"rateMultiplier\": 901,\"rateSpread\": 29,\"feeRate\": 13,\"nextResetRate\": 40,\"penaltyRate\": 7,\"premiumDiscountAtIED\": 71,\"priceAtPurchaseDate\": 365,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 146096,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4899,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 39,\"lifeFloor\": 10,\"periodCap\": 30,\"periodFloor\": 101}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"100,226,87,232,245,47,70,207,78,9,227,100,88,18,142,177,1,39,33,21,168,220,159,124,227,145,255,151,4,84,43,82\"),stringToBytes32(\"124,213,14,188,138,208,50,125,132,88,99,154,107,242,8,9,115,66,235,199,25,131,46,134,135,54,90,177,22,244,63,30\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,4001,1337,4901,31,95,0,0,120,25,0,901,13,0,10,27,901,29,13,40,7,71,365,Definitions.IPS(1969,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(146096,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4899,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,false),39,10,30,101)"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [133,234,173,46,54,126,113,233,106,153,208,76,51,215,37,62,37,12,237,130,175,4,122,234,102,100,59,186,116,8,241,248],\"legalEntityIdCounterparty\": [151,154,142,42,154,142,92,0,123,240,22,103,170,233,67,75,176,203,126,190,248,96,171,4,13,64,42,67,18,232,232,233],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 95,\"statusDate\": 30,\"initialExchangeDate\": 361,\"maturityDate\": 150,\"terminationDate\": 2447,\"purchaseDate\": 51,\"capitalizationEndDate\": 365,\"cycleAnchorDateOfInterestPayment\": 2448,\"cycleAnchorDateOfRateReset\": 1969,\"cycleAnchorDateOfScalingIndex\": 49,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 21,\"nominalInterestRate\": 2446,\"feeAccrued\": 86400,\"accruedInterest\": 141,\"rateMultiplier\": 10000,\"rateSpread\": 1532892063,\"feeRate\": 96,\"nextResetRate\": 71,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 10,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 51,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 5,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4799,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 96,\"lifeFloor\": 8,\"periodCap\": 110,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"133,234,173,46,54,126,113,233,106,153,208,76,51,215,37,62,37,12,237,130,175,4,122,234,102,100,59,186,116,8,241,248\"),stringToBytes32(\"151,154,142,42,154,142,92,0,123,240,22,103,170,233,67,75,176,203,126,190,248,96,171,4,13,64,42,67,18,232,232,233\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,95,30,361,150,2447,51,365,2448,1969,49,2447,21,2446,86400,141,10000,1532892063,96,71,949,10,3,Definitions.IPS(100,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(51,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(5,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4799,Definitions.P.M,Definitions.S.LONG,true),96,8,110,1461000)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [52,55,58,111,186,124,70,46,255,113,136,117,233,219,37,53,70,247,209,197,57,60,138,126,13,81,205,124,59,43,94,38],\"legalEntityIdCounterparty\": [8,170,25,198,6,56,115,184,186,251,105,168,248,158,253,239,246,239,188,55,152,70,36,57,139,146,62,52,84,67,149,141],\"dayCountConvention\": 1,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4799,\"statusDate\": 4901,\"initialExchangeDate\": 32074,\"maturityDate\": 2447,\"terminationDate\": 2447,\"purchaseDate\": 365,\"capitalizationEndDate\": 255,\"cycleAnchorDateOfInterestPayment\": 2440587,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 16,\"notionalPrincipal\": 2440588,\"nominalInterestRate\": 6,\"feeAccrued\": 109,\"accruedInterest\": 3999,\"rateMultiplier\": 160,\"rateSpread\": 4901,\"feeRate\": 100,\"nextResetRate\": 59,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 0,\"priceAtPurchaseDate\": 68569,\"cycleOfInterestPayment\": {\"i\": 9999,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 150,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 11,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 26,\"lifeFloor\": 1461000,\"periodCap\": 99,\"periodFloor\": 2440589}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"52,55,58,111,186,124,70,46,255,113,136,117,233,219,37,53,70,247,209,197,57,60,138,126,13,81,205,124,59,43,94,38\"),stringToBytes32(\"8,170,25,198,6,56,115,184,186,251,105,168,248,158,253,239,246,239,188,55,152,70,36,57,139,146,62,52,84,67,149,141\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4799,4901,32074,2447,2447,365,255,2440587,140,146097,16,2440588,6,109,3999,160,4901,100,59,949,0,68569,Definitions.IPS(9999,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(150,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(119,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(11,Definitions.P.M,Definitions.S.SHORT,true),26,1461000,99,2440589)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [229,16,155,45,250,129,199,88,255,144,80,107,253,39,92,250,211,208,69,218,171,69,69,114,147,234,151,200,7,188,43,108],\"legalEntityIdCounterparty\": [48,46,81,150,70,124,141,176,29,242,171,141,79,13,216,158,184,175,22,58,248,179,210,53,170,61,207,10,223,141,189,184],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 5,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 101,\"statusDate\": 1532892062,\"initialExchangeDate\": 86399,\"maturityDate\": 8,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 61,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 151,\"notionalPrincipal\": 111,\"nominalInterestRate\": 0,\"feeAccrued\": 361,\"accruedInterest\": 149,\"rateMultiplier\": 2014223714,\"rateSpread\": 28,\"feeRate\": 66,\"nextResetRate\": 68568,\"penaltyRate\": 1336,\"premiumDiscountAtIED\": 2014223714,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 121,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 150,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 3999,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 23,\"lifeFloor\": 146097,\"periodCap\": 1338,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"229,16,155,45,250,129,199,88,255,144,80,107,253,39,92,250,211,208,69,218,171,69,69,114,147,234,151,200,7,188,43,108\"),stringToBytes32(\"48,46,81,150,70,124,141,176,29,242,171,141,79,13,216,158,184,175,22,58,248,179,210,53,170,61,207,10,223,141,189,184\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,101,1532892062,86399,8,0,0,0,61,65,161,151,111,0,361,149,2014223714,28,66,68568,1336,2014223714,96,Definitions.IPS(121,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(150,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(4800,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(3999,Definitions.P.Y,Definitions.S.SHORT,false),23,146097,1338,2448)"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [222,139,52,125,63,9,57,78,185,150,28,162,145,30,157,13,88,170,83,135,54,124,10,166,80,135,100,201,196,224,1,14],\"legalEntityIdCounterparty\": [56,212,131,116,129,36,188,31,253,131,90,46,36,108,56,10,10,150,43,132,58,92,132,251,165,186,41,232,195,58,137,252],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 66,\"statusDate\": 4800,\"initialExchangeDate\": 13,\"maturityDate\": 1461,\"terminationDate\": 69,\"purchaseDate\": 14,\"capitalizationEndDate\": 1461,\"cycleAnchorDateOfInterestPayment\": 399,\"cycleAnchorDateOfRateReset\": 111,\"cycleAnchorDateOfScalingIndex\": 2440587,\"cycleAnchorDateOfFee\": 2,\"notionalPrincipal\": 99,\"nominalInterestRate\": 368,\"feeAccrued\": 24,\"accruedInterest\": 121,\"rateMultiplier\": 21,\"rateSpread\": 399,\"feeRate\": 61,\"nextResetRate\": 26,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 13,\"cycleOfInterestPayment\": {\"i\": 68568,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 146096,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 146097,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 66,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 7,\"lifeFloor\": 400,\"periodCap\": 146097,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"222,139,52,125,63,9,57,78,185,150,28,162,145,30,157,13,88,170,83,135,54,124,10,166,80,135,100,201,196,224,1,14\"),stringToBytes32(\"56,212,131,116,129,36,188,31,253,131,90,46,36,108,56,10,10,150,43,132,58,92,132,251,165,186,41,232,195,58,137,252\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.N,66,4800,13,1461,69,14,1461,399,111,2440587,2,99,368,24,121,21,399,61,26,4001,359,13,Definitions.IPS(68568,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(146096,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(146097,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(66,Definitions.P.D,Definitions.S.LONG,false),7,400,146097,0)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [27,180,42,99,63,109,92,15,234,2,118,154,49,16,83,166,133,211,66,241,188,138,31,93,38,180,108,229,249,52,118,195],\"legalEntityIdCounterparty\": [128,77,48,38,73,105,182,62,203,51,27,18,35,107,242,200,52,80,102,27,162,218,123,165,49,127,181,178,180,152,219,104],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 4900,\"initialExchangeDate\": 26,\"maturityDate\": 32076,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 48,\"cycleAnchorDateOfRateReset\": 1969,\"cycleAnchorDateOfScalingIndex\": 64,\"cycleAnchorDateOfFee\": 146097,\"notionalPrincipal\": 66,\"nominalInterestRate\": 0,\"feeAccrued\": 2440587,\"accruedInterest\": 2440589,\"rateMultiplier\": 19,\"rateSpread\": 1338,\"feeRate\": 86400,\"nextResetRate\": 4900,\"penaltyRate\": 4800,\"premiumDiscountAtIED\": 1337,\"priceAtPurchaseDate\": 69,\"cycleOfInterestPayment\": {\"i\": 4900,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4901,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 130,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 140,\"lifeFloor\": 86401,\"periodCap\": 15,\"periodFloor\": 4001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"27,180,42,99,63,109,92,15,234,2,118,154,49,16,83,166,133,211,66,241,188,138,31,93,38,180,108,229,249,52,118,195\"),stringToBytes32(\"128,77,48,38,73,105,182,62,203,51,27,18,35,107,242,200,52,80,102,27,162,218,123,165,49,127,181,178,180,152,219,104\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,32,4900,26,32076,0,0,0,48,1969,64,146097,66,0,2440587,2440589,19,1338,86400,4900,4800,1337,69,Definitions.IPS(4900,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(4901,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(3999,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(130,Definitions.P.W,Definitions.S.SHORT,false),140,86401,15,4001)"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.492ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T05:31:39.515ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}