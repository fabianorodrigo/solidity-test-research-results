,{
  "2020-11-12T14:12:18.900ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.902ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.903ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.903ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.904ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.904ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.905ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.907ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "minute >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN minute>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.919ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.919ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.920ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.921ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.921ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.924ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.935ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.936ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.937ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.937ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.938ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.939ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.940ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.941ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.942ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.944ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.945ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.946ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.947ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.949ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.949ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.950ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.951ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.952ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.953ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.954ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.956ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 90,
                "sol": 90
              },
              {
                "js": "89",
                "sol": "89"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.959ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223717,
                "sol": 2014223717
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.961ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440588,
                "sol": 2440588
              },
              {
                "js": "2440587",
                "sol": "2440587"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.963ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146099,
                "sol": 146099
              },
              {
                "js": "146098",
                "sol": "146098"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.964ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 950,
                "sol": 950
              },
              {
                "js": "949",
                "sol": "949"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.986ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.990ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:18.993ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.ContractRole.BUY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.ContractRole.PFL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:18.997ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": 50,
                "sol": 50
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": 86399,
                "sol": 86399
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "15",
                "sol": "15"
              },
              {
                "js": 14,
                "sol": 14
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1461",
                "sol": "1461"
              },
              {
                "js": 1460,
                "sol": 1460
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "32075",
                "sol": "32075"
              },
              {
                "js": 32074,
                "sol": 32074
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:12:19.002ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "151",
              "sol": "151"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.003ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.003ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.003ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.004ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{\"i\": 71,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(71,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{\"i\": 368,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(368,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{\"i\": 30,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(30,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{\"i\": 16,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(16,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.007ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.007ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.009ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.012ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.016ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.019ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.020ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.024ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 49,\"p\": 0,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(49,Definitions.P.D,Definitions.S.SHORT,false)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2446,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2446,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 1532892063,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(1532892063,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 139,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(139,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 99,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(99,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 90,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(90,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 68570,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.028ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{\"i\": 18,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(18,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{\"i\": 901,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(901,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 1969,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1969,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{\"i\": 69,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(69,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "{\"i\": 2440588,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{\"i\": 17,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(17,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{\"i\": 2014223716,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{\"i\": 4801,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(4801,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{\"i\": 2014223716,\"p\": 5,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.Y,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.035ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 60,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(60,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 360,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(360,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 400,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(400,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 86400,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86400,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 141,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(141,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 23,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.037ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 10000,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 1970,\"eventType\": 20,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 12},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 3,\"eventType\": 20,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 17},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 63,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 4,\"scheduleTime\": 81,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 4},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 109,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 17},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 39,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 20},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 4801,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 0},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 96,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 139,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 12,\"stfType\": 19},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 68570,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 17},{\"eventTime\": 86401,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 6,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 1461,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1337,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 81,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 13},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 14,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 120,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 7},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 89,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 17},{\"eventTime\": 2446,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 1336,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 1},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 30,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 9,\"eventType\": 9,\"currency\": accounts[9],\"pofType\": 17,\"stfType\": 16},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 2014223715,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 0,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 4000,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 7},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 399,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 1461001,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 65,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 6,\"stfType\": 14},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 89,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 8,\"stfType\": 12},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 0,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 159,\"eventType\": 12,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 0},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 3,\"eventType\": 20,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 255,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 48,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 6,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 5,\"stfType\": 9},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 368,\"scheduleTime\": 63,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 20},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 30,\"scheduleTime\": 14,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 5},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 16,\"scheduleTime\": 1337,\"eventType\": 18,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 13},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 1461001,\"eventType\": 9,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 14},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 254,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 5,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 96,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 39,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 15,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 10001,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 11},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 66,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 161,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 17,\"stfType\": 10},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 68568,\"eventType\": 1,\"currency\": accounts[7],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 1532892064,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 96,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 119,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 1,\"stfType\": 13},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 1336,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 4001,\"eventType\": 5,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 1338,\"eventType\": 8,\"currency\": accounts[0],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 96,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 2447,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 161,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 359,\"eventType\": 3,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 80,\"scheduleTime\": 51,\"eventType\": 14,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 14},{\"eventTime\": 4901,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 95,\"eventType\": 17,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 19},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 400,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 146097,\"scheduleTime\": 399,\"eventType\": 17,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 63,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 4801,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 2},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 949,\"scheduleTime\": 65,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 1336,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 120,\"scheduleTime\": 146098,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 90,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 13}]",
              "sol": "[Definitions.ProtoEvent(10000,86401,1970,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RR),Definitions.ProtoEvent(81,30,3,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR),Definitions.ProtoEvent(100,1462,63,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(8,4,81,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IP),Definitions.ProtoEvent(1,10001,109,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MR),Definitions.ProtoEvent(21,1462,39,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.Child),Definitions.ProtoEvent(80,27,4801,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SD),Definitions.ProtoEvent(899,2446,96,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(901,109,139,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.STD),Definitions.ProtoEvent(367,366,68570,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.MR),Definitions.ProtoEvent(86401,14,6,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(365,161,1461,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(23,97,1337,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(109,27,81,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RRY),Definitions.ProtoEvent(365,368,14,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(1532892064,1,120,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PY),Definitions.ProtoEvent(4801,71,89,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MR),Definitions.ProtoEvent(2446,14,1336,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MD),Definitions.ProtoEvent(8,11,30,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(146098,109,9,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.DV),Definitions.ProtoEvent(13,161,2014223715,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(2440588,71,0,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(361,1532892062,4000,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PY),Definitions.ProtoEvent(1970,49,399,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(65,24,1461001,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(66,90,65,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SC),Definitions.ProtoEvent(146098,2448,89,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.RR),Definitions.ProtoEvent(4,17,0,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(361,1,159,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD),Definitions.ProtoEvent(14,401,3,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(10001,8,255,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(129,100,48,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(368,64,6,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PRD),Definitions.ProtoEvent(129,368,63,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.Child),Definitions.ProtoEvent(2014223715,30,14,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PR),Definitions.ProtoEvent(2440589,16,1337,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY),Definitions.ProtoEvent(90,21,1461001,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.SC),Definitions.ProtoEvent(71,1971,254,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(5,364,96,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(51,3999,39,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(15,364,10001,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IPCI),Definitions.ProtoEvent(23,19,66,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(29,1338,161,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.TD),Definitions.ProtoEvent(10001,1971,68568,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(70,4901,1532892064,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(9,27,96,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(110,5,119,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.RRY),Definitions.ProtoEvent(11,1338,1336,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(79,2014223715,4001,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(149,25,1338,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(69,2446,96,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(366,900,2447,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(2014223715,109,161,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(161,5,359,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(1336,80,51,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.SC),Definitions.ProtoEvent(4901,2014223716,95,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.STD),Definitions.ProtoEvent(4800,4000,400,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(9999,146097,399,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(129,951,63,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(23,41,4801,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.AD),Definitions.ProtoEvent(109,949,65,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(4900,1461001,1336,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(364,120,146098,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(65,1460,90,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY)]"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.050ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 48,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 2014223714,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 13},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 254,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 12},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 4,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 0},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 146096,\"scheduleTime\": 31,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 3},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 10000,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 86399,\"scheduleTime\": 4899,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 12},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 4,\"eventType\": 6,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 366,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 16},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 950,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 11,\"stfType\": 10},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 65,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 100,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 64,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 3,\"stfType\": 2},{\"eventTime\": 129,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 51,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 130,\"scheduleTime\": 9,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 12},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 121,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 20},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 95,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 90,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 119,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 60,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 4000,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 1338,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 359,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 16,\"stfType\": 7},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 66,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 1461001,\"eventType\": 18,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 140,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 150,\"eventType\": 11,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 160,\"eventType\": 20,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 5},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 146096,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 48,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 20,\"eventType\": 19,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 14,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 40,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 49,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 15,\"stfType\": 9},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 64,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 15},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 90,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 21,\"eventTimeWithEpochOffset\": 131,\"scheduleTime\": 899,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 99,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 110,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 17},{\"eventTime\": 50,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 32,\"eventType\": 6,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 111,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 18},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 27,\"eventType\": 2,\"currency\": accounts[0],\"pofType\": 12,\"stfType\": 11},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 151,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 20,\"stfType\": 4},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 368,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 8},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 367,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 109,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 20},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 120,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 12},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 949,\"eventType\": 0,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 13,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 368,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 15},{\"eventTime\": 256,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1337,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 40,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 19},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 64,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 27,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 1461,\"eventType\": 18,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 10,\"scheduleTime\": 1532892062,\"eventType\": 1,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 18},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 130,\"eventType\": 9,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 7},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 48,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 63,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 11},{\"eventTime\": 1970,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 141,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 2447,\"scheduleTime\": 1532892063,\"eventType\": 1,\"currency\": accounts[3],\"pofType\": 6,\"stfType\": 0},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 68568,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 15,\"stfType\": 8},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 51,\"scheduleTime\": 6,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 8},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 39,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 79,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 2,\"stfType\": 9},{\"eventTime\": 1460,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 86399,\"eventType\": 3,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1461,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 121,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 11}]",
              "sol": "[Definitions.ProtoEvent(1969,131,48,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(400,6,2014223714,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RRY),Definitions.ProtoEvent(950,23,254,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.RR),Definitions.ProtoEvent(359,146098,4,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SD),Definitions.ProtoEvent(60,146096,31,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IED),Definitions.ProtoEvent(68569,2447,10000,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(109,86399,4899,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RR),Definitions.ProtoEvent(146096,131,4,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(29,2446,366,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.DV),Definitions.ProtoEvent(146098,1460,950,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.TD),Definitions.ProtoEvent(949,86401,65,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(100,26,64,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.AD),Definitions.ProtoEvent(129,100,51,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(161,130,9,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.RR),Definitions.ProtoEvent(66,10000,121,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.Child),Definitions.ProtoEvent(65,60,95,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(90,4900,119,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(255,141,60,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(101,1,4000,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(146097,68568,1338,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(41,366,359,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PY),Definitions.ProtoEvent(9999,139,66,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(3,1461,1461001,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(140,899,150,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(151,2014223716,160,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PR),Definitions.ProtoEvent(81,95,146096,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(4001,39,48,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(1532892063,2448,20,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(64,1532892062,14,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(120,150,40,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(97,950,49,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PRD),Definitions.ProtoEvent(1,13,64,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.CD),Definitions.ProtoEvent(949,10,90,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(21,131,899,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(146096,1460,99,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(901,146098,110,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.MR),Definitions.ProtoEvent(50,366,32,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(120,95,111,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCB),Definitions.ProtoEvent(65,68570,27,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IPCI),Definitions.ProtoEvent(32075,13,151,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IP),Definitions.ProtoEvent(254,1462,368,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.FP),Definitions.ProtoEvent(64,109,367,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(950,1462,109,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.Child),Definitions.ProtoEvent(1969,255,120,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.RR),Definitions.ProtoEvent(901,4800,949,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(13,367,368,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.CD),Definitions.ProtoEvent(256,129,1337,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(146097,9,40,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.STD),Definitions.ProtoEvent(24,10001,64,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(60,4001,27,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(1461000,21,1461,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(17,10,1532892062,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.IPCB),Definitions.ProtoEvent(400,31,130,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PY),Definitions.ProtoEvent(151,150,48,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(26,1969,63,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IPCI),Definitions.ProtoEvent(1970,17,141,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(32076,2447,1532892063,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.SD),Definitions.ProtoEvent(159,71,68568,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.FP),Definitions.ProtoEvent(160,51,6,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.FP),Definitions.ProtoEvent(4799,29,39,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(9,19,79,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.PRD),Definitions.ProtoEvent(1460,401,86399,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(1532892064,101,1461,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(2440588,20,121,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCI)]"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.066ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "startTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp>=timestamp",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.068ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [104,177,246,189,61,114,135,115,12,180,18,113,77,88,127,163,195,115,253,56,167,218,104,157,73,50,93,241,218,214,3,5],\"legalEntityIdCounterparty\": [55,33,170,118,47,18,211,53,12,53,207,11,183,242,214,13,167,21,16,24,77,79,134,62,187,186,42,145,58,209,179,86],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 150,\"statusDate\": 10,\"initialExchangeDate\": 2440589,\"maturityDate\": 86400,\"terminationDate\": 100,\"purchaseDate\": 111,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 89,\"cycleAnchorDateOfScalingIndex\": 86401,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 400,\"nominalInterestRate\": 1461001,\"feeAccrued\": 4899,\"accruedInterest\": 1460,\"rateMultiplier\": 2014223715,\"rateSpread\": 110,\"feeRate\": 32076,\"nextResetRate\": 254,\"penaltyRate\": 366,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 255,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 11,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 40,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 4000,\"lifeFloor\": 110,\"periodCap\": 29,\"periodFloor\": 255}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"104,177,246,189,61,114,135,115,12,180,18,113,77,88,127,163,195,115,253,56,167,218,104,157,73,50,93,241,218,214,3,5\"),stringToBytes32(\"55,33,170,118,47,18,211,53,12,53,207,11,183,242,214,13,167,21,16,24,77,79,134,62,187,186,42,145,58,209,179,86\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,150,10,2440589,86400,100,111,16,65,89,86401,254,400,1461001,4899,1460,2014223715,110,32076,254,366,146097,1336,Definitions.IPS(254,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(11,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(40,Definitions.P.M,Definitions.S.LONG,true),4000,110,29,255)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.070ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [20,243,127,184,176,26,68,161,218,117,249,114,209,252,3,210,27,145,66,82,172,144,202,160,150,124,197,100,35,141,150,105],\"legalEntityIdCounterparty\": [186,40,39,195,43,52,33,28,86,4,38,192,119,142,31,5,51,236,226,156,237,36,123,193,66,164,211,55,58,117,12,100],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 4801,\"statusDate\": 30,\"initialExchangeDate\": 1969,\"maturityDate\": 16,\"terminationDate\": 70,\"purchaseDate\": 9,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 39,\"cycleAnchorDateOfScalingIndex\": 91,\"cycleAnchorDateOfFee\": 3,\"notionalPrincipal\": 9,\"nominalInterestRate\": 4899,\"feeAccrued\": 2447,\"accruedInterest\": 899,\"rateMultiplier\": 14,\"rateSpread\": 1462,\"feeRate\": 12,\"nextResetRate\": 1969,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 1969,\"priceAtPurchaseDate\": 48,\"cycleOfInterestPayment\": {\"i\": 111,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 99,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 97,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 4801,\"lifeFloor\": 49,\"periodCap\": 1338,\"periodFloor\": 68570}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"20,243,127,184,176,26,68,161,218,117,249,114,209,252,3,210,27,145,66,82,172,144,202,160,150,124,197,100,35,141,150,105\"),stringToBytes32(\"186,40,39,195,43,52,33,28,86,4,38,192,119,142,31,5,51,236,226,156,237,36,123,193,66,164,211,55,58,117,12,100\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,4801,30,1969,16,70,9,60,100,39,91,3,9,4899,2447,899,14,1462,12,1969,6,1969,48,Definitions.IPS(111,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(99,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(97,Definitions.P.M,Definitions.S.SHORT,false),4801,49,1338,68570)"
            },
            {
              "js": "{\"lastEventTime\": 8,\"contractStatus\": 0,\"timeFromLastEvent\": 399,\"nominalValue\": 368,\"nominalAccrued\": 51,\"feeAccrued\": 99,\"nominalRate\": 3999,\"interestScalingMultiplier\": 2447,\"nominalScalingMultiplier\": 4799,\"contractRoleSign\": 0}",
              "sol": "Definitions.ContractState(8,Definitions.ContractStatus.PF,399,368,51,99,3999,2447,4799,Definitions.ContractRole.RPA)"
            },
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.072ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [28,195,108,236,73,226,241,68,86,118,47,151,129,9,74,25,64,34,184,153,127,36,183,104,16,235,140,121,130,19,102,212],\"legalEntityIdCounterparty\": [138,234,204,19,61,80,81,180,26,75,25,236,131,24,253,88,232,76,121,78,103,158,176,71,175,81,188,60,142,191,17,64],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 20,\"statusDate\": 367,\"initialExchangeDate\": 60,\"maturityDate\": 90,\"terminationDate\": 1969,\"purchaseDate\": 109,\"capitalizationEndDate\": 121,\"cycleAnchorDateOfInterestPayment\": 14,\"cycleAnchorDateOfRateReset\": 129,\"cycleAnchorDateOfScalingIndex\": 161,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 950,\"nominalInterestRate\": 21,\"feeAccrued\": 10001,\"accruedInterest\": 131,\"rateMultiplier\": 130,\"rateSpread\": 50,\"feeRate\": 146097,\"nextResetRate\": 5,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 368,\"priceAtPurchaseDate\": 68568,\"cycleOfInterestPayment\": {\"i\": 90,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 100,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 13,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 1338,\"lifeFloor\": 41,\"periodCap\": 9999,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.BUY,stringToBytes32(\"28,195,108,236,73,226,241,68,86,118,47,151,129,9,74,25,64,34,184,153,127,36,183,104,16,235,140,121,130,19,102,212\"),stringToBytes32(\"138,234,204,19,61,80,81,180,26,75,25,236,131,24,253,88,232,76,121,78,103,158,176,71,175,81,188,60,142,191,17,64\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,20,367,60,90,1969,109,121,14,129,161,4901,950,21,10001,131,130,50,146097,5,12,368,68568,Definitions.IPS(90,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(100,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(13,Definitions.P.Y,Definitions.S.LONG,false),1338,41,9999,68569)"
            },
            {
              "js": "{\"lastEventTime\": 360,\"contractStatus\": 1,\"timeFromLastEvent\": 2440587,\"nominalValue\": 2,\"nominalAccrued\": 1,\"feeAccrued\": 68570,\"nominalRate\": 1,\"interestScalingMultiplier\": 256,\"nominalScalingMultiplier\": 150,\"contractRoleSign\": 4}",
              "sol": "Definitions.ContractState(360,Definitions.ContractStatus.DL,2440587,2,1,68570,1,256,150,Definitions.ContractRole.RFL)"
            },
            {
              "js": "{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 71,\"scheduleTime\": 69,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 8,\"stfType\": 10}",
              "sol": "Definitions.ProtoEvent(32076,71,69,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.TD)"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.078ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [127,144,160,232,225,3,45,251,127,72,216,177,188,223,225,59,32,59,89,249,162,238,201,46,119,77,70,4,149,124,81,180],\"legalEntityIdCounterparty\": [125,95,35,89,124,159,233,56,75,189,101,30,106,231,68,145,200,77,103,13,125,216,141,105,160,151,139,73,192,175,242,174],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 4900,\"statusDate\": 99,\"initialExchangeDate\": 367,\"maturityDate\": 1337,\"terminationDate\": 950,\"purchaseDate\": 71,\"capitalizationEndDate\": 3,\"cycleAnchorDateOfInterestPayment\": 364,\"cycleAnchorDateOfRateReset\": 368,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 2440587,\"notionalPrincipal\": 131,\"nominalInterestRate\": 51,\"feeAccrued\": 149,\"accruedInterest\": -1,\"rateMultiplier\": 25,\"rateSpread\": 27,\"feeRate\": 146097,\"nextResetRate\": 65,\"penaltyRate\": 150,\"premiumDiscountAtIED\": 9999,\"priceAtPurchaseDate\": 146097,\"cycleOfInterestPayment\": {\"i\": 79,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 368,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 21,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 96,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 10,\"lifeFloor\": 146098,\"periodCap\": 950,\"periodFloor\": 70}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"127,144,160,232,225,3,45,251,127,72,216,177,188,223,225,59,32,59,89,249,162,238,201,46,119,77,70,4,149,124,81,180\"),stringToBytes32(\"125,95,35,89,124,159,233,56,75,189,101,30,106,231,68,145,200,77,103,13,125,216,141,105,160,151,139,73,192,175,242,174\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,4900,99,367,1337,950,71,3,364,368,3999,2440587,131,51,149,-1,25,27,146097,65,150,9999,146097,Definitions.IPS(79,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(21,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(96,Definitions.P.Q,Definitions.S.LONG,true),10,146098,950,70)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [59,255,129,146,181,108,243,141,147,222,126,92,38,203,148,50,191,47,185,121,78,150,156,64,65,197,232,162,156,48,35,248],\"legalEntityIdCounterparty\": [58,180,19,249,116,147,251,87,65,172,234,155,207,60,95,188,69,16,76,123,74,21,112,164,22,231,166,187,201,56,243,78],\"dayCountConvention\": 0,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 359,\"statusDate\": 360,\"initialExchangeDate\": 91,\"maturityDate\": 100,\"terminationDate\": 10000,\"purchaseDate\": 131,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 13,\"cycleAnchorDateOfRateReset\": 97,\"cycleAnchorDateOfScalingIndex\": 99,\"cycleAnchorDateOfFee\": 149,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 111,\"feeAccrued\": 160,\"accruedInterest\": 89,\"rateMultiplier\": 69,\"rateSpread\": 100,\"feeRate\": 100,\"nextResetRate\": 4001,\"penaltyRate\": 139,\"premiumDiscountAtIED\": 86400,\"priceAtPurchaseDate\": 2446,\"cycleOfInterestPayment\": {\"i\": 32,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 159,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 366,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 4899,\"p\": 1,\"s\": 1,\"isSet\": false},\"lifeCap\": 4899,\"lifeFloor\": 59,\"periodCap\": 120,\"periodFloor\": 160}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"59,255,129,146,181,108,243,141,147,222,126,92,38,203,148,50,191,47,185,121,78,150,156,64,65,197,232,162,156,48,35,248\"),stringToBytes32(\"58,180,19,249,116,147,251,87,65,172,234,155,207,60,95,188,69,16,76,123,74,21,112,164,22,231,166,187,201,56,243,78\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,359,360,91,100,10000,131,160,13,97,99,149,86399,111,160,89,69,100,100,4001,139,86400,2446,Definitions.IPS(32,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(159,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(366,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(4899,Definitions.P.W,Definitions.S.SHORT,false),4899,59,120,160)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [171,185,212,45,158,231,163,45,164,81,90,235,137,170,220,61,137,24,142,160,177,126,57,150,152,153,23,83,121,131,11,129],\"legalEntityIdCounterparty\": [160,7,199,122,45,27,49,249,138,125,133,191,208,216,226,57,12,152,243,217,244,163,178,209,200,171,94,171,106,242,195,191],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 32,\"statusDate\": 95,\"initialExchangeDate\": 1461002,\"maturityDate\": 68570,\"terminationDate\": 159,\"purchaseDate\": 1969,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 25,\"cycleAnchorDateOfRateReset\": 60,\"cycleAnchorDateOfScalingIndex\": 1532892063,\"cycleAnchorDateOfFee\": 31,\"notionalPrincipal\": 1,\"nominalInterestRate\": 11,\"feeAccrued\": 146098,\"accruedInterest\": 89,\"rateMultiplier\": 950,\"rateSpread\": 950,\"feeRate\": 899,\"nextResetRate\": 950,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 254,\"priceAtPurchaseDate\": 23,\"cycleOfInterestPayment\": {\"i\": 120,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146098,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 65,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 97,\"lifeFloor\": 1338,\"periodCap\": 100,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"171,185,212,45,158,231,163,45,164,81,90,235,137,170,220,61,137,24,142,160,177,126,57,150,152,153,23,83,121,131,11,129\"),stringToBytes32(\"160,7,199,122,45,27,49,249,138,125,133,191,208,216,226,57,12,152,243,217,244,163,178,209,200,171,94,171,106,242,195,191\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.N,32,95,1461002,68570,159,1969,0,25,60,1532892063,31,1,11,146098,89,950,950,899,950,9,254,23,Definitions.IPS(120,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(146098,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1461,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(65,Definitions.P.H,Definitions.S.LONG,true),97,1338,100,40)"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [250,70,160,186,158,192,105,19,105,62,168,50,95,214,39,2,19,123,75,244,136,249,128,168,138,49,72,117,250,211,148,248],\"legalEntityIdCounterparty\": [100,165,222,208,104,208,167,252,96,188,247,113,28,181,46,16,119,221,75,93,157,186,200,178,102,175,45,208,213,140,16,128],\"dayCountConvention\": 1,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 6,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 60,\"initialExchangeDate\": 2440588,\"maturityDate\": 68569,\"terminationDate\": 97,\"purchaseDate\": 140,\"capitalizationEndDate\": 111,\"cycleAnchorDateOfInterestPayment\": 89,\"cycleAnchorDateOfRateReset\": 30,\"cycleAnchorDateOfScalingIndex\": 2014223716,\"cycleAnchorDateOfFee\": 26,\"notionalPrincipal\": 4001,\"nominalInterestRate\": 4800,\"feeAccrued\": 401,\"accruedInterest\": 1338,\"rateMultiplier\": 51,\"rateSpread\": 80,\"feeRate\": 4899,\"nextResetRate\": 26,\"penaltyRate\": 901,\"premiumDiscountAtIED\": 27,\"priceAtPurchaseDate\": 4801,\"cycleOfInterestPayment\": {\"i\": 255,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4801,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 10001,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 32075,\"lifeFloor\": 68568,\"periodCap\": 28,\"periodFloor\": 28}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"250,70,160,186,158,192,105,19,105,62,168,50,95,214,39,2,19,123,75,244,136,249,128,168,138,49,72,117,250,211,148,248\"),stringToBytes32(\"100,165,222,208,104,208,167,252,96,188,247,113,28,181,46,16,119,221,75,93,157,186,200,178,102,175,45,208,213,140,16,128\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.O,Definitions.FeeBasis.N,1461,60,2440588,68569,97,140,111,89,30,2014223716,26,4001,4800,401,1338,51,80,4899,26,901,27,4801,Definitions.IPS(255,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4801,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(10001,Definitions.P.M,Definitions.S.LONG,false),32075,68568,28,28)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [234,182,12,80,32,243,244,119,89,171,160,239,191,100,240,20,245,225,148,189,216,147,96,86,255,19,232,248,240,148,59,231],\"legalEntityIdCounterparty\": [55,86,234,64,212,74,251,228,215,197,210,96,153,119,37,49,94,11,15,45,144,180,192,195,77,193,67,180,190,248,175,120],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 80,\"statusDate\": 12,\"initialExchangeDate\": 11,\"maturityDate\": 2447,\"terminationDate\": 4800,\"purchaseDate\": 0,\"capitalizationEndDate\": 12,\"cycleAnchorDateOfInterestPayment\": 68570,\"cycleAnchorDateOfRateReset\": 4000,\"cycleAnchorDateOfScalingIndex\": 8,\"cycleAnchorDateOfFee\": 61,\"notionalPrincipal\": 32074,\"nominalInterestRate\": 23,\"feeAccrued\": 256,\"accruedInterest\": 63,\"rateMultiplier\": 146098,\"rateSpread\": 80,\"feeRate\": 899,\"nextResetRate\": 149,\"penaltyRate\": 150,\"premiumDiscountAtIED\": 65,\"priceAtPurchaseDate\": 951,\"cycleOfInterestPayment\": {\"i\": 366,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 10,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 63,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 160,\"lifeFloor\": 1337,\"periodCap\": 40,\"periodFloor\": 96}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"234,182,12,80,32,243,244,119,89,171,160,239,191,100,240,20,245,225,148,189,216,147,96,86,255,19,232,248,240,148,59,231\"),stringToBytes32(\"55,86,234,64,212,74,251,228,215,197,210,96,153,119,37,49,94,11,15,45,144,180,192,195,77,193,67,180,190,248,175,120\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,80,12,11,2447,4800,0,12,68570,4000,8,61,32074,23,256,63,146098,80,899,149,150,65,951,Definitions.IPS(366,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(1969,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(10,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.H,Definitions.S.LONG,false),160,1337,40,96)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [212,217,209,13,224,210,12,243,96,244,139,62,200,252,72,167,6,142,187,176,42,164,169,190,25,129,241,113,82,34,1,254],\"legalEntityIdCounterparty\": [165,188,170,219,129,92,203,204,82,249,55,144,104,19,126,100,74,123,205,255,158,87,145,65,189,46,123,159,150,18,230,59],\"dayCountConvention\": 4,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[5],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 39,\"statusDate\": 10001,\"initialExchangeDate\": 367,\"maturityDate\": 10000,\"terminationDate\": 49,\"purchaseDate\": 31,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 70,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 2440587,\"cycleAnchorDateOfFee\": 28,\"notionalPrincipal\": 1971,\"nominalInterestRate\": -1,\"feeAccrued\": 400,\"accruedInterest\": 5,\"rateMultiplier\": 110,\"rateSpread\": 2446,\"feeRate\": 129,\"nextResetRate\": 161,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 2,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 61,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 399,\"p\": 4,\"s\": 1,\"isSet\": true},\"lifeCap\": 9,\"lifeFloor\": 2446,\"periodCap\": 1462,\"periodFloor\": 1337}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"212,217,209,13,224,210,12,243,96,244,139,62,200,252,72,167,6,142,187,176,42,164,169,190,25,129,241,113,82,34,1,254\"),stringToBytes32(\"165,188,170,219,129,92,203,204,82,249,55,144,104,19,126,100,74,123,205,255,158,87,145,65,189,46,123,159,150,18,230,59\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,39,10001,367,10000,49,31,61,70,96,2440587,28,1971,-1,400,5,110,2446,129,161,90,257,2,Definitions.IPS(139,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(61,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(399,Definitions.P.H,Definitions.S.SHORT,true),9,2446,1462,1337)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [52,49,149,36,236,93,94,204,225,83,14,186,145,8,244,26,176,73,44,218,110,231,2,3,95,197,37,64,187,73,189,102],\"legalEntityIdCounterparty\": [233,147,58,236,143,219,215,214,194,170,222,236,231,87,34,38,131,13,8,187,232,0,214,138,87,187,158,223,124,53,133,223],\"dayCountConvention\": 1,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 4801,\"statusDate\": 950,\"initialExchangeDate\": 68570,\"maturityDate\": 68568,\"terminationDate\": 90,\"purchaseDate\": 8,\"capitalizationEndDate\": 41,\"cycleAnchorDateOfInterestPayment\": 50,\"cycleAnchorDateOfRateReset\": 4,\"cycleAnchorDateOfScalingIndex\": 256,\"cycleAnchorDateOfFee\": 254,\"notionalPrincipal\": 151,\"nominalInterestRate\": 28,\"feeAccrued\": 68568,\"accruedInterest\": 4,\"rateMultiplier\": 18,\"rateSpread\": 69,\"feeRate\": 146097,\"nextResetRate\": 367,\"penaltyRate\": 11,\"premiumDiscountAtIED\": 86399,\"priceAtPurchaseDate\": 4001,\"cycleOfInterestPayment\": {\"i\": 950,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 109,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2014223716,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 86401,\"lifeFloor\": 2448,\"periodCap\": 2440587,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"52,49,149,36,236,93,94,204,225,83,14,186,145,8,244,26,176,73,44,218,110,231,2,3,95,197,37,64,187,73,189,102\"),stringToBytes32(\"233,147,58,236,143,219,215,214,194,170,222,236,231,87,34,38,131,13,8,187,232,0,214,138,87,187,158,223,124,53,133,223\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,4801,950,68570,68568,90,8,41,50,4,256,254,151,28,68568,4,18,69,146097,367,11,86399,4001,Definitions.IPS(950,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4000,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(109,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(2014223716,Definitions.P.Q,Definitions.S.SHORT,true),86401,2448,2440587,146096)"
            },
            {
              "js": "1971",
              "sol": "1971"
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [32,245,32,66,77,242,143,63,239,223,119,4,75,120,248,240,85,70,198,81,17,37,150,139,99,127,135,198,0,107,63,211],\"legalEntityIdCounterparty\": [207,134,36,197,190,150,153,42,20,247,136,242,28,249,233,243,250,78,3,237,74,52,232,42,38,238,241,8,178,237,96,108],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 0,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 96,\"statusDate\": 97,\"initialExchangeDate\": 1337,\"maturityDate\": 2014223716,\"terminationDate\": 256,\"purchaseDate\": 4800,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 3,\"cycleAnchorDateOfScalingIndex\": 6,\"cycleAnchorDateOfFee\": 400,\"notionalPrincipal\": 4801,\"nominalInterestRate\": 28,\"feeAccrued\": 1337,\"accruedInterest\": 70,\"rateMultiplier\": 64,\"rateSpread\": 2448,\"feeRate\": 9,\"nextResetRate\": 32076,\"penaltyRate\": 96,\"premiumDiscountAtIED\": 1532892062,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 69,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 99,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 51,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 97,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 71,\"lifeFloor\": 368,\"periodCap\": 64,\"periodFloor\": 4899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"32,245,32,66,77,242,143,63,239,223,119,4,75,120,248,240,85,70,198,81,17,37,150,139,99,127,135,198,0,107,63,211\"),stringToBytes32(\"207,134,36,197,190,150,153,42,20,247,136,242,28,249,233,243,250,78,3,237,74,52,232,42,38,238,241,8,178,237,96,108\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,96,97,1337,2014223716,256,4800,0,160,3,6,400,4801,28,1337,70,64,2448,9,32076,96,1532892062,3,Definitions.IPS(69,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(99,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(51,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(97,Definitions.P.M,Definitions.S.SHORT,false),71,368,64,4899)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [195,110,24,37,223,156,254,21,60,83,66,134,35,170,79,43,9,161,232,161,160,101,212,188,2,224,165,3,239,20,86,20],\"legalEntityIdCounterparty\": [123,158,37,24,204,45,144,78,126,159,194,61,126,53,29,188,61,56,254,52,1,139,87,65,246,11,42,131,26,194,17,22],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 3999,\"statusDate\": 15,\"initialExchangeDate\": 68570,\"maturityDate\": 1532892062,\"terminationDate\": 29,\"purchaseDate\": 99,\"capitalizationEndDate\": 2014223714,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 146096,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 68570,\"nominalInterestRate\": 68569,\"feeAccrued\": 26,\"accruedInterest\": 360,\"rateMultiplier\": 119,\"rateSpread\": 1,\"feeRate\": 86399,\"nextResetRate\": 4899,\"penaltyRate\": 97,\"premiumDiscountAtIED\": 4,\"priceAtPurchaseDate\": 63,\"cycleOfInterestPayment\": {\"i\": 1969,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146098,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 32075,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 51,\"lifeFloor\": 1969,\"periodCap\": 39,\"periodFloor\": 4001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"195,110,24,37,223,156,254,21,60,83,66,134,35,170,79,43,9,161,232,161,160,101,212,188,2,224,165,3,239,20,86,20\"),stringToBytes32(\"123,158,37,24,204,45,144,78,126,159,194,61,126,53,29,188,61,56,254,52,1,139,87,65,246,11,42,131,26,194,17,22\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,3999,15,68570,1532892062,29,99,2014223714,150,119,146096,4901,68570,68569,26,360,119,1,86399,4899,97,4,63,Definitions.IPS(1969,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(146098,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(950,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(32075,Definitions.P.Q,Definitions.S.LONG,true),51,1969,39,4001)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [4,243,113,223,113,3,166,223,200,236,14,243,215,168,200,169,134,131,235,6,24,147,17,24,226,231,90,72,159,32,58,60],\"legalEntityIdCounterparty\": [204,221,85,41,243,206,217,224,211,174,16,38,103,185,60,125,102,234,208,167,34,144,49,184,22,87,13,224,149,224,4,46],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 151,\"statusDate\": 1460,\"initialExchangeDate\": 80,\"maturityDate\": 30,\"terminationDate\": 97,\"purchaseDate\": 3,\"capitalizationEndDate\": 364,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 4900,\"cycleAnchorDateOfScalingIndex\": 1532892062,\"cycleAnchorDateOfFee\": 17,\"notionalPrincipal\": -1,\"nominalInterestRate\": 141,\"feeAccrued\": 3,\"accruedInterest\": 101,\"rateMultiplier\": 16,\"rateSpread\": 24,\"feeRate\": 364,\"nextResetRate\": 49,\"penaltyRate\": 2440587,\"premiumDiscountAtIED\": 9,\"priceAtPurchaseDate\": 899,\"cycleOfInterestPayment\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 149,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 50,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 30,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 901,\"lifeFloor\": 1,\"periodCap\": 146096,\"periodFloor\": 24}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"4,243,113,223,113,3,166,223,200,236,14,243,215,168,200,169,134,131,235,6,24,147,17,24,226,231,90,72,159,32,58,60\"),stringToBytes32(\"204,221,85,41,243,206,217,224,211,174,16,38,103,185,60,125,102,234,208,167,34,144,49,184,22,87,13,224,149,224,4,46\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,151,1460,80,30,97,3,364,951,4900,1532892062,17,-1,141,3,101,16,24,364,49,2440587,9,899,Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(149,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(50,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(30,Definitions.P.Y,Definitions.S.LONG,true),901,1,146096,24)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [174,175,35,224,252,91,184,110,224,9,0,56,209,47,36,55,81,215,63,161,124,158,232,113,233,87,141,49,61,196,153,76],\"legalEntityIdCounterparty\": [50,27,147,29,250,228,149,179,52,222,237,172,136,214,219,175,146,250,117,91,136,127,33,255,77,86,26,203,53,241,222,39],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 160,\"statusDate\": 110,\"initialExchangeDate\": 121,\"maturityDate\": 68569,\"terminationDate\": 101,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 951,\"cycleAnchorDateOfRateReset\": 4799,\"cycleAnchorDateOfScalingIndex\": 361,\"cycleAnchorDateOfFee\": 24,\"notionalPrincipal\": 69,\"nominalInterestRate\": 0,\"feeAccrued\": 66,\"accruedInterest\": 17,\"rateMultiplier\": 48,\"rateSpread\": 60,\"feeRate\": -1,\"nextResetRate\": 12,\"penaltyRate\": 11,\"premiumDiscountAtIED\": 899,\"priceAtPurchaseDate\": 28,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 255,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 32074,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 19,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 12,\"lifeFloor\": 66,\"periodCap\": 21,\"periodFloor\": 109}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"174,175,35,224,252,91,184,110,224,9,0,56,209,47,36,55,81,215,63,161,124,158,232,113,233,87,141,49,61,196,153,76\"),stringToBytes32(\"50,27,147,29,250,228,149,179,52,222,237,172,136,214,219,175,146,250,117,91,136,127,33,255,77,86,26,203,53,241,222,39\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,160,110,121,68569,101,0,0,951,4799,361,24,69,0,66,17,48,60,-1,12,11,899,28,Definitions.IPS(61,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(32074,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(19,Definitions.P.Q,Definitions.S.LONG,true),12,66,21,109)"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [168,113,186,18,66,251,56,248,162,54,179,134,166,123,82,124,169,218,32,51,21,138,192,188,44,24,208,50,91,161,56,160],\"legalEntityIdCounterparty\": [26,44,100,39,18,156,134,146,55,60,242,115,81,144,204,187,69,51,61,126,129,27,175,133,173,29,142,135,165,176,26,200],\"dayCountConvention\": 5,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 2,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 32076,\"statusDate\": 1971,\"initialExchangeDate\": 1460,\"maturityDate\": 159,\"terminationDate\": 39,\"purchaseDate\": 951,\"capitalizationEndDate\": 1337,\"cycleAnchorDateOfInterestPayment\": 2014223714,\"cycleAnchorDateOfRateReset\": 27,\"cycleAnchorDateOfScalingIndex\": 2440589,\"cycleAnchorDateOfFee\": 366,\"notionalPrincipal\": 1461000,\"nominalInterestRate\": 27,\"feeAccrued\": 120,\"accruedInterest\": 21,\"rateMultiplier\": 1461001,\"rateSpread\": 121,\"feeRate\": 8,\"nextResetRate\": 4899,\"penaltyRate\": 364,\"premiumDiscountAtIED\": 3999,\"priceAtPurchaseDate\": 139,\"cycleOfInterestPayment\": {\"i\": 4901,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 151,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 91,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 21,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 3,\"lifeFloor\": 2440589,\"periodCap\": 2014223714,\"periodFloor\": 364}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"168,113,186,18,66,251,56,248,162,54,179,134,166,123,82,124,169,218,32,51,21,138,192,188,44,24,208,50,91,161,56,160\"),stringToBytes32(\"26,44,100,39,18,156,134,146,55,60,242,115,81,144,204,187,69,51,61,126,129,27,175,133,173,29,142,135,165,176,26,200\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.O,Definitions.FeeBasis.A,32076,1971,1460,159,39,951,1337,2014223714,27,2440589,366,1461000,27,120,21,1461001,121,8,4899,364,3999,139,Definitions.IPS(4901,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(151,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(91,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.M,Definitions.S.SHORT,false),3,2440589,2014223714,364)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "899",
              "sol": "899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [248,140,17,68,189,218,27,15,186,163,137,3,223,111,238,164,167,254,145,74,131,46,251,80,146,226,101,132,87,163,140,247],\"legalEntityIdCounterparty\": [182,42,224,13,125,19,115,6,153,169,6,129,63,47,61,130,130,200,250,186,201,250,111,126,247,90,248,103,61,204,26,214],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 79,\"statusDate\": 364,\"initialExchangeDate\": 1,\"maturityDate\": 4800,\"terminationDate\": 120,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 9999,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 111,\"cycleAnchorDateOfFee\": 1,\"notionalPrincipal\": 39,\"nominalInterestRate\": 0,\"feeAccrued\": 69,\"accruedInterest\": 21,\"rateMultiplier\": 1532892063,\"rateSpread\": 1970,\"feeRate\": 2446,\"nextResetRate\": 86400,\"penaltyRate\": 254,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 160,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 100,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 4901,\"lifeFloor\": 401,\"periodCap\": 18,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"248,140,17,68,189,218,27,15,186,163,137,3,223,111,238,164,167,254,145,74,131,46,251,80,146,226,101,132,87,163,140,247\"),stringToBytes32(\"182,42,224,13,125,19,115,6,153,169,6,129,63,47,61,130,130,200,250,186,201,250,111,126,247,90,248,103,61,204,26,214\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,79,364,1,4800,120,0,0,9999,0,111,1,39,0,69,21,1532892063,1970,2446,86400,254,4800,160,Definitions.IPS(100,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(255,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(100,Definitions.P.H,Definitions.S.LONG,false),4901,401,18,399)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [102,158,82,228,18,224,143,231,190,18,238,234,60,103,238,236,200,127,91,74,98,164,176,228,168,153,151,140,105,2,67,135],\"legalEntityIdCounterparty\": [5,19,174,46,152,146,58,151,88,114,122,169,48,159,67,1,228,253,169,164,119,192,61,106,197,217,5,101,220,210,100,94],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 10001,\"statusDate\": 26,\"initialExchangeDate\": 1461002,\"maturityDate\": 1460,\"terminationDate\": 1461001,\"purchaseDate\": 4901,\"capitalizationEndDate\": 50,\"cycleAnchorDateOfInterestPayment\": 100,\"cycleAnchorDateOfRateReset\": 79,\"cycleAnchorDateOfScalingIndex\": 97,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 146097,\"nominalInterestRate\": 32075,\"feeAccrued\": 1462,\"accruedInterest\": 68570,\"rateMultiplier\": -1,\"rateSpread\": 1337,\"feeRate\": 2446,\"nextResetRate\": 4800,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 68568,\"priceAtPurchaseDate\": 1970,\"cycleOfInterestPayment\": {\"i\": 141,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 95,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 41,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 95,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 21,\"lifeFloor\": 4801,\"periodCap\": 9,\"periodFloor\": 949}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"102,158,82,228,18,224,143,231,190,18,238,234,60,103,238,236,200,127,91,74,98,164,176,228,168,153,151,140,105,2,67,135\"),stringToBytes32(\"5,19,174,46,152,146,58,151,88,114,122,169,48,159,67,1,228,253,169,164,119,192,61,106,197,217,5,101,220,210,100,94\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,10001,26,1461002,1460,1461001,4901,50,100,79,97,121,146097,32075,1462,68570,-1,1337,2446,4800,1461000,68568,1970,Definitions.IPS(141,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(95,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(41,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(95,Definitions.P.M,Definitions.S.LONG,false),21,4801,9,949)"
            },
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [25,77,105,142,82,203,139,215,60,39,183,235,58,120,142,146,165,172,67,63,80,68,70,209,139,216,113,148,198,206,5,146],\"legalEntityIdCounterparty\": [127,143,192,207,6,22,196,49,13,73,233,131,49,55,70,253,5,17,211,83,180,163,9,240,20,43,85,198,66,66,99,0],\"dayCountConvention\": 0,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 2448,\"statusDate\": 91,\"initialExchangeDate\": 364,\"maturityDate\": 360,\"terminationDate\": 86400,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 48,\"cycleAnchorDateOfScalingIndex\": 1,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 141,\"nominalInterestRate\": 0,\"feeAccrued\": 79,\"accruedInterest\": 361,\"rateMultiplier\": 30,\"rateSpread\": 1461002,\"feeRate\": 68568,\"nextResetRate\": 96,\"penaltyRate\": 90,\"premiumDiscountAtIED\": 257,\"priceAtPurchaseDate\": 31,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 64,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 13,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 149,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 27,\"lifeFloor\": 2014223715,\"periodCap\": 27,\"periodFloor\": 1969}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"25,77,105,142,82,203,139,215,60,39,183,235,58,120,142,146,165,172,67,63,80,68,70,209,139,216,113,148,198,206,5,146\"),stringToBytes32(\"127,143,192,207,6,22,196,49,13,73,233,131,49,55,70,253,5,17,211,83,180,163,9,240,20,43,85,198,66,66,99,0\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,2448,91,364,360,86400,0,0,90,48,1,0,141,0,79,361,30,1461002,68568,96,90,257,31,Definitions.IPS(364,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(64,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(13,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(149,Definitions.P.H,Definitions.S.SHORT,false),27,2014223715,27,1969)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [0,221,39,249,105,169,184,200,204,252,181,74,167,178,83,228,42,53,173,196,130,230,1,111,154,146,203,92,67,54,115,27],\"legalEntityIdCounterparty\": [238,87,78,91,128,64,64,18,106,243,133,98,135,65,157,10,157,44,211,44,20,68,180,201,240,198,167,23,104,206,43,198],\"dayCountConvention\": 2,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 90,\"statusDate\": 61,\"initialExchangeDate\": 86401,\"maturityDate\": 10,\"terminationDate\": 366,\"purchaseDate\": 2447,\"capitalizationEndDate\": 70,\"cycleAnchorDateOfInterestPayment\": 4001,\"cycleAnchorDateOfRateReset\": 146096,\"cycleAnchorDateOfScalingIndex\": 6,\"cycleAnchorDateOfFee\": 3999,\"notionalPrincipal\": 17,\"nominalInterestRate\": 2440588,\"feeAccrued\": 19,\"accruedInterest\": 79,\"rateMultiplier\": 15,\"rateSpread\": 23,\"feeRate\": 364,\"nextResetRate\": 368,\"penaltyRate\": 71,\"premiumDiscountAtIED\": 99,\"priceAtPurchaseDate\": 1336,\"cycleOfInterestPayment\": {\"i\": 51,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 101,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 11,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 9,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 950,\"lifeFloor\": 159,\"periodCap\": 48,\"periodFloor\": 399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"0,221,39,249,105,169,184,200,204,252,181,74,167,178,83,228,42,53,173,196,130,230,1,111,154,146,203,92,67,54,115,27\"),stringToBytes32(\"238,87,78,91,128,64,64,18,106,243,133,98,135,65,157,10,157,44,211,44,20,68,180,201,240,198,167,23,104,206,43,198\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,90,61,86401,10,366,2447,70,4001,146096,6,3999,17,2440588,19,79,15,23,364,368,71,99,1336,Definitions.IPS(51,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(101,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(11,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(9,Definitions.P.W,Definitions.S.SHORT,true),950,159,48,399)"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [227,190,235,113,44,132,122,245,177,95,86,12,224,61,63,169,163,141,244,168,245,5,183,137,59,147,142,250,177,137,240,26],\"legalEntityIdCounterparty\": [164,141,183,168,144,101,56,18,137,0,166,87,175,28,245,12,67,224,229,124,148,61,36,18,136,132,3,14,167,101,146,47],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 120,\"statusDate\": 99,\"initialExchangeDate\": 31,\"maturityDate\": 1,\"terminationDate\": 4899,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 368,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 1969,\"notionalPrincipal\": 367,\"nominalInterestRate\": 0,\"feeAccrued\": 68570,\"accruedInterest\": 1460,\"rateMultiplier\": 59,\"rateSpread\": 2446,\"feeRate\": 2014223714,\"nextResetRate\": 141,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 359,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 21,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 66,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 2440587,\"lifeFloor\": 360,\"periodCap\": 20,\"periodFloor\": 0}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"227,190,235,113,44,132,122,245,177,95,86,12,224,61,63,169,163,141,244,168,245,5,183,137,59,147,142,250,177,137,240,26\"),stringToBytes32(\"164,141,183,168,144,101,56,18,137,0,166,87,175,28,245,12,67,224,229,124,148,61,36,18,136,132,3,14,167,101,146,47\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,120,99,31,1,4899,0,0,368,951,0,1969,367,0,68570,1460,59,2446,2014223714,141,160,359,89,Definitions.IPS(130,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(21,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(364,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(66,Definitions.P.Q,Definitions.S.LONG,false),2440587,360,20,0)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [106,30,183,249,185,72,23,56,123,200,252,78,185,197,28,196,194,112,38,23,123,65,121,120,219,80,190,128,93,60,210,102],\"legalEntityIdCounterparty\": [17,59,83,221,106,206,248,114,128,198,111,52,2,137,222,28,113,31,60,217,162,254,198,147,91,204,151,104,96,119,185,249],\"dayCountConvention\": 6,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 364,\"initialExchangeDate\": 51,\"maturityDate\": 109,\"terminationDate\": 3,\"purchaseDate\": 32074,\"capitalizationEndDate\": 59,\"cycleAnchorDateOfInterestPayment\": 2440587,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 130,\"cycleAnchorDateOfFee\": 119,\"notionalPrincipal\": 100,\"nominalInterestRate\": 21,\"feeAccrued\": 8,\"accruedInterest\": 59,\"rateMultiplier\": 159,\"rateSpread\": 131,\"feeRate\": 4000,\"nextResetRate\": 1461000,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 5,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 7,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 360,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1460,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 1338,\"lifeFloor\": 361,\"periodCap\": 12,\"periodFloor\": 1532892063}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"106,30,183,249,185,72,23,56,123,200,252,78,185,197,28,196,194,112,38,23,123,65,121,120,219,80,190,128,93,60,210,102\"),stringToBytes32(\"17,59,83,221,106,206,248,114,128,198,111,52,2,137,222,28,113,31,60,217,162,254,198,147,91,204,151,104,96,119,185,249\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1461,364,51,109,3,32074,59,2440587,28,130,119,100,21,8,59,159,131,4000,1461000,2446,5,21,Definitions.IPS(7,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(360,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.H,Definitions.S.LONG,false),1338,361,12,1532892063)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [44,246,15,148,73,159,134,122,189,114,4,151,9,222,9,78,203,57,107,153,240,239,15,26,188,142,95,46,243,219,5,126],\"legalEntityIdCounterparty\": [131,81,15,118,118,51,112,120,133,110,154,149,64,85,77,152,32,85,219,11,175,201,255,58,143,98,145,131,140,20,66,155],\"dayCountConvention\": 4,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 21,\"statusDate\": 27,\"initialExchangeDate\": 32076,\"maturityDate\": 4799,\"terminationDate\": 25,\"purchaseDate\": 1532892063,\"capitalizationEndDate\": 61,\"cycleAnchorDateOfInterestPayment\": 59,\"cycleAnchorDateOfRateReset\": 1461001,\"cycleAnchorDateOfScalingIndex\": 71,\"cycleAnchorDateOfFee\": 2446,\"notionalPrincipal\": 1461002,\"nominalInterestRate\": 364,\"feeAccrued\": 149,\"accruedInterest\": 23,\"rateMultiplier\": 63,\"rateSpread\": 2446,\"feeRate\": 61,\"nextResetRate\": 364,\"penaltyRate\": 2014223714,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 951,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1532892062,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2448,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 39,\"lifeFloor\": 13,\"periodCap\": 111,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"44,246,15,148,73,159,134,122,189,114,4,151,9,222,9,78,203,57,107,153,240,239,15,26,188,142,95,46,243,219,5,126\"),stringToBytes32(\"131,81,15,118,118,51,112,120,133,110,154,149,64,85,77,152,32,85,219,11,175,201,255,58,143,98,145,131,140,20,66,155\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,21,27,32076,4799,25,1532892063,61,59,1461001,71,2446,1461002,364,149,23,63,2446,61,364,2014223714,2440589,951,Definitions.IPS(1461002,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(1532892062,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2448,Definitions.P.Q,Definitions.S.LONG,false),39,13,111,146096)"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [93,177,36,149,28,88,65,94,34,102,169,188,108,236,24,190,95,32,77,33,96,95,194,160,59,210,217,160,86,32,154,35],\"legalEntityIdCounterparty\": [61,87,18,56,36,55,153,16,188,234,21,144,106,128,16,95,85,222,238,246,249,250,22,228,7,201,103,198,161,152,195,239],\"dayCountConvention\": 3,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 7,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 2014223715,\"statusDate\": 111,\"initialExchangeDate\": 20,\"maturityDate\": 9999,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 2440587,\"cycleAnchorDateOfScalingIndex\": 1460,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 140,\"nominalInterestRate\": 0,\"feeAccrued\": 1532892062,\"accruedInterest\": 364,\"rateMultiplier\": 2014223715,\"rateSpread\": 2014223714,\"feeRate\": 65,\"nextResetRate\": 48,\"penaltyRate\": 12,\"premiumDiscountAtIED\": 146096,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 368,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1461,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 97,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 366,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 12,\"lifeFloor\": 1,\"periodCap\": 120,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"93,177,36,149,28,88,65,94,34,102,169,188,108,236,24,190,95,32,77,33,96,95,194,160,59,210,217,160,86,32,154,35\"),stringToBytes32(\"61,87,18,56,36,55,153,16,188,234,21,144,106,128,16,95,85,222,238,246,249,250,22,228,7,201,103,198,161,152,195,239\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,2014223715,111,20,9999,0,0,0,256,2440587,1460,32075,140,0,1532892062,364,2014223715,2014223714,65,48,12,146096,1461,Definitions.IPS(368,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1461,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(97,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(366,Definitions.P.M,Definitions.S.SHORT,false),12,1,120,80)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [37,133,95,202,213,127,226,221,87,191,213,93,246,177,146,217,181,18,164,242,220,244,202,91,115,241,159,73,139,131,241,137],\"legalEntityIdCounterparty\": [147,77,54,94,52,66,16,34,61,250,102,151,41,91,169,68,134,224,227,224,9,130,209,70,209,235,34,87,162,86,140,92],\"dayCountConvention\": 2,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 68568,\"statusDate\": 899,\"initialExchangeDate\": 97,\"maturityDate\": 399,\"terminationDate\": 119,\"purchaseDate\": 3999,\"capitalizationEndDate\": 1970,\"cycleAnchorDateOfInterestPayment\": 1460,\"cycleAnchorDateOfRateReset\": 6,\"cycleAnchorDateOfScalingIndex\": 66,\"cycleAnchorDateOfFee\": 119,\"notionalPrincipal\": 399,\"nominalInterestRate\": 68570,\"feeAccrued\": 70,\"accruedInterest\": 25,\"rateMultiplier\": 86399,\"rateSpread\": 39,\"feeRate\": 139,\"nextResetRate\": 1,\"penaltyRate\": 1461000,\"premiumDiscountAtIED\": 7,\"priceAtPurchaseDate\": 21,\"cycleOfInterestPayment\": {\"i\": 130,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1532892062,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 161,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 61,\"lifeFloor\": 79,\"periodCap\": 14,\"periodFloor\": 119}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"37,133,95,202,213,127,226,221,87,191,213,93,246,177,146,217,181,18,164,242,220,244,202,91,115,241,159,73,139,131,241,137\"),stringToBytes32(\"147,77,54,94,52,66,16,34,61,250,102,151,41,91,169,68,134,224,227,224,9,130,209,70,209,235,34,87,162,86,140,92\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,68568,899,97,399,119,3999,1970,1460,6,66,119,399,68570,70,25,86399,39,139,1,1461000,7,21,Definitions.IPS(130,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(1532892062,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(161,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4,Definitions.P.W,Definitions.S.LONG,false),61,79,14,119)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [90,222,50,230,223,52,202,5,172,155,71,83,41,19,11,137,67,95,165,58,158,224,54,193,94,226,163,57,34,53,179,147],\"legalEntityIdCounterparty\": [8,31,47,31,15,126,250,141,0,171,152,91,7,31,17,152,38,98,237,118,68,201,17,69,118,199,32,194,169,184,101,125],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 21,\"statusDate\": 119,\"initialExchangeDate\": 26,\"maturityDate\": 2014223714,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 68569,\"cycleAnchorDateOfRateReset\": 51,\"cycleAnchorDateOfScalingIndex\": 9999,\"cycleAnchorDateOfFee\": 149,\"notionalPrincipal\": 48,\"nominalInterestRate\": 0,\"feeAccrued\": 0,\"accruedInterest\": 257,\"rateMultiplier\": 1462,\"rateSpread\": 96,\"feeRate\": 1970,\"nextResetRate\": 131,\"penaltyRate\": 21,\"premiumDiscountAtIED\": 951,\"priceAtPurchaseDate\": 2446,\"cycleOfInterestPayment\": {\"i\": 100,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 90,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 63,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 359,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 121,\"lifeFloor\": 1336,\"periodCap\": 255,\"periodFloor\": 14}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"90,222,50,230,223,52,202,5,172,155,71,83,41,19,11,137,67,95,165,58,158,224,54,193,94,226,163,57,34,53,179,147\"),stringToBytes32(\"8,31,47,31,15,126,250,141,0,171,152,91,7,31,17,152,38,98,237,118,68,201,17,69,118,199,32,194,169,184,101,125\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,21,119,26,2014223714,0,0,0,68569,51,9999,149,48,0,0,257,1462,96,1970,131,21,951,2446,Definitions.IPS(100,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(90,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(359,Definitions.P.H,Definitions.S.SHORT,false),121,1336,255,14)"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.129ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:12:19.150ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}