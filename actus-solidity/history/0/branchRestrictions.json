,{
  "2020-11-10T02:17:08.050ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "1969",
              "sol": "1969"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "1969",
                "sol": "1969"
              },
              {
                "js": "89",
                "sol": "89"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.051ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.052ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.052ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.053ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.053ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.054ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "month > 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN month>12",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.057ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "hour >= 24",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour>=24,FunctionCall==true",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "68570",
              "sol": "68570"
            },
            {
              "js": "139",
              "sol": "139"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "401",
              "sol": "401"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.060ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.061ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.061ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.061ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "366",
              "sol": "366"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.062ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.063ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.068ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.069ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.080ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.080ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.081ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.082ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.082ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.083ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.083ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.084ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.084ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.085ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "2440588",
              "sol": "2440588"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.085ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.086ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.086ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.087ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "32",
              "sol": "32"
            },
            {
              "js": "900",
              "sol": "900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.087ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.088ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.088ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.089ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223716,
                "sol": 2014223716
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.090ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 68570,
                "sol": 68570
              },
              {
                "js": "68569",
                "sol": "68569"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.091ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 258,
                "sol": 258
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.092ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1461,
                "sol": 1461
              },
              {
                "js": "1460",
                "sol": "1460"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.092ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.093ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892065,
                "sol": 1532892065
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.096ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.098ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.108ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.ContractRole.LG"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.130ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": 25,
                "sol": 25
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "32074",
              "sol": "32074"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": 1337,
                "sol": 1337
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": 128,
                "sol": 128
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": 62,
                "sol": 62
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": 3,
              "sol": "Definitions.DayCountConvention._30E_360ISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": 95,
                "sol": 95
              },
              {
                "js": 3,
                "sol": "Definitions.DayCountConvention._30E_360ISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:17:08.150ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.150ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.151ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.152ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.169ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{\"i\": 32074,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(32074,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 149,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(149,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{\"i\": 257,\"p\": 2,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(257,Definitions.P.M,Definitions.S.SHORT,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{\"i\": 4901,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(4901,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.176ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.177ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.179ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractStatus.PF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.184ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.187ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.192ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.193ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.197ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 368,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(368,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": "365",
              "sol": "365"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 96,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(96,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 79,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(79,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 65,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(65,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 4000,\"p\": 5,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(4000,Definitions.P.Y,Definitions.S.SHORT,false)"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 4899,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.202ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "3999",
              "sol": "3999"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{\"i\": 86399,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(86399,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "{\"i\": 161,\"p\": 1,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(161,Definitions.P.W,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{\"i\": 3999,\"p\": 0,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(3999,Definitions.P.D,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "150",
              "sol": "150"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{\"i\": 131,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(131,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{\"i\": 32074,\"p\": 3,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(32074,Definitions.P.Q,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{\"i\": 10001,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(10001,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "20",
              "sol": "20"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{\"i\": 1971,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1971,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "{\"i\": 360,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(360,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "86401",
              "sol": "86401"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{\"i\": 24,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(24,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.210ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 16,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(16,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "90",
              "sol": "90"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 146096,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(146096,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 367,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(367,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "949",
              "sol": "949"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 364,\"p\": 3,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(364,Definitions.P.Q,Definitions.S.LONG,true)"
            },
            {
              "js": "951",
              "sol": "951"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 18,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 2440588,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 4901,\"p\": 99999,\"s\": 0,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.214ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 96,\"scheduleTime\": 48,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 7},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 65,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 19},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 12,\"eventType\": 7,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 951,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 4801,\"eventType\": 7,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 60,\"eventType\": 20,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 10},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 12,\"scheduleTime\": 130,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 19},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 146098,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 3,\"stfType\": 20},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 1,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 32,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 13,\"stfType\": 16},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 29,\"eventType\": 12,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 7},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 70,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 4,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 2,\"stfType\": 15},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 1,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 10},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 2014223714,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 365,\"scheduleTime\": 1969,\"eventType\": 17,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 4},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 100,\"scheduleTime\": 400,\"eventType\": 6,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 11,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 256,\"eventType\": 15,\"currency\": accounts[0],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 23,\"eventType\": 15,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 86399,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 161,\"eventType\": 12,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 5},{\"eventTime\": 1971,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 68569,\"eventType\": 13,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 3,\"eventType\": 14,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 32074,\"eventType\": 17,\"currency\": accounts[8],\"pofType\": 18,\"stfType\": 1},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 61,\"eventType\": 8,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 11},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 151,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 4,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 12,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 5},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 48,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 1,\"stfType\": 5},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 139,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 146098,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 5},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 161,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 4},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 1461001,\"scheduleTime\": 2448,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 120,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 111,\"eventType\": 6,\"currency\": accounts[9],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 32075,\"scheduleTime\": 368,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 13},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 1336,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 8},{\"eventTime\": 901,\"eventTimeWithEpochOffset\": 951,\"scheduleTime\": 4801,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 32074,\"eventType\": 5,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 19},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 901,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 4799,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 5},{\"eventTime\": 17,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 13,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 18},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 13,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 1,\"eventType\": 15,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 65,\"eventTimeWithEpochOffset\": 899,\"scheduleTime\": 109,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 68568,\"scheduleTime\": 399,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 3},{\"eventTime\": 31,\"eventTimeWithEpochOffset\": 146098,\"scheduleTime\": 359,\"eventType\": 10,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 146097,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 141,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 3,\"stfType\": 10},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 1970,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 149,\"eventType\": 4,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 8},{\"eventTime\": 1532892062,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 139,\"eventType\": 7,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 0},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 366,\"eventType\": 19,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 19},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 27,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 11},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 69,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 9},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 40,\"scheduleTime\": 401,\"eventType\": 7,\"currency\": accounts[4],\"pofType\": 9,\"stfType\": 16},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 9,\"eventType\": 6,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 16},{\"eventTime\": 3,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 1461000,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 18},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 6,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 1},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 63,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 20,\"stfType\": 6},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 69,\"scheduleTime\": 109,\"eventType\": 12,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 257,\"scheduleTime\": 366,\"eventType\": 9,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 16},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 129,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 13,\"eventType\": 10,\"currency\": accounts[5],\"pofType\": 7,\"stfType\": 16}]",
              "sol": "[Definitions.ProtoEvent(111,96,48,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PY),Definitions.ProtoEvent(61,18,65,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.STD),Definitions.ProtoEvent(31,23,12,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(19,1532892063,951,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(32074,2448,4801,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(4899,68568,60,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.TD),Definitions.ProtoEvent(4801,12,130,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.STD),Definitions.ProtoEvent(7,68570,146098,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.Child),Definitions.ProtoEvent(360,60,1,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(1971,97,1,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(63,18,32,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.DV),Definitions.ProtoEvent(367,2014223714,29,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PY),Definitions.ProtoEvent(11,899,70,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(2014223715,4000,4,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.CD),Definitions.ProtoEvent(360,256,1,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.TD),Definitions.ProtoEvent(1532892062,1969,2014223714,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(901,365,1969,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.IP),Definitions.ProtoEvent(6,100,400,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(11,60,256,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(900,111,23,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(110,3,86399,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(1461000,0,161,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PR),Definitions.ProtoEvent(1971,10000,68569,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(150,79,3,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(19,68570,32074,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.MD),Definitions.ProtoEvent(141,4901,61,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCI),Definitions.ProtoEvent(101,2014223714,151,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(68569,26,4,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(1461001,1,12,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PR),Definitions.ProtoEvent(31,1460,48,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PR),Definitions.ProtoEvent(1532892062,1532892063,139,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(900,140,146098,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PR),Definitions.ProtoEvent(65,2440588,161,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IP),Definitions.ProtoEvent(1532892064,1461001,2448,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(146098,1336,120,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(26,19,111,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(20,32075,368,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.RRY),Definitions.ProtoEvent(70,161,1336,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.FP),Definitions.ProtoEvent(901,951,4801,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(39,32,32074,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.STD),Definitions.ProtoEvent(3,99,901,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(81,2,4799,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PR),Definitions.ProtoEvent(17,119,13,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IPCB),Definitions.ProtoEvent(0,4800,13,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(1461,364,1,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(65,899,109,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(81,68568,399,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IED),Definitions.ProtoEvent(31,146098,359,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(146097,151,141,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.TD),Definitions.ProtoEvent(69,160,1970,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(99,59,149,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.FP),Definitions.ProtoEvent(1532892062,1461000,139,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.SD),Definitions.ProtoEvent(150,91,366,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.STD),Definitions.ProtoEvent(101,40,27,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IPCI),Definitions.ProtoEvent(2,150,69,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PRD),Definitions.ProtoEvent(16,40,401,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.DV),Definitions.ProtoEvent(68568,129,9,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.DV),Definitions.ProtoEvent(3,2014223715,1461000,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IPCB),Definitions.ProtoEvent(4,2014223715,6,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.MD),Definitions.ProtoEvent(141,5,63,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PP),Definitions.ProtoEvent(68568,69,109,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(1461001,257,366,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.DV),Definitions.ProtoEvent(97,400,129,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(66,79,13,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.DV)]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.229ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 159,\"scheduleTime\": 1,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 90,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 4,\"stfType\": 11},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 1532892064,\"eventType\": 12,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 6},{\"eventTime\": 361,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 90,\"eventType\": 13,\"currency\": accounts[8],\"pofType\": 19,\"stfType\": 8},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 32074,\"scheduleTime\": 1461,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 4799,\"eventTimeWithEpochOffset\": 3999,\"scheduleTime\": 256,\"eventType\": 5,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 6},{\"eventTime\": 51,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 366,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 16,\"stfType\": 6},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 2,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 4},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 1,\"eventType\": 10,\"currency\": accounts[2],\"pofType\": 15,\"stfType\": 11},{\"eventTime\": 367,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 89,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 4},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 31,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 18},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 2446,\"scheduleTime\": 23,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 2},{\"eventTime\": 101,\"eventTimeWithEpochOffset\": 9999,\"scheduleTime\": 1338,\"eventType\": 7,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 17},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 401,\"scheduleTime\": 90,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 130,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 1337,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 8},{\"eventTime\": 365,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 130,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 1532892063,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 140,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 17,\"stfType\": 11},{\"eventTime\": 6,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 1971,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 17},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 32,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 11,\"stfType\": 0},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 4901,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 51,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 17,\"stfType\": 2},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 255,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 19},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 364,\"scheduleTime\": 19,\"eventType\": 8,\"currency\": accounts[7],\"pofType\": 6,\"stfType\": 17},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 50,\"eventType\": 16,\"currency\": accounts[4],\"pofType\": 16,\"stfType\": 14},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 2440588,\"scheduleTime\": 111,\"eventType\": 10,\"currency\": accounts[4],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 110,\"eventType\": 4,\"currency\": accounts[9],\"pofType\": 15,\"stfType\": 16},{\"eventTime\": 89,\"eventTimeWithEpochOffset\": 110,\"scheduleTime\": 13,\"eventType\": 3,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 10},{\"eventTime\": 24,\"eventTimeWithEpochOffset\": 19,\"scheduleTime\": 8,\"eventType\": 2,\"currency\": accounts[4],\"pofType\": 3,\"stfType\": 15},{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 86400,\"scheduleTime\": 1532892062,\"eventType\": 19,\"currency\": accounts[4],\"pofType\": 18,\"stfType\": 7},{\"eventTime\": 68569,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 2440587,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 19,\"stfType\": 18},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 17,\"scheduleTime\": 20,\"eventType\": 18,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 7},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 1532892062,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 20,\"stfType\": 18},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 161,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 5,\"stfType\": 3},{\"eventTime\": 4001,\"eventTimeWithEpochOffset\": 900,\"scheduleTime\": 4799,\"eventType\": 13,\"currency\": accounts[4],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 150,\"eventTimeWithEpochOffset\": 89,\"scheduleTime\": 4901,\"eventType\": 18,\"currency\": accounts[1],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 1461,\"scheduleTime\": 41,\"eventType\": 9,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 2},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 257,\"eventType\": 18,\"currency\": accounts[0],\"pofType\": 3,\"stfType\": 16},{\"eventTime\": 64,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 86401,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 7,\"stfType\": 4},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 4800,\"scheduleTime\": 21,\"eventType\": 15,\"currency\": accounts[4],\"pofType\": 6,\"stfType\": 15},{\"eventTime\": 81,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 19,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 11,\"stfType\": 4},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 68569,\"scheduleTime\": 146096,\"eventType\": 15,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 9},{\"eventTime\": 97,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 1337,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 4},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 66,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 254,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 17,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 2},{\"eventTime\": 146098,\"eventTimeWithEpochOffset\": 31,\"scheduleTime\": 86399,\"eventType\": 19,\"currency\": accounts[7],\"pofType\": 10,\"stfType\": 14},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 10000,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 13,\"stfType\": 13},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 1462,\"scheduleTime\": 119,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 12},{\"eventTime\": 86399,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 32075,\"eventType\": 16,\"currency\": accounts[5],\"pofType\": 20,\"stfType\": 13},{\"eventTime\": 63,\"eventTimeWithEpochOffset\": 4901,\"scheduleTime\": 160,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 8},{\"eventTime\": 360,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 1532892063,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 18},{\"eventTime\": 2440588,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 68570,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 0,\"stfType\": 0},{\"eventTime\": 2440587,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 1532892063,\"eventType\": 3,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 0},{\"eventTime\": 19,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 111,\"eventType\": 20,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 6},{\"eventTime\": 139,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 63,\"eventType\": 8,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 5},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 79,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 20,\"stfType\": 5},{\"eventTime\": 14,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 31,\"eventType\": 6,\"currency\": accounts[7],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 364,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 1532892062,\"eventType\": 5,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 5},{\"eventTime\": 4900,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 109,\"eventType\": 8,\"currency\": accounts[5],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 130,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 151,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 367,\"eventType\": 19,\"currency\": accounts[1],\"pofType\": 6,\"stfType\": 4},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 4000,\"scheduleTime\": 10000,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 19,\"stfType\": 5},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 2014223714,\"scheduleTime\": 70,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 0,\"stfType\": 15},{\"eventTime\": 32075,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 71,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 1}]",
              "sol": "[Definitions.ProtoEvent(131,159,1,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(121,6,90,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IPCI),Definitions.ProtoEvent(49,901,1532892064,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PP),Definitions.ProtoEvent(361,3999,90,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.FP),Definitions.ProtoEvent(4900,32074,1461,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(4799,3999,256,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.PP),Definitions.ProtoEvent(51,121,366,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PP),Definitions.ProtoEvent(24,5,2,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IP),Definitions.ProtoEvent(79,6,1,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCI),Definitions.ProtoEvent(367,1336,89,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IP),Definitions.ProtoEvent(8,8,31,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IPCB),Definitions.ProtoEvent(86399,2446,23,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.AD),Definitions.ProtoEvent(101,9999,1338,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MR),Definitions.ProtoEvent(900,401,90,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IED),Definitions.ProtoEvent(4001,39,130,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(86399,39,1337,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.FP),Definitions.ProtoEvent(365,109,130,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(1532892063,129,140,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.IPCI),Definitions.ProtoEvent(6,1337,1971,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.MR),Definitions.ProtoEvent(4900,70,32,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SD),Definitions.ProtoEvent(14,1532892063,4901,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(64,900,51,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.AD),Definitions.ProtoEvent(2440589,49,255,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.STD),Definitions.ProtoEvent(1461002,364,19,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.MR),Definitions.ProtoEvent(4001,1532892062,50,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.SC),Definitions.ProtoEvent(30,2440588,111,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(1,1,110,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.DV),Definitions.ProtoEvent(89,110,13,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.TD),Definitions.ProtoEvent(24,19,8,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.CD),Definitions.ProtoEvent(2440589,86400,1532892062,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.PY),Definitions.ProtoEvent(68569,1971,2440587,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IPCB),Definitions.ProtoEvent(4899,17,20,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PY),Definitions.ProtoEvent(18,900,1532892062,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IPCB),Definitions.ProtoEvent(4801,4900,161,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.IED),Definitions.ProtoEvent(4001,900,4799,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(150,89,4901,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(1,1461,41,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.AD),Definitions.ProtoEvent(364,50,257,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.DV),Definitions.ProtoEvent(64,400,86401,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IP),Definitions.ProtoEvent(160,4800,21,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.CD),Definitions.ProtoEvent(81,141,19,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IP),Definitions.ProtoEvent(119,68569,146096,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PRD),Definitions.ProtoEvent(97,129,1337,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IP),Definitions.ProtoEvent(1461002,68570,66,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(254,255,17,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.AD),Definitions.ProtoEvent(146098,31,86399,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.SC),Definitions.ProtoEvent(110,160,10000,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RRY),Definitions.ProtoEvent(0,1462,119,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.RR),Definitions.ProtoEvent(86399,25,32075,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.RRY),Definitions.ProtoEvent(63,4901,160,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.FP),Definitions.ProtoEvent(360,97,1532892063,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCB),Definitions.ProtoEvent(2440588,950,68570,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.SD),Definitions.ProtoEvent(2440587,2448,1532892063,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SD),Definitions.ProtoEvent(19,901,111,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.PP),Definitions.ProtoEvent(139,367,63,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.PR),Definitions.ProtoEvent(161,21,79,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.PR),Definitions.ProtoEvent(14,1969,31,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(364,64,1532892062,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PR),Definitions.ProtoEvent(4900,59,109,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(32,901,130,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(151,66,367,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.IP),Definitions.ProtoEvent(149,4000,10000,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PR),Definitions.ProtoEvent(79,2014223714,70,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.CD),Definitions.ProtoEvent(32075,41,71,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.MD)]"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.246ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.248ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [250,217,210,55,76,24,228,145,20,184,147,100,156,98,65,225,245,118,145,3,246,145,139,165,64,12,180,147,239,204,7,141],\"legalEntityIdCounterparty\": [128,137,64,153,74,245,185,23,37,95,114,100,13,24,103,3,156,240,42,244,144,80,122,202,206,144,118,194,15,95,119,97],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 360,\"statusDate\": 4800,\"initialExchangeDate\": 951,\"maturityDate\": 1969,\"terminationDate\": 21,\"purchaseDate\": 48,\"capitalizationEndDate\": 2448,\"cycleAnchorDateOfInterestPayment\": 90,\"cycleAnchorDateOfRateReset\": 71,\"cycleAnchorDateOfScalingIndex\": 95,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 13,\"nominalInterestRate\": 139,\"feeAccrued\": 2440588,\"accruedInterest\": 2014223714,\"rateMultiplier\": 9,\"rateSpread\": 2014223715,\"feeRate\": 4801,\"nextResetRate\": 18,\"penaltyRate\": 64,\"premiumDiscountAtIED\": 19,\"priceAtPurchaseDate\": 32074,\"cycleOfInterestPayment\": {\"i\": 20,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 951,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461000,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 32076,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 31,\"lifeFloor\": 360,\"periodCap\": 2448,\"periodFloor\": 21}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"250,217,210,55,76,24,228,145,20,184,147,100,156,98,65,225,245,118,145,3,246,145,139,165,64,12,180,147,239,204,7,141\"),stringToBytes32(\"128,137,64,153,74,245,185,23,37,95,114,100,13,24,103,3,156,240,42,244,144,80,122,202,206,144,118,194,15,95,119,97\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.A,360,4800,951,1969,21,48,2448,90,71,95,1461,13,139,2440588,2014223714,9,2014223715,4801,18,64,19,32074,Definitions.IPS(20,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(951,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(1461000,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(32076,Definitions.P.D,Definitions.S.SHORT,true),31,360,2448,21)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.250ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [243,234,103,236,220,38,240,50,187,175,204,248,206,212,106,11,50,64,249,152,238,172,252,154,106,111,109,87,73,252,117,11],\"legalEntityIdCounterparty\": [211,133,226,179,61,228,98,52,5,85,171,210,193,21,194,60,250,227,52,89,218,149,47,200,23,153,111,168,153,89,95,197],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 89,\"statusDate\": 32074,\"initialExchangeDate\": 110,\"maturityDate\": 159,\"terminationDate\": 360,\"purchaseDate\": 10,\"capitalizationEndDate\": 160,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 81,\"cycleAnchorDateOfScalingIndex\": 399,\"cycleAnchorDateOfFee\": 66,\"notionalPrincipal\": 951,\"nominalInterestRate\": 149,\"feeAccrued\": 91,\"accruedInterest\": 27,\"rateMultiplier\": 4901,\"rateSpread\": 32,\"feeRate\": 139,\"nextResetRate\": 1971,\"penaltyRate\": 68570,\"premiumDiscountAtIED\": 17,\"priceAtPurchaseDate\": 1971,\"cycleOfInterestPayment\": {\"i\": 91,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 950,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 146098,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 1461,\"lifeFloor\": 399,\"periodCap\": 2440589,\"periodFloor\": 1970}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"243,234,103,236,220,38,240,50,187,175,204,248,206,212,106,11,50,64,249,152,238,172,252,154,106,111,109,87,73,252,117,11\"),stringToBytes32(\"211,133,226,179,61,228,98,52,5,85,171,210,193,21,194,60,250,227,52,89,218,149,47,200,23,153,111,168,153,89,95,197\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,89,32074,110,159,360,10,160,110,81,399,66,951,149,91,27,4901,32,139,1971,68570,17,1971,Definitions.IPS(91,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(950,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(68568,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(146098,Definitions.P.H,Definitions.S.LONG,false),1461,399,2440589,1970)"
            },
            {
              "js": "{\"lastEventTime\": 59,\"contractStatus\": 1,\"timeFromLastEvent\": 2014223714,\"nominalValue\": 101,\"nominalAccrued\": 14,\"feeAccrued\": 111,\"nominalRate\": 1532892063,\"interestScalingMultiplier\": 4799,\"nominalScalingMultiplier\": 2,\"contractRoleSign\": 6}",
              "sol": "Definitions.ContractState(59,Definitions.ContractStatus.DL,2014223714,101,14,111,1532892063,4799,2,Definitions.ContractRole.BUY)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.252ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [216,184,233,67,151,81,240,123,46,69,21,84,224,95,171,51,232,174,146,2,159,177,105,229,143,194,104,72,254,14,134,75],\"legalEntityIdCounterparty\": [86,10,200,251,92,176,221,186,41,45,219,170,139,118,154,22,56,13,217,224,105,110,112,236,191,225,14,196,101,138,184,85],\"dayCountConvention\": 4,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 60,\"statusDate\": 4000,\"initialExchangeDate\": 13,\"maturityDate\": 121,\"terminationDate\": 111,\"purchaseDate\": 18,\"capitalizationEndDate\": 141,\"cycleAnchorDateOfInterestPayment\": 1461002,\"cycleAnchorDateOfRateReset\": 68569,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 2446,\"nominalInterestRate\": 2,\"feeAccrued\": 1970,\"accruedInterest\": 60,\"rateMultiplier\": 96,\"rateSpread\": 110,\"feeRate\": 361,\"nextResetRate\": 129,\"penaltyRate\": 1970,\"premiumDiscountAtIED\": 1461,\"priceAtPurchaseDate\": 65,\"cycleOfInterestPayment\": {\"i\": 1461001,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 899,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 949,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 120,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 28,\"lifeFloor\": 86399,\"periodCap\": 86400,\"periodFloor\": 901}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"216,184,233,67,151,81,240,123,46,69,21,84,224,95,171,51,232,174,146,2,159,177,105,229,143,194,104,72,254,14,134,75\"),stringToBytes32(\"86,10,200,251,92,176,221,186,41,45,219,170,139,118,154,22,56,13,217,224,105,110,112,236,191,225,14,196,101,138,184,85\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,60,4000,13,121,111,18,141,1461002,68569,110,32074,2446,2,1970,60,96,110,361,129,1970,1461,65,Definitions.IPS(1461001,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(949,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(120,Definitions.P.Y,Definitions.S.LONG,true),28,86399,86400,901)"
            },
            {
              "js": "{\"lastEventTime\": 254,\"contractStatus\": 0,\"timeFromLastEvent\": 4000,\"nominalValue\": 1971,\"nominalAccrued\": 32074,\"feeAccrued\": 59,\"nominalRate\": 96,\"interestScalingMultiplier\": 1971,\"nominalScalingMultiplier\": 1461,\"contractRoleSign\": 7}",
              "sol": "Definitions.ContractState(254,Definitions.ContractStatus.PF,4000,1971,32074,59,96,1971,1461,Definitions.ContractRole.SEL)"
            },
            {
              "js": "{\"eventTime\": 111,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 1971,\"eventType\": 12,\"currency\": accounts[7],\"pofType\": 0,\"stfType\": 17}",
              "sol": "Definitions.ProtoEvent(111,23,1971,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MR)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.259ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [113,161,220,95,100,216,77,244,165,174,248,149,188,155,1,70,155,158,129,171,239,130,241,90,115,123,145,140,47,38,84,55],\"legalEntityIdCounterparty\": [105,25,237,120,252,183,55,53,140,34,17,81,116,229,143,18,117,237,138,87,180,145,250,223,193,183,245,113,129,244,123,239],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 950,\"statusDate\": 400,\"initialExchangeDate\": 950,\"maturityDate\": 48,\"terminationDate\": 951,\"purchaseDate\": 68569,\"capitalizationEndDate\": 16,\"cycleAnchorDateOfInterestPayment\": 1532892062,\"cycleAnchorDateOfRateReset\": 366,\"cycleAnchorDateOfScalingIndex\": 119,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 97,\"nominalInterestRate\": 13,\"feeAccrued\": 68570,\"accruedInterest\": 4,\"rateMultiplier\": 130,\"rateSpread\": 2447,\"feeRate\": 70,\"nextResetRate\": 4901,\"penaltyRate\": 949,\"premiumDiscountAtIED\": 4,\"priceAtPurchaseDate\": 95,\"cycleOfInterestPayment\": {\"i\": 1337,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 950,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 20,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 63,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 4900,\"lifeFloor\": 110,\"periodCap\": 110,\"periodFloor\": 900}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"113,161,220,95,100,216,77,244,165,174,248,149,188,155,1,70,155,158,129,171,239,130,241,90,115,123,145,140,47,38,84,55\"),stringToBytes32(\"105,25,237,120,252,183,55,53,140,34,17,81,116,229,143,18,117,237,138,87,180,145,250,223,193,183,245,113,129,244,123,239\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.A,950,400,950,48,951,68569,16,1532892062,366,119,110,97,13,68570,4,130,2447,70,4901,949,4,95,Definitions.IPS(1337,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(950,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(20,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(63,Definitions.P.D,Definitions.S.LONG,false),4900,110,110,900)"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [87,197,135,116,170,199,152,102,234,91,45,235,9,234,218,24,105,237,235,135,60,48,161,251,247,10,102,150,241,14,55,179],\"legalEntityIdCounterparty\": [52,141,201,72,60,77,48,206,199,102,6,145,81,178,67,204,177,33,222,28,45,121,219,27,3,53,47,210,121,172,72,101],\"dayCountConvention\": 3,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1461,\"statusDate\": 6,\"initialExchangeDate\": 91,\"maturityDate\": 19,\"terminationDate\": 14,\"purchaseDate\": 90,\"capitalizationEndDate\": 27,\"cycleAnchorDateOfInterestPayment\": 9,\"cycleAnchorDateOfRateReset\": 86401,\"cycleAnchorDateOfScalingIndex\": 48,\"cycleAnchorDateOfFee\": 64,\"notionalPrincipal\": 18,\"nominalInterestRate\": 119,\"feeAccrued\": 95,\"accruedInterest\": 81,\"rateMultiplier\": 96,\"rateSpread\": 4000,\"feeRate\": 901,\"nextResetRate\": 95,\"penaltyRate\": 21,\"premiumDiscountAtIED\": 2014223716,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 8,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 130,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 151,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 365,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 1971,\"lifeFloor\": 21,\"periodCap\": 160,\"periodFloor\": 2448}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"87,197,135,116,170,199,152,102,234,91,45,235,9,234,218,24,105,237,235,135,60,48,161,251,247,10,102,150,241,14,55,179\"),stringToBytes32(\"52,141,201,72,60,77,48,206,199,102,6,145,81,178,67,204,177,33,222,28,45,121,219,27,3,53,47,210,121,172,72,101\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1461,6,91,19,14,90,27,9,86401,48,64,18,119,95,81,96,4000,901,95,21,2014223716,368,Definitions.IPS(8,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(130,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(151,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(365,Definitions.P.W,Definitions.S.SHORT,true),1971,21,160,2448)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [28,83,164,199,188,181,157,187,68,238,213,251,90,44,233,146,232,249,86,1,211,148,2,175,79,117,123,63,200,8,87,88],\"legalEntityIdCounterparty\": [255,232,114,22,107,232,22,85,26,88,75,15,122,123,165,253,35,132,27,34,120,182,192,227,3,168,170,225,58,89,45,5],\"dayCountConvention\": 1,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 129,\"statusDate\": 254,\"initialExchangeDate\": 39,\"maturityDate\": 1461,\"terminationDate\": 2014223715,\"purchaseDate\": 1,\"capitalizationEndDate\": 1461000,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 951,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 4901,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 140,\"feeAccrued\": 4801,\"accruedInterest\": 13,\"rateMultiplier\": 364,\"rateSpread\": 401,\"feeRate\": 11,\"nextResetRate\": 50,\"penaltyRate\": 0,\"premiumDiscountAtIED\": 4899,\"priceAtPurchaseDate\": 4000,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 31,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 68568,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 101,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 5,\"lifeFloor\": 101,\"periodCap\": 19,\"periodFloor\": 95}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"28,83,164,199,188,181,157,187,68,238,213,251,90,44,233,146,232,249,86,1,211,148,2,175,79,117,123,63,200,8,87,88\"),stringToBytes32(\"255,232,114,22,107,232,22,85,26,88,75,15,122,123,165,253,35,132,27,34,120,182,192,227,3,168,170,225,58,89,45,5\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.N,129,254,39,1461,2014223715,1,1461000,2446,951,110,4901,1532892064,140,4801,13,364,401,11,50,0,4899,4000,Definitions.IPS(25,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(31,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(68568,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(101,Definitions.P.W,Definitions.S.LONG,true),5,101,19,95)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [111,229,15,208,16,236,242,30,223,61,70,113,200,0,198,71,194,32,186,115,139,172,75,124,149,178,159,65,75,77,163,219],\"legalEntityIdCounterparty\": [123,245,87,99,195,73,33,235,13,215,129,97,210,161,171,151,170,160,227,147,139,114,146,255,222,104,177,211,43,73,57,14],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[6],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 32,\"statusDate\": 27,\"initialExchangeDate\": 2440587,\"maturityDate\": 5,\"terminationDate\": 10000,\"purchaseDate\": 2014223716,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 401,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 71,\"nominalInterestRate\": 17,\"feeAccrued\": 1970,\"accruedInterest\": 364,\"rateMultiplier\": 401,\"rateSpread\": 101,\"feeRate\": 19,\"nextResetRate\": 899,\"penaltyRate\": 32074,\"premiumDiscountAtIED\": 99,\"priceAtPurchaseDate\": 359,\"cycleOfInterestPayment\": {\"i\": 1336,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 48,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 149,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4000,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 90,\"lifeFloor\": 146098,\"periodCap\": 21,\"periodFloor\": 68569}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"111,229,15,208,16,236,242,30,223,61,70,113,200,0,198,71,194,32,186,115,139,172,75,124,149,178,159,65,75,77,163,219\"),stringToBytes32(\"123,245,87,99,195,73,33,235,13,215,129,97,210,161,171,151,170,160,227,147,139,114,146,255,222,104,177,211,43,73,57,14\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.A,32,27,2440587,5,10000,2014223716,4901,96,1461,401,90,71,17,1970,364,401,101,19,899,32074,99,359,Definitions.IPS(1336,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(48,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(149,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(4000,Definitions.P.Q,Definitions.S.SHORT,true),90,146098,21,68569)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [170,102,241,215,84,163,103,235,25,102,163,234,216,225,249,78,232,35,147,18,155,10,209,50,69,211,125,156,54,203,140,149],\"legalEntityIdCounterparty\": [11,76,229,205,136,19,22,18,120,153,214,142,155,167,20,174,35,29,247,160,106,87,165,211,28,158,234,191,12,42,189,254],\"dayCountConvention\": 0,\"businessDayConvention\": 3,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 68569,\"statusDate\": 6,\"initialExchangeDate\": 100,\"maturityDate\": 81,\"terminationDate\": 109,\"purchaseDate\": 0,\"capitalizationEndDate\": 6,\"cycleAnchorDateOfInterestPayment\": 8,\"cycleAnchorDateOfRateReset\": 140,\"cycleAnchorDateOfScalingIndex\": 20,\"cycleAnchorDateOfFee\": 130,\"notionalPrincipal\": 161,\"nominalInterestRate\": 11,\"feeAccrued\": 71,\"accruedInterest\": 367,\"rateMultiplier\": 110,\"rateSpread\": 100,\"feeRate\": 32076,\"nextResetRate\": 4,\"penaltyRate\": 81,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 368,\"cycleOfInterestPayment\": {\"i\": 146096,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 368,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 401,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 361,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 20,\"periodCap\": 4799,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"170,102,241,215,84,163,103,235,25,102,163,234,216,225,249,78,232,35,147,18,155,10,209,50,69,211,125,156,54,203,140,149\"),stringToBytes32(\"11,76,229,205,136,19,22,18,120,153,214,142,155,167,20,174,35,29,247,160,106,87,165,211,28,158,234,191,12,42,189,254\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,68569,6,100,81,109,0,6,8,140,20,130,161,11,71,367,110,100,32076,4,81,150,368,Definitions.IPS(146096,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(368,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(401,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(361,Definitions.P.Q,Definitions.S.LONG,false),41,20,4799,17)"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [201,54,161,45,24,112,38,21,62,131,142,197,202,246,58,45,178,23,199,23,16,36,172,225,29,14,104,215,175,253,200,214],\"legalEntityIdCounterparty\": [10,173,86,68,193,90,53,212,200,123,34,211,69,204,96,179,106,234,9,138,228,242,15,32,80,102,186,140,6,75,21,91],\"dayCountConvention\": 6,\"businessDayConvention\": 2,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 7,\"statusDate\": 1532892063,\"initialExchangeDate\": 366,\"maturityDate\": 110,\"terminationDate\": 90,\"purchaseDate\": 69,\"capitalizationEndDate\": 70,\"cycleAnchorDateOfInterestPayment\": 150,\"cycleAnchorDateOfRateReset\": 1971,\"cycleAnchorDateOfScalingIndex\": 19,\"cycleAnchorDateOfFee\": 1337,\"notionalPrincipal\": 89,\"nominalInterestRate\": 131,\"feeAccrued\": 161,\"accruedInterest\": 367,\"rateMultiplier\": 14,\"rateSpread\": 4,\"feeRate\": 69,\"nextResetRate\": 71,\"penaltyRate\": 95,\"premiumDiscountAtIED\": 1338,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 24,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 256,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 359,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 15,\"lifeFloor\": 256,\"periodCap\": 366,\"periodFloor\": 26}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"201,54,161,45,24,112,38,21,62,131,142,197,202,246,58,45,178,23,199,23,16,36,172,225,29,14,104,215,175,253,200,214\"),stringToBytes32(\"10,173,86,68,193,90,53,212,200,123,34,211,69,204,96,179,106,234,9,138,228,242,15,32,80,102,186,140,6,75,21,91\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.A,7,1532892063,366,110,90,69,70,150,1971,19,1337,89,131,161,367,14,4,69,71,95,1338,10,Definitions.IPS(4799,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(256,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(359,Definitions.P.Q,Definitions.S.LONG,false),15,256,366,26)"
            },
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "364",
              "sol": "364"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 0,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [189,69,224,43,121,76,54,224,140,199,173,147,88,215,159,151,142,18,189,15,214,228,30,221,77,60,16,90,132,49,170,203],\"legalEntityIdCounterparty\": [90,215,236,102,193,80,236,137,117,232,166,64,203,116,16,220,155,223,210,124,98,147,226,128,194,206,65,67,92,241,222,105],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 5,\"statusDate\": 18,\"initialExchangeDate\": 80,\"maturityDate\": 950,\"terminationDate\": 1462,\"purchaseDate\": 368,\"capitalizationEndDate\": 24,\"cycleAnchorDateOfInterestPayment\": 79,\"cycleAnchorDateOfRateReset\": 1532892062,\"cycleAnchorDateOfScalingIndex\": 4901,\"cycleAnchorDateOfFee\": 68570,\"notionalPrincipal\": 399,\"nominalInterestRate\": 11,\"feeAccrued\": 40,\"accruedInterest\": 10000,\"rateMultiplier\": 109,\"rateSpread\": 119,\"feeRate\": 24,\"nextResetRate\": 146096,\"penaltyRate\": 40,\"premiumDiscountAtIED\": 32074,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 10000,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 79,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 131,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 146096,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 18,\"lifeFloor\": 19,\"periodCap\": 80,\"periodFloor\": 1461001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.NoCalendar,Definitions.ContractRole.LG,stringToBytes32(\"189,69,224,43,121,76,54,224,140,199,173,147,88,215,159,151,142,18,189,15,214,228,30,221,77,60,16,90,132,49,170,203\"),stringToBytes32(\"90,215,236,102,193,80,236,137,117,232,166,64,203,116,16,220,155,223,210,124,98,147,226,128,194,206,65,67,92,241,222,105\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.A,5,18,80,950,1462,368,24,79,1532892062,4901,68570,399,11,40,10000,109,119,24,146096,40,32074,51,Definitions.IPS(10000,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(79,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(131,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(146096,Definitions.P.M,Definitions.S.SHORT,false),18,19,80,1461001)"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [29,182,244,31,152,137,194,211,214,107,182,212,111,90,133,123,224,112,11,208,151,43,180,209,21,182,65,147,148,190,179,206],\"legalEntityIdCounterparty\": [205,142,139,100,224,28,66,93,133,231,224,207,99,171,113,147,161,88,30,21,213,94,148,71,2,74,186,79,43,249,83,131],\"dayCountConvention\": 2,\"businessDayConvention\": 8,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 2,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 70,\"statusDate\": 48,\"initialExchangeDate\": 3999,\"maturityDate\": 950,\"terminationDate\": 146097,\"purchaseDate\": 159,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 97,\"cycleAnchorDateOfRateReset\": 65,\"cycleAnchorDateOfScalingIndex\": 3999,\"cycleAnchorDateOfFee\": 90,\"notionalPrincipal\": 86399,\"nominalInterestRate\": 25,\"feeAccrued\": 23,\"accruedInterest\": 146098,\"rateMultiplier\": 4900,\"rateSpread\": 257,\"feeRate\": 7,\"nextResetRate\": 399,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 68569,\"priceAtPurchaseDate\": 150,\"cycleOfInterestPayment\": {\"i\": 0,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 401,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2440587,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 141,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 149,\"lifeFloor\": 151,\"periodCap\": 361,\"periodFloor\": 8}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"29,182,244,31,152,137,194,211,214,107,182,212,111,90,133,123,224,112,11,208,151,43,180,209,21,182,65,147,148,190,179,206\"),stringToBytes32(\"205,142,139,100,224,28,66,93,133,231,224,207,99,171,113,147,161,88,30,21,213,94,148,71,2,74,186,79,43,249,83,131\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,70,48,3999,950,146097,159,0,97,65,3999,90,86399,25,23,146098,4900,257,7,399,2014223716,68569,150,Definitions.IPS(0,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(401,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(2440587,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(141,Definitions.P.M,Definitions.S.SHORT,false),149,151,361,8)"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "24",
              "sol": "24"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [40,10,74,142,19,74,113,206,253,254,117,59,206,251,205,37,115,145,186,111,71,125,27,250,129,233,67,233,147,201,45,42],\"legalEntityIdCounterparty\": [96,162,73,210,45,210,29,91,28,136,179,158,189,37,100,73,191,228,12,218,36,84,6,9,159,146,146,211,150,245,114,146],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 4899,\"statusDate\": 146098,\"initialExchangeDate\": 18,\"maturityDate\": 1971,\"terminationDate\": 31,\"purchaseDate\": 1532892063,\"capitalizationEndDate\": 146097,\"cycleAnchorDateOfInterestPayment\": 1532892064,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 59,\"cycleAnchorDateOfFee\": 39,\"notionalPrincipal\": 129,\"nominalInterestRate\": 256,\"feeAccrued\": 951,\"accruedInterest\": 900,\"rateMultiplier\": 4,\"rateSpread\": 24,\"feeRate\": 159,\"nextResetRate\": 86400,\"penaltyRate\": 99,\"premiumDiscountAtIED\": 4900,\"priceAtPurchaseDate\": 81,\"cycleOfInterestPayment\": {\"i\": 1337,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 66,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 20,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 31,\"lifeFloor\": 10001,\"periodCap\": 13,\"periodFloor\": 129}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"40,10,74,142,19,74,113,206,253,254,117,59,206,251,205,37,115,145,186,111,71,125,27,250,129,233,67,233,147,201,45,42\"),stringToBytes32(\"96,162,73,210,45,210,29,91,28,136,179,158,189,37,100,73,191,228,12,218,36,84,6,9,159,146,146,211,150,245,114,146\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.I,Definitions.FeeBasis.N,4899,146098,18,1971,31,1532892063,146097,1532892064,96,59,39,129,256,951,900,4,24,159,86400,99,4900,81,Definitions.IPS(1337,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(66,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(20,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(1,Definitions.P.M,Definitions.S.SHORT,true),31,10001,13,129)"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [4,110,153,198,167,40,214,29,112,11,143,7,225,205,178,29,245,63,191,239,238,126,139,5,199,212,157,175,15,122,190,99],\"legalEntityIdCounterparty\": [87,233,162,222,233,111,88,43,156,200,2,67,51,184,209,163,155,122,249,152,120,65,184,57,136,108,206,42,154,235,78,20],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 7,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 1532892062,\"statusDate\": 1532892062,\"initialExchangeDate\": 4799,\"maturityDate\": 2446,\"terminationDate\": 32075,\"purchaseDate\": 2014223714,\"capitalizationEndDate\": 97,\"cycleAnchorDateOfInterestPayment\": 360,\"cycleAnchorDateOfRateReset\": 70,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 86401,\"notionalPrincipal\": 99,\"nominalInterestRate\": 149,\"feeAccrued\": 66,\"accruedInterest\": 59,\"rateMultiplier\": 364,\"rateSpread\": 64,\"feeRate\": 140,\"nextResetRate\": 109,\"penaltyRate\": 21,\"premiumDiscountAtIED\": 39,\"priceAtPurchaseDate\": 949,\"cycleOfInterestPayment\": {\"i\": 2,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 361,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2440589,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 366,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 24,\"lifeFloor\": 3999,\"periodCap\": 32074,\"periodFloor\": 19}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"4,110,153,198,167,40,214,29,112,11,143,7,225,205,178,29,245,63,191,239,238,126,139,5,199,212,157,175,15,122,190,99\"),stringToBytes32(\"87,233,162,222,233,111,88,43,156,200,2,67,51,184,209,163,155,122,249,152,120,65,184,57,136,108,206,42,154,235,78,20\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,1532892062,1532892062,4799,2446,32075,2014223714,97,360,70,4,86401,99,149,66,59,364,64,140,109,21,39,949,Definitions.IPS(2,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(361,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2440589,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(366,Definitions.P.M,Definitions.S.SHORT,false),24,3999,32074,19)"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [16,125,132,130,192,16,141,0,36,159,156,71,121,113,55,246,174,127,133,253,158,242,44,134,181,43,156,222,223,163,0,198],\"legalEntityIdCounterparty\": [99,104,135,248,217,34,64,219,41,133,1,48,168,236,149,112,29,99,241,191,167,227,52,120,198,9,127,140,62,228,221,19],\"dayCountConvention\": 6,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 68568,\"statusDate\": 86399,\"initialExchangeDate\": 257,\"maturityDate\": 4899,\"terminationDate\": 4001,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 256,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 120,\"notionalPrincipal\": 96,\"nominalInterestRate\": 0,\"feeAccrued\": 2,\"accruedInterest\": 96,\"rateMultiplier\": 150,\"rateSpread\": 365,\"feeRate\": 8,\"nextResetRate\": 91,\"penaltyRate\": 367,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 1461,\"cycleOfInterestPayment\": {\"i\": 1461,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 2014223715,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 86400,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 254,\"lifeFloor\": 4901,\"periodCap\": 70,\"periodFloor\": 20}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"16,125,132,130,192,16,141,0,36,159,156,71,121,113,55,246,174,127,133,253,158,242,44,134,181,43,156,222,223,163,0,198\"),stringToBytes32(\"99,104,135,248,217,34,64,219,41,133,1,48,168,236,149,112,29,99,241,191,167,227,52,120,198,9,127,140,62,228,221,19\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,68568,86399,257,4899,4001,0,0,256,1461,32,120,96,0,2,96,150,365,8,91,367,2440589,1461,Definitions.IPS(1461,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(2014223715,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1461,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(86400,Definitions.P.D,Definitions.S.LONG,true),254,4901,70,20)"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [25,120,235,224,125,163,81,104,206,49,108,164,78,78,1,206,246,100,138,63,56,57,113,27,33,177,232,70,90,219,181,123],\"legalEntityIdCounterparty\": [87,182,164,105,104,179,157,249,8,179,184,31,98,224,244,248,81,10,174,13,62,155,164,193,86,184,21,50,66,208,26,199],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[2],\"scalingEffect\": 0,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 48,\"statusDate\": 401,\"initialExchangeDate\": 86399,\"maturityDate\": 901,\"terminationDate\": 95,\"purchaseDate\": 101,\"capitalizationEndDate\": 2,\"cycleAnchorDateOfInterestPayment\": 3999,\"cycleAnchorDateOfRateReset\": 1,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 111,\"notionalPrincipal\": 30,\"nominalInterestRate\": 399,\"feeAccrued\": 18,\"accruedInterest\": 1461002,\"rateMultiplier\": 18,\"rateSpread\": 3999,\"feeRate\": 80,\"nextResetRate\": 89,\"penaltyRate\": 9,\"premiumDiscountAtIED\": 146098,\"priceAtPurchaseDate\": 146098,\"cycleOfInterestPayment\": {\"i\": 25,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4000,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 160,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 1461001,\"p\": 0,\"s\": 0,\"isSet\": true},\"lifeCap\": 150,\"lifeFloor\": 9999,\"periodCap\": 50,\"periodFloor\": 51}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.SEL,stringToBytes32(\"25,120,235,224,125,163,81,104,206,49,108,164,78,78,1,206,246,100,138,63,56,57,113,27,33,177,232,70,90,219,181,123\"),stringToBytes32(\"87,182,164,105,104,179,157,249,8,179,184,31,98,224,244,248,81,10,174,13,62,155,164,193,86,184,21,50,66,208,26,199\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.A,Definitions.FeeBasis.N,48,401,86399,901,95,101,2,3999,1,146098,111,30,399,18,1461002,18,3999,80,89,9,146098,146098,Definitions.IPS(25,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4000,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(160,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461001,Definitions.P.D,Definitions.S.LONG,true),150,9999,50,51)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [74,22,115,144,99,238,119,90,106,127,249,193,200,99,225,35,200,226,177,247,7,180,214,70,252,107,120,105,31,229,185,65],\"legalEntityIdCounterparty\": [26,76,140,200,154,15,208,150,182,117,222,158,75,249,45,151,225,198,168,82,169,140,153,129,105,108,211,31,138,162,79,85],\"dayCountConvention\": 0,\"businessDayConvention\": 7,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 151,\"statusDate\": 2014223715,\"initialExchangeDate\": 90,\"maturityDate\": 2440587,\"terminationDate\": 95,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 10,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 2,\"cycleAnchorDateOfFee\": 4799,\"notionalPrincipal\": 901,\"nominalInterestRate\": 0,\"feeAccrued\": 149,\"accruedInterest\": 129,\"rateMultiplier\": 61,\"rateSpread\": 257,\"feeRate\": 96,\"nextResetRate\": 6,\"penaltyRate\": 2014223716,\"premiumDiscountAtIED\": 140,\"priceAtPurchaseDate\": 86401,\"cycleOfInterestPayment\": {\"i\": 60,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 64,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 141,\"p\": 3,\"s\": 0,\"isSet\": true},\"lifeCap\": 4001,\"lifeFloor\": 160,\"periodCap\": 2440587,\"periodFloor\": 255}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"74,22,115,144,99,238,119,90,106,127,249,193,200,99,225,35,200,226,177,247,7,180,214,70,252,107,120,105,31,229,185,65\"),stringToBytes32(\"26,76,140,200,154,15,208,150,182,117,222,158,75,249,45,151,225,198,168,82,169,140,153,129,105,108,211,31,138,162,79,85\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.N,Definitions.FeeBasis.A,151,2014223715,90,2440587,95,0,0,10,0,2,4799,901,0,149,129,61,257,96,6,2014223716,140,86401,Definitions.IPS(60,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1969,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(64,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(141,Definitions.P.Q,Definitions.S.LONG,true),4001,160,2440587,255)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 16,\"calendar\": 0,\"contractRole\": 6,\"legalEntityIdRecordCreator\": [107,236,56,214,236,20,169,255,8,99,184,199,112,201,108,45,24,116,37,75,155,227,191,62,13,172,142,118,56,33,53,63],\"legalEntityIdCounterparty\": [197,168,103,172,60,127,26,244,20,88,31,34,29,147,214,95,111,127,199,196,79,193,137,205,200,11,42,14,213,246,94,209],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 4001,\"statusDate\": 110,\"initialExchangeDate\": 400,\"maturityDate\": 360,\"terminationDate\": 1969,\"purchaseDate\": 28,\"capitalizationEndDate\": 9,\"cycleAnchorDateOfInterestPayment\": 255,\"cycleAnchorDateOfRateReset\": 12,\"cycleAnchorDateOfScalingIndex\": 30,\"cycleAnchorDateOfFee\": 68569,\"notionalPrincipal\": 95,\"nominalInterestRate\": 4901,\"feeAccrued\": 49,\"accruedInterest\": 140,\"rateMultiplier\": 139,\"rateSpread\": 160,\"feeRate\": 13,\"nextResetRate\": 39,\"penaltyRate\": 400,\"premiumDiscountAtIED\": 1970,\"priceAtPurchaseDate\": 159,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 96,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4800,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 121,\"lifeFloor\": 1532892062,\"periodCap\": 80,\"periodFloor\": 368}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEG,Definitions.Calendar.NoCalendar,Definitions.ContractRole.BUY,stringToBytes32(\"107,236,56,214,236,20,169,255,8,99,184,199,112,201,108,45,24,116,37,75,155,227,191,62,13,172,142,118,56,33,53,63\"),stringToBytes32(\"197,168,103,172,60,127,26,244,20,88,31,34,29,147,214,95,111,127,199,196,79,193,137,205,200,11,42,14,213,246,94,209\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.N,4001,110,400,360,1969,28,9,255,12,30,68569,95,4901,49,140,139,160,13,39,400,1970,159,Definitions.IPS(48,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(96,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(4800,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(4,Definitions.P.Y,Definitions.S.SHORT,true),121,1532892062,80,368)"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [206,97,47,220,134,111,224,91,116,246,214,24,70,37,248,139,54,33,40,221,73,226,194,81,59,134,185,236,46,192,88,246],\"legalEntityIdCounterparty\": [65,118,161,48,205,204,201,206,25,174,41,44,73,24,93,124,57,23,197,91,205,24,125,136,237,21,11,142,83,100,180,110],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 60,\"statusDate\": 25,\"initialExchangeDate\": 368,\"maturityDate\": 120,\"terminationDate\": 4,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 130,\"cycleAnchorDateOfRateReset\": 96,\"cycleAnchorDateOfScalingIndex\": 109,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 2448,\"nominalInterestRate\": 0,\"feeAccrued\": 368,\"accruedInterest\": 12,\"rateMultiplier\": 68568,\"rateSpread\": 40,\"feeRate\": 97,\"nextResetRate\": 2446,\"penaltyRate\": 119,\"premiumDiscountAtIED\": 66,\"priceAtPurchaseDate\": 254,\"cycleOfInterestPayment\": {\"i\": 161,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 65,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2448,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 39,\"p\": 2,\"s\": 0,\"isSet\": false},\"lifeCap\": 0,\"lifeFloor\": 71,\"periodCap\": 81,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"206,97,47,220,134,111,224,91,116,246,214,24,70,37,248,139,54,33,40,221,73,226,194,81,59,134,185,236,46,192,88,246\"),stringToBytes32(\"65,118,161,48,205,204,201,206,25,174,41,44,73,24,93,124,57,23,197,91,205,24,125,136,237,21,11,142,83,100,180,110\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,60,25,368,120,4,0,0,130,96,109,0,2448,0,368,12,68568,40,97,2446,119,66,254,Definitions.IPS(161,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(65,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2448,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(39,Definitions.P.M,Definitions.S.LONG,false),0,71,81,1461000)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [254,107,49,106,244,195,246,198,39,252,196,193,117,232,239,92,83,153,45,181,26,86,77,150,157,204,7,214,22,125,79,38],\"legalEntityIdCounterparty\": [105,59,160,215,183,150,108,14,175,171,144,10,102,14,19,154,87,36,165,49,33,110,243,243,105,197,174,33,77,13,173,146],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 2,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 17,\"statusDate\": 359,\"initialExchangeDate\": 159,\"maturityDate\": 32,\"terminationDate\": 20,\"purchaseDate\": 8,\"capitalizationEndDate\": 1460,\"cycleAnchorDateOfInterestPayment\": 2440588,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 949,\"cycleAnchorDateOfFee\": 2440589,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 139,\"feeAccrued\": 120,\"accruedInterest\": 368,\"rateMultiplier\": 255,\"rateSpread\": 1532892063,\"feeRate\": 23,\"nextResetRate\": 32,\"penaltyRate\": 16,\"premiumDiscountAtIED\": 2440588,\"priceAtPurchaseDate\": 131,\"cycleOfInterestPayment\": {\"i\": 15,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 141,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 9999,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 81,\"lifeFloor\": 901,\"periodCap\": 1532892063,\"periodFloor\": 111}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"254,107,49,106,244,195,246,198,39,252,196,193,117,232,239,92,83,153,45,181,26,86,77,150,157,204,7,214,22,125,79,38\"),stringToBytes32(\"105,59,160,215,183,150,108,14,175,171,144,10,102,14,19,154,87,36,165,49,33,110,243,243,105,197,174,33,77,13,173,146\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,17,359,159,32,20,8,1460,2440588,0,949,2440589,1337,139,120,368,255,1532892063,23,32,16,2440588,131,Definitions.IPS(15,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(141,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(48,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(9999,Definitions.P.M,Definitions.S.SHORT,true),81,901,1532892063,111)"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [85,14,155,104,85,67,206,24,237,115,151,35,95,125,180,138,225,140,69,139,56,215,161,132,6,18,7,38,64,144,63,110],\"legalEntityIdCounterparty\": [152,214,99,201,224,247,40,62,25,169,145,98,201,118,62,159,153,68,92,17,86,166,36,135,28,41,92,170,55,234,203,193],\"dayCountConvention\": 5,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 3999,\"statusDate\": 1461000,\"initialExchangeDate\": 10,\"maturityDate\": 28,\"terminationDate\": 367,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 71,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 8,\"notionalPrincipal\": 69,\"nominalInterestRate\": 0,\"feeAccrued\": 2440588,\"accruedInterest\": 4801,\"rateMultiplier\": 41,\"rateSpread\": 361,\"feeRate\": 96,\"nextResetRate\": 2448,\"penaltyRate\": 4001,\"premiumDiscountAtIED\": 50,\"priceAtPurchaseDate\": 1,\"cycleOfInterestPayment\": {\"i\": 61,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4799,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 24,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 10,\"p\": 3,\"s\": 1,\"isSet\": true},\"lifeCap\": 79,\"lifeFloor\": 901,\"periodCap\": 4899,\"periodFloor\": 49}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"85,14,155,104,85,67,206,24,237,115,151,35,95,125,180,138,225,140,69,139,56,215,161,132,6,18,7,38,64,144,63,110\"),stringToBytes32(\"152,214,99,201,224,247,40,62,25,169,145,98,201,118,62,159,153,68,92,17,86,166,36,135,28,41,92,170,55,234,203,193\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.A,3999,1461000,10,28,367,0,0,71,365,0,8,69,0,2440588,4801,41,361,96,2448,4001,50,1,Definitions.IPS(61,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(4799,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(24,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(10,Definitions.P.Q,Definitions.S.SHORT,true),79,901,4899,49)"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 0,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [74,62,65,121,136,12,86,92,0,159,115,36,11,210,40,195,111,205,209,77,251,154,245,26,66,114,248,67,37,64,191,3],\"legalEntityIdCounterparty\": [144,222,195,74,77,13,11,39,142,251,247,196,85,5,24,82,94,200,122,113,128,36,168,192,177,16,149,54,41,118,188,248],\"dayCountConvention\": 1,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 1,\"statusDate\": 140,\"initialExchangeDate\": 139,\"maturityDate\": 401,\"terminationDate\": 25,\"purchaseDate\": 1532892064,\"capitalizationEndDate\": 1532892062,\"cycleAnchorDateOfInterestPayment\": 96,\"cycleAnchorDateOfRateReset\": 11,\"cycleAnchorDateOfScalingIndex\": 2440589,\"cycleAnchorDateOfFee\": 1461,\"notionalPrincipal\": 32075,\"nominalInterestRate\": 4799,\"feeAccrued\": 2,\"accruedInterest\": 29,\"rateMultiplier\": 79,\"rateSpread\": 79,\"feeRate\": 48,\"nextResetRate\": 10000,\"penaltyRate\": 1,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 15,\"p\": 4,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 159,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 5,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 119,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 1461002,\"lifeFloor\": 2440588,\"periodCap\": 361,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPL,stringToBytes32(\"74,62,65,121,136,12,86,92,0,159,115,36,11,210,40,195,111,205,209,77,251,154,245,26,66,114,248,67,37,64,191,3\"),stringToBytes32(\"144,222,195,74,77,13,11,39,142,251,247,196,85,5,24,82,94,200,122,113,128,36,168,192,177,16,149,54,41,118,188,248\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,1,140,139,401,25,1532892064,1532892062,96,11,2440589,1461,32075,4799,2,29,79,79,48,10000,1,1460,51,Definitions.IPS(15,Definitions.P.H,Definitions.S.LONG,false),Definitions.IPS(159,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(5,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(119,Definitions.P.H,Definitions.S.LONG,true),1461002,2440588,361,2)"
            },
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [200,151,89,20,160,142,164,107,63,191,55,140,253,86,99,70,108,246,121,125,18,46,59,62,40,140,190,127,199,227,96,193],\"legalEntityIdCounterparty\": [251,50,195,251,43,126,149,49,87,120,139,56,211,246,70,43,132,55,230,172,10,255,172,153,221,4,210,23,142,174,30,17],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 110,\"statusDate\": 69,\"initialExchangeDate\": 2014223716,\"maturityDate\": 68568,\"terminationDate\": 1969,\"purchaseDate\": 119,\"capitalizationEndDate\": 365,\"cycleAnchorDateOfInterestPayment\": 361,\"cycleAnchorDateOfRateReset\": 119,\"cycleAnchorDateOfScalingIndex\": 368,\"cycleAnchorDateOfFee\": 129,\"notionalPrincipal\": 367,\"nominalInterestRate\": 359,\"feeAccrued\": 1969,\"accruedInterest\": 399,\"rateMultiplier\": 99,\"rateSpread\": 255,\"feeRate\": 15,\"nextResetRate\": 151,\"penaltyRate\": 146097,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 1462,\"cycleOfInterestPayment\": {\"i\": 51,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 29,\"p\": 0,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1338,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440588,\"p\": 3,\"s\": 0,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 60,\"periodCap\": 254,\"periodFloor\": 40}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"200,151,89,20,160,142,164,107,63,191,55,140,253,86,99,70,108,246,121,125,18,46,59,62,40,140,190,127,199,227,96,193\"),stringToBytes32(\"251,50,195,251,43,126,149,49,87,120,139,56,211,246,70,43,132,55,230,172,10,255,172,153,221,4,210,23,142,174,30,17\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.A,Definitions.FeeBasis.A,110,69,2014223716,68568,1969,119,365,361,119,368,129,367,359,1969,399,99,255,15,151,146097,146097,1462,Definitions.IPS(51,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(29,Definitions.P.D,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(2440588,Definitions.P.Q,Definitions.S.LONG,false),41,60,254,40)"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 15,\"calendar\": 0,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [8,181,213,153,91,217,86,102,48,47,218,171,79,214,17,214,128,1,221,16,64,51,243,196,24,152,182,40,51,74,234,73],\"legalEntityIdCounterparty\": [138,171,117,137,123,24,152,0,175,92,29,129,32,205,121,255,221,145,57,84,167,233,229,249,62,135,161,61,228,211,229,238],\"dayCountConvention\": 3,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[9],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 39,\"statusDate\": 14,\"initialExchangeDate\": 8,\"maturityDate\": 2440588,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 3,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 150,\"cycleAnchorDateOfFee\": 89,\"notionalPrincipal\": 10001,\"nominalInterestRate\": 0,\"feeAccrued\": 3,\"accruedInterest\": 951,\"rateMultiplier\": 4901,\"rateSpread\": 131,\"feeRate\": 7,\"nextResetRate\": 41,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 368,\"priceAtPurchaseDate\": 86399,\"cycleOfInterestPayment\": {\"i\": 399,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 13,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223716,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440588,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 32074,\"periodCap\": 26,\"periodFloor\": 30}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.OPTNS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.PFL,stringToBytes32(\"8,181,213,153,91,217,86,102,48,47,218,171,79,214,17,214,128,1,221,16,64,51,243,196,24,152,182,40,51,74,234,73\"),stringToBytes32(\"138,171,117,137,123,24,152,0,175,92,29,129,32,205,121,255,221,145,57,84,167,233,229,249,62,135,161,61,228,211,229,238\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,39,14,8,2440588,0,0,0,3,49,150,89,10001,0,3,951,4901,131,7,41,25,368,86399,Definitions.IPS(399,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(13,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(2014223716,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(2440588,Definitions.P.W,Definitions.S.SHORT,true),161,32074,26,30)"
            },
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 17,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [92,140,94,119,156,66,56,168,31,30,212,38,67,15,46,249,73,91,93,180,209,82,224,27,94,95,213,136,181,127,9,195],\"legalEntityIdCounterparty\": [52,4,199,91,130,206,170,95,208,31,44,140,28,253,210,30,14,131,64,225,215,12,84,187,149,190,113,115,138,129,245,162],\"dayCountConvention\": 3,\"businessDayConvention\": 3,\"endOfMonthConvention\": 0,\"currency\": accounts[1],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 19,\"statusDate\": 89,\"initialExchangeDate\": 64,\"maturityDate\": 110,\"terminationDate\": 96,\"purchaseDate\": 91,\"capitalizationEndDate\": 161,\"cycleAnchorDateOfInterestPayment\": 1461,\"cycleAnchorDateOfRateReset\": 9999,\"cycleAnchorDateOfScalingIndex\": 86401,\"cycleAnchorDateOfFee\": 1971,\"notionalPrincipal\": 9999,\"nominalInterestRate\": 151,\"feeAccrued\": 50,\"accruedInterest\": 60,\"rateMultiplier\": 4900,\"rateSpread\": 23,\"feeRate\": 10,\"nextResetRate\": 2440587,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 119,\"priceAtPurchaseDate\": 359,\"cycleOfInterestPayment\": {\"i\": 48,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32076,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 146096,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 40,\"p\": 1,\"s\": 0,\"isSet\": true},\"lifeCap\": 2440588,\"lifeFloor\": 1337,\"periodCap\": 255,\"periodFloor\": 32}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CEC,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"92,140,94,119,156,66,56,168,31,30,212,38,67,15,46,249,73,91,93,180,209,82,224,27,94,95,213,136,181,127,9,195\"),stringToBytes32(\"52,4,199,91,130,206,170,95,208,31,44,140,28,253,210,30,14,131,64,225,215,12,84,187,149,190,113,115,138,129,245,162\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.CSF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,19,89,64,110,96,91,161,1461,9999,86401,1971,9999,151,50,60,4900,23,10,2440587,19,119,359,Definitions.IPS(48,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(32076,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(146096,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(40,Definitions.P.W,Definitions.S.LONG,true),2440588,1337,255,32)"
            },
            {
              "js": "1461",
              "sol": "1461"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 14,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [155,110,66,87,166,35,190,151,125,214,106,206,204,20,176,228,195,174,117,165,221,17,8,122,207,155,110,218,13,96,177,33],\"legalEntityIdCounterparty\": [78,30,33,100,159,182,121,117,134,156,86,252,255,122,185,83,3,169,199,115,42,207,253,23,240,61,3,5,242,227,73,24],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 0,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 39,\"statusDate\": 1532892062,\"initialExchangeDate\": 79,\"maturityDate\": 32075,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 30,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 50,\"cycleAnchorDateOfFee\": 65,\"notionalPrincipal\": 59,\"nominalInterestRate\": 0,\"feeAccrued\": 101,\"accruedInterest\": 4800,\"rateMultiplier\": 2440588,\"rateSpread\": 121,\"feeRate\": 71,\"nextResetRate\": 12,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 1338,\"priceAtPurchaseDate\": 120,\"cycleOfInterestPayment\": {\"i\": 139,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 32074,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 119,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 31,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 26,\"periodCap\": 18,\"periodFloor\": 400}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FUTUR,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"155,110,66,87,166,35,190,151,125,214,106,206,204,20,176,228,195,174,117,165,221,17,8,122,207,155,110,218,13,96,177,33\"),stringToBytes32(\"78,30,33,100,159,182,121,117,134,156,86,252,255,122,185,83,3,169,199,115,42,207,253,23,240,61,3,5,242,227,73,24\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.O,Definitions.FeeBasis.N,39,1532892062,79,32075,0,0,0,30,32074,50,65,59,0,101,4800,2440588,121,71,12,14,1338,120,Definitions.IPS(139,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(32074,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(119,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(31,Definitions.P.D,Definitions.S.SHORT,false),4000,26,18,400)"
            },
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.316ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:17:08.338ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}