,{
  "2020-11-11T15:49:34.172ZProxyBokkyPooBahsDateTimeLibrary.test_daysFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysFromDate(uint,uint,uint) WHEN year>=1970",
          "parameters": [
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_daysFromDate(uint,uint,uint) when NOT comply with: year >= 1970",
            "parameters": [
              {
                "js": 1969,
                "sol": 1969
              },
              {
                "js": "48",
                "sol": "48"
              },
              {
                "js": "30",
                "sol": "30"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.174ZProxyBokkyPooBahsDateTimeLibrary.test_daysToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_daysToDate(uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.175ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDate(uint,uint,uint)",
          "parameters": [
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.175ZProxyBokkyPooBahsDateTimeLibrary.testtimestampFromDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampFromDateTime(uint,uint,uint,uint,uint,uint)",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "25",
              "sol": "25"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.176ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDate(uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.177ZProxyBokkyPooBahsDateTimeLibrary.testtimestampToDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtimestampToDateTime(uint)",
          "parameters": [
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.178ZProxyBokkyPooBahsDateTimeLibrary.testisValidDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "129-131",
          "restrictions": [
            "day > 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day>0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "day <= 0",
            "year >= 1970",
            "month > 0",
            "month <= 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN day<=0,year>=1970,month>0,month<=12",
          "parameters": [
            {
              "js": "68568",
              "sol": "68568"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "year < 1970"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDate(uint,uint,uint) WHEN year<1970",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.180ZProxyBokkyPooBahsDateTimeLibrary.testisValidDateTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "136-138",
          "restrictions": [
            "hour < 24",
            "minute < 60",
            "second < 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN hour<24,minute<60,second<60,FunctionCall==true",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "4799",
              "sol": "4799"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "second >= 60",
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN second>=60,FunctionCall==true",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisValidDateTime(uint,uint,uint,uint,uint,uint) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.182ZProxyBokkyPooBahsDateTimeLibrary.testisLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisLeapYear(uint)",
          "parameters": [
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.183ZProxyBokkyPooBahsDateTimeLibrary.test_isLeapYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_isLeapYear(uint)",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.183ZProxyBokkyPooBahsDateTimeLibrary.testisWeekDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekDay(uint)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.183ZProxyBokkyPooBahsDateTimeLibrary.testisWeekEnd": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisWeekEnd(uint)",
          "parameters": [
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.184ZProxyBokkyPooBahsDateTimeLibrary.testgetDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDaysInMonth(uint)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.185ZProxyBokkyPooBahsDateTimeLibrary.test_getDaysInMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==1",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==3",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 5"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==5",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==7",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "7",
              "sol": "7"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==8",
          "parameters": [
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 10"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==10",
          "parameters": [
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "165-171",
          "restrictions": [
            "month == 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==12",
          "parameters": [
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "167-171",
          "restrictions": [
            "month != 2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month!=2",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "169-171",
          "restrictions": [
            "month == 2",
            "month != 1",
            "month != 3",
            "month != 5",
            "month != 7",
            "month != 8",
            "month != 10",
            "month != 12"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_getDaysInMonth(uint,uint) WHEN month==2,month!=1,month!=3,month!=5,month!=7,month!=8,month!=10,month!=12",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.188ZProxyBokkyPooBahsDateTimeLibrary.testgetDayOfWeek": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDayOfWeek(uint)",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.188ZProxyBokkyPooBahsDateTimeLibrary.testgetYear": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetYear(uint)",
          "parameters": [
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.188ZProxyBokkyPooBahsDateTimeLibrary.testgetMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMonth(uint)",
          "parameters": [
            {
              "js": "140",
              "sol": "140"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.189ZProxyBokkyPooBahsDateTimeLibrary.testgetDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetDay(uint)",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.189ZProxyBokkyPooBahsDateTimeLibrary.testgetHour": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetHour(uint)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.189ZProxyBokkyPooBahsDateTimeLibrary.testgetMinute": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetMinute(uint)",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.190ZProxyBokkyPooBahsDateTimeLibrary.testgetSecond": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetSecond(uint)",
          "parameters": [
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.190ZProxyBokkyPooBahsDateTimeLibrary.testaddYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddYears(uint,uint)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "23",
              "sol": "23"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.190ZProxyBokkyPooBahsDateTimeLibrary.testaddMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMonths(uint,uint)",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "69",
              "sol": "69"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.191ZProxyBokkyPooBahsDateTimeLibrary.testaddDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddDays(uint,uint)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.191ZProxyBokkyPooBahsDateTimeLibrary.testaddHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddHours(uint,uint)",
          "parameters": [
            {
              "js": "15",
              "sol": "15"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.192ZProxyBokkyPooBahsDateTimeLibrary.testaddMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddMinutes(uint,uint)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.192ZProxyBokkyPooBahsDateTimeLibrary.testaddSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddSeconds(uint,uint)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.192ZProxyBokkyPooBahsDateTimeLibrary.testsubYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubYears(uint,uint)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.193ZProxyBokkyPooBahsDateTimeLibrary.testsubMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMonths(uint,uint)",
          "parameters": [
            {
              "js": "18",
              "sol": "18"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.193ZProxyBokkyPooBahsDateTimeLibrary.testsubDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubDays(uint,uint)",
          "parameters": [
            {
              "js": "8",
              "sol": "8"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.194ZProxyBokkyPooBahsDateTimeLibrary.testsubHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubHours(uint,uint)",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.194ZProxyBokkyPooBahsDateTimeLibrary.testsubMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubMinutes(uint,uint)",
          "parameters": [
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.195ZProxyBokkyPooBahsDateTimeLibrary.testsubSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsubSeconds(uint,uint)",
          "parameters": [
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.196ZProxyBokkyPooBahsDateTimeLibrary.testdiffYears": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffYears(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffYears(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2440590,
                "sol": 2440590
              },
              {
                "js": "2440589",
                "sol": "2440589"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.197ZProxyBokkyPooBahsDateTimeLibrary.testdiffMonths": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMonths(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "1461001",
              "sol": "1461001"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMonths(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 2014223716,
                "sol": 2014223716
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.197ZProxyBokkyPooBahsDateTimeLibrary.testdiffDays": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffDays(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffDays(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 902,
                "sol": 902
              },
              {
                "js": "901",
                "sol": "901"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.198ZProxyBokkyPooBahsDateTimeLibrary.testdiffHours": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffHours(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "146099",
              "sol": "146099"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffHours(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 146100,
                "sol": 146100
              },
              {
                "js": "146099",
                "sol": "146099"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.199ZProxyBokkyPooBahsDateTimeLibrary.testdiffMinutes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffMinutes(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffMinutes(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 1532892063,
                "sol": 1532892063
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.200ZProxyBokkyPooBahsDateTimeLibrary.testdiffSeconds": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testdiffSeconds(uint,uint) WHEN fromTimestamp<=toTimestamp",
          "parameters": [
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testdiffSeconds(uint,uint) when NOT comply with: fromTimestamp <= toTimestamp",
            "parameters": [
              {
                "js": 86401,
                "sol": 86401
              },
              {
                "js": "86400",
                "sol": "86400"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.202ZProxyFloatMath.testfloatMult": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "21-21",
          "restrictions": [
            "b == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN b==0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0",
            "b != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatMult(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "91",
              "sol": "91"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.204ZProxyFloatMath.testfloatDiv": {
    "branches": {
      "0": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "a == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a==0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "a != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloatDiv(int256,int256) WHEN a!=0,b!=0,functionParameter == UnaryOperation && functionParameter == stateVariable!=true",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "146099",
              "sol": "146099"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testfloatDiv(int256,int256) when NOT comply with: b != 0",
            "parameters": [
              {
                "js": "120",
                "sol": "120"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.206ZProxyContractRoleConvention.testroleSign": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.ContractRole.RPA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.ContractRole.SEL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "14-14",
          "restrictions": [
            "contractRole == Definitions.ContractRole.RPL"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole==Definitions.ContractRole.RPL",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractRole.RPL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractRole != Definitions.ContractRole.RPL",
            "contractRole != Definitions.ContractRole.RPA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testroleSign(ContractRole) WHEN contractRole!=Definitions.ContractRole.RPL,contractRole!=Definitions.ContractRole.RPA",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.ContractRole.GUA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.210ZProxyDayCountConvention.testyearFraction": {
    "branches": {
      "0": {
        "branch": {
          "loc": "23-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "4800",
              "sol": "4800"
            },
            {
              "js": 0,
              "sol": "Definitions.DayCountConvention.A_AISDA"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "61",
                "sol": "61"
              },
              {
                "js": 60,
                "sol": 60
              },
              {
                "js": 0,
                "sol": "Definitions.DayCountConvention.A_AISDA"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "25-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "149",
              "sol": "149"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": 1,
              "sol": "Definitions.DayCountConvention.A_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "149",
                "sol": "149"
              },
              {
                "js": 148,
                "sol": 148
              },
              {
                "js": 1,
                "sol": "Definitions.DayCountConvention.A_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention.A_365"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention.A_365,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": 2,
              "sol": "Definitions.DayCountConvention.A_365"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": 59,
                "sol": 59
              },
              {
                "js": 2,
                "sol": "Definitions.DayCountConvention.A_365"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "ipdc == Definitions.DayCountConvention._30E_360"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc==Definitions.DayCountConvention._30E_360,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 4,
              "sol": "Definitions.DayCountConvention._30E_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "11",
                "sol": "11"
              },
              {
                "js": 10,
                "sol": 10
              },
              {
                "js": 4,
                "sol": "Definitions.DayCountConvention._30E_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "ipdc != Definitions.DayCountConvention._30E_360",
            "ipdc != Definitions.DayCountConvention.A_365",
            "ipdc != Definitions.DayCountConvention.A_360",
            "ipdc != Definitions.DayCountConvention.A_AISDA"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testyearFraction(uint256,uint256,DayCountConvention) WHEN ipdc!=Definitions.DayCountConvention._30E_360,ipdc!=Definitions.DayCountConvention.A_365,ipdc!=Definitions.DayCountConvention.A_360,ipdc!=Definitions.DayCountConvention.A_AISDA,endTimestamp>=startTimestamp",
          "parameters": [
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": 5,
              "sol": "Definitions.DayCountConvention._30_360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testyearFraction(uint256,uint256,DayCountConvention) when NOT comply with: endTimestamp >= startTimestamp",
            "parameters": [
              {
                "js": "14",
                "sol": "14"
              },
              {
                "js": 13,
                "sol": 13
              },
              {
                "js": 5,
                "sol": "Definitions.DayCountConvention._30_360"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T15:49:34.214ZProxyDayCountConvention.testactualActualISDA": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualActualISDA(uint256,uint256)",
          "parameters": [
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.215ZProxyDayCountConvention.testactualThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "30",
              "sol": "30"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.215ZProxyDayCountConvention.testactualThreeSixtyFive": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testactualThreeSixtyFive(uint256,uint256)",
          "parameters": [
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "32075",
              "sol": "32075"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.216ZProxyDayCountConvention.testthirtyEThreeSixty": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testthirtyEThreeSixty(uint256,uint256)",
          "parameters": [
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.217ZEndOfMonthConvention.getEndOfMonthConvention": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-26",
          "restrictions": [
            "cycle.p == Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p==Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{\"i\": 368,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(368,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.p != Definitions.P.M",
            "eomc == Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN cycle.p!=Definitions.P.M,eomc==Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "{\"i\": 101,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(101,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "28-30",
          "restrictions": [
            "eomc == Definitions.EndOfMonthConvention.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc==Definitions.EndOfMonthConvention.SD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{\"i\": 7,\"p\": 4,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(7,Definitions.P.H,Definitions.S.SHORT,true)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eomc != Definitions.EndOfMonthConvention.SD",
            "eomc != Definitions.EndOfMonthConvention.EOM"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getEndOfMonthConvention(EndOfMonthConvention,uint256,Definitions.IPS) WHEN eomc!=Definitions.EndOfMonthConvention.SD,eomc!=Definitions.EndOfMonthConvention.EOM",
          "parameters": [
            {
              "js": "99999",
              "sol": null
            },
            {
              "js": "146099",
              "sol": "146099"
            },
            {
              "js": "{\"i\": 18,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(18,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.220ZProxyEndOfMonthConvention.testshiftEndOfMonth": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEndOfMonth(uint256)",
          "parameters": [
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.220ZProxyEndOfMonthConvention.testshiftSameDay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftSameDay(uint256)",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.222ZProxyContractDefaultConvention.testperformanceIndicator": {
    "branches": {
      "0": {
        "branch": {
          "loc": "13-13",
          "restrictions": [
            "contractStatus == Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus==Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.ContractStatus.DF"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractStatus != Definitions.ContractStatus.DF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testperformanceIndicator(ContractStatus) WHEN contractStatus!=Definitions.ContractStatus.DF",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.ContractStatus.DL"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.225ZProxyBusinessDayConvention.testshiftCalcTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "20-27",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "159",
              "sol": "159"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.CSF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftCalcTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.CSF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.238ZProxyBusinessDayConvention.testshiftEventTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCF",
          "parameters": [
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": 1,
              "sol": "Definitions.BusinessDayConvention.SCF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "43-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": 3,
              "sol": "Definitions.BusinessDayConvention.CSF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMF",
          "parameters": [
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": 2,
              "sol": "Definitions.BusinessDayConvention.SCMF"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "45-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMF",
          "parameters": [
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": 4,
              "sol": "Definitions.BusinessDayConvention.CSMF"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCP",
          "parameters": [
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": 5,
              "sol": "Definitions.BusinessDayConvention.SCP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "51-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSP",
          "parameters": [
            {
              "js": "368",
              "sol": "368"
            },
            {
              "js": 7,
              "sol": "Definitions.BusinessDayConvention.CSP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.SCMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.SCMP",
          "parameters": [
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": 6,
              "sol": "Definitions.BusinessDayConvention.SCMP"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "53-59",
          "restrictions": [
            "convention == Definitions.BusinessDayConvention.CSMP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention==Definitions.BusinessDayConvention.CSMP",
          "parameters": [
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": 8,
              "sol": "Definitions.BusinessDayConvention.CSMP"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "convention != Definitions.BusinessDayConvention.SCMP",
            "convention != Definitions.BusinessDayConvention.CSMP",
            "convention != Definitions.BusinessDayConvention.SCP",
            "convention != Definitions.BusinessDayConvention.CSP",
            "convention != Definitions.BusinessDayConvention.SCMF",
            "convention != Definitions.BusinessDayConvention.CSMF",
            "convention != Definitions.BusinessDayConvention.SCF",
            "convention != Definitions.BusinessDayConvention.CSF"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testshiftEventTime(uint256,BusinessDayConvention,Calendar) WHEN convention!=Definitions.BusinessDayConvention.SCMP,convention!=Definitions.BusinessDayConvention.CSMP,convention!=Definitions.BusinessDayConvention.SCP,convention!=Definitions.BusinessDayConvention.CSP,convention!=Definitions.BusinessDayConvention.SCMF,convention!=Definitions.BusinessDayConvention.CSMF,convention!=Definitions.BusinessDayConvention.SCF,convention!=Definitions.BusinessDayConvention.CSF",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": 0,
              "sol": "Definitions.BusinessDayConvention.NULL"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.242ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrFollowing": {
    "branches": {
      "0": {
        "branch": {
          "loc": "69-75",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrFollowing(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.243ZProxyBusinessDayConvention.testgetClosestBusinessDaySameDayOrPreceeding": {
    "branches": {
      "0": {
        "branch": {
          "loc": "84-90",
          "restrictions": [
            "calendar == Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar==Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": 1,
              "sol": "Definitions.Calendar.MondayToFriday"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "calendar != Definitions.Calendar.MondayToFriday"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetClosestBusinessDaySameDayOrPreceeding(uint256,Calendar) WHEN calendar!=Definitions.Calendar.MondayToFriday",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": 0,
              "sol": "Definitions.Calendar.NoCalendar"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.247ZProxySchedule.testgetNextCycleDate": {
    "branches": {
      "0": {
        "branch": {
          "loc": "21-35",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 86399,\"p\": 0,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(86399,Definitions.P.D,Definitions.S.SHORT,true)"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "32076",
              "sol": "32076"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "23-35",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 254,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(254,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": "2447",
              "sol": "2447"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "25-35",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 130,\"p\": 2,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(130,Definitions.P.M,Definitions.S.LONG,false)"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "1461000",
              "sol": "1461000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "27-35",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 1532892064,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892064,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "2440589",
              "sol": "2440589"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "29-35",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 1969,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1969,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "31-35",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 63,\"p\": 5,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(63,Definitions.P.Y,Definitions.S.LONG,false)"
            },
            {
              "js": "99",
              "sol": "99"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "33-35",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetNextCycleDate(Definitions.IPS,uint256,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 29,\"p\": 99999,\"s\": 0,\"isSet\": false}",
              "sol": null
            },
            {
              "js": "2446",
              "sol": "2446"
            },
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.253ZProxySchedule.testcomputeDatesFromCycleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "57-60",
          "restrictions": [
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{\"i\": 12,\"p\": 4,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(12,Definitions.P.H,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "161",
              "sol": "161"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "367",
              "sol": "367"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "{\"i\": 160,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(160,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "130",
              "sol": "130"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "62-62",
          "restrictions": [
            "addEndTime == true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime==true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "146098",
              "sol": "146098"
            },
            {
              "js": "{\"i\": 1969,\"p\": 4,\"s\": 0,\"isSet\": false}",
              "sol": "Definitions.IPS(1969,Definitions.P.H,Definitions.S.LONG,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "4900",
              "sol": "4900"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "FunctionCall == true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,FunctionCall==true,cycle.isSet==false",
          "parameters": [
            {
              "js": "110",
              "sol": "110"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "{\"i\": 1532892062,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(1532892062,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "cycle.isSet == false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,cycle.isSet==false",
          "parameters": [
            {
              "js": "4901",
              "sol": "4901"
            },
            {
              "js": "359",
              "sol": "359"
            },
            {
              "js": "{\"i\": 254,\"p\": 3,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(254,Definitions.P.Q,Definitions.S.SHORT,false)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN cycle.isSet!=false",
          "parameters": [
            {
              "js": "160",
              "sol": "160"
            },
            {
              "js": "141",
              "sol": "141"
            },
            {
              "js": "{\"i\": 400,\"p\": 1,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(400,Definitions.P.W,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "14",
              "sol": "14"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "90-92",
          "restrictions": [
            "FunctionCall == true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall==true,addEndTime==true",
          "parameters": [
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{\"i\": 2014223716,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "10",
              "sol": "10"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "addEndTime == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN FunctionCall!=true,addEndTime==true",
          "parameters": [
            {
              "js": "1970",
              "sol": "1970"
            },
            {
              "js": "13",
              "sol": "13"
            },
            {
              "js": "{\"i\": 365,\"p\": 2,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(365,Definitions.P.M,Definitions.S.LONG,true)"
            },
            {
              "js": 1,
              "sol": "Definitions.EndOfMonthConvention.SD"
            },
            {
              "js": "true",
              "sol": "true"
            },
            {
              "js": "400",
              "sol": "400"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "addEndTime != true",
            "cycle.isSet != false"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcomputeDatesFromCycleSegment(uint256,uint256,Definitions.IPS,EndOfMonthConvention,bool,uint256,uint256) WHEN addEndTime!=true,cycle.isSet!=false",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{\"i\": 899,\"p\": 1,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(899,Definitions.P.W,Definitions.S.SHORT,true)"
            },
            {
              "js": 0,
              "sol": "Definitions.EndOfMonthConvention.EOM"
            },
            {
              "js": "false",
              "sol": "false"
            },
            {
              "js": "68569",
              "sol": "68569"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.265ZProxyUtils.testgetTimestampPlusPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "17-31",
          "restrictions": [
            "cycle.p == Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 32075,\"p\": 0,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(32075,Definitions.P.D,Definitions.S.LONG,true)"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "19-31",
          "restrictions": [
            "cycle.p == Definitions.P.W"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.W",
          "parameters": [
            {
              "js": "{\"i\": 2014223716,\"p\": 1,\"s\": 1,\"isSet\": false}",
              "sol": "Definitions.IPS(2014223716,Definitions.P.W,Definitions.S.SHORT,false)"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "21-31",
          "restrictions": [
            "cycle.p == Definitions.P.M"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.M",
          "parameters": [
            {
              "js": "{\"i\": 2447,\"p\": 2,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(2447,Definitions.P.M,Definitions.S.SHORT,true)"
            },
            {
              "js": "360",
              "sol": "360"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "23-31",
          "restrictions": [
            "cycle.p == Definitions.P.Q"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Q",
          "parameters": [
            {
              "js": "{\"i\": 949,\"p\": 3,\"s\": 1,\"isSet\": true}",
              "sol": "Definitions.IPS(949,Definitions.P.Q,Definitions.S.SHORT,true)"
            },
            {
              "js": "21",
              "sol": "21"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "25-31",
          "restrictions": [
            "cycle.p == Definitions.P.H"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.H",
          "parameters": [
            {
              "js": "{\"i\": 18,\"p\": 4,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(18,Definitions.P.H,Definitions.S.LONG,true)"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "27-31",
          "restrictions": [
            "cycle.p == Definitions.P.Y"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p==Definitions.P.Y",
          "parameters": [
            {
              "js": "{\"i\": 24,\"p\": 5,\"s\": 0,\"isSet\": true}",
              "sol": "Definitions.IPS(24,Definitions.P.Y,Definitions.S.LONG,true)"
            },
            {
              "js": "4801",
              "sol": "4801"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "29-31",
          "restrictions": [
            "cycle.p != Definitions.P.Y",
            "cycle.p != Definitions.P.H",
            "cycle.p != Definitions.P.Q",
            "cycle.p != Definitions.P.M",
            "cycle.p != Definitions.P.W",
            "cycle.p != Definitions.P.D"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetTimestampPlusPeriod(Definitions.IPS,uint256) WHEN cycle.p!=Definitions.P.Y,cycle.p!=Definitions.P.H,cycle.p!=Definitions.P.Q,cycle.p!=Definitions.P.M,cycle.p!=Definitions.P.W,cycle.p!=Definitions.P.D",
          "parameters": [
            {
              "js": "{\"i\": 368,\"p\": 99999,\"s\": 1,\"isSet\": true}",
              "sol": null
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.267ZProxyUtils.testsortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint256)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 32075,\"eventType\": 19,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 7},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 69,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 0,\"stfType\": 5},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 141,\"eventType\": 1,\"currency\": accounts[4],\"pofType\": 2,\"stfType\": 2},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 13,\"scheduleTime\": 32075,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 80,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 1532892064,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 3,\"stfType\": 1},{\"eventTime\": 1338,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 366,\"eventType\": 5,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 1},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 400,\"scheduleTime\": 21,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 1,\"stfType\": 14},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 9999,\"eventType\": 16,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 5},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 23,\"scheduleTime\": 119,\"eventType\": 2,\"currency\": accounts[7],\"pofType\": 19,\"stfType\": 15},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 1460,\"scheduleTime\": 90,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 4},{\"eventTime\": 27,\"eventTimeWithEpochOffset\": 66,\"scheduleTime\": 31,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 146099,\"eventTimeWithEpochOffset\": 141,\"scheduleTime\": 86400,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 1,\"stfType\": 18},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 399,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 2},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 2014223716,\"scheduleTime\": 109,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 119,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 4,\"stfType\": 17},{\"eventTime\": 146099,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 1461002,\"eventType\": 15,\"currency\": accounts[9],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 900,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 63,\"eventType\": 4,\"currency\": accounts[0],\"pofType\": 17,\"stfType\": 1},{\"eventTime\": 9999,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 32,\"eventType\": 2,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 9},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 2,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 3,\"stfType\": 9},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 2,\"scheduleTime\": 8,\"eventType\": 10,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 1,\"eventTimeWithEpochOffset\": 11,\"scheduleTime\": 32076,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 2,\"stfType\": 15},{\"eventTime\": 99,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2446,\"eventType\": 10,\"currency\": accounts[7],\"pofType\": 14,\"stfType\": 3},{\"eventTime\": 32074,\"eventTimeWithEpochOffset\": 70,\"scheduleTime\": 2440588,\"eventType\": 10,\"currency\": accounts[0],\"pofType\": 10,\"stfType\": 2},{\"eventTime\": 39,\"eventTimeWithEpochOffset\": 160,\"scheduleTime\": 50,\"eventType\": 5,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 19},{\"eventTime\": 91,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 1462,\"eventType\": 16,\"currency\": accounts[6],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 18,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 27,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 5,\"scheduleTime\": 32074,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 13},{\"eventTime\": 7,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 2014223716,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 4,\"stfType\": 2},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 79,\"scheduleTime\": 12,\"eventType\": 20,\"currency\": accounts[4],\"pofType\": 1,\"stfType\": 3},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 91,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 5},{\"eventTime\": 366,\"eventTimeWithEpochOffset\": 1461002,\"scheduleTime\": 899,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 8,\"stfType\": 11},{\"eventTime\": 79,\"eventTimeWithEpochOffset\": 64,\"scheduleTime\": 86399,\"eventType\": 1,\"currency\": accounts[6],\"pofType\": 16,\"stfType\": 4},{\"eventTime\": 70,\"eventTimeWithEpochOffset\": 359,\"scheduleTime\": 14,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 16,\"stfType\": 5},{\"eventTime\": 159,\"eventTimeWithEpochOffset\": 29,\"scheduleTime\": 401,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 1,\"stfType\": 11},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 1532892064,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 18,\"stfType\": 2},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 399,\"scheduleTime\": 139,\"eventType\": 0,\"currency\": accounts[8],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 14,\"eventType\": 11,\"currency\": accounts[9],\"pofType\": 0,\"stfType\": 1},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 255,\"scheduleTime\": 149,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 11},{\"eventTime\": 2447,\"eventTimeWithEpochOffset\": 8,\"scheduleTime\": 1338,\"eventType\": 2,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 1},{\"eventTime\": 1461002,\"eventTimeWithEpochOffset\": 14,\"scheduleTime\": 141,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 18,\"stfType\": 20},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 1337,\"scheduleTime\": 4800,\"eventType\": 15,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 16},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 7,\"eventType\": 19,\"currency\": accounts[9],\"pofType\": 18,\"stfType\": 18},{\"eventTime\": 68568,\"eventTimeWithEpochOffset\": 68570,\"scheduleTime\": 139,\"eventType\": 18,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 17},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 1,\"scheduleTime\": 1532892064,\"eventType\": 2,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 15},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 60,\"scheduleTime\": 21,\"eventType\": 6,\"currency\": accounts[2],\"pofType\": 12,\"stfType\": 3},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 71,\"eventType\": 13,\"currency\": accounts[5],\"pofType\": 15,\"stfType\": 1},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 160,\"eventType\": 18,\"currency\": accounts[6],\"pofType\": 15,\"stfType\": 19},{\"eventTime\": 4800,\"eventTimeWithEpochOffset\": 161,\"scheduleTime\": 29,\"eventType\": 12,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 11},{\"eventTime\": 119,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 146096,\"eventType\": 9,\"currency\": accounts[4],\"pofType\": 4,\"stfType\": 13},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 151,\"scheduleTime\": 51,\"eventType\": 12,\"currency\": accounts[4],\"pofType\": 11,\"stfType\": 14},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 12,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 17},{\"eventTime\": 25,\"eventTimeWithEpochOffset\": 4899,\"scheduleTime\": 2014223716,\"eventType\": 20,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 13},{\"eventTime\": 141,\"eventTimeWithEpochOffset\": 90,\"scheduleTime\": 257,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 6},{\"eventTime\": 1532892064,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 901,\"eventType\": 1,\"currency\": accounts[5],\"pofType\": 14,\"stfType\": 14},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 150,\"eventType\": 14,\"currency\": accounts[2],\"pofType\": 4,\"stfType\": 20},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 97,\"scheduleTime\": 146096,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 7,\"stfType\": 14},{\"eventTime\": 110,\"eventTimeWithEpochOffset\": 21,\"scheduleTime\": 950,\"eventType\": 16,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 17},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 139,\"scheduleTime\": 130,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 20,\"stfType\": 8},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 254,\"scheduleTime\": 146098,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 16},{\"eventTime\": 32,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 399,\"eventType\": 7,\"currency\": accounts[5],\"pofType\": 19,\"stfType\": 7},{\"eventTime\": 109,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 4899,\"eventType\": 16,\"currency\": accounts[9],\"pofType\": 9,\"stfType\": 20},{\"eventTime\": 10001,\"eventTimeWithEpochOffset\": 129,\"scheduleTime\": 256,\"eventType\": 14,\"currency\": accounts[1],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 39,\"scheduleTime\": 66,\"eventType\": 17,\"currency\": accounts[5],\"pofType\": 8,\"stfType\": 3},{\"eventTime\": 2,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 4801,\"eventType\": 9,\"currency\": accounts[0],\"pofType\": 15,\"stfType\": 5}]",
              "sol": "[Definitions.ProtoEvent(1969,39,32075,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.PY),Definitions.ProtoEvent(160,161,69,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.PR),Definitions.ProtoEvent(29,99,141,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.AD),Definitions.ProtoEvent(29,13,32075,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(80,1970,1532892064,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MD),Definitions.ProtoEvent(1338,129,366,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MD),Definitions.ProtoEvent(4,400,21,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.SC),Definitions.ProtoEvent(69,5,9999,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PR),Definitions.ProtoEvent(32,23,119,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.CD),Definitions.ProtoEvent(161,1460,90,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.IP),Definitions.ProtoEvent(27,66,31,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(146099,141,86400,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCB),Definitions.ProtoEvent(49,28,399,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.AD),Definitions.ProtoEvent(121,2014223716,109,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(32074,254,119,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MR),Definitions.ProtoEvent(146099,901,1461002,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(900,18,63,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.MD),Definitions.ProtoEvent(9999,39,32,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PRD),Definitions.ProtoEvent(1532892064,3,2,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.PRD),Definitions.ProtoEvent(149,2,8,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(1,11,32076,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.CD),Definitions.ProtoEvent(99,10001,2446,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IED),Definitions.ProtoEvent(32074,70,2440588,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.AD),Definitions.ProtoEvent(39,160,50,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.STD),Definitions.ProtoEvent(91,60,1462,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(18,151,27,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(366,5,32074,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.RRY),Definitions.ProtoEvent(7,139,2014223716,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.AD),Definitions.ProtoEvent(32,79,12,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IED),Definitions.ProtoEvent(4000,161,91,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.PR),Definitions.ProtoEvent(366,1461002,899,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IPCI),Definitions.ProtoEvent(79,64,86399,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.IP),Definitions.ProtoEvent(70,359,14,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.PR),Definitions.ProtoEvent(159,29,401,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.IPCI),Definitions.ProtoEvent(4801,119,1532892064,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.AD),Definitions.ProtoEvent(120,399,139,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(1969,20,14,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.MD),Definitions.ProtoEvent(60,255,149,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCI),Definitions.ProtoEvent(2447,8,1338,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.MD),Definitions.ProtoEvent(1461002,14,141,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.Child),Definitions.ProtoEvent(10001,1337,4800,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.DV),Definitions.ProtoEvent(4800,41,7,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IPCB),Definitions.ProtoEvent(68568,68570,139,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.MR),Definitions.ProtoEvent(110,1,1532892064,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.CD),Definitions.ProtoEvent(2014223716,60,21,Definitions.EventType.PP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IED),Definitions.ProtoEvent(359,256,71,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.MD),Definitions.ProtoEvent(109,91,160,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.STD),Definitions.ProtoEvent(4800,161,29,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCI),Definitions.ProtoEvent(119,1461000,146096,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.RRY),Definitions.ProtoEvent(86400,151,51,Definitions.EventType.RR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.SC),Definitions.ProtoEvent(141,24,12,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.MR),Definitions.ProtoEvent(25,4899,2014223716,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.RRY),Definitions.ProtoEvent(141,90,257,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PP),Definitions.ProtoEvent(1532892064,111,901,Definitions.EventType.MD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.SC),Definitions.ProtoEvent(161,39,150,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.Child),Definitions.ProtoEvent(3999,97,146096,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.SC),Definitions.ProtoEvent(110,21,950,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.MR),Definitions.ProtoEvent(3999,139,130,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.FP),Definitions.ProtoEvent(32,254,146098,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.DV),Definitions.ProtoEvent(32,1971,399,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.PY),Definitions.ProtoEvent(109,129,4899,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.Child),Definitions.ProtoEvent(10001,129,256,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(28,39,66,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.IED),Definitions.ProtoEvent(2,101,4801,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR)]"
            },
            {
              "js": "1462",
              "sol": "1462"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.282ZProxyUtils.testquickSortProtoEventSchedule": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testquickSortProtoEventSchedule(Definitions.ProtoEvent[MAX_EVENT_SCHEDULE_SIZE],uint,uint)",
          "parameters": [
            {
              "js": "[{\"eventTime\": 32076,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 1970,\"eventType\": 16,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 4899,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 4800,\"eventType\": 0,\"currency\": accounts[5],\"pofType\": 12,\"stfType\": 10},{\"eventTime\": 9,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 1462,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 0,\"stfType\": 4},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 20,\"scheduleTime\": 68569,\"eventType\": 9,\"currency\": accounts[8],\"pofType\": 6,\"stfType\": 8},{\"eventTime\": 26,\"eventTimeWithEpochOffset\": 24,\"scheduleTime\": 60,\"eventType\": 20,\"currency\": accounts[7],\"pofType\": 16,\"stfType\": 1},{\"eventTime\": 899,\"eventTimeWithEpochOffset\": 256,\"scheduleTime\": 5,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 18},{\"eventTime\": 949,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 86400,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 16,\"stfType\": 2},{\"eventTime\": 69,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 2014223715,\"eventType\": 4,\"currency\": accounts[2],\"pofType\": 14,\"stfType\": 4},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 121,\"scheduleTime\": 111,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 32,\"scheduleTime\": 71,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 19,\"stfType\": 1},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 6,\"eventType\": 8,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 3},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 0,\"scheduleTime\": 95,\"eventType\": 14,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 7},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 25,\"scheduleTime\": 141,\"eventType\": 4,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 13},{\"eventTime\": 20,\"eventTimeWithEpochOffset\": 361,\"scheduleTime\": 140,\"eventType\": 19,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 20},{\"eventTime\": 71,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 4799,\"eventType\": 18,\"currency\": accounts[7],\"pofType\": 12,\"stfType\": 4},{\"eventTime\": 4801,\"eventTimeWithEpochOffset\": 150,\"scheduleTime\": 4799,\"eventType\": 17,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 1461,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 12,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 12,\"stfType\": 8},{\"eventTime\": 4,\"eventTimeWithEpochOffset\": 15,\"scheduleTime\": 27,\"eventType\": 10,\"currency\": accounts[3],\"pofType\": 7,\"stfType\": 1},{\"eventTime\": 61,\"eventTimeWithEpochOffset\": 109,\"scheduleTime\": 2,\"eventType\": 4,\"currency\": accounts[1],\"pofType\": 2,\"stfType\": 12},{\"eventTime\": 8,\"eventTimeWithEpochOffset\": 111,\"scheduleTime\": 120,\"eventType\": 4,\"currency\": accounts[4],\"pofType\": 7,\"stfType\": 15},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 9,\"scheduleTime\": 24,\"eventType\": 8,\"currency\": accounts[3],\"pofType\": 14,\"stfType\": 6},{\"eventTime\": 2014223715,\"eventTimeWithEpochOffset\": 95,\"scheduleTime\": 39,\"eventType\": 5,\"currency\": accounts[9],\"pofType\": 5,\"stfType\": 8},{\"eventTime\": 3999,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 17,\"eventType\": 2,\"currency\": accounts[8],\"pofType\": 5,\"stfType\": 14},{\"eventTime\": 1461001,\"eventTimeWithEpochOffset\": 1532892063,\"scheduleTime\": 60,\"eventType\": 20,\"currency\": accounts[1],\"pofType\": 15,\"stfType\": 5},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 28,\"scheduleTime\": 19,\"eventType\": 5,\"currency\": accounts[0],\"pofType\": 2,\"stfType\": 13},{\"eventTime\": 86400,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 900,\"eventType\": 2,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 15},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 366,\"scheduleTime\": 68568,\"eventType\": 4,\"currency\": accounts[8],\"pofType\": 7,\"stfType\": 2},{\"eventTime\": 131,\"eventTimeWithEpochOffset\": 10001,\"scheduleTime\": 2440588,\"eventType\": 16,\"currency\": accounts[8],\"pofType\": 13,\"stfType\": 8},{\"eventTime\": 255,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 99,\"eventType\": 18,\"currency\": accounts[8],\"pofType\": 10,\"stfType\": 6},{\"eventTime\": 359,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 151,\"eventType\": 8,\"currency\": accounts[6],\"pofType\": 17,\"stfType\": 5},{\"eventTime\": 4000,\"eventTimeWithEpochOffset\": 49,\"scheduleTime\": 32,\"eventType\": 7,\"currency\": accounts[6],\"pofType\": 8,\"stfType\": 20},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 1532892062,\"scheduleTime\": 399,\"eventType\": 3,\"currency\": accounts[1],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 12,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 146099,\"eventType\": 13,\"currency\": accounts[7],\"pofType\": 15,\"stfType\": 4},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 1461000,\"scheduleTime\": 111,\"eventType\": 17,\"currency\": accounts[4],\"pofType\": 13,\"stfType\": 19},{\"eventTime\": 41,\"eventTimeWithEpochOffset\": 86401,\"scheduleTime\": 109,\"eventType\": 16,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 9},{\"eventTime\": 950,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 79,\"eventType\": 3,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 15},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 950,\"scheduleTime\": 16,\"eventType\": 7,\"currency\": accounts[1],\"pofType\": 19,\"stfType\": 10},{\"eventTime\": 160,\"eventTimeWithEpochOffset\": 6,\"scheduleTime\": 65,\"eventType\": 15,\"currency\": accounts[2],\"pofType\": 8,\"stfType\": 7},{\"eventTime\": 120,\"eventTimeWithEpochOffset\": 140,\"scheduleTime\": 32076,\"eventType\": 11,\"currency\": accounts[6],\"pofType\": 14,\"stfType\": 12},{\"eventTime\": 49,\"eventTimeWithEpochOffset\": 1338,\"scheduleTime\": 71,\"eventType\": 17,\"currency\": accounts[6],\"pofType\": 6,\"stfType\": 7},{\"eventTime\": 149,\"eventTimeWithEpochOffset\": 18,\"scheduleTime\": 29,\"eventType\": 15,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 2},{\"eventTime\": 400,\"eventTimeWithEpochOffset\": 3,\"scheduleTime\": 96,\"eventType\": 16,\"currency\": accounts[2],\"pofType\": 19,\"stfType\": 19},{\"eventTime\": 121,\"eventTimeWithEpochOffset\": 119,\"scheduleTime\": 368,\"eventType\": 0,\"currency\": accounts[2],\"pofType\": 13,\"stfType\": 3},{\"eventTime\": 23,\"eventTimeWithEpochOffset\": 2448,\"scheduleTime\": 12,\"eventType\": 9,\"currency\": accounts[6],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 401,\"eventTimeWithEpochOffset\": 41,\"scheduleTime\": 4000,\"eventType\": 3,\"currency\": accounts[5],\"pofType\": 5,\"stfType\": 15},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 4801,\"scheduleTime\": 4901,\"eventType\": 13,\"currency\": accounts[2],\"pofType\": 18,\"stfType\": 3},{\"eventTime\": 1337,\"eventTimeWithEpochOffset\": 1336,\"scheduleTime\": 899,\"eventType\": 13,\"currency\": accounts[9],\"pofType\": 11,\"stfType\": 18},{\"eventTime\": 1461000,\"eventTimeWithEpochOffset\": 27,\"scheduleTime\": 1338,\"eventType\": 11,\"currency\": accounts[0],\"pofType\": 13,\"stfType\": 5},{\"eventTime\": 161,\"eventTimeWithEpochOffset\": 1969,\"scheduleTime\": 120,\"eventType\": 10,\"currency\": accounts[6],\"pofType\": 20,\"stfType\": 3},{\"eventTime\": 28,\"eventTimeWithEpochOffset\": 1971,\"scheduleTime\": 18,\"eventType\": 13,\"currency\": accounts[6],\"pofType\": 13,\"stfType\": 12},{\"eventTime\": 2448,\"eventTimeWithEpochOffset\": 59,\"scheduleTime\": 367,\"eventType\": 11,\"currency\": accounts[5],\"pofType\": 1,\"stfType\": 6},{\"eventTime\": 1969,\"eventTimeWithEpochOffset\": 901,\"scheduleTime\": 2448,\"eventType\": 3,\"currency\": accounts[3],\"pofType\": 5,\"stfType\": 17},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 10000,\"scheduleTime\": 1461002,\"eventType\": 9,\"currency\": accounts[3],\"pofType\": 0,\"stfType\": 11},{\"eventTime\": 16,\"eventTimeWithEpochOffset\": 99,\"scheduleTime\": 18,\"eventType\": 11,\"currency\": accounts[1],\"pofType\": 4,\"stfType\": 5},{\"eventTime\": 30,\"eventTimeWithEpochOffset\": 91,\"scheduleTime\": 400,\"eventType\": 0,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 5},{\"eventTime\": 1336,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 2447,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 10,\"stfType\": 20},{\"eventTime\": 257,\"eventTimeWithEpochOffset\": 4900,\"scheduleTime\": 365,\"eventType\": 8,\"currency\": accounts[9],\"pofType\": 10,\"stfType\": 19},{\"eventTime\": 66,\"eventTimeWithEpochOffset\": 101,\"scheduleTime\": 1971,\"eventType\": 5,\"currency\": accounts[4],\"pofType\": 0,\"stfType\": 3},{\"eventTime\": 2014223716,\"eventTimeWithEpochOffset\": 26,\"scheduleTime\": 29,\"eventType\": 14,\"currency\": accounts[7],\"pofType\": 9,\"stfType\": 15},{\"eventTime\": 368,\"eventTimeWithEpochOffset\": 367,\"scheduleTime\": 19,\"eventType\": 13,\"currency\": accounts[0],\"pofType\": 7,\"stfType\": 8},{\"eventTime\": 60,\"eventTimeWithEpochOffset\": 65,\"scheduleTime\": 146096,\"eventType\": 2,\"currency\": accounts[3],\"pofType\": 2,\"stfType\": 3},{\"eventTime\": 146096,\"eventTimeWithEpochOffset\": 2014223715,\"scheduleTime\": 131,\"eventType\": 14,\"currency\": accounts[8],\"pofType\": 3,\"stfType\": 17},{\"eventTime\": 29,\"eventTimeWithEpochOffset\": 4001,\"scheduleTime\": 40,\"eventType\": 10,\"currency\": accounts[1],\"pofType\": 9,\"stfType\": 18},{\"eventTime\": 0,\"eventTimeWithEpochOffset\": 1970,\"scheduleTime\": 65,\"eventType\": 11,\"currency\": accounts[4],\"pofType\": 15,\"stfType\": 0}]",
              "sol": "[Definitions.ProtoEvent(32076,18,1970,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(4899,367,4800,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.TD),Definitions.ProtoEvent(9,367,1462,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IP),Definitions.ProtoEvent(161,20,68569,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.FP),Definitions.ProtoEvent(26,24,60,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.MD),Definitions.ProtoEvent(899,256,5,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.IPCB),Definitions.ProtoEvent(949,15,86400,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.DV,Definitions.EventType.AD),Definitions.ProtoEvent(69,95,2014223715,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.IP),Definitions.ProtoEvent(29,121,111,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(30,32,71,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.MD),Definitions.ProtoEvent(1461000,1971,6,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.IED),Definitions.ProtoEvent(2014223716,0,95,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PY),Definitions.ProtoEvent(400,25,141,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.RRY),Definitions.ProtoEvent(20,361,140,Definitions.EventType.STD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.Child),Definitions.ProtoEvent(71,901,4799,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.IP),Definitions.ProtoEvent(4801,150,4799,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(1461,2448,12,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RR,Definitions.EventType.FP),Definitions.ProtoEvent(4,15,27,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.MD),Definitions.ProtoEvent(61,109,2,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RR),Definitions.ProtoEvent(8,111,120,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.CD),Definitions.ProtoEvent(60,9,24,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.PP),Definitions.ProtoEvent(2014223715,95,39,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.FP),Definitions.ProtoEvent(3999,10001,17,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.SC),Definitions.ProtoEvent(1461001,1532892063,60,Definitions.EventType.Child,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.PR),Definitions.ProtoEvent(16,28,19,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.RRY),Definitions.ProtoEvent(86400,119,900,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.CD),Definitions.ProtoEvent(146096,366,68568,Definitions.EventType.IP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.AD),Definitions.ProtoEvent(131,10001,2440588,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.FP),Definitions.ProtoEvent(255,3,99,Definitions.EventType.IPCB,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PP),Definitions.ProtoEvent(359,2448,151,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MR,Definitions.EventType.PR),Definitions.ProtoEvent(4000,49,32,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.Child),Definitions.ProtoEvent(401,1532892062,399,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(12,901,146099,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.IP),Definitions.ProtoEvent(161,1461000,111,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.STD),Definitions.ProtoEvent(41,86401,109,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PRD),Definitions.ProtoEvent(950,3,79,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.CD),Definitions.ProtoEvent(161,950,16,Definitions.EventType.PY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.TD),Definitions.ProtoEvent(160,6,65,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.FP,Definitions.EventType.PY),Definitions.ProtoEvent(120,140,32076,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SC,Definitions.EventType.RR),Definitions.ProtoEvent(49,1338,71,Definitions.EventType.MR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PP,Definitions.EventType.PY),Definitions.ProtoEvent(149,18,29,Definitions.EventType.CD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.AD),Definitions.ProtoEvent(400,3,96,Definitions.EventType.DV,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.STD,Definitions.EventType.STD),Definitions.ProtoEvent(121,119,368,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.IED),Definitions.ProtoEvent(23,2448,12,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(401,41,4000,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.CD),Definitions.ProtoEvent(66,4801,4901,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCB,Definitions.EventType.IED),Definitions.ProtoEvent(1337,1336,899,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IPCI,Definitions.EventType.IPCB),Definitions.ProtoEvent(1461000,27,1338,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.PR),Definitions.ProtoEvent(161,1969,120,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.IED),Definitions.ProtoEvent(28,1971,18,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.RRY,Definitions.EventType.RR),Definitions.ProtoEvent(2448,59,367,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.MD,Definitions.EventType.PP),Definitions.ProtoEvent(1969,901,2448,Definitions.EventType.IED,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PR,Definitions.EventType.MR),Definitions.ProtoEvent(30,10000,1461002,Definitions.EventType.PRD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IPCI),Definitions.ProtoEvent(16,99,18,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IP,Definitions.EventType.PR),Definitions.ProtoEvent(30,91,400,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.PR),Definitions.ProtoEvent(1336,367,2447,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.Child),Definitions.ProtoEvent(257,4900,365,Definitions.EventType.FP,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.TD,Definitions.EventType.STD),Definitions.ProtoEvent(66,101,1971,Definitions.EventType.PR,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.SD,Definitions.EventType.IED),Definitions.ProtoEvent(2014223716,26,29,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.CD),Definitions.ProtoEvent(368,367,19,Definitions.EventType.RRY,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PY,Definitions.EventType.FP),Definitions.ProtoEvent(60,65,146096,Definitions.EventType.AD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.AD,Definitions.EventType.IED),Definitions.ProtoEvent(146096,2014223715,131,Definitions.EventType.SC,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.IED,Definitions.EventType.MR),Definitions.ProtoEvent(29,4001,40,Definitions.EventType.TD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.PRD,Definitions.EventType.IPCB),Definitions.ProtoEvent(0,1970,65,Definitions.EventType.IPCI,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.CD,Definitions.EventType.SD)]"
            },
            {
              "js": "146097",
              "sol": "146097"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.304ZProxyUtils.testisInPeriod": {
    "branches": {
      "0": {
        "branch": {
          "loc": "107-107",
          "restrictions": [
            "startTimestamp < timestamp",
            "endTimestamp >= timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN startTimestamp<timestamp,endTimestamp>=timestamp",
          "parameters": [
            {
              "js": "950",
              "sol": "950"
            },
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "4001",
              "sol": "4001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "endTimestamp < timestamp"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testisInPeriod(uint256,uint256,uint256) WHEN endTimestamp<timestamp",
          "parameters": [
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.308ZPAMEngine.computeInitialState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeInitialState(Definitions.ContractTerms)",
          "parameters": [
            {
              "js": "{\"contractType\": 1,\"calendar\": 0,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [235,119,67,153,142,1,156,176,228,43,64,195,168,215,179,43,213,134,225,155,64,59,75,200,190,74,228,147,209,141,15,229],\"legalEntityIdCounterparty\": [27,184,91,224,195,210,21,116,110,10,217,234,39,80,96,224,225,136,157,30,27,224,82,164,187,241,31,4,133,59,177,90],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[0],\"scalingEffect\": 5,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 27,\"statusDate\": 59,\"initialExchangeDate\": 90,\"maturityDate\": 131,\"terminationDate\": 365,\"purchaseDate\": 1970,\"capitalizationEndDate\": 86401,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 49,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 3999,\"nominalInterestRate\": 146099,\"feeAccrued\": 1969,\"accruedInterest\": 146097,\"rateMultiplier\": 65,\"rateSpread\": 146098,\"feeRate\": 1969,\"nextResetRate\": 26,\"penaltyRate\": 14,\"premiumDiscountAtIED\": 109,\"priceAtPurchaseDate\": 2440588,\"cycleOfInterestPayment\": {\"i\": 2440589,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86401,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 28,\"p\": 2,\"s\": 0,\"isSet\": true},\"lifeCap\": 12,\"lifeFloor\": 949,\"periodCap\": 99,\"periodFloor\": 99}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.ANN,Definitions.Calendar.NoCalendar,Definitions.ContractRole.OBL,stringToBytes32(\"235,119,67,153,142,1,156,176,228,43,64,195,168,215,179,43,213,134,225,155,64,59,75,200,190,74,228,147,209,141,15,229\"),stringToBytes32(\"27,184,91,224,195,210,21,116,110,10,217,234,39,80,96,224,225,136,157,30,27,224,82,164,187,241,31,4,133,59,177,90\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.I,Definitions.FeeBasis.N,27,59,90,131,365,1970,86401,110,49,4,2440588,3999,146099,1969,146097,65,146098,1969,26,14,109,2440588,Definitions.IPS(2440589,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(86401,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(950,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(28,Definitions.P.M,Definitions.S.LONG,true),12,949,99,99)"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.312ZPAMEngine.computeNextState": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextState(Definitions.ContractTerms,Definitions.ContractState,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [49,37,219,149,140,157,118,203,19,204,138,54,149,190,253,226,131,83,215,184,64,58,162,219,47,189,16,95,122,161,154,165],\"legalEntityIdCounterparty\": [113,127,61,60,63,5,220,176,99,250,127,121,186,189,123,157,164,79,9,103,93,151,60,60,90,13,41,6,240,88,24,173],\"dayCountConvention\": 4,\"businessDayConvention\": 7,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 6,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 80,\"statusDate\": 101,\"initialExchangeDate\": 97,\"maturityDate\": 99,\"terminationDate\": 401,\"purchaseDate\": 59,\"capitalizationEndDate\": 30,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 2440587,\"cycleAnchorDateOfScalingIndex\": 146098,\"cycleAnchorDateOfFee\": 27,\"notionalPrincipal\": 1461,\"nominalInterestRate\": 4900,\"feeAccrued\": 401,\"accruedInterest\": 161,\"rateMultiplier\": 70,\"rateSpread\": 146097,\"feeRate\": 41,\"nextResetRate\": 400,\"penaltyRate\": 130,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 64,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 364,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 900,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 41,\"lifeFloor\": 23,\"periodCap\": 1971,\"periodFloor\": 161}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"49,37,219,149,140,157,118,203,19,204,138,54,149,190,253,226,131,83,215,184,64,58,162,219,47,189,16,95,122,161,154,165\"),stringToBytes32(\"113,127,61,60,63,5,220,176,99,250,127,121,186,189,123,157,164,79,9,103,93,151,60,60,90,13,41,6,240,88,24,173\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.A,Definitions.FeeBasis.A,80,101,97,99,401,59,30,24,2440587,146098,27,1461,4900,401,161,70,146097,41,400,130,25,68570,Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(64,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(364,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(900,Definitions.P.D,Definitions.S.SHORT,false),41,23,1971,161)"
            },
            {
              "js": "{\"lastEventTime\": 361,\"contractStatus\": 1,\"timeFromLastEvent\": 7,\"nominalValue\": 1461001,\"nominalAccrued\": -1,\"feeAccrued\": 256,\"nominalRate\": 900,\"interestScalingMultiplier\": 51,\"nominalScalingMultiplier\": 4899,\"contractRoleSign\": 1}",
              "sol": "Definitions.ContractState(361,Definitions.ContractStatus.DL,7,1461001,-1,256,900,51,4899,Definitions.ContractRole.RPL)"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.317ZPAMEngine.computeNextStateForProtoEvent": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeNextStateForProtoEvent(Definitions.ContractTerms,Definitions.ContractState,Definitions.ProtoEvent,uint256)",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [227,218,57,85,229,115,125,116,95,187,110,250,173,26,69,128,1,249,66,187,148,114,70,119,177,34,187,251,69,204,32,230],\"legalEntityIdCounterparty\": [37,177,109,67,191,32,47,245,210,110,146,99,224,32,81,56,62,11,135,73,33,17,141,119,21,210,128,45,245,185,212,254],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 1,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 49,\"statusDate\": 901,\"initialExchangeDate\": 16,\"maturityDate\": 900,\"terminationDate\": 110,\"purchaseDate\": 1970,\"capitalizationEndDate\": 2446,\"cycleAnchorDateOfInterestPayment\": 7,\"cycleAnchorDateOfRateReset\": 14,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 32076,\"notionalPrincipal\": 1971,\"nominalInterestRate\": 4899,\"feeAccrued\": 100,\"accruedInterest\": 4900,\"rateMultiplier\": 21,\"rateSpread\": 1461001,\"feeRate\": 141,\"nextResetRate\": 50,\"penaltyRate\": 51,\"premiumDiscountAtIED\": 31,\"priceAtPurchaseDate\": -1,\"cycleOfInterestPayment\": {\"i\": 86400,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 101,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 255,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 68569,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 257,\"lifeFloor\": 399,\"periodCap\": 63,\"periodFloor\": 6}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"227,218,57,85,229,115,125,116,95,187,110,250,173,26,69,128,1,249,66,187,148,114,70,119,177,34,187,251,69,204,32,230\"),stringToBytes32(\"37,177,109,67,191,32,47,245,210,110,146,99,224,32,81,56,62,11,135,73,33,17,141,119,21,210,128,45,245,185,212,254\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.I,Definitions.FeeBasis.A,49,901,16,900,110,1970,2446,7,14,110,32076,1971,4899,100,4900,21,1461001,141,50,51,31,-1,Definitions.IPS(86400,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(101,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(255,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(68569,Definitions.P.Y,Definitions.S.SHORT,false),257,399,63,6)"
            },
            {
              "js": "{\"lastEventTime\": 86401,\"contractStatus\": 1,\"timeFromLastEvent\": 10001,\"nominalValue\": 51,\"nominalAccrued\": 2446,\"feeAccrued\": 64,\"nominalRate\": 1,\"interestScalingMultiplier\": 6,\"nominalScalingMultiplier\": 120,\"contractRoleSign\": 3}",
              "sol": "Definitions.ContractState(86401,Definitions.ContractStatus.DL,10001,51,2446,64,1,6,120,Definitions.ContractRole.ST)"
            },
            {
              "js": "{\"eventTime\": 2440589,\"eventTimeWithEpochOffset\": 50,\"scheduleTime\": 2448,\"eventType\": 0,\"currency\": accounts[4],\"pofType\": 20,\"stfType\": 14}",
              "sol": "Definitions.ProtoEvent(2440589,50,2448,Definitions.EventType.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.EventType.Child,Definitions.EventType.SC)"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.325ZPAMEngine.computeProtoEventScheduleSegment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "150-161",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [163,9,86,194,209,192,139,27,99,245,41,127,146,184,70,107,40,138,62,114,78,150,56,87,64,2,73,44,169,217,41,66],\"legalEntityIdCounterparty\": [144,113,118,53,175,17,247,141,241,90,103,123,131,252,200,236,142,6,116,112,252,39,40,243,39,136,108,219,143,140,243,135],\"dayCountConvention\": 3,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 0,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1462,\"statusDate\": 101,\"initialExchangeDate\": 25,\"maturityDate\": 12,\"terminationDate\": 95,\"purchaseDate\": 80,\"capitalizationEndDate\": 8,\"cycleAnchorDateOfInterestPayment\": 4800,\"cycleAnchorDateOfRateReset\": 50,\"cycleAnchorDateOfScalingIndex\": 255,\"cycleAnchorDateOfFee\": 79,\"notionalPrincipal\": 365,\"nominalInterestRate\": 68569,\"feeAccrued\": 20,\"accruedInterest\": 4801,\"rateMultiplier\": 18,\"rateSpread\": 95,\"feeRate\": 1461,\"nextResetRate\": 129,\"penaltyRate\": 6,\"premiumDiscountAtIED\": 23,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 11,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 146099,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 130,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 17,\"p\": 2,\"s\": 1,\"isSet\": true},\"lifeCap\": 24,\"lifeFloor\": 361,\"periodCap\": 31,\"periodFloor\": 80}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RPA,stringToBytes32(\"163,9,86,194,209,192,139,27,99,245,41,127,146,184,70,107,40,138,62,114,78,150,56,87,64,2,73,44,169,217,41,66\"),stringToBytes32(\"144,113,118,53,175,17,247,141,241,90,103,123,131,252,200,236,142,6,116,112,252,39,40,243,39,136,108,219,143,140,243,135\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._000,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1462,101,25,12,95,80,8,4800,50,255,79,365,68569,20,4801,18,95,1461,129,6,23,50,Definitions.IPS(11,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(146099,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(130,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(17,Definitions.P.M,Definitions.S.SHORT,true),24,361,31,80)"
            },
            {
              "js": "40",
              "sol": "40"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 12,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [70,136,189,104,161,35,153,187,114,108,134,236,198,94,85,64,152,79,19,4,253,44,184,23,24,131,67,182,184,37,125,127],\"legalEntityIdCounterparty\": [94,134,154,38,187,205,50,239,254,139,159,147,108,151,251,133,143,216,143,218,55,98,64,58,228,201,225,83,66,209,48,9],\"dayCountConvention\": 6,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 10000,\"statusDate\": 111,\"initialExchangeDate\": 9,\"maturityDate\": 1461001,\"terminationDate\": 79,\"purchaseDate\": 10,\"capitalizationEndDate\": 32075,\"cycleAnchorDateOfInterestPayment\": 14,\"cycleAnchorDateOfRateReset\": 365,\"cycleAnchorDateOfScalingIndex\": 40,\"cycleAnchorDateOfFee\": 32075,\"notionalPrincipal\": 368,\"nominalInterestRate\": 10001,\"feeAccrued\": 27,\"accruedInterest\": 361,\"rateMultiplier\": 5,\"rateSpread\": 4801,\"feeRate\": 1461002,\"nextResetRate\": 80,\"penaltyRate\": 49,\"premiumDiscountAtIED\": 1461002,\"priceAtPurchaseDate\": 1338,\"cycleOfInterestPayment\": {\"i\": 50,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 79,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 899,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 901,\"lifeFloor\": 31,\"periodCap\": 2448,\"periodFloor\": 10001}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.FXOUT,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"70,136,189,104,161,35,153,187,114,108,134,236,198,94,85,64,152,79,19,4,253,44,184,23,24,131,67,182,184,37,125,127\"),stringToBytes32(\"94,134,154,38,187,205,50,239,254,139,159,147,108,151,251,133,143,216,143,218,55,98,64,58,228,201,225,83,66,209,48,9\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.O,Definitions.FeeBasis.A,10000,111,9,1461001,79,10,32075,14,365,40,32075,368,10001,27,361,5,4801,1461002,80,49,1461002,1338,Definitions.IPS(50,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(79,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(48,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(899,Definitions.P.Y,Definitions.S.LONG,true),901,31,2448,10001)"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "165-176",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [125,8,149,213,142,120,250,123,96,228,145,37,227,132,86,246,36,221,149,200,228,20,132,222,146,72,120,237,59,209,78,255],\"legalEntityIdCounterparty\": [171,23,67,153,240,18,115,174,197,212,45,247,238,228,193,2,144,5,232,5,34,249,164,223,185,42,222,100,15,23,226,43],\"dayCountConvention\": 1,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 4,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 365,\"statusDate\": 15,\"initialExchangeDate\": 949,\"maturityDate\": 66,\"terminationDate\": 80,\"purchaseDate\": 365,\"capitalizationEndDate\": 110,\"cycleAnchorDateOfInterestPayment\": 110,\"cycleAnchorDateOfRateReset\": 139,\"cycleAnchorDateOfScalingIndex\": 146096,\"cycleAnchorDateOfFee\": 1460,\"notionalPrincipal\": 1532892064,\"nominalInterestRate\": 11,\"feeAccrued\": 159,\"accruedInterest\": 1460,\"rateMultiplier\": 68568,\"rateSpread\": 2446,\"feeRate\": 4900,\"nextResetRate\": 1970,\"penaltyRate\": 48,\"premiumDiscountAtIED\": 32074,\"priceAtPurchaseDate\": 400,\"cycleOfInterestPayment\": {\"i\": 949,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 86399,\"p\": 1,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 95,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 14,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 2446,\"lifeFloor\": 131,\"periodCap\": 65,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"125,8,149,213,142,120,250,123,96,228,145,37,227,132,86,246,36,221,149,200,228,20,132,222,146,72,120,237,59,209,78,255\"),stringToBytes32(\"171,23,67,153,240,18,115,174,197,212,45,247,238,228,193,2,144,5,232,5,34,249,164,223,185,42,222,100,15,23,226,43\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.N,Definitions.FeeBasis.A,365,15,949,66,80,365,110,110,139,146096,1460,1532892064,11,159,1460,68568,2446,4900,1970,48,32074,400,Definitions.IPS(949,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(86399,Definitions.P.W,Definitions.S.SHORT,false),Definitions.IPS(95,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(14,Definitions.P.H,Definitions.S.LONG,true),2446,131,65,2014223716)"
            },
            {
              "js": "146099",
              "sol": "146099"
            },
            {
              "js": "2448",
              "sol": "2448"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [155,41,127,176,15,118,24,168,194,168,93,41,112,135,217,69,144,86,195,249,108,31,122,32,36,59,91,37,206,88,177,36],\"legalEntityIdCounterparty\": [41,3,198,186,76,206,218,228,10,222,34,174,52,217,143,122,130,229,123,87,253,88,42,223,41,83,27,248,204,139,148,108],\"dayCountConvention\": 5,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 40,\"statusDate\": 15,\"initialExchangeDate\": 31,\"maturityDate\": 18,\"terminationDate\": 59,\"purchaseDate\": 2014223714,\"capitalizationEndDate\": 4901,\"cycleAnchorDateOfInterestPayment\": 79,\"cycleAnchorDateOfRateReset\": 1460,\"cycleAnchorDateOfScalingIndex\": 19,\"cycleAnchorDateOfFee\": 5,\"notionalPrincipal\": 255,\"nominalInterestRate\": 14,\"feeAccrued\": 49,\"accruedInterest\": 1461000,\"rateMultiplier\": 10000,\"rateSpread\": 141,\"feeRate\": 65,\"nextResetRate\": 39,\"penaltyRate\": 131,\"premiumDiscountAtIED\": 2446,\"priceAtPurchaseDate\": 50,\"cycleOfInterestPayment\": {\"i\": 10,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 4800,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 950,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 110,\"p\": 4,\"s\": 1,\"isSet\": false},\"lifeCap\": 1337,\"lifeFloor\": 7,\"periodCap\": 951,\"periodFloor\": 146099}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"155,41,127,176,15,118,24,168,194,168,93,41,112,135,217,69,144,86,195,249,108,31,122,32,36,59,91,37,206,88,177,36\"),stringToBytes32(\"41,3,198,186,76,206,218,228,10,222,34,174,52,217,143,122,130,229,123,87,253,88,42,223,41,83,27,248,204,139,148,108\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,40,15,31,18,59,2014223714,4901,79,1460,19,5,255,14,49,1461000,10000,141,65,39,131,2446,50,Definitions.IPS(10,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(4800,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(950,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(110,Definitions.P.H,Definitions.S.SHORT,false),1337,7,951,146099)"
            },
            {
              "js": "146096",
              "sol": "146096"
            },
            {
              "js": "4899",
              "sol": "4899"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.purchaseDate == 0",
            "FunctionCall != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.purchaseDate==0,FunctionCall!=true",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 2,\"legalEntityIdRecordCreator\": [132,236,230,66,123,195,128,40,16,235,199,152,205,250,216,188,114,132,253,224,119,4,204,246,80,96,112,107,15,16,66,134],\"legalEntityIdCounterparty\": [4,74,29,218,242,139,67,190,185,89,171,212,240,187,197,158,128,19,21,41,194,116,201,18,238,218,40,235,120,200,46,54],\"dayCountConvention\": 2,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 10001,\"statusDate\": 30,\"initialExchangeDate\": 901,\"maturityDate\": 80,\"terminationDate\": 2440589,\"purchaseDate\": 0,\"capitalizationEndDate\": 950,\"cycleAnchorDateOfInterestPayment\": 51,\"cycleAnchorDateOfRateReset\": 28,\"cycleAnchorDateOfScalingIndex\": 80,\"cycleAnchorDateOfFee\": 899,\"notionalPrincipal\": 10,\"nominalInterestRate\": 50,\"feeAccrued\": 1461,\"accruedInterest\": 2440588,\"rateMultiplier\": 119,\"rateSpread\": 1460,\"feeRate\": 1970,\"nextResetRate\": 146099,\"penaltyRate\": 28,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 4799,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 900,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 31,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 28,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 111,\"lifeFloor\": 1,\"periodCap\": 1971,\"periodFloor\": 2}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.LG,stringToBytes32(\"132,236,230,66,123,195,128,40,16,235,199,152,205,250,216,188,114,132,253,224,119,4,204,246,80,96,112,107,15,16,66,134\"),stringToBytes32(\"4,74,29,218,242,139,67,190,185,89,171,212,240,187,197,158,128,19,21,41,194,116,201,18,238,218,40,235,120,200,46,54\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.A,10001,30,901,80,2440589,0,950,51,28,80,899,10,50,1461,2440588,119,1460,1970,146099,28,146097,68570,Definitions.IPS(4799,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(900,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(31,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(28,Definitions.P.H,Definitions.S.LONG,true),111,1,1971,2)"
            },
            {
              "js": "16",
              "sol": "16"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "198-209",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 4,\"calendar\": 1,\"contractRole\": 1,\"legalEntityIdRecordCreator\": [21,240,155,154,31,66,67,86,34,80,3,184,174,215,35,108,85,94,22,62,163,203,68,19,72,131,231,243,157,252,3,179],\"legalEntityIdCounterparty\": [82,66,40,242,231,179,145,108,0,249,170,211,32,18,244,89,16,244,52,214,36,57,184,122,161,49,34,83,112,130,179,180],\"dayCountConvention\": 5,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 8,\"statusDate\": 50,\"initialExchangeDate\": 66,\"maturityDate\": 59,\"terminationDate\": 49,\"purchaseDate\": 1338,\"capitalizationEndDate\": 86400,\"cycleAnchorDateOfInterestPayment\": 2447,\"cycleAnchorDateOfRateReset\": 50,\"cycleAnchorDateOfScalingIndex\": 96,\"cycleAnchorDateOfFee\": 81,\"notionalPrincipal\": 949,\"nominalInterestRate\": 1532892064,\"feeAccrued\": 2014223715,\"accruedInterest\": 367,\"rateMultiplier\": 2446,\"rateSpread\": 4899,\"feeRate\": 21,\"nextResetRate\": 1971,\"penaltyRate\": 900,\"premiumDiscountAtIED\": 1462,\"priceAtPurchaseDate\": 32,\"cycleOfInterestPayment\": {\"i\": 32076,\"p\": 4,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 130,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 60,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 2440588,\"p\": 5,\"s\": 1,\"isSet\": true},\"lifeCap\": 40,\"lifeFloor\": 16,\"periodCap\": 146099,\"periodFloor\": 13}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAX,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPL,stringToBytes32(\"21,240,155,154,31,66,67,86,34,80,3,184,174,215,35,108,85,94,22,62,163,203,68,19,72,131,231,243,157,252,3,179\"),stringToBytes32(\"82,66,40,242,231,179,145,108,0,249,170,211,32,18,244,89,16,244,52,214,36,57,184,122,161,49,34,83,112,130,179,180\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,8,50,66,59,49,1338,86400,2447,50,96,81,949,1532892064,2014223715,367,2446,4899,21,1971,900,1462,32,Definitions.IPS(32076,Definitions.P.H,Definitions.S.SHORT,true),Definitions.IPS(130,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(60,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(2440588,Definitions.P.Y,Definitions.S.SHORT,true),40,16,146099,13)"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "901",
              "sol": "901"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 11,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [119,32,195,117,205,35,20,151,171,218,78,156,75,133,131,42,107,134,118,210,209,55,162,192,247,41,58,143,20,1,18,13],\"legalEntityIdCounterparty\": [209,126,31,141,238,65,146,17,215,172,126,192,220,85,80,79,151,201,10,106,205,74,16,219,6,55,64,169,254,112,198,29],\"dayCountConvention\": 2,\"businessDayConvention\": 1,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 129,\"statusDate\": 91,\"initialExchangeDate\": 139,\"maturityDate\": 24,\"terminationDate\": 1970,\"purchaseDate\": 12,\"capitalizationEndDate\": 60,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 255,\"cycleAnchorDateOfScalingIndex\": 64,\"cycleAnchorDateOfFee\": 1532892063,\"notionalPrincipal\": 368,\"nominalInterestRate\": 65,\"feeAccrued\": 28,\"accruedInterest\": 950,\"rateMultiplier\": 1338,\"rateSpread\": 109,\"feeRate\": 949,\"nextResetRate\": 151,\"penaltyRate\": 4899,\"premiumDiscountAtIED\": 146097,\"priceAtPurchaseDate\": 10,\"cycleOfInterestPayment\": {\"i\": 400,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 39,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 367,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 32075,\"lifeFloor\": 1461000,\"periodCap\": 4800,\"periodFloor\": 146096}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWPPV,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"119,32,195,117,205,35,20,151,171,218,78,156,75,133,131,42,107,134,118,210,209,55,162,192,247,41,58,143,20,1,18,13\"),stringToBytes32(\"209,126,31,141,238,65,146,17,215,172,126,192,220,85,80,79,151,201,10,106,205,74,16,219,6,55,64,169,254,112,198,29\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.N,129,91,139,24,1970,12,60,15,255,64,1532892063,368,65,28,950,1338,109,949,151,4899,146097,10,Definitions.IPS(400,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(39,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(1461,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(367,Definitions.P.D,Definitions.S.LONG,false),32075,1461000,4800,146096)"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [106,48,21,0,111,4,67,70,139,91,129,195,140,66,60,146,186,196,247,250,50,145,65,145,75,38,71,157,236,83,108,9],\"legalEntityIdCounterparty\": [160,37,243,91,250,183,73,206,99,252,60,151,96,53,206,136,11,250,236,191,108,198,7,138,143,219,24,112,154,139,136,87],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 0,\"currency\": accounts[6],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 110,\"statusDate\": 19,\"initialExchangeDate\": 951,\"maturityDate\": 141,\"terminationDate\": 2448,\"purchaseDate\": 10001,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 109,\"cycleAnchorDateOfScalingIndex\": 1337,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 150,\"nominalInterestRate\": 368,\"feeAccrued\": 400,\"accruedInterest\": 51,\"rateMultiplier\": 1532892064,\"rateSpread\": 129,\"feeRate\": 97,\"nextResetRate\": 146097,\"penaltyRate\": 89,\"premiumDiscountAtIED\": 367,\"priceAtPurchaseDate\": 96,\"cycleOfInterestPayment\": {\"i\": 13,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 12,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 4899,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 68570,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 1532892062,\"lifeFloor\": 6,\"periodCap\": 2440589,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"106,48,21,0,111,4,67,70,139,91,129,195,140,66,60,146,186,196,247,250,50,145,65,145,75,38,71,157,236,83,108,9\"),stringToBytes32(\"160,37,243,91,250,183,73,206,99,252,60,151,96,53,206,136,11,250,236,191,108,198,7,138,143,219,24,112,154,139,136,87\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,110,19,951,141,2448,10001,0,65,109,1337,110,150,368,400,51,1532892064,129,97,146097,89,367,96,Definitions.IPS(13,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(12,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(4899,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(68570,Definitions.P.D,Definitions.S.LONG,false),1532892062,6,2440589,86399)"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "86399",
              "sol": "86399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "255-266",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 0,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [181,128,183,226,123,245,229,139,77,164,110,71,166,106,80,150,201,81,105,208,149,194,34,191,174,218,197,225,130,33,60,226],\"legalEntityIdCounterparty\": [20,183,57,63,161,121,178,51,35,227,161,196,220,101,205,51,239,94,156,207,150,133,75,233,64,231,229,132,50,162,98,94],\"dayCountConvention\": 5,\"businessDayConvention\": 0,\"endOfMonthConvention\": 0,\"currency\": accounts[5],\"scalingEffect\": 2,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 71,\"statusDate\": 32076,\"initialExchangeDate\": 368,\"maturityDate\": 39,\"terminationDate\": 39,\"purchaseDate\": 1462,\"capitalizationEndDate\": 15,\"cycleAnchorDateOfInterestPayment\": 1532892063,\"cycleAnchorDateOfRateReset\": 18,\"cycleAnchorDateOfScalingIndex\": 32,\"cycleAnchorDateOfFee\": 2440588,\"notionalPrincipal\": 109,\"nominalInterestRate\": 17,\"feeAccrued\": 950,\"accruedInterest\": 59,\"rateMultiplier\": 21,\"rateSpread\": 9,\"feeRate\": 1532892062,\"nextResetRate\": 400,\"penaltyRate\": 4900,\"premiumDiscountAtIED\": 2440589,\"priceAtPurchaseDate\": 40,\"cycleOfInterestPayment\": {\"i\": 2440588,\"p\": 0,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 9,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 899,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440589,\"p\": 0,\"s\": 1,\"isSet\": true},\"lifeCap\": 26,\"lifeFloor\": 14,\"periodCap\": 64,\"periodFloor\": 1461000}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.PAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"181,128,183,226,123,245,229,139,77,164,110,71,166,106,80,150,201,81,105,208,149,194,34,191,174,218,197,225,130,33,60,226\"),stringToBytes32(\"20,183,57,63,161,121,178,51,35,227,161,196,220,101,205,51,239,94,156,207,150,133,75,233,64,231,229,132,50,162,98,94\"),Definitions.DayCountConvention._30_360,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._00M,Definitions.PenaltyType.A,Definitions.FeeBasis.N,71,32076,368,39,39,1462,15,1532892063,18,32,2440588,109,17,950,59,21,9,1532892062,400,4900,2440589,40,Definitions.IPS(2440588,Definitions.P.D,Definitions.S.LONG,false),Definitions.IPS(9,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(899,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(2440589,Definitions.P.D,Definitions.S.SHORT,true),26,14,64,1461000)"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "121",
              "sol": "121"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.capitalizationEndDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.capitalizationEndDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [121,129,169,238,96,167,175,50,192,240,113,241,67,244,170,66,81,127,114,250,252,183,184,128,48,169,47,176,123,246,96,41],\"legalEntityIdCounterparty\": [181,185,76,24,105,182,100,76,179,209,150,254,60,23,114,188,235,200,133,195,192,73,48,190,0,243,166,33,71,97,141,182],\"dayCountConvention\": 2,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[2],\"scalingEffect\": 1,\"penaltyType\": 1,\"feeBasis\": 1,\"contractDealDate\": 150,\"statusDate\": 31,\"initialExchangeDate\": 146098,\"maturityDate\": 63,\"terminationDate\": 40,\"purchaseDate\": 90,\"capitalizationEndDate\": 7,\"cycleAnchorDateOfInterestPayment\": 65,\"cycleAnchorDateOfRateReset\": 32074,\"cycleAnchorDateOfScalingIndex\": 21,\"cycleAnchorDateOfFee\": 50,\"notionalPrincipal\": 17,\"nominalInterestRate\": 2,\"feeAccrued\": 1460,\"accruedInterest\": 401,\"rateMultiplier\": 101,\"rateSpread\": 2446,\"feeRate\": 140,\"nextResetRate\": 68570,\"penaltyRate\": 109,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 86400,\"cycleOfInterestPayment\": {\"i\": 367,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1969,\"p\": 5,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 3,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 367,\"p\": 1,\"s\": 0,\"isSet\": false},\"lifeCap\": 51,\"lifeFloor\": 161,\"periodCap\": 40,\"periodFloor\": 86399}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.RFL,stringToBytes32(\"121,129,169,238,96,167,175,50,192,240,113,241,67,244,170,66,81,127,114,250,252,183,184,128,48,169,47,176,123,246,96,41\"),stringToBytes32(\"181,185,76,24,105,182,100,76,179,209,150,254,60,23,114,188,235,200,133,195,192,73,48,190,0,243,166,33,71,97,141,182\"),Definitions.DayCountConvention.A_365,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.A,Definitions.FeeBasis.N,150,31,146098,63,40,90,7,65,32074,21,50,17,2,1460,401,101,2446,140,68570,109,4800,86400,Definitions.IPS(367,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(1969,Definitions.P.Y,Definitions.S.LONG,true),Definitions.IPS(3,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.W,Definitions.S.LONG,false),51,161,40,86399)"
            },
            {
              "js": "2440587",
              "sol": "2440587"
            },
            {
              "js": "19",
              "sol": "19"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.capitalizationEndDate==0,contractTerms.nominalInterestRate==0,FunctionCall!=true,contractTerms.purchaseDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 6,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [142,181,75,13,182,137,68,120,53,167,251,158,111,51,118,151,70,30,133,34,175,122,135,116,31,91,164,29,101,96,80,235],\"legalEntityIdCounterparty\": [188,107,189,156,58,62,231,207,111,145,141,193,179,253,84,252,122,211,245,167,135,115,3,120,144,140,231,163,31,9,106,67],\"dayCountConvention\": 4,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[9],\"scalingEffect\": 1,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 68569,\"statusDate\": 2440587,\"initialExchangeDate\": 2447,\"maturityDate\": 30,\"terminationDate\": 18,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 131,\"cycleAnchorDateOfRateReset\": 255,\"cycleAnchorDateOfScalingIndex\": 4,\"cycleAnchorDateOfFee\": 2447,\"notionalPrincipal\": 17,\"nominalInterestRate\": 0,\"feeAccrued\": 3999,\"accruedInterest\": 130,\"rateMultiplier\": 9999,\"rateSpread\": 97,\"feeRate\": 4901,\"nextResetRate\": 31,\"penaltyRate\": 365,\"premiumDiscountAtIED\": 4800,\"priceAtPurchaseDate\": 3,\"cycleOfInterestPayment\": {\"i\": 4801,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 359,\"p\": 0,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 3999,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 24,\"p\": 4,\"s\": 0,\"isSet\": false},\"lifeCap\": 4000,\"lifeFloor\": 3,\"periodCap\": 99,\"periodFloor\": 17}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.UMP,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"142,181,75,13,182,137,68,120,53,167,251,158,111,51,118,151,70,30,133,34,175,122,135,116,31,91,164,29,101,96,80,235\"),stringToBytes32(\"188,107,189,156,58,62,231,207,111,145,141,193,179,253,84,252,122,211,245,167,135,115,3,120,144,140,231,163,31,9,106,67\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0N0,Definitions.PenaltyType.N,Definitions.FeeBasis.N,68569,2440587,2447,30,18,0,0,131,255,4,2447,17,0,3999,130,9999,97,4901,31,365,4800,3,Definitions.IPS(4801,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(359,Definitions.P.D,Definitions.S.SHORT,false),Definitions.IPS(3999,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(24,Definitions.P.H,Definitions.S.LONG,false),4000,3,99,17)"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "270-300",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 2,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [241,22,98,126,184,205,216,40,201,79,26,233,218,11,66,168,50,238,112,22,25,14,134,145,73,164,166,186,104,56,21,208],\"legalEntityIdCounterparty\": [106,231,252,156,248,89,101,83,125,30,60,151,30,9,46,239,87,147,146,72,3,195,118,165,251,111,52,32,221,132,128,128],\"dayCountConvention\": 1,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 5,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 1338,\"statusDate\": 1461,\"initialExchangeDate\": 63,\"maturityDate\": 86399,\"terminationDate\": 11,\"purchaseDate\": 129,\"capitalizationEndDate\": 359,\"cycleAnchorDateOfInterestPayment\": 119,\"cycleAnchorDateOfRateReset\": 400,\"cycleAnchorDateOfScalingIndex\": 141,\"cycleAnchorDateOfFee\": 121,\"notionalPrincipal\": 10,\"nominalInterestRate\": 68570,\"feeAccrued\": 4799,\"accruedInterest\": 13,\"rateMultiplier\": 66,\"rateSpread\": 951,\"feeRate\": 129,\"nextResetRate\": 1336,\"penaltyRate\": 2446,\"premiumDiscountAtIED\": 25,\"priceAtPurchaseDate\": 121,\"cycleOfInterestPayment\": {\"i\": 96,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 60,\"p\": 1,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 121,\"p\": 1,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 71,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 70,\"lifeFloor\": 30,\"periodCap\": 1532892062,\"periodFloor\": 2014223714}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.NAM,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"241,22,98,126,184,205,216,40,201,79,26,233,218,11,66,168,50,238,112,22,25,14,134,145,73,164,166,186,104,56,21,208\"),stringToBytes32(\"106,231,252,156,248,89,101,83,125,30,60,151,30,9,46,239,87,147,146,72,3,195,118,165,251,111,52,32,221,132,128,128\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.N,Definitions.FeeBasis.A,1338,1461,63,86399,11,129,359,119,400,141,121,10,68570,4799,13,66,951,129,1336,2446,25,121,Definitions.IPS(96,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.W,Definitions.S.SHORT,true),Definitions.IPS(121,Definitions.P.W,Definitions.S.LONG,false),Definitions.IPS(71,Definitions.P.Y,Definitions.S.SHORT,false),70,30,1532892062,2014223714)"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "361",
              "sol": "361"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfRateReset == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfRateReset==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 9,\"calendar\": 1,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [61,83,188,130,67,225,218,190,169,177,168,156,16,143,248,251,193,232,241,204,89,234,35,184,173,155,35,9,60,212,85,38],\"legalEntityIdCounterparty\": [159,125,177,137,89,111,113,154,103,142,235,26,46,117,199,1,62,201,77,23,62,39,171,58,195,234,12,240,175,148,248,231],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 7,\"statusDate\": 360,\"initialExchangeDate\": 25,\"maturityDate\": 10000,\"terminationDate\": 14,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2446,\"cycleAnchorDateOfRateReset\": 0,\"cycleAnchorDateOfScalingIndex\": 146097,\"cycleAnchorDateOfFee\": 32074,\"notionalPrincipal\": 63,\"nominalInterestRate\": 0,\"feeAccrued\": 50,\"accruedInterest\": 360,\"rateMultiplier\": 161,\"rateSpread\": 14,\"feeRate\": 2440587,\"nextResetRate\": 1460,\"penaltyRate\": 19,\"premiumDiscountAtIED\": 400,\"priceAtPurchaseDate\": 68570,\"cycleOfInterestPayment\": {\"i\": 256,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 65,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 10000,\"p\": 4,\"s\": 0,\"isSet\": true},\"lifeCap\": 1969,\"lifeFloor\": 2440588,\"periodCap\": 86399,\"periodFloor\": 2014223716}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.COM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.GUA,stringToBytes32(\"61,83,188,130,67,225,218,190,169,177,168,156,16,143,248,251,193,232,241,204,89,234,35,184,173,155,35,9,60,212,85,38\"),stringToBytes32(\"159,125,177,137,89,111,113,154,103,142,235,26,46,117,199,1,62,201,77,23,62,39,171,58,195,234,12,240,175,148,248,231\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.I,Definitions.FeeBasis.N,7,360,25,10000,14,0,0,2446,0,146097,32074,63,0,50,360,161,14,2440587,1460,19,400,68570,Definitions.IPS(256,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(65,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(10000,Definitions.P.H,Definitions.S.LONG,true),1969,2440588,86399,2014223716)"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "303-332",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 0,\"legalEntityIdRecordCreator\": [113,62,43,76,112,148,147,137,131,137,34,46,43,201,114,114,7,142,191,134,8,171,87,45,8,43,197,145,232,84,3,184],\"legalEntityIdCounterparty\": [100,31,106,53,246,35,109,99,129,186,29,232,202,221,57,69,160,234,1,45,195,115,4,51,161,193,83,136,248,24,103,113],\"dayCountConvention\": 6,\"businessDayConvention\": 0,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 1969,\"statusDate\": 95,\"initialExchangeDate\": 30,\"maturityDate\": 20,\"terminationDate\": 399,\"purchaseDate\": 16,\"capitalizationEndDate\": 139,\"cycleAnchorDateOfInterestPayment\": 160,\"cycleAnchorDateOfRateReset\": 2014223716,\"cycleAnchorDateOfScalingIndex\": 2014223714,\"cycleAnchorDateOfFee\": 19,\"notionalPrincipal\": -1,\"nominalInterestRate\": 365,\"feeAccrued\": 2014223714,\"accruedInterest\": 90,\"rateMultiplier\": 364,\"rateSpread\": 18,\"feeRate\": 366,\"nextResetRate\": 131,\"penaltyRate\": 69,\"premiumDiscountAtIED\": 40,\"priceAtPurchaseDate\": 4899,\"cycleOfInterestPayment\": {\"i\": 364,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1970,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 368,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 28,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 950,\"lifeFloor\": 50,\"periodCap\": 31,\"periodFloor\": 4801}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RPA,stringToBytes32(\"113,62,43,76,112,148,147,137,131,137,34,46,43,201,114,114,7,142,191,134,8,171,87,45,8,43,197,145,232,84,3,184\"),stringToBytes32(\"100,31,106,53,246,35,109,99,129,186,29,232,202,221,57,69,160,234,1,45,195,115,4,51,161,193,83,136,248,24,103,113\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.NULL,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.N,1969,95,30,20,399,16,139,160,2014223716,2014223714,19,-1,365,2014223714,90,364,18,366,131,69,40,4899,Definitions.IPS(364,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(1970,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(368,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(28,Definitions.P.D,Definitions.S.LONG,false),950,50,31,4801)"
            },
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "131",
              "sol": "131"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfFee == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfFee==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [187,16,87,56,57,233,238,102,186,223,164,173,168,173,137,84,114,61,39,16,156,88,227,182,133,20,208,205,234,214,171,167],\"legalEntityIdCounterparty\": [162,230,27,209,121,149,175,116,222,95,27,147,225,135,92,70,62,42,189,147,89,176,85,22,59,11,182,93,184,137,213,223],\"dayCountConvention\": 4,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[8],\"scalingEffect\": 5,\"penaltyType\": 0,\"feeBasis\": 0,\"contractDealDate\": 23,\"statusDate\": 5,\"initialExchangeDate\": 366,\"maturityDate\": 110,\"terminationDate\": 901,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 359,\"cycleAnchorDateOfRateReset\": 91,\"cycleAnchorDateOfScalingIndex\": 81,\"cycleAnchorDateOfFee\": 0,\"notionalPrincipal\": 361,\"nominalInterestRate\": 0,\"feeAccrued\": 86401,\"accruedInterest\": 1460,\"rateMultiplier\": 4899,\"rateSpread\": 28,\"feeRate\": 68570,\"nextResetRate\": 79,\"penaltyRate\": 26,\"premiumDiscountAtIED\": 1460,\"priceAtPurchaseDate\": 89,\"cycleOfInterestPayment\": {\"i\": 20,\"p\": 0,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 16,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 360,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 39,\"p\": 5,\"s\": 0,\"isSet\": false},\"lifeCap\": 5,\"lifeFloor\": 23,\"periodCap\": 66,\"periodFloor\": 899}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"187,16,87,56,57,233,238,102,186,223,164,173,168,173,137,84,114,61,39,16,156,88,227,182,133,20,208,205,234,214,171,167\"),stringToBytes32(\"162,230,27,209,121,149,175,116,222,95,27,147,225,135,92,70,62,42,189,147,89,176,85,22,59,11,182,93,184,137,213,223\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.IN0,Definitions.PenaltyType.O,Definitions.FeeBasis.A,23,5,366,110,901,0,0,359,91,81,0,361,0,86401,1460,4899,28,68570,79,26,1460,89,Definitions.IPS(20,Definitions.P.D,Definitions.S.SHORT,true),Definitions.IPS(16,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(360,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(39,Definitions.P.Y,Definitions.S.LONG,false),5,23,66,899)"
            },
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "335-366",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 5,\"calendar\": 1,\"contractRole\": 7,\"legalEntityIdRecordCreator\": [252,9,108,138,108,51,46,110,84,231,133,219,21,34,189,16,37,190,22,209,155,7,140,44,247,36,244,175,212,247,61,157],\"legalEntityIdCounterparty\": [39,53,222,184,205,83,182,17,9,128,61,12,1,247,88,61,243,242,86,52,187,101,73,106,87,154,86,242,171,126,126,242],\"dayCountConvention\": 1,\"businessDayConvention\": 6,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 100,\"statusDate\": 10,\"initialExchangeDate\": 39,\"maturityDate\": 32075,\"terminationDate\": 4801,\"purchaseDate\": 141,\"capitalizationEndDate\": 71,\"cycleAnchorDateOfInterestPayment\": 24,\"cycleAnchorDateOfRateReset\": 1532892062,\"cycleAnchorDateOfScalingIndex\": 11,\"cycleAnchorDateOfFee\": 97,\"notionalPrincipal\": 401,\"nominalInterestRate\": 4,\"feeAccrued\": 68569,\"accruedInterest\": 14,\"rateMultiplier\": 30,\"rateSpread\": 7,\"feeRate\": 32076,\"nextResetRate\": 51,\"penaltyRate\": 160,\"premiumDiscountAtIED\": 161,\"priceAtPurchaseDate\": 10000,\"cycleOfInterestPayment\": {\"i\": 257,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 255,\"p\": 5,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 1461,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 27,\"p\": 5,\"s\": 0,\"isSet\": true},\"lifeCap\": 39,\"lifeFloor\": 2440588,\"periodCap\": 10,\"periodFloor\": 1461}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CLM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.SEL,stringToBytes32(\"252,9,108,138,108,51,46,110,84,231,133,219,21,34,189,16,37,190,22,209,155,7,140,44,247,36,244,175,212,247,61,157\"),stringToBytes32(\"39,53,222,184,205,83,182,17,9,128,61,12,1,247,88,61,243,242,86,52,187,101,73,106,87,154,86,242,171,126,126,242\"),Definitions.DayCountConvention.A_360,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,100,10,39,32075,4801,141,71,24,1532892062,11,97,401,4,68569,14,30,7,32076,51,160,161,10000,Definitions.IPS(257,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(255,Definitions.P.Y,Definitions.S.SHORT,false),Definitions.IPS(1461,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(27,Definitions.P.Y,Definitions.S.LONG,true),39,2440588,10,1461)"
            },
            {
              "js": "1460",
              "sol": "1460"
            },
            {
              "js": "399",
              "sol": "399"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.cycleAnchorDateOfScalingIndex == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.cycleAnchorDateOfScalingIndex==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 8,\"legalEntityIdRecordCreator\": [83,183,29,62,47,88,52,26,65,211,60,214,131,98,232,168,57,99,91,116,145,248,101,70,143,23,44,127,81,231,243,157],\"legalEntityIdCounterparty\": [137,120,4,204,161,243,140,255,200,213,225,49,217,73,44,216,11,68,99,92,220,179,39,106,74,172,213,178,118,83,213,252],\"dayCountConvention\": 4,\"businessDayConvention\": 2,\"endOfMonthConvention\": 1,\"currency\": accounts[3],\"scalingEffect\": 6,\"penaltyType\": 2,\"feeBasis\": 0,\"contractDealDate\": 66,\"statusDate\": 89,\"initialExchangeDate\": 109,\"maturityDate\": 368,\"terminationDate\": 111,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 901,\"cycleAnchorDateOfRateReset\": 1461,\"cycleAnchorDateOfScalingIndex\": 0,\"cycleAnchorDateOfFee\": 109,\"notionalPrincipal\": 400,\"nominalInterestRate\": 0,\"feeAccrued\": 949,\"accruedInterest\": 29,\"rateMultiplier\": 146097,\"rateSpread\": 101,\"feeRate\": 59,\"nextResetRate\": 5,\"penaltyRate\": 25,\"premiumDiscountAtIED\": 150,\"priceAtPurchaseDate\": 91,\"cycleOfInterestPayment\": {\"i\": 254,\"p\": 5,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 71,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 48,\"p\": 2,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 2440587,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 129,\"lifeFloor\": 139,\"periodCap\": 68568,\"periodFloor\": 79}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.GUA,stringToBytes32(\"83,183,29,62,47,88,52,26,65,211,60,214,131,98,232,168,57,99,91,116,145,248,101,70,143,23,44,127,81,231,243,157\"),stringToBytes32(\"137,120,4,204,161,243,140,255,200,213,225,49,217,73,44,216,11,68,99,92,220,179,39,106,74,172,213,178,118,83,213,252\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I0M,Definitions.PenaltyType.N,Definitions.FeeBasis.A,66,89,109,368,111,0,0,901,1461,0,109,400,0,949,29,146097,101,59,5,25,150,91,Definitions.IPS(254,Definitions.P.Y,Definitions.S.LONG,false),Definitions.IPS(71,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(48,Definitions.P.M,Definitions.S.SHORT,false),Definitions.IPS(2440587,Definitions.P.D,Definitions.S.SHORT,false),129,139,68568,79)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "146099",
              "sol": "146099"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "370-381",
          "restrictions": [
            "FunctionCall == true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 10,\"calendar\": 0,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [100,22,152,140,155,245,187,154,130,232,30,178,209,18,129,92,226,0,255,66,25,207,150,157,253,235,163,19,251,153,216,176],\"legalEntityIdCounterparty\": [46,109,4,80,65,117,203,192,86,167,138,66,237,39,157,21,35,245,5,4,172,241,19,21,96,176,28,59,177,104,227,202],\"dayCountConvention\": 3,\"businessDayConvention\": 6,\"endOfMonthConvention\": 0,\"currency\": accounts[4],\"scalingEffect\": 3,\"penaltyType\": 0,\"feeBasis\": 1,\"contractDealDate\": 30,\"statusDate\": 28,\"initialExchangeDate\": 91,\"maturityDate\": 131,\"terminationDate\": 131,\"purchaseDate\": 1970,\"capitalizationEndDate\": 146096,\"cycleAnchorDateOfInterestPayment\": 11,\"cycleAnchorDateOfRateReset\": 60,\"cycleAnchorDateOfScalingIndex\": 900,\"cycleAnchorDateOfFee\": 110,\"notionalPrincipal\": 9,\"nominalInterestRate\": 61,\"feeAccrued\": 16,\"accruedInterest\": 2447,\"rateMultiplier\": 4,\"rateSpread\": 110,\"feeRate\": 399,\"nextResetRate\": 110,\"penaltyRate\": 399,\"premiumDiscountAtIED\": 368,\"priceAtPurchaseDate\": 30,\"cycleOfInterestPayment\": {\"i\": 1461002,\"p\": 2,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 25,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2448,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 899,\"p\": 2,\"s\": 1,\"isSet\": false},\"lifeCap\": 109,\"lifeFloor\": 160,\"periodCap\": 68569,\"periodFloor\": 951}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.SWAPS,Definitions.Calendar.NoCalendar,Definitions.ContractRole.ST,stringToBytes32(\"100,22,152,140,155,245,187,154,130,232,30,178,209,18,129,92,226,0,255,66,25,207,150,157,253,235,163,19,251,153,216,176\"),stringToBytes32(\"46,109,4,80,65,117,203,192,86,167,138,66,237,39,157,21,35,245,5,4,172,241,19,21,96,176,28,59,177,104,227,202\"),Definitions.DayCountConvention._30E_360ISDA,Definitions.BusinessDayConvention.SCMP,Definitions.EndOfMonthConvention.EOM,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.O,Definitions.FeeBasis.N,30,28,91,131,131,1970,146096,11,60,900,110,9,61,16,2447,4,110,399,110,399,368,30,Definitions.IPS(1461002,Definitions.P.M,Definitions.S.SHORT,true),Definitions.IPS(25,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2448,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(899,Definitions.P.M,Definitions.S.SHORT,false),109,160,68569,951)"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.terminationDate != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.terminationDate!=0",
          "parameters": [
            {
              "js": "{\"contractType\": 7,\"calendar\": 1,\"contractRole\": 9,\"legalEntityIdRecordCreator\": [248,84,233,176,201,42,177,144,134,119,221,85,43,213,14,139,24,43,108,211,58,138,249,88,156,182,6,224,150,182,254,16],\"legalEntityIdCounterparty\": [187,165,164,84,61,95,13,235,151,217,133,120,219,73,215,255,151,60,232,238,43,40,225,95,88,222,66,83,137,91,34,138],\"dayCountConvention\": 6,\"businessDayConvention\": 5,\"endOfMonthConvention\": 1,\"currency\": accounts[0],\"scalingEffect\": 4,\"penaltyType\": 3,\"feeBasis\": 1,\"contractDealDate\": 11,\"statusDate\": 1461,\"initialExchangeDate\": 365,\"maturityDate\": 4901,\"terminationDate\": 364,\"purchaseDate\": 1338,\"capitalizationEndDate\": 367,\"cycleAnchorDateOfInterestPayment\": 146099,\"cycleAnchorDateOfRateReset\": 61,\"cycleAnchorDateOfScalingIndex\": 110,\"cycleAnchorDateOfFee\": 20,\"notionalPrincipal\": 1337,\"nominalInterestRate\": 140,\"feeAccrued\": 1532892062,\"accruedInterest\": 1461,\"rateMultiplier\": 4899,\"rateSpread\": 2014223714,\"feeRate\": 1460,\"nextResetRate\": 39,\"penaltyRate\": 139,\"premiumDiscountAtIED\": 28,\"priceAtPurchaseDate\": 367,\"cycleOfInterestPayment\": {\"i\": 9,\"p\": 3,\"s\": 1,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 4899,\"p\": 4,\"s\": 1,\"isSet\": false},\"cycleOfScalingIndex\": {\"i\": 2447,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfFee\": {\"i\": 1338,\"p\": 0,\"s\": 1,\"isSet\": false},\"lifeCap\": 1461002,\"lifeFloor\": 41,\"periodCap\": 146098,\"periodFloor\": 1532892062}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CSH,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.OBL,stringToBytes32(\"248,84,233,176,201,42,177,144,134,119,221,85,43,213,14,139,24,43,108,211,58,138,249,88,156,182,6,224,150,182,254,16\"),stringToBytes32(\"187,165,164,84,61,95,13,235,151,217,133,120,219,73,215,255,151,60,232,238,43,40,225,95,88,222,66,83,137,91,34,138\"),Definitions.DayCountConvention.BUS_252,Definitions.BusinessDayConvention.SCP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.I,Definitions.FeeBasis.N,11,1461,365,4901,364,1338,367,146099,61,110,20,1337,140,1532892062,1461,4899,2014223714,1460,39,139,28,367,Definitions.IPS(9,Definitions.P.Q,Definitions.S.SHORT,true),Definitions.IPS(4899,Definitions.P.H,Definitions.S.SHORT,false),Definitions.IPS(2447,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(1338,Definitions.P.D,Definitions.S.SHORT,false),1461002,41,146098,1532892062)"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "86400",
              "sol": "86400"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "contractTerms.terminationDate == 0",
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN contractTerms.terminationDate==0,FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 13,\"calendar\": 1,\"contractRole\": 4,\"legalEntityIdRecordCreator\": [76,214,41,152,247,183,0,208,108,184,137,174,118,248,70,170,239,150,50,138,9,183,182,83,40,146,185,111,67,44,140,0],\"legalEntityIdCounterparty\": [245,153,71,45,145,138,50,115,24,194,82,113,60,20,95,141,43,142,68,237,29,134,27,167,226,140,81,108,102,93,74,215],\"dayCountConvention\": 0,\"businessDayConvention\": 4,\"endOfMonthConvention\": 1,\"currency\": accounts[1],\"scalingEffect\": 4,\"penaltyType\": 1,\"feeBasis\": 0,\"contractDealDate\": 146098,\"statusDate\": 2014223714,\"initialExchangeDate\": 18,\"maturityDate\": 89,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 2440589,\"cycleAnchorDateOfRateReset\": 68569,\"cycleAnchorDateOfScalingIndex\": 139,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 161,\"nominalInterestRate\": 0,\"feeAccrued\": 951,\"accruedInterest\": 32075,\"rateMultiplier\": 2014223716,\"rateSpread\": 60,\"feeRate\": 0,\"nextResetRate\": 5,\"penaltyRate\": 2440588,\"premiumDiscountAtIED\": 399,\"priceAtPurchaseDate\": 900,\"cycleOfInterestPayment\": {\"i\": 68568,\"p\": 4,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 60,\"p\": 1,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 2014223714,\"p\": 3,\"s\": 0,\"isSet\": false},\"cycleOfFee\": {\"i\": 4,\"p\": 1,\"s\": 1,\"isSet\": true},\"lifeCap\": 161,\"lifeFloor\": 900,\"periodCap\": 5,\"periodFloor\": 32}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.CAPFL,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.RFL,stringToBytes32(\"76,214,41,152,247,183,0,208,108,184,137,174,118,248,70,170,239,150,50,138,9,183,182,83,40,146,185,111,67,44,140,0\"),stringToBytes32(\"245,153,71,45,145,138,50,115,24,194,82,113,60,20,95,141,43,142,68,237,29,134,27,167,226,140,81,108,102,93,74,215\"),Definitions.DayCountConvention.A_AISDA,Definitions.BusinessDayConvention.CSMF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.I00,Definitions.PenaltyType.A,Definitions.FeeBasis.A,146098,2014223714,18,89,0,0,0,2440589,68569,139,160,161,0,951,32075,2014223716,60,0,5,2440588,399,900,Definitions.IPS(68568,Definitions.P.H,Definitions.S.LONG,true),Definitions.IPS(60,Definitions.P.W,Definitions.S.LONG,true),Definitions.IPS(2014223714,Definitions.P.Q,Definitions.S.LONG,false),Definitions.IPS(4,Definitions.P.W,Definitions.S.SHORT,true),161,900,5,32)"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "385-396",
          "restrictions": [
            "FunctionCall == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall==true",
          "parameters": [
            {
              "js": "{\"contractType\": 3,\"calendar\": 1,\"contractRole\": 5,\"legalEntityIdRecordCreator\": [247,75,76,173,158,183,73,11,214,30,143,51,117,250,118,90,193,37,117,61,120,121,92,126,184,244,129,178,85,188,249,224],\"legalEntityIdCounterparty\": [26,119,33,119,240,27,121,236,177,15,47,129,176,99,68,139,35,170,210,125,44,48,120,106,145,15,44,25,130,66,253,156],\"dayCountConvention\": 4,\"businessDayConvention\": 8,\"endOfMonthConvention\": 1,\"currency\": accounts[4],\"scalingEffect\": 7,\"penaltyType\": 2,\"feeBasis\": 1,\"contractDealDate\": 359,\"statusDate\": 2448,\"initialExchangeDate\": 48,\"maturityDate\": 69,\"terminationDate\": 63,\"purchaseDate\": 1337,\"capitalizationEndDate\": 32075,\"cycleAnchorDateOfInterestPayment\": 39,\"cycleAnchorDateOfRateReset\": 90,\"cycleAnchorDateOfScalingIndex\": 95,\"cycleAnchorDateOfFee\": 86400,\"notionalPrincipal\": 1532892063,\"nominalInterestRate\": 119,\"feeAccrued\": 140,\"accruedInterest\": 97,\"rateMultiplier\": 11,\"rateSpread\": 901,\"feeRate\": 146098,\"nextResetRate\": 1461000,\"penaltyRate\": 2014223715,\"premiumDiscountAtIED\": 1336,\"priceAtPurchaseDate\": 49,\"cycleOfInterestPayment\": {\"i\": 160,\"p\": 2,\"s\": 0,\"isSet\": false},\"cycleOfRateReset\": {\"i\": 50,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 30,\"p\": 5,\"s\": 1,\"isSet\": true},\"cycleOfFee\": {\"i\": 66,\"p\": 0,\"s\": 0,\"isSet\": false},\"lifeCap\": 89,\"lifeFloor\": 4,\"periodCap\": 2446,\"periodFloor\": 119}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.LAM,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.PFL,stringToBytes32(\"247,75,76,173,158,183,73,11,214,30,143,51,117,250,118,90,193,37,117,61,120,121,92,126,184,244,129,178,85,188,249,224\"),stringToBytes32(\"26,119,33,119,240,27,121,236,177,15,47,129,176,99,68,139,35,170,210,125,44,48,120,106,145,15,44,25,130,66,253,156\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.CSMP,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect.INM,Definitions.PenaltyType.N,Definitions.FeeBasis.N,359,2448,48,69,63,1337,32075,39,90,95,86400,1532892063,119,140,97,11,901,146098,1461000,2014223715,1336,49,Definitions.IPS(160,Definitions.P.M,Definitions.S.LONG,false),Definitions.IPS(50,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(30,Definitions.P.Y,Definitions.S.SHORT,true),Definitions.IPS(66,Definitions.P.D,Definitions.S.LONG,false),89,4,2446,119)"
            },
            {
              "js": "80",
              "sol": "80"
            },
            {
              "js": "12",
              "sol": "12"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "FunctionCall != true",
            "contractTerms.purchaseDate == 0",
            "contractTerms.nominalInterestRate == 0",
            "contractTerms.capitalizationEndDate == 0",
            "contractTerms.terminationDate == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute computeProtoEventScheduleSegment(Definitions.ContractTerms,uint256,uint256) WHEN FunctionCall!=true,contractTerms.purchaseDate==0,contractTerms.nominalInterestRate==0,contractTerms.capitalizationEndDate==0,contractTerms.terminationDate==0",
          "parameters": [
            {
              "js": "{\"contractType\": 8,\"calendar\": 1,\"contractRole\": 3,\"legalEntityIdRecordCreator\": [161,18,132,250,186,69,128,137,212,201,108,67,160,131,167,248,46,217,172,55,80,160,96,246,169,77,164,164,16,146,27,196],\"legalEntityIdCounterparty\": [115,34,62,151,109,162,162,55,217,117,146,115,52,161,215,65,252,109,166,215,224,58,173,23,186,104,113,3,190,55,45,6],\"dayCountConvention\": 4,\"businessDayConvention\": 1,\"endOfMonthConvention\": 1,\"currency\": accounts[7],\"scalingEffect\": 3,\"penaltyType\": 3,\"feeBasis\": 0,\"contractDealDate\": 101,\"statusDate\": 20,\"initialExchangeDate\": 2014223714,\"maturityDate\": 256,\"terminationDate\": 0,\"purchaseDate\": 0,\"capitalizationEndDate\": 0,\"cycleAnchorDateOfInterestPayment\": 15,\"cycleAnchorDateOfRateReset\": 160,\"cycleAnchorDateOfScalingIndex\": 2448,\"cycleAnchorDateOfFee\": 160,\"notionalPrincipal\": 95,\"nominalInterestRate\": 0,\"feeAccrued\": 19,\"accruedInterest\": 139,\"rateMultiplier\": 86399,\"rateSpread\": 2014223714,\"feeRate\": 151,\"nextResetRate\": 367,\"penaltyRate\": 68569,\"premiumDiscountAtIED\": 29,\"priceAtPurchaseDate\": 51,\"cycleOfInterestPayment\": {\"i\": 10001,\"p\": 3,\"s\": 0,\"isSet\": true},\"cycleOfRateReset\": {\"i\": 1460,\"p\": 2,\"s\": 0,\"isSet\": true},\"cycleOfScalingIndex\": {\"i\": 367,\"p\": 3,\"s\": 1,\"isSet\": false},\"cycleOfFee\": {\"i\": 1338,\"p\": 5,\"s\": 1,\"isSet\": false},\"lifeCap\": 91,\"lifeFloor\": 119,\"periodCap\": 24,\"periodFloor\": 10}",
              "sol": "Definitions.ContractTerms(Definitions.ContractType.STK,Definitions.Calendar.MondayToFriday,Definitions.ContractRole.ST,stringToBytes32(\"161,18,132,250,186,69,128,137,212,201,108,67,160,131,167,248,46,217,172,55,80,160,96,246,169,77,164,164,16,146,27,196\"),stringToBytes32(\"115,34,62,151,109,162,162,55,217,117,146,115,52,161,215,65,252,109,166,215,224,58,173,23,186,104,113,3,190,55,45,6\"),Definitions.DayCountConvention._30E_360,Definitions.BusinessDayConvention.SCF,Definitions.EndOfMonthConvention.SD,address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),Definitions.ScalingEffect._0NM,Definitions.PenaltyType.I,Definitions.FeeBasis.A,101,20,2014223714,256,0,0,0,15,160,2448,160,95,0,19,139,86399,2014223714,151,367,68569,29,51,Definitions.IPS(10001,Definitions.P.Q,Definitions.S.LONG,true),Definitions.IPS(1460,Definitions.P.M,Definitions.S.LONG,true),Definitions.IPS(367,Definitions.P.Q,Definitions.S.SHORT,false),Definitions.IPS(1338,Definitions.P.Y,Definitions.S.SHORT,false),91,119,24,10)"
            },
            {
              "js": "1461002",
              "sol": "1461002"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.378ZProxyCore.testsignum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "27-33",
          "restrictions": [
            "value > 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>0",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "29-33",
          "restrictions": [
            "value < 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value<0",
          "parameters": [
            {
              "js": "-1",
              "sol": "-1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "31-33",
          "restrictions": [
            "value >= 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsignum(int) WHEN value>=0",
          "parameters": [
            {
              "js": "4000",
              "sol": "4000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T15:49:34.399ZProxyCore.testgetEpochOffset": {
    "branches": {
      "0": {
        "branch": {
          "loc": "41-41",
          "restrictions": [
            "eventType == Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IED",
          "parameters": [
            {
              "js": 3,
              "sol": "Definitions.EventType.IED"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "42-42",
          "restrictions": [
            "eventType == Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IP",
          "parameters": [
            {
              "js": 4,
              "sol": "Definitions.EventType.IP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IED"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IED",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "43-43",
          "restrictions": [
            "eventType == Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 11,
              "sol": "Definitions.EventType.IPCI"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "44-44",
          "restrictions": [
            "eventType == Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.FP",
          "parameters": [
            {
              "js": 8,
              "sol": "Definitions.EventType.FP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "45-45",
          "restrictions": [
            "eventType == Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.DV",
          "parameters": [
            {
              "js": 16,
              "sol": "Definitions.EventType.DV"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "46-46",
          "restrictions": [
            "eventType == Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PR",
          "parameters": [
            {
              "js": 5,
              "sol": "Definitions.EventType.PR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "47-47",
          "restrictions": [
            "eventType == Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MR",
          "parameters": [
            {
              "js": 17,
              "sol": "Definitions.EventType.MR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "48-48",
          "restrictions": [
            "eventType == Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 13,
              "sol": "Definitions.EventType.RRY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "16": {
        "branch": {
          "loc": "49-49",
          "restrictions": [
            "eventType == Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.RR",
          "parameters": [
            {
              "js": 12,
              "sol": "Definitions.EventType.RR"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "17": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "18": {
        "branch": {
          "loc": "50-50",
          "restrictions": [
            "eventType == Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SC",
          "parameters": [
            {
              "js": 14,
              "sol": "Definitions.EventType.SC"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "19": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "20": {
        "branch": {
          "loc": "51-51",
          "restrictions": [
            "eventType == Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 18,
              "sol": "Definitions.EventType.IPCB"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "21": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "22": {
        "branch": {
          "loc": "52-52",
          "restrictions": [
            "eventType == Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 9,
              "sol": "Definitions.EventType.PRD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "23": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "24": {
        "branch": {
          "loc": "53-53",
          "restrictions": [
            "eventType == Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.TD",
          "parameters": [
            {
              "js": 10,
              "sol": "Definitions.EventType.TD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "25": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "26": {
        "branch": {
          "loc": "54-54",
          "restrictions": [
            "eventType == Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.STD",
          "parameters": [
            {
              "js": 19,
              "sol": "Definitions.EventType.STD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "27": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "28": {
        "branch": {
          "loc": "55-55",
          "restrictions": [
            "eventType == Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.MD",
          "parameters": [
            {
              "js": 1,
              "sol": "Definitions.EventType.MD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "29": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD",
          "parameters": [
            {
              "js": 6,
              "sol": "Definitions.EventType.PP"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "30": {
        "branch": {
          "loc": "56-56",
          "restrictions": [
            "eventType == Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.SD",
          "parameters": [
            {
              "js": 0,
              "sol": "Definitions.EventType.SD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "31": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "32": {
        "branch": {
          "loc": "57-57",
          "restrictions": [
            "eventType == Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.AD",
          "parameters": [
            {
              "js": 2,
              "sol": "Definitions.EventType.AD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "33": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.AD",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.AD,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD",
          "parameters": [
            {
              "js": 7,
              "sol": "Definitions.EventType.PY"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "34": {
        "branch": {
          "loc": "58-58",
          "restrictions": [
            "eventType == Definitions.EventType.Child"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType==Definitions.EventType.Child",
          "parameters": [
            {
              "js": 20,
              "sol": "Definitions.EventType.Child"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "35": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "eventType != Definitions.EventType.Child",
            "eventType != Definitions.EventType.IED",
            "eventType != Definitions.EventType.IP",
            "eventType != Definitions.EventType.IPCI",
            "eventType != Definitions.EventType.FP",
            "eventType != Definitions.EventType.DV",
            "eventType != Definitions.EventType.PR",
            "eventType != Definitions.EventType.MR",
            "eventType != Definitions.EventType.RRY",
            "eventType != Definitions.EventType.RR",
            "eventType != Definitions.EventType.SC",
            "eventType != Definitions.EventType.IPCB",
            "eventType != Definitions.EventType.PRD",
            "eventType != Definitions.EventType.TD",
            "eventType != Definitions.EventType.STD",
            "eventType != Definitions.EventType.MD",
            "eventType != Definitions.EventType.SD",
            "eventType != Definitions.EventType.AD"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgetEpochOffset(EventType) WHEN eventType!=Definitions.EventType.Child,eventType!=Definitions.EventType.IED,eventType!=Definitions.EventType.IP,eventType!=Definitions.EventType.IPCI,eventType!=Definitions.EventType.FP,eventType!=Definitions.EventType.DV,eventType!=Definitions.EventType.PR,eventType!=Definitions.EventType.MR,eventType!=Definitions.EventType.RRY,eventType!=Definitions.EventType.RR,eventType!=Definitions.EventType.SC,eventType!=Definitions.EventType.IPCB,eventType!=Definitions.EventType.PRD,eventType!=Definitions.EventType.TD,eventType!=Definitions.EventType.STD,eventType!=Definitions.EventType.MD,eventType!=Definitions.EventType.SD,eventType!=Definitions.EventType.AD",
          "parameters": [
            {
              "js": 15,
              "sol": "Definitions.EventType.CD"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}