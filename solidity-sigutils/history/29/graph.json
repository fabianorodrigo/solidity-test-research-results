{ truffleProjectHome:
   '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils',
  contracts:
   { SignatureUtils:
      { projectGraph: [Circular],
        name: 'SignatureUtils',
        kind: 'library',
        isAbstract: false,
        functions:
         { toEthBytes32SignedMessageHash:
            [ { name: 'toEthBytes32SignedMessageHash',
                signature: 'toEthBytes32SignedMessageHash(bytes32)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           toEthPersonalSignedMessageHash:
            [ { name: 'toEthPersonalSignedMessageHash',
                signature: 'toEthPersonalSignedMessageHash(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           uintToString:
            [ { name: 'uintToString',
                signature: 'uintToString(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           parseSignature:
            [ { name: 'parseSignature',
                signature: 'parseSignature(bytes,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           countSignatures:
            [ { name: 'countSignatures',
                signature: 'countSignatures(bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           recoverAddress:
            [ { name: 'recoverAddress',
                signature: 'recoverAddress(bytes32,bytes,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           recoverAddresses:
            [ { name: 'recoverAddresses',
                signature: 'recoverAddresses(bytes32,bytes)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: false,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'SignatureUtils',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'toEthBytes32SignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'toEthPersonalSignedMessageHash',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'uintToString',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'parseSignature',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'countSignatures',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'recoverAddress',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'recoverAddresses',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 157, column: 0 } } },
        instanceNeeded: true,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/contracts/SignatureUtils.sol' },
     ConvertLib:
      { projectGraph: [Circular],
        name: 'ConvertLib',
        kind: 'library',
        isAbstract: false,
        functions:
         { convert:
            [ { name: 'convert',
                signature: 'convert(uint,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'ConvertLib',
           baseContracts: [],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'convert',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'library',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 8, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/ConvertLib.sol' },
     MetaCoin:
      { projectGraph: [Circular],
        name: 'MetaCoin',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sendCoin:
            [ { name: 'sendCoin',
                signature: 'sendCoin(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalanceInEth:
            [ { name: 'getBalanceInEth',
                signature: 'getBalanceInEth(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { ConvertLib:
            { projectGraph: [Circular],
              name: 'ConvertLib',
              kind: 'library',
              isAbstract: false,
              functions: { convert: [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'ConvertLib',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'library',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/ConvertLib.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MetaCoin',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sendCoin',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalanceInEth',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 10, column: 0 }, end: { line: 34, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/MetaCoin.sol' },
     MultiContractFileA:
      { projectGraph: [Circular],
        name: 'MultiContractFileA',
        kind: 'contract',
        isAbstract: false,
        functions:
         { hello:
            [ { name: 'hello',
                signature: 'hello()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { hello: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MultiContractFileA',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'hello',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/MultiContractFile.sol' },
     MultiContractFileB:
      { projectGraph: [Circular],
        name: 'MultiContractFileB',
        kind: 'contract',
        isAbstract: false,
        functions:
         { goodbye:
            [ { name: 'goodbye',
                signature: 'goodbye()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { goodbye: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'MultiContractFileB',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'goodbye',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 11, column: 0 }, end: { line: 17, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/MultiContractFile.sol' },
     VariableConstructor:
      { projectGraph: [Circular],
        name: 'VariableConstructor',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor(string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           q:
            { functionsWrite: {},
              contract: [Circular],
              name: 'q',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           map:
            { functionsWrite: {},
              contract: [Circular],
              name: 'map',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>address)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { VariableCosts:
            { projectGraph: [Circular],
              name: 'VariableCosts',
              kind: 'contract',
              isAbstract: false,
              functions:
               { pureFn: [Array],
                 viewFn: [Array],
                 constantFn: [Array],
                 addToMap: [Array],
                 removeFromMap: [Array],
                 unusedMethod: [Array],
                 methodThatThrows: [Array] },
              modifiers: {},
              stateVariables: { q: [Object], map: [Object] },
              dependencies: { Wallet: [Object] },
              inheritsFrom: { Wallet: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'VariableCosts',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/VariableCosts.sol' } },
        inheritsFrom:
         { VariableCosts:
            { contract:
               { projectGraph: [Circular],
                 name: 'VariableCosts',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/VariableCosts.sol' },
              parameters: [],
              level: 0 },
           Wallet:
            { contract:
               { projectGraph: [Circular],
                 name: 'Wallet',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/Wallets/Wallet.sol' },
              parameters: [],
              level: 1 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'VariableConstructor',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/VariableConstructor.sol' },
     VariableCosts:
      { projectGraph: [Circular],
        name: 'VariableCosts',
        kind: 'contract',
        isAbstract: false,
        functions:
         { pureFn:
            [ { name: 'pureFn',
                signature: 'pureFn(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           viewFn:
            [ { name: 'viewFn',
                signature: 'viewFn(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           constantFn:
            [ { name: 'constantFn',
                signature: 'constantFn(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           addToMap:
            [ { name: 'addToMap',
                signature: 'addToMap(uint[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           removeFromMap:
            [ { name: 'removeFromMap',
                signature: 'removeFromMap(uint[])',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           unusedMethod:
            [ { name: 'unusedMethod',
                signature: 'unusedMethod(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           methodThatThrows:
            [ { name: 'methodThatThrows',
                signature: 'methodThatThrows(bool)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { q:
            { functionsWrite: { methodThatThrows: [Array] },
              contract: [Circular],
              name: 'q',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           map:
            { functionsWrite: {},
              contract: [Circular],
              name: 'map',
              isArray: false,
              initialValue: null,
              type: 'mapping(uint=>address)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Wallet:
            { projectGraph: [Circular],
              name: 'Wallet',
              kind: 'contract',
              isAbstract: false,
              functions:
               { transferPayment: [Array],
                 sendPayment: [Array],
                 getBalance: [Array],
                 '': [Array] },
              modifiers: {},
              stateVariables: {},
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Wallet',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/Wallets/Wallet.sol' } },
        inheritsFrom:
         { Wallet:
            { contract:
               { projectGraph: [Circular],
                 name: 'Wallet',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: {},
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/Wallets/Wallet.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'VariableCosts',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'pureFn',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'viewFn',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'constantFn',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'addToMap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'removeFromMap',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'unusedMethod',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'methodThatThrows',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 39, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/VariableCosts.sol' },
     Wallet:
      { projectGraph: [Circular],
        name: 'Wallet',
        kind: 'contract',
        isAbstract: false,
        functions:
         { transferPayment:
            [ { name: 'transferPayment',
                signature: 'transferPayment(uint,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           sendPayment:
            [ { name: 'sendPayment',
                signature: 'sendPayment(uint,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           getBalance:
            [ { name: 'getBalance',
                signature: 'getBalance()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           '':
            [ { name: '',
                signature: '()',
                isPayable: true,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables: {},
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Wallet',
           baseContracts: [],
           subNodes:
            [ { type: 'EventDefinition',
                name: 'Deposit',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferPayment',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'sendPayment',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'getBalance',
                parameters: [],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: '',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'payable',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 25, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/eth-gas-reporter/mock/contracts/Wallets/Wallet.sol' },
     Local:
      { projectGraph: [Circular],
        name: 'Local',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'Local()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Local',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'Local',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 9, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
     PLCRVoting:
      { projectGraph: [Circular],
        name: 'PLCRVoting',
        kind: 'contract',
        isAbstract: false,
        functions:
         { isExpired:
            [ { name: 'isExpired',
                signature: 'isExpired(uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           attrUUID:
            [ { name: 'attrUUID',
                signature: 'attrUUID(address,uint)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ] },
        modifiers: {},
        stateVariables:
         { local:
            { functionsWrite: {},
              contract: [Circular],
              name: 'local',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: {},
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: {},
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: {},
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { Local:
            { projectGraph: [Circular],
              name: 'Local',
              kind: 'contract',
              isAbstract: false,
              functions: { constructor: [Array] },
              modifiers: {},
              stateVariables: { local: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'Local',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' } },
        inheritsFrom:
         { EIP20:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: [Object],
                 inheritsFrom: [Object],
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
              parameters: [],
              level: 0 },
           EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 1 },
           Local:
            { contract:
               { projectGraph: [Circular],
                 name: 'Local',
                 kind: 'contract',
                 isAbstract: false,
                 functions: [Object],
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/contracts/Local.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'PLCRVoting',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] },
              { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'FunctionDefinition',
                name: 'isExpired',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'constant',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'attrUUID',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'pure',
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 6, column: 0 }, end: { line: 15, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/contracts/PLCRVoting.sol' },
     EIP20:
      { projectGraph: [Circular],
        name: 'EIP20',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'EIP20(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [Array],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           transfer:
            [ { name: 'transfer',
                signature: 'transfer(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           transferFrom:
            [ { name: 'transferFrom',
                signature: 'transferFrom(address,address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           balanceOf:
            [ { name: 'balanceOf',
                signature: 'balanceOf(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           approve:
            [ { name: 'approve',
                signature: 'approve(address,uint256)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: [Object],
                functionCallings: [Object] } ],
           allowance:
            [ { name: 'allowance',
                signature: 'allowance(address,address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { MAX_UINT256:
            { functionsWrite: {},
              contract: [Circular],
              name: 'MAX_UINT256',
              isArray: false,
              initialValue: undefined,
              type: 'uint256',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: true,
              isAddressContract: false },
           name:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'name',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           decimals:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'decimals',
              isArray: false,
              initialValue: 0,
              type: 'uint8',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           symbol:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'symbol',
              isArray: false,
              initialValue: null,
              type: 'string',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           balances:
            { functionsWrite: {},
              contract: [Circular],
              name: 'balances',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>uint256)})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           allowed:
            { functionsWrite: {},
              contract: [Circular],
              name: 'allowed',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>mapping(address=>uint256)}))})',
              visibility: 'default',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           totalSupply:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20Interface:
            { projectGraph: [Circular],
              name: 'EIP20Interface',
              kind: 'contract',
              isAbstract: true,
              functions: {},
              modifiers: {},
              stateVariables: { totalSupply: [Object] },
              dependencies: {},
              inheritsFrom: {},
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20Interface',
                 baseContracts: [],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' } },
        inheritsFrom:
         { EIP20Interface:
            { contract:
               { projectGraph: [Circular],
                 name: 'EIP20Interface',
                 kind: 'contract',
                 isAbstract: true,
                 functions: {},
                 modifiers: {},
                 stateVariables: [Object],
                 dependencies: {},
                 inheritsFrom: {},
                 structs: {},
                 enums: {},
                 isThirdPartyLib: true,
                 isOnlyForTest: false,
                 contractDefinition: [Object],
                 instanceNeeded: false,
                 solFilePath:
                  '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
              parameters: [],
              level: 0 } },
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20',
           baseContracts:
            [ { type: 'InheritanceSpecifier',
                baseName: [Object],
                arguments: [],
                loc: [Object] } ],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: [Object],
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'EIP20',
                parameters: [Array],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 8, column: 0 }, end: { line: 78, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' },
     EIP20Factory:
      { projectGraph: [Circular],
        name: 'EIP20Factory',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'EIP20Factory()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ],
           verifyEIP20:
            [ { name: 'verifyEIP20',
                signature: 'verifyEIP20(address)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           codeAt:
            [ { name: 'codeAt',
                signature: 'codeAt(address)',
                isPayable: false,
                visibility: 'internal',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ],
           createEIP20:
            [ { name: 'createEIP20',
                signature: 'createEIP20(uint256,string,uint8,string)',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: false,
                functionDefinition: [Object],
                localVariables: [Array],
                modifiers: {},
                return: [Array],
                parameters: [Array],
                stateVariablesWritten: {},
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { created:
            { functionsWrite: {},
              contract: [Circular],
              name: 'created',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>address[])})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           isEIP20:
            { functionsWrite: {},
              contract: [Circular],
              name: 'isEIP20',
              isArray: false,
              initialValue: null,
              type: 'mapping(address=>bool)})',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false },
           EIP20ByteCode:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'EIP20ByteCode',
              isArray: false,
              initialValue: null,
              type: 'bytes',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies:
         { EIP20:
            { projectGraph: [Circular],
              name: 'EIP20',
              kind: 'contract',
              isAbstract: false,
              functions:
               { constructor: [Array],
                 transfer: [Array],
                 transferFrom: [Array],
                 balanceOf: [Array],
                 approve: [Array],
                 allowance: [Array] },
              modifiers: {},
              stateVariables:
               { MAX_UINT256: [Object],
                 name: [Object],
                 decimals: [Object],
                 symbol: [Object],
                 balances: [Object],
                 allowed: [Object],
                 totalSupply: [Object] },
              dependencies: { EIP20Interface: [Object] },
              inheritsFrom: { EIP20Interface: [Object] },
              structs: {},
              enums: {},
              isThirdPartyLib: true,
              isOnlyForTest: false,
              contractDefinition:
               { type: 'ContractDefinition',
                 name: 'EIP20',
                 baseContracts: [Array],
                 subNodes: [Array],
                 kind: 'contract',
                 loc: [Object] },
              instanceNeeded: false,
              solFilePath:
               '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20.sol' } },
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Factory',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'EIP20Factory',
                parameters: [],
                returnParameters: null,
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'verifyEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'codeAt',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'internal',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'createEIP20',
                parameters: [Array],
                returnParameters: [Array],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 62, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Factory.sol' },
     EIP20Interface:
      { projectGraph: [Circular],
        name: 'EIP20Interface',
        kind: 'contract',
        isAbstract: true,
        functions: {},
        modifiers: {},
        stateVariables:
         { totalSupply:
            { functionsWrite: {},
              contract: [Circular],
              name: 'totalSupply',
              isArray: false,
              initialValue: 0,
              type: 'uint256',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'EIP20Interface',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'balanceOf',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transfer',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'transferFrom',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'approve',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: 'allowance',
                parameters: [Array],
                returnParameters: [Array],
                body: null,
                visibility: 'public',
                modifiers: [],
                isConstructor: false,
                stateMutability: 'view',
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Transfer',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] },
              { type: 'EventDefinition',
                name: 'Approval',
                parameters: [Array],
                isAnonymous: false,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 5, column: 0 }, end: { line: 48, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/ethpm/installed_contracts/tokens/contracts/eip20/EIP20Interface.sol' },
     Executable:
      { projectGraph: [Circular],
        name: 'Executable',
        kind: 'contract',
        isAbstract: false,
        functions:
         { constructor:
            [ { name: 'constructor',
                signature: 'constructor()',
                isPayable: false,
                visibility: 'public',
                contract: [Circular],
                isConstructor: true,
                functionDefinition: [Object],
                localVariables: [],
                modifiers: {},
                return: [],
                parameters: [],
                stateVariablesWritten: [Object],
                calledFunctions: {},
                functionCallings: {} } ] },
        modifiers: {},
        stateVariables:
         { x:
            { functionsWrite: { constructor: [Array] },
              contract: [Circular],
              name: 'x',
              isArray: false,
              initialValue: 0,
              type: 'uint',
              visibility: 'public',
              storageLocation: undefined,
              isConstant: false,
              isAddressContract: false } },
        dependencies: {},
        inheritsFrom: {},
        structs: {},
        enums: {},
        isThirdPartyLib: true,
        isOnlyForTest: false,
        contractDefinition:
         { type: 'ContractDefinition',
           name: 'Executable',
           baseContracts: [],
           subNodes:
            [ { type: 'StateVariableDeclaration',
                variables: [Array],
                initialValue: null,
                loc: [Object] },
              { type: 'FunctionDefinition',
                name: null,
                parameters: [],
                body: [Object],
                visibility: 'public',
                modifiers: [],
                isConstructor: true,
                stateMutability: null,
                loc: [Object] } ],
           kind: 'contract',
           loc:
            { start: { line: 3, column: 0 }, end: { line: 10, column: 0 } } },
        instanceNeeded: false,
        solFilePath:
         '/home/fabianorodrigo/Projetos/bitbucket/solidity-test/workdir/solidity-sigutils/node_modules/truffle/test/sources/exec/contracts/Executable.sol' } },
  structs: {},
  enums: {} }