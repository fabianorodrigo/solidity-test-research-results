,{
  "2020-11-13T12:18:13.729ZPower.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.639ZBancorFormula.calculatePurchaseReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "249-251",
          "restrictions": [
            "_depositAmount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _depositAmount==0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "108",
              "sol": "108"
            },
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "129",
                "sol": "129"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_depositAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _depositAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "94",
              "sol": "94"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "55",
                "sol": "55"
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "55",
                "sol": "55"
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "_connectorWeight == MAX_WEIGHT"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight==MAX_WEIGHT,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_connectorBalance>0",
          "parameters": [
            {
              "js": "982081",
              "sol": "982081"
            },
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "1000000",
              "sol": "1000000"
            },
            {
              "js": "108",
              "sol": "108"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "108",
                "sol": "108"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_connectorWeight != MAX_WEIGHT",
            "_depositAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight!=MAX_WEIGHT,_depositAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "79",
                "sol": "79"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "79",
                "sol": "79"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "79",
                "sol": "79"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.653ZBancorFormula.calculateSaleReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "293-295",
          "restrictions": [
            "_sellAmount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount==0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "982079",
              "sol": "982079"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "982079",
                "sol": "982079"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "982079",
                "sol": "982079"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "982079",
                "sol": "982079"
              },
              {
                "js": 61,
                "sol": 61
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sellAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "1000001",
              "sol": "1000001"
            },
            {
              "js": "1000001",
              "sol": "1000001"
            },
            {
              "js": "1000000",
              "sol": "1000000"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": 1000002,
                "sol": 1000002
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "_sellAmount == _supply"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount==_supply,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "126",
              "sol": "126"
            },
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": "119",
                "sol": "119"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "119",
                "sol": "119"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": "119",
                "sol": "119"
              },
              {
                "js": 93,
                "sol": 93
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sellAmount != _supply",
            "_sellAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount!=_supply,_sellAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "126",
              "sol": "126"
            },
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "56",
              "sol": "56"
            },
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "126",
                "sol": "126"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "56",
                "sol": "56"
              },
              {
                "js": 127,
                "sol": 127
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "301-303",
          "restrictions": [
            "_connectorWeight == MAX_WEIGHT"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight==MAX_WEIGHT,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,_supply>0,result>0",
          "parameters": [
            {
              "js": "75",
              "sol": "75"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1000000",
              "sol": "1000000"
            },
            {
              "js": "35",
              "sol": "35"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "75",
                "sol": "75"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "75",
                "sol": "75"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "75",
                "sol": "75"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "75",
                "sol": "75"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": 76,
                "sol": 76
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_connectorWeight != MAX_WEIGHT",
            "_sellAmount != 0",
            "_sellAmount != _supply"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight!=MAX_WEIGHT,_sellAmount!=0,_sellAmount!=_supply,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "999999",
              "sol": "999999"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "104",
              "sol": "104"
            },
            {
              "js": "60",
              "sol": "60"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "104",
                "sol": "104"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "999999",
                "sol": "999999"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "104",
                "sol": "104"
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "999999",
                "sol": "999999"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "999999",
                "sol": "999999"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "60",
                "sol": "60"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "999999",
                "sol": "999999"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "104",
                "sol": "104"
              },
              {
                "js": 1000000,
                "sol": 1000000
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.674ZERC20BondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(ERC20,uint256,uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "contractTestERC20BondingToken.address",
              "sol": "contractTestERC20BondingToken"
            },
            {
              "js": "59",
              "sol": "59"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.677ZERC20BondingToken.poolBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute poolBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.677ZERC20BondingToken.calculateCurvedMintReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedMintReturn(uint256)",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.678ZERC20BondingToken.calculateCurvedBurnReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedBurnReturn(uint256)",
          "parameters": [
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.683ZProxyERC20BondingToken.test_curvedMint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedMint(uint256) WHEN msg.gasprice<=gasPrice,amount>0,msg.sender!=0",
          "parameters": [
            {
              "js": "44",
              "sol": "44"
            },
            {
              "js": "{from:accounts[8],gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "44",
                "sol": "44"
              },
              {
                "js": "{from:accounts[8],gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[8]\",\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8],gasPrice:0}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "44",
                "sol": "44"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.686ZProxyERC20BondingToken.test_curvedBurn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedBurn(uint256)",
          "parameters": [
            {
              "js": "119",
              "sol": "119"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.688ZEthBondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "75",
              "sol": "75"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.690ZEthBondingToken.poolBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute poolBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.690ZEthBondingToken.calculateCurvedMintReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedMintReturn(uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.691ZEthBondingToken.calculateCurvedBurnReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedBurnReturn(uint256)",
          "parameters": [
            {
              "js": "52",
              "sol": "52"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.694ZProxyEthBondingToken.test_curvedMint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedMint() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[6],value:55,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"55\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[6],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[6]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[6],value:55,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[6]\",\"value\":55,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[6],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[6]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:55,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":55,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.699ZProxyEthBondingToken.test_curvedBurn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedBurn(uint256)",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.701ZTestERC20BondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(ERC20,uint256,uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "contractEthBondingToken.address",
              "sol": "contractEthBondingToken"
            },
            {
              "js": "61",
              "sol": "61"
            },
            {
              "js": "73",
              "sol": "73"
            },
            {
              "js": "86",
              "sol": "86"
            },
            {
              "js": "114",
              "sol": "114"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.704ZTestERC20BondingToken.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(uint256) WHEN msg.gasprice<=gasPrice,amount>0,msg.sender!=0",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[1],gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": "{from:accounts[1],gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[1]\",\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1],gasPrice:0}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "63",
                "sol": "63"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.708ZTestERC20BondingToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256)",
          "parameters": [
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.709ZTestEthBondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "79",
              "sol": "79"
            },
            {
              "js": "982080",
              "sol": "982080"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.711ZTestEthBondingToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[5],value:81,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"81\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[5],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[5],value:81,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":81,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[5],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:81,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":81,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.715ZTestEthBondingToken.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[0],value:34,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"34\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[0],value:34,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":34,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[0],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[0]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:34,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":34,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.717ZTestEthBondingToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256)",
          "parameters": [
            {
              "js": "124",
              "sol": "124"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.731ZProxyPower.testpower": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpower(uint256,uint256,uint32,uint32) WHEN _baseN<MAX_NUM,_baseN>=_baseD",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpower(uint256,uint256,uint32,uint32) when NOT comply with: _baseN < MAX_NUM",
            "parameters": [
              {
                "js": "680564733841876926926749214863536422912",
                "sol": "680564733841876926926749214863536422912"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "55",
                "sol": "55"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testpower(uint256,uint256,uint32,uint32) when NOT comply with: _baseN >= _baseD",
            "parameters": [
              {
                "js": 4,
                "sol": 4
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "117",
                "sol": "117"
              },
              {
                "js": "55",
                "sol": "55"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:18:22.733ZProxyPower.testgeneralLog": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgeneralLog(uint256) WHEN LN2_DENOMINATOR>0",
          "parameters": [
            {
              "js": "123",
              "sol": "123"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.734ZProxyPower.testfloorLog2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloorLog2(uint256)",
          "parameters": [
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.735ZProxyPower.testfindPositionInMaxExpArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "496-497",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "33",
              "sol": "33"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "498-499",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "4038714810",
              "sol": "4038714810"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x",
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x,maxExpArray<_x",
          "parameters": [
            {
              "js": "1000001",
              "sol": "1000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.739ZProxyPower.testgeneralExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgeneralExp(uint256,uint8)",
          "parameters": [
            {
              "js": "67",
              "sol": "67"
            },
            {
              "js": "104",
              "sol": "104"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.743ZProxyPower.testoptimalLog": {
    "branches": {
      "0": {
        "branch": {
          "loc": "565-565",
          "restrictions": [
            "x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0xd3094c70f034de4b96ff7d5b6f99fcd8",
          "parameters": [
            {
              "js": "\"0xd3094c70f034e0000000000000000000\"",
              "sol": "0xd3094c70f034e0000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0xd3094c70f034de4b96ff7d5b6f99fcd8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0xd3094c70f034de4b96ff7d5b6f99fcd8",
          "parameters": [
            {
              "js": "35",
              "sol": "35"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "566-566",
          "restrictions": [
            "x >= 0xa45af1e1f40c333b3de1db4dd55f29a7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0xa45af1e1f40c333b3de1db4dd55f29a7",
          "parameters": [
            {
              "js": "\"0xa45af1e1f40c30000000000000000001\"",
              "sol": "0xa45af1e1f40c30000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0xa45af1e1f40c333b3de1db4dd55f29a7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0xa45af1e1f40c333b3de1db4dd55f29a7",
          "parameters": [
            {
              "js": "93",
              "sol": "93"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "567-567",
          "restrictions": [
            "x >= 0x910b022db7ae67ce76b441c27035c6a1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x910b022db7ae67ce76b441c27035c6a1",
          "parameters": [
            {
              "js": "\"0x910b022db7ae68000000000000000001\"",
              "sol": "0x910b022db7ae68000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x910b022db7ae67ce76b441c27035c6a1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x910b022db7ae67ce76b441c27035c6a1",
          "parameters": [
            {
              "js": "84",
              "sol": "84"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "568-568",
          "restrictions": [
            "x >= 0x88415abbe9a76bead8d00cf112e4d4a8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x88415abbe9a76bead8d00cf112e4d4a8",
          "parameters": [
            {
              "js": "\"0x88415abbe9a768000000000000000000\"",
              "sol": "0x88415abbe9a768000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x88415abbe9a76bead8d00cf112e4d4a8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x88415abbe9a76bead8d00cf112e4d4a8",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "569-569",
          "restrictions": [
            "x >= 0x84102b00893f64c705e841d5d4064bd3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x84102b00893f64c705e841d5d4064bd3",
          "parameters": [
            {
              "js": "\"0x84102b00893f68000000000000000001\"",
              "sol": "0x84102b00893f68000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x84102b00893f64c705e841d5d4064bd3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x84102b00893f64c705e841d5d4064bd3",
          "parameters": [
            {
              "js": "105",
              "sol": "105"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "570-570",
          "restrictions": [
            "x >= 0x8204055aaef1c8bd5c3259f4822735a2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x8204055aaef1c8bd5c3259f4822735a2",
          "parameters": [
            {
              "js": "\"0x8204055aaef1c8000000000000000000\"",
              "sol": "0x8204055aaef1c8000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x8204055aaef1c8bd5c3259f4822735a2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x8204055aaef1c8bd5c3259f4822735a2",
          "parameters": [
            {
              "js": "73",
              "sol": "73"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "571-571",
          "restrictions": [
            "x >= 0x810100ab00222d861931c15e39b44e99"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x810100ab00222d861931c15e39b44e99",
          "parameters": [
            {
              "js": "\"0x810100ab002230000000000000000000\"",
              "sol": "0x810100ab002230000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x810100ab00222d861931c15e39b44e99"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x810100ab00222d861931c15e39b44e99",
          "parameters": [
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "572-572",
          "restrictions": [
            "x >= 0x808040155aabbbe9451521693554f733"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x808040155aabbbe9451521693554f733",
          "parameters": [
            {
              "js": "\"0x808040155aabb8000000000000000001\"",
              "sol": "0x808040155aabb8000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x808040155aabbbe9451521693554f733"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x808040155aabbbe9451521693554f733",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:18:22.752ZProxyPower.testoptimalExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalExp(uint256)",
          "parameters": [
            {
              "js": "78",
              "sol": "78"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}