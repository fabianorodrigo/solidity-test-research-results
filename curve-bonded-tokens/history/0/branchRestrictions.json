,{
  "2020-11-10T02:25:57.737ZPower.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.418ZBancorFormula.calculatePurchaseReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "249-251",
          "restrictions": [
            "_depositAmount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _depositAmount==0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "107",
              "sol": "107"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "107",
                "sol": "107"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "107",
                "sol": "107"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_depositAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _depositAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "32735",
              "sol": "32735"
            },
            {
              "js": "123",
              "sol": "123"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "32735",
                "sol": "32735"
              },
              {
                "js": "123",
                "sol": "123"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "123",
                "sol": "123"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "32735",
                "sol": "32735"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "32735",
                "sol": "32735"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "253-255",
          "restrictions": [
            "_connectorWeight == MAX_WEIGHT"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight==MAX_WEIGHT,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_connectorBalance>0",
          "parameters": [
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1000000",
              "sol": "1000000"
            },
            {
              "js": "73",
              "sol": "73"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "73",
                "sol": "73"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "73",
                "sol": "73"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "73",
                "sol": "73"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "73",
                "sol": "73"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "73",
                "sol": "73"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_connectorWeight != MAX_WEIGHT",
            "_depositAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculatePurchaseReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight!=MAX_WEIGHT,_depositAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT",
          "parameters": [
            {
              "js": "109",
              "sol": "109"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "101",
              "sol": "101"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "101",
                "sol": "101"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculatePurchaseReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "109",
                "sol": "109"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.428ZBancorFormula.calculateSaleReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "293-295",
          "restrictions": [
            "_sellAmount == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount==0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "94",
              "sol": "94"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "94",
                "sol": "94"
              },
              {
                "js": 6,
                "sol": 6
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sellAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "46",
              "sol": "46"
            },
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "35",
              "sol": "35"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "35",
                "sol": "35"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "46",
                "sol": "46"
              },
              {
                "js": "74",
                "sol": "74"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 47,
                "sol": 47
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "297-299",
          "restrictions": [
            "_sellAmount == _supply"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount==_supply,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "982081",
              "sol": "982081"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "71",
              "sol": "71"
            },
            {
              "js": "982081",
              "sol": "982081"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "982081",
                "sol": "982081"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "71",
                "sol": "71"
              },
              {
                "js": 982082,
                "sol": 982082
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_sellAmount != _supply",
            "_sellAmount != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _sellAmount!=_supply,_sellAmount!=0,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "83",
              "sol": "83"
            },
            {
              "js": "92",
              "sol": "92"
            },
            {
              "js": "42",
              "sol": "42"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "42",
                "sol": "42"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": "42",
                "sol": "42"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "42",
                "sol": "42"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "42",
                "sol": "42"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "47",
                "sol": "47"
              },
              {
                "js": "83",
                "sol": "83"
              },
              {
                "js": "92",
                "sol": "92"
              },
              {
                "js": 48,
                "sol": 48
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "4": {
        "branch": {
          "loc": "301-303",
          "restrictions": [
            "_connectorWeight == MAX_WEIGHT"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight==MAX_WEIGHT,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,_supply>0,result>0",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "31",
              "sol": "31"
            },
            {
              "js": "1000000",
              "sol": "1000000"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "51",
                "sol": "51"
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": 52,
                "sol": 52
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "31",
                "sol": "31"
              },
              {
                "js": "1000000",
                "sol": "1000000"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "_connectorWeight != MAX_WEIGHT",
            "_sellAmount != 0",
            "_sellAmount != _supply"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateSaleReturn(uint256,uint256,uint32,uint256) WHEN _connectorWeight!=MAX_WEIGHT,_sellAmount!=0,_sellAmount!=_supply,_supply>0,_connectorBalance>0,_connectorWeight>0,_connectorWeight<=MAX_WEIGHT,_sellAmount<=_supply,result>0",
          "parameters": [
            {
              "js": "1000001",
              "sol": "1000001"
            },
            {
              "js": "88",
              "sol": "88"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _supply > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorBalance > 0",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight > 0",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _connectorWeight <= MAX_WEIGHT",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": 1000001,
                "sol": 1000001
              },
              {
                "js": "41",
                "sol": "41"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail calculateSaleReturn(uint256,uint256,uint32,uint256) when NOT comply with: _sellAmount <= _supply",
            "parameters": [
              {
                "js": "1000001",
                "sol": "1000001"
              },
              {
                "js": "88",
                "sol": "88"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": 1000002,
                "sol": 1000002
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.442ZERC20BondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(ERC20,uint256,uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "contractTestERC20BondingToken.address",
              "sol": "contractTestERC20BondingToken"
            },
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "111",
              "sol": "111"
            },
            {
              "js": "4038714811",
              "sol": "4038714811"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.446ZERC20BondingToken.poolBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute poolBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.447ZERC20BondingToken.calculateCurvedMintReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedMintReturn(uint256)",
          "parameters": [
            {
              "js": "48",
              "sol": "48"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.448ZERC20BondingToken.calculateCurvedBurnReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedBurnReturn(uint256)",
          "parameters": [
            {
              "js": "68",
              "sol": "68"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.451ZProxyERC20BondingToken.test_curvedMint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedMint(uint256) WHEN msg.gasprice<=gasPrice,amount>0,msg.sender!=0",
          "parameters": [
            {
              "js": "72",
              "sol": "72"
            },
            {
              "js": "{from:accounts[8],gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "72",
                "sol": "72"
              },
              {
                "js": "{from:accounts[8],gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[8]\",\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[8],gasPrice:0}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "72",
                "sol": "72"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.454ZProxyERC20BondingToken.test_curvedBurn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedBurn(uint256)",
          "parameters": [
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.455ZEthBondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "89",
              "sol": "89"
            },
            {
              "js": "102",
              "sol": "102"
            },
            {
              "js": "75",
              "sol": "75"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.457ZEthBondingToken.poolBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute poolBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.458ZEthBondingToken.calculateCurvedMintReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedMintReturn(uint256)",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.459ZEthBondingToken.calculateCurvedBurnReturn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute calculateCurvedBurnReturn(uint256)",
          "parameters": [
            {
              "js": "75",
              "sol": "75"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.461ZProxyEthBondingToken.test_curvedMint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedMint() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[8],value:53,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"53\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[8],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[8]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[8],value:53,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[8]\",\"value\":53,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[8],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[8]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail test_curvedMint() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:53,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":53,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.463ZProxyEthBondingToken.test_curvedBurn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute test_curvedBurn(uint256)",
          "parameters": [
            {
              "js": "107",
              "sol": "107"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.465ZTestERC20BondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(ERC20,uint256,uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "contractEthBondingToken.address",
              "sol": "contractEthBondingToken"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "41",
              "sol": "41"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.467ZTestERC20BondingToken.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint(uint256) WHEN msg.gasprice<=gasPrice,amount>0,msg.sender!=0",
          "parameters": [
            {
              "js": "49",
              "sol": "49"
            },
            {
              "js": "{from:accounts[6],gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "{from:accounts[6],gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[6]\",\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: amount > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[6],gasPrice:0}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"gasPrice\":\"0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint(uint256) when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "49",
                "sol": "49"
              },
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.470ZTestERC20BondingToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256)",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.471ZTestEthBondingToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(uint256,uint32,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "58",
              "sol": "58"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.473ZTestEthBondingToken.": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute fallback() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[9],value:78,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"78\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[9],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[9]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[9],value:78,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[9]\",\"value\":78,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[9],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[9]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail fallback() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:78,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":78,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.476ZTestEthBondingToken.mint": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute mint() WHEN msg.value>0,msg.gasprice<=gasPrice,msg.value>0,msg.sender!=0",
          "parameters": [
            {
              "js": "{from:accounts[5],value:84,gasPrice:0}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\",\"value\":\"84\",\"gasPrice\":\"0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[5],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.gasprice <= gasPrice",
            "parameters": [
              {
                "js": "{from:accounts[5],value:84,gasPrice:0,gasprice:1}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":84,\"gasPrice\":0,\"gasprice\":1}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.value > 0",
            "parameters": [
              {
                "js": "{from:accounts[5],value:0,gasPrice:0}",
                "sol": "{\"from\":\"accounts[5]\",\"value\":0,\"gasPrice\":0}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail mint() when NOT comply with: msg.sender != 0",
            "parameters": [
              {
                "js": "{from:\"0x0000000000000000000000000000000000000000\",value:84,gasPrice:0}",
                "sol": "{\"from\":\"\\\"0x0000000000000000000000000000000000000000\\\"\",\"value\":84,\"gasPrice\":0}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.479ZTestEthBondingToken.burn": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute burn(uint256)",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.486ZProxyPower.testpower": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpower(uint256,uint256,uint32,uint32) WHEN _baseN<MAX_NUM,_baseN>=_baseD",
          "parameters": [
            {
              "js": "125",
              "sol": "125"
            },
            {
              "js": "81",
              "sol": "81"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "34",
              "sol": "34"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpower(uint256,uint256,uint32,uint32) when NOT comply with: _baseN < MAX_NUM",
            "parameters": [
              {
                "js": "680564733841876926926749214863536422912",
                "sol": "680564733841876926926749214863536422912"
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "34",
                "sol": "34"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail testpower(uint256,uint256,uint32,uint32) when NOT comply with: _baseN >= _baseD",
            "parameters": [
              {
                "js": 80,
                "sol": 80
              },
              {
                "js": "81",
                "sol": "81"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "34",
                "sol": "34"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T02:26:06.487ZProxyPower.testgeneralLog": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgeneralLog(uint256) WHEN LN2_DENOMINATOR>0",
          "parameters": [
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.488ZProxyPower.testfloorLog2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloorLog2(uint256)",
          "parameters": [
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.489ZProxyPower.testfindPositionInMaxExpArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "496-497",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "63",
              "sol": "63"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x",
          "parameters": [
            {
              "js": "982079",
              "sol": "982079"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "498-499",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "51",
              "sol": "51"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x",
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x,maxExpArray<_x",
          "parameters": [
            {
              "js": "98",
              "sol": "98"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.493ZProxyPower.testgeneralExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testgeneralExp(uint256,uint8)",
          "parameters": [
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "108",
              "sol": "108"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.495ZProxyPower.testoptimalLog": {
    "branches": {
      "0": {
        "branch": {
          "loc": "565-565",
          "restrictions": [
            "x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0xd3094c70f034de4b96ff7d5b6f99fcd8",
          "parameters": [
            {
              "js": "\"0xd3094c70f034e0000000000000000000\"",
              "sol": "0xd3094c70f034e0000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0xd3094c70f034de4b96ff7d5b6f99fcd8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0xd3094c70f034de4b96ff7d5b6f99fcd8",
          "parameters": [
            {
              "js": "129",
              "sol": "129"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "566-566",
          "restrictions": [
            "x >= 0xa45af1e1f40c333b3de1db4dd55f29a7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0xa45af1e1f40c333b3de1db4dd55f29a7",
          "parameters": [
            {
              "js": "\"0xa45af1e1f40c30000000000000000000\"",
              "sol": "0xa45af1e1f40c30000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0xa45af1e1f40c333b3de1db4dd55f29a7"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0xa45af1e1f40c333b3de1db4dd55f29a7",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "567-567",
          "restrictions": [
            "x >= 0x910b022db7ae67ce76b441c27035c6a1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x910b022db7ae67ce76b441c27035c6a1",
          "parameters": [
            {
              "js": "\"0x910b022db7ae68000000000000000001\"",
              "sol": "0x910b022db7ae68000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x910b022db7ae67ce76b441c27035c6a1"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x910b022db7ae67ce76b441c27035c6a1",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "6": {
        "branch": {
          "loc": "568-568",
          "restrictions": [
            "x >= 0x88415abbe9a76bead8d00cf112e4d4a8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x88415abbe9a76bead8d00cf112e4d4a8",
          "parameters": [
            {
              "js": "\"0x88415abbe9a768000000000000000001\"",
              "sol": "0x88415abbe9a768000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "7": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x88415abbe9a76bead8d00cf112e4d4a8"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x88415abbe9a76bead8d00cf112e4d4a8",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "8": {
        "branch": {
          "loc": "569-569",
          "restrictions": [
            "x >= 0x84102b00893f64c705e841d5d4064bd3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x84102b00893f64c705e841d5d4064bd3",
          "parameters": [
            {
              "js": "\"0x84102b00893f68000000000000000001\"",
              "sol": "0x84102b00893f68000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "9": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x84102b00893f64c705e841d5d4064bd3"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x84102b00893f64c705e841d5d4064bd3",
          "parameters": [
            {
              "js": "120",
              "sol": "120"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "10": {
        "branch": {
          "loc": "570-570",
          "restrictions": [
            "x >= 0x8204055aaef1c8bd5c3259f4822735a2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x8204055aaef1c8bd5c3259f4822735a2",
          "parameters": [
            {
              "js": "\"0x8204055aaef1c8000000000000000001\"",
              "sol": "0x8204055aaef1c8000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "11": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x8204055aaef1c8bd5c3259f4822735a2"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x8204055aaef1c8bd5c3259f4822735a2",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "12": {
        "branch": {
          "loc": "571-571",
          "restrictions": [
            "x >= 0x810100ab00222d861931c15e39b44e99"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x810100ab00222d861931c15e39b44e99",
          "parameters": [
            {
              "js": "\"0x810100ab002230000000000000000001\"",
              "sol": "0x810100ab002230000000000000000001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "13": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x810100ab00222d861931c15e39b44e99"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x810100ab00222d861931c15e39b44e99",
          "parameters": [
            {
              "js": "87",
              "sol": "87"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "14": {
        "branch": {
          "loc": "572-572",
          "restrictions": [
            "x >= 0x808040155aabbbe9451521693554f733"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x>=0x808040155aabbbe9451521693554f733",
          "parameters": [
            {
              "js": "\"0x808040155aabb8000000000000000000\"",
              "sol": "0x808040155aabb8000000000000000000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "15": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "x < 0x808040155aabbbe9451521693554f733"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalLog(uint256) WHEN x<0x808040155aabbbe9451521693554f733",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T02:26:06.503ZProxyPower.testoptimalExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testoptimalExp(uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}