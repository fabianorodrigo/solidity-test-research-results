,{
  "2020-11-13T12:12:00.354ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:12:06.557ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [74,247,185,52,58,66,194,24,71,180,44,103,232,129,6,168,170,0,43,233,165,189,15,39,124,213,208,243,126,51,180,20],\"approvalCounter\": 29,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"74,247,185,52,58,66,194,24,71,180,44,103,232,129,6,168,170,0,43,233,165,189,15,39,124,213,208,243,126,51,180,20\"),29,false,true)"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[60,241,121,157,167,51,8,36,158,172,158,3,77,226,122,36,196,14,91,88,146,100,237,27,79,227,189,179,113,144,12,140]",
              "sol": "stringToBytes32(\"60,241,121,157,167,51,8,36,158,172,158,3,77,226,122,36,196,14,91,88,146,100,237,27,79,227,189,179,113,144,12,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.559ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"s3og7a\",\"sha256Hash\": [146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87],\"approvalCounter\": 1,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"s3og7a\",stringToBytes32(\"146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87\"),1,false,false)"
            },
            {
              "js": "[146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87]",
              "sol": "stringToBytes32(\"146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"s3og7a\",sha256Hash : [210,141,76,42,8,230,57,58,98,105,218,170,81,49,63,137,169,240,41,55,114,70,239,217,127,94,232,177,206,95,72,218],approvalCounter : 1,initialized : false,approved : false}",
                "sol": "Releases.Release(\"s3og7a\",stringToBytes32(\"210,141,76,42,8,230,57,58,98,105,218,170,81,49,63,137,169,240,41,55,114,70,239,217,127,94,232,177,206,95,72,218\"),1,false,false)"
              },
              {
                "js": "[146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87]",
                "sol": "stringToBytes32(\"146,36,251,62,107,181,87,132,235,43,162,214,175,97,5,78,74,211,29,26,156,35,124,33,94,237,125,224,17,146,222,87\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:12:06.561ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [94,10,130,108,14,84,31,72,16,43,0,230,206,130,83,118,236,10,37,144,165,229,158,236,174,227,136,117,180,252,99,157],\"approvalCounter\": 9999,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"94,10,130,108,14,84,31,72,16,43,0,230,206,130,83,118,236,10,37,144,165,229,158,236,174,227,136,117,180,252,99,157\"),9999,true,false)"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [94,10,130,108,14,84,31,72,16,43,0,230,206,130,83,118,236,10,37,144,165,229,158,236,174,227,136,117,180,252,99,157],approvalCounter : 9999,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"94,10,130,108,14,84,31,72,16,43,0,230,206,130,83,118,236,10,37,144,165,229,158,236,174,227,136,117,180,252,99,157\"),9999,true,true)"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"4jfu9\",\"sha256Hash\": [203,86,133,149,194,251,47,127,241,145,146,76,240,164,56,1,11,194,74,23,58,14,209,100,99,28,226,195,123,150,227,180],\"approvalCounter\": 257,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"4jfu9\",stringToBytes32(\"203,86,133,149,194,251,47,127,241,145,146,76,240,164,56,1,11,194,74,23,58,14,209,100,99,28,226,195,123,150,227,180\"),257,true,false)"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"4jfu9\",sha256Hash : [203,86,133,149,194,251,47,127,241,145,146,76,240,164,56,1,11,194,74,23,58,14,209,100,99,28,226,195,123,150,227,180],approvalCounter : 257,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"4jfu9\",stringToBytes32(\"203,86,133,149,194,251,47,127,241,145,146,76,240,164,56,1,11,194,74,23,58,14,209,100,99,28,226,195,123,150,227,180\"),257,true,true)"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:12:06.564ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:12:06.566ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[35,180,80,90,6,104,17,230,51,156,2,80,249,222,125,210,54,77,68,74,113,13,14,21,238,243,38,168,18,182,55,107]",
              "sol": "stringToBytes32(\"35,180,80,90,6,104,17,230,51,156,2,80,249,222,125,210,54,77,68,74,113,13,14,21,238,243,38,168,18,182,55,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[175,191,254,13,74,235,152,46,16,13,209,26,142,243,196,66,219,250,178,145,79,22,130,22,82,94,226,6,71,127,154,126]",
              "sol": "stringToBytes32(\"175,191,254,13,74,235,152,46,16,13,209,26,142,243,196,66,219,250,178,145,79,22,130,22,82,94,226,6,71,127,154,126\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[197,227,211,246,45,39,183,78,42,207,110,129,183,47,68,41,175,187,25,140,215,221,7,171,49,48,149,99,248,33,56,4]",
              "sol": "stringToBytes32(\"197,227,211,246,45,39,183,78,42,207,110,129,183,47,68,41,175,187,25,140,215,221,7,171,49,48,149,99,248,33,56,4\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[211,208,214,46,34,97,250,41,16,16,140,103,26,117,50,173,223,67,238,134,174,142,142,69,135,90,209,43,47,6,81,107]",
              "sol": "stringToBytes32(\"211,208,214,46,34,97,250,41,16,16,140,103,26,117,50,173,223,67,238,134,174,142,142,69,135,90,209,43,47,6,81,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[143,49,43,63,149,174,120,193,253,178,251,249,234,216,76,185,93,162,19,24,117,187,25,26,170,230,52,245,42,130,138,76]",
              "sol": "stringToBytes32(\"143,49,43,63,149,174,120,193,253,178,251,249,234,216,76,185,93,162,19,24,117,187,25,26,170,230,52,245,42,130,138,76\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[33,47,111,47,48,106,202,58,233,76,1,44,170,80,76,207,89,106,17,127,169,31,36,211,211,197,109,48,255,174,221,194]",
              "sol": "stringToBytes32(\"33,47,111,47,48,106,202,58,233,76,1,44,170,80,76,207,89,106,17,127,169,31,36,211,211,197,109,48,255,174,221,194\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.568ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[146,178,193,195,214,65,226,62,10,131,158,109,199,69,228,214,186,99,84,42,225,218,202,215,14,242,64,124,156,119,217,90]",
              "sol": "stringToBytes32(\"146,178,193,195,214,65,226,62,10,131,158,109,199,69,228,214,186,99,84,42,225,218,202,215,14,242,64,124,156,119,217,90\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"UsesExample\"",
                "sol": "\"UsesExample\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-13T12:12:06.569ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.570ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.570ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.570ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-13T12:12:06.570ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}