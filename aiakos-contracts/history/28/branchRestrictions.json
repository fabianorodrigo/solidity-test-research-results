,{
  "2020-11-12T23:35:00.562ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:35:06.326ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"IsLibrary\",\"sha256Hash\": [188,182,191,64,32,253,99,36,89,105,67,127,123,44,123,255,210,7,113,114,15,88,208,102,22,35,220,185,175,71,213,96],\"approvalCounter\": 10000,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"188,182,191,64,32,253,99,36,89,105,67,127,123,44,123,255,210,7,113,114,15,88,208,102,22,35,220,185,175,71,213,96\"),10000,false,true)"
            },
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[6,107,250,195,168,137,148,248,216,106,28,143,55,169,199,21,197,109,205,63,38,25,132,15,212,249,175,7,186,231,59,181]",
              "sol": "stringToBytes32(\"6,107,250,195,168,137,148,248,216,106,28,143,55,169,199,21,197,109,205,63,38,25,132,15,212,249,175,7,186,231,59,181\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.327ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130],\"approvalCounter\": 255,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130\"),255,true,false)"
            },
            {
              "js": "[137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130]",
              "sol": "stringToBytes32(\"137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [96,14,64,158,102,211,161,107,194,246,145,230,85,48,152,140,226,137,77,111,116,249,0,230,73,228,2,48,28,193,192,8],approvalCounter : 255,initialized : true,approved : false}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"96,14,64,158,102,211,161,107,194,246,145,230,85,48,152,140,226,137,77,111,116,249,0,230,73,228,2,48,28,193,192,8\"),255,true,false)"
              },
              {
                "js": "[137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130]",
                "sol": "stringToBytes32(\"137,91,179,159,82,143,173,26,85,4,245,105,51,162,66,240,196,104,147,61,116,132,242,37,112,114,191,157,39,253,144,130\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:35:06.328ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [166,127,97,154,249,199,177,223,177,133,140,82,251,7,112,31,243,171,123,109,183,19,198,89,101,18,128,37,1,248,237,41],\"approvalCounter\": 26,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"166,127,97,154,249,199,177,223,177,133,140,82,251,7,112,31,243,171,123,109,183,19,198,89,101,18,128,37,1,248,237,41\"),26,false,false)"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"ERC1820_ACCEPT_MAGIC\",sha256Hash : [166,127,97,154,249,199,177,223,177,133,140,82,251,7,112,31,243,171,123,109,183,19,198,89,101,18,128,37,1,248,237,41],approvalCounter : 26,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"166,127,97,154,249,199,177,223,177,133,140,82,251,7,112,31,243,171,123,109,183,19,198,89,101,18,128,37,1,248,237,41\"),26,false,true)"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [84,85,5,84,105,177,26,170,23,126,192,214,11,66,135,118,251,160,146,151,162,172,244,215,0,47,65,109,166,236,102,91],\"approvalCounter\": 96,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"84,85,5,84,105,177,26,170,23,126,192,214,11,66,135,118,251,160,146,151,162,172,244,215,0,47,65,109,166,236,102,91\"),96,false,false)"
            },
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [84,85,5,84,105,177,26,170,23,126,192,214,11,66,135,118,251,160,146,151,162,172,244,215,0,47,65,109,166,236,102,91],approvalCounter : 96,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"84,85,5,84,105,177,26,170,23,126,192,214,11,66,135,118,251,160,146,151,162,172,244,215,0,47,65,109,166,236,102,91\"),96,false,true)"
              },
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:35:06.330ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:35:06.332ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[23,99,10,226,149,122,79,163,94,39,73,151,133,147,224,58,41,239,130,24,21,55,228,4,115,168,129,252,224,93,118,178]",
              "sol": "stringToBytes32(\"23,99,10,226,149,122,79,163,94,39,73,151,133,147,224,58,41,239,130,24,21,55,228,4,115,168,129,252,224,93,118,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "[87,214,221,29,232,248,84,177,193,15,120,15,92,191,229,130,111,109,94,77,238,131,87,242,92,144,125,214,193,245,90,117]",
              "sol": "stringToBytes32(\"87,214,221,29,232,248,84,177,193,15,120,15,92,191,229,130,111,109,94,77,238,131,87,242,92,144,125,214,193,245,90,117\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "[128,19,198,54,232,73,121,186,238,56,197,11,96,215,113,80,55,73,137,12,13,247,125,84,217,35,219,44,132,37,142,146]",
              "sol": "stringToBytes32(\"128,19,198,54,232,73,121,186,238,56,197,11,96,215,113,80,55,73,137,12,13,247,125,84,217,35,219,44,132,37,142,146\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[44,6,220,71,197,167,206,218,182,25,155,249,31,128,142,247,182,167,135,229,197,146,212,81,133,210,216,252,220,63,171,139]",
              "sol": "stringToBytes32(\"44,6,220,71,197,167,206,218,182,25,155,249,31,128,142,247,182,167,135,229,197,146,212,81,133,210,216,252,220,63,171,139\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[93,39,105,237,60,213,240,65,88,87,31,104,186,209,37,134,150,103,238,237,71,217,177,186,0,114,199,62,43,7,176,220]",
              "sol": "stringToBytes32(\"93,39,105,237,60,213,240,65,88,87,31,104,186,209,37,134,150,103,238,237,71,217,177,186,0,114,199,62,43,7,176,220\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[224,45,47,182,180,0,201,148,143,201,150,131,160,36,88,247,12,106,80,78,165,248,23,153,129,198,48,85,105,149,225,212]",
              "sol": "stringToBytes32(\"224,45,47,182,180,0,201,148,143,201,150,131,160,36,88,247,12,106,80,78,165,248,23,153,129,198,48,85,105,149,225,212\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.333ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"l9ya1\"",
              "sol": "\"l9ya1\""
            },
            {
              "js": "[198,199,163,254,139,74,106,19,237,144,89,214,0,192,99,116,212,186,113,129,187,204,230,195,111,225,18,142,149,65,130,151]",
              "sol": "stringToBytes32(\"198,199,163,254,139,74,106,19,237,144,89,214,0,192,99,116,212,186,113,129,187,204,230,195,111,225,18,142,149,65,130,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"l9ya1\"",
                "sol": "\"l9ya1\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T23:35:06.334ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.334ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.334ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.334ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T23:35:06.334ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}