,{
  "2020-11-10T11:01:39.514ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "17",
              "sol": "17"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:01:45.569ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [58,142,176,84,11,160,164,44,128,107,188,186,203,22,192,5,21,215,211,123,149,178,116,94,44,178,228,18,141,165,98,189],\"approvalCounter\": 29,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"58,142,176,84,11,160,164,44,128,107,188,186,203,22,192,5,21,215,211,123,149,178,116,94,44,178,228,18,141,165,98,189\"),29,true,true)"
            },
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[238,125,254,100,43,69,214,232,147,178,211,52,78,255,16,9,181,13,103,201,12,221,81,160,243,58,201,76,35,47,21,80]",
              "sol": "stringToBytes32(\"238,125,254,100,43,69,214,232,147,178,211,52,78,255,16,9,181,13,103,201,12,221,81,160,243,58,201,76,35,47,21,80\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.570ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"minter\",\"sha256Hash\": [219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43],\"approvalCounter\": 3,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"minter\",stringToBytes32(\"219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43\"),3,true,false)"
            },
            {
              "js": "[219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43]",
              "sol": "stringToBytes32(\"219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"minter\",sha256Hash : [18,131,160,93,235,111,40,75,114,116,49,187,228,238,210,65,176,143,165,93,98,106,218,226,44,76,194,154,130,52,119,45],approvalCounter : 3,initialized : true,approved : false}",
                "sol": "Releases.Release(\"minter\",stringToBytes32(\"18,131,160,93,235,111,40,75,114,116,49,187,228,238,210,65,176,143,165,93,98,106,218,226,44,76,194,154,130,52,119,45\"),3,true,false)"
              },
              {
                "js": "[219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43]",
                "sol": "stringToBytes32(\"219,72,88,232,17,171,132,119,85,157,101,80,240,15,115,5,185,243,244,149,227,120,55,45,159,8,82,222,128,113,2,43\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:01:45.571ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"PayableExample\",\"sha256Hash\": [101,129,178,61,155,114,206,230,17,186,38,109,49,251,47,45,247,26,233,209,208,129,250,187,145,105,234,239,29,152,192,208],\"approvalCounter\": 29,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"101,129,178,61,155,114,206,230,17,186,38,109,49,251,47,45,247,26,233,209,208,129,250,187,145,105,234,239,29,152,192,208\"),29,true,false)"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"PayableExample\",sha256Hash : [101,129,178,61,155,114,206,230,17,186,38,109,49,251,47,45,247,26,233,209,208,129,250,187,145,105,234,239,29,152,192,208],approvalCounter : 29,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"101,129,178,61,155,114,206,230,17,186,38,109,49,251,47,45,247,26,233,209,208,129,250,187,145,105,234,239,29,152,192,208\"),29,true,true)"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"bouncer\",\"sha256Hash\": [251,128,187,177,53,232,46,186,124,116,80,17,141,5,8,30,51,213,217,77,107,13,108,98,236,111,209,154,56,197,249,103],\"approvalCounter\": 254,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"251,128,187,177,53,232,46,186,124,116,80,17,141,5,8,30,51,213,217,77,107,13,108,98,236,111,209,154,56,197,249,103\"),254,true,false)"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"bouncer\",sha256Hash : [251,128,187,177,53,232,46,186,124,116,80,17,141,5,8,30,51,213,217,77,107,13,108,98,236,111,209,154,56,197,249,103],approvalCounter : 254,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"251,128,187,177,53,232,46,186,124,116,80,17,141,5,8,30,51,213,217,77,107,13,108,98,236,111,209,154,56,197,249,103\"),254,true,true)"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:01:45.573ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:01:45.575ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[101,224,32,27,18,130,137,191,43,252,45,28,242,10,6,82,172,150,62,192,49,129,18,112,179,62,212,204,20,84,98,178]",
              "sol": "stringToBytes32(\"101,224,32,27,18,130,137,191,43,252,45,28,242,10,6,82,172,150,62,192,49,129,18,112,179,62,212,204,20,84,98,178\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[225,227,42,128,215,153,127,252,184,152,152,81,178,45,55,84,190,168,153,108,193,139,75,109,57,230,205,234,125,173,172,232]",
              "sol": "stringToBytes32(\"225,227,42,128,215,153,127,252,184,152,152,81,178,45,55,84,190,168,153,108,193,139,75,109,57,230,205,234,125,173,172,232\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[49,182,142,238,217,34,7,111,141,105,211,238,152,152,134,128,222,132,75,123,101,148,156,152,221,248,109,223,43,13,87,107]",
              "sol": "stringToBytes32(\"49,182,142,238,217,34,7,111,141,105,211,238,152,152,134,128,222,132,75,123,101,148,156,152,221,248,109,223,43,13,87,107\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[135,34,18,70,144,117,60,117,78,44,112,150,130,172,110,90,134,8,236,237,172,26,10,216,2,68,24,88,118,117,18,209]",
              "sol": "stringToBytes32(\"135,34,18,70,144,117,60,117,78,44,112,150,130,172,110,90,134,8,236,237,172,26,10,216,2,68,24,88,118,117,18,209\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[229,64,3,249,97,239,1,145,30,212,220,72,25,245,90,154,218,181,101,7,232,3,156,197,209,243,19,246,61,164,42,34]",
              "sol": "stringToBytes32(\"229,64,3,249,97,239,1,145,30,212,220,72,25,245,90,154,218,181,101,7,232,3,156,197,209,243,19,246,61,164,42,34\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[79,208,190,33,5,150,11,171,205,242,38,252,161,127,195,198,223,255,14,89,236,171,187,254,83,191,182,225,14,211,181,50]",
              "sol": "stringToBytes32(\"79,208,190,33,5,150,11,171,205,242,38,252,161,127,195,198,223,255,14,89,236,171,187,254,83,191,182,225,14,211,181,50\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.576ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[49,14,148,181,136,21,233,9,149,141,187,90,224,69,16,163,208,177,126,147,0,66,200,235,4,43,127,174,210,42,28,140]",
              "sol": "stringToBytes32(\"49,14,148,181,136,21,233,9,149,141,187,90,224,69,16,163,208,177,126,147,0,66,200,235,4,43,127,174,210,42,28,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"superuser\"",
                "sol": "\"superuser\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T11:01:45.577ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"637v05\"",
              "sol": "\"637v05\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.577ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.577ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.577ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T11:01:45.578ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}