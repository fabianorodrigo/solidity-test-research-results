,{
  "2020-11-12T21:32:16.645ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:32:22.482ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"bouncer\",\"sha256Hash\": [97,110,240,207,67,131,19,214,227,71,136,13,26,40,36,5,183,150,209,161,202,90,69,78,9,64,130,201,102,75,80,194],\"approvalCounter\": 3,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"97,110,240,207,67,131,19,214,227,71,136,13,26,40,36,5,183,150,209,161,202,90,69,78,9,64,130,201,102,75,80,194\"),3,true,false)"
            },
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[210,149,86,158,234,34,166,54,154,149,124,223,176,121,39,233,147,8,67,123,7,107,234,46,23,156,199,114,9,84,130,26]",
              "sol": "stringToBytes32(\"210,149,86,158,234,34,166,54,154,149,124,223,176,121,39,233,147,8,67,123,7,107,234,46,23,156,199,114,9,84,130,26\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.483ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"IsLibrary\",\"sha256Hash\": [73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152],\"approvalCounter\": 66,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152\"),66,true,false)"
            },
            {
              "js": "[73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152]",
              "sol": "stringToBytes32(\"73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"IsLibrary\",sha256Hash : [123,140,223,93,195,60,25,129,26,208,153,82,112,224,228,33,190,232,238,52,133,231,180,44,187,238,92,213,227,192,61,130],approvalCounter : 66,initialized : true,approved : false}",
                "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"123,140,223,93,195,60,25,129,26,208,153,82,112,224,228,33,190,232,238,52,133,231,180,44,187,238,92,213,227,192,61,130\"),66,true,false)"
              },
              {
                "js": "[73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152]",
                "sol": "stringToBytes32(\"73,151,94,175,130,205,219,113,34,232,25,28,5,255,111,79,38,37,241,60,124,124,207,61,245,191,254,215,17,116,162,152\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:32:22.484ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"bouncer\",\"sha256Hash\": [120,216,180,174,28,121,238,237,214,2,26,83,250,71,64,74,172,121,196,90,43,52,135,236,30,91,10,154,105,136,189,138],\"approvalCounter\": 1337,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"120,216,180,174,28,121,238,237,214,2,26,83,250,71,64,74,172,121,196,90,43,52,135,236,30,91,10,154,105,136,189,138\"),1337,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"bouncer\",sha256Hash : [120,216,180,174,28,121,238,237,214,2,26,83,250,71,64,74,172,121,196,90,43,52,135,236,30,91,10,154,105,136,189,138],approvalCounter : 1337,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"bouncer\",stringToBytes32(\"120,216,180,174,28,121,238,237,214,2,26,83,250,71,64,74,172,121,196,90,43,52,135,236,30,91,10,154,105,136,189,138\"),1337,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"PayableExample\",\"sha256Hash\": [81,223,194,210,25,7,253,24,48,1,248,41,100,140,225,207,88,233,17,116,45,235,31,222,152,245,71,62,243,12,31,143],\"approvalCounter\": 26,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"81,223,194,210,25,7,253,24,48,1,248,41,100,140,225,207,88,233,17,116,45,235,31,222,152,245,71,62,243,12,31,143\"),26,true,false)"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"PayableExample\",sha256Hash : [81,223,194,210,25,7,253,24,48,1,248,41,100,140,225,207,88,233,17,116,45,235,31,222,152,245,71,62,243,12,31,143],approvalCounter : 26,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"PayableExample\",stringToBytes32(\"81,223,194,210,25,7,253,24,48,1,248,41,100,140,225,207,88,233,17,116,45,235,31,222,152,245,71,62,243,12,31,143\"),26,true,true)"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:32:22.486ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:32:22.488ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[38,233,39,92,230,77,166,193,220,167,141,78,55,145,82,178,144,15,36,135,106,250,58,26,182,64,14,227,206,31,221,28]",
              "sol": "stringToBytes32(\"38,233,39,92,230,77,166,193,220,167,141,78,55,145,82,178,144,15,36,135,106,250,58,26,182,64,14,227,206,31,221,28\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"juw94d\"",
              "sol": "\"juw94d\""
            },
            {
              "js": "[136,73,195,43,94,23,197,252,111,175,7,231,119,53,200,62,116,159,207,193,92,54,46,207,195,4,229,83,59,2,106,68]",
              "sol": "stringToBytes32(\"136,73,195,43,94,23,197,252,111,175,7,231,119,53,200,62,116,159,207,193,92,54,46,207,195,4,229,83,59,2,106,68\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[133,178,146,109,181,175,169,115,40,123,25,11,120,45,60,133,210,54,79,30,184,148,18,81,24,149,151,135,79,55,11,85]",
              "sol": "stringToBytes32(\"133,178,146,109,181,175,169,115,40,123,25,11,120,45,60,133,210,54,79,30,184,148,18,81,24,149,151,135,79,55,11,85\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"whitelist\"",
              "sol": "\"whitelist\""
            },
            {
              "js": "[97,135,227,100,92,200,147,25,224,125,251,109,113,154,109,116,21,185,61,142,198,241,56,46,0,240,103,220,134,52,6,197]",
              "sol": "stringToBytes32(\"97,135,227,100,92,200,147,25,224,125,251,109,113,154,109,116,21,185,61,142,198,241,56,46,0,240,103,220,134,52,6,197\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[213,153,250,63,236,79,215,169,231,74,11,125,83,198,67,42,85,1,238,222,183,176,246,189,205,242,27,212,253,116,22,20]",
              "sol": "stringToBytes32(\"213,153,250,63,236,79,215,169,231,74,11,125,83,198,67,42,85,1,238,222,183,176,246,189,205,242,27,212,253,116,22,20\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[176,170,241,126,124,95,57,168,77,212,82,189,160,2,135,205,88,5,112,200,98,104,176,164,0,51,24,180,43,134,247,151]",
              "sol": "stringToBytes32(\"176,170,241,126,124,95,57,168,77,212,82,189,160,2,135,205,88,5,112,200,98,104,176,164,0,51,24,180,43,134,247,151\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.489ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[114,134,146,60,26,169,49,104,191,104,67,23,178,91,61,227,191,7,123,26,255,144,136,185,229,168,207,6,160,1,130,78]",
              "sol": "stringToBytes32(\"114,134,146,60,26,169,49,104,191,104,67,23,178,91,61,227,191,7,123,26,255,144,136,185,229,168,207,6,160,1,130,78\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"Example\"",
                "sol": "\"Example\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T21:32:22.490ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.490ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.490ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.490ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T21:32:22.491ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}