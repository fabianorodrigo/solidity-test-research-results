,{
  "2020-11-11T02:33:05.230ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:33:11.436ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"IsLibrary\",\"sha256Hash\": [45,184,204,174,127,19,164,163,246,243,9,56,144,253,112,120,46,229,98,116,92,91,136,25,183,62,112,90,37,55,224,166],\"approvalCounter\": 1,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"IsLibrary\",stringToBytes32(\"45,184,204,174,127,19,164,163,246,243,9,56,144,253,112,120,46,229,98,116,92,91,136,25,183,62,112,90,37,55,224,166\"),1,false,true)"
            },
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[104,251,219,1,225,83,177,58,192,175,3,174,2,91,40,46,246,207,248,56,51,244,209,117,163,198,243,123,253,240,96,238]",
              "sol": "stringToBytes32(\"104,251,219,1,225,83,177,58,192,175,3,174,2,91,40,46,246,207,248,56,51,244,209,117,163,198,243,123,253,240,96,238\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.437ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225],\"approvalCounter\": 27,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225\"),27,false,false)"
            },
            {
              "js": "[168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225]",
              "sol": "stringToBytes32(\"168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"Example\",sha256Hash : [8,192,232,5,239,2,22,209,34,80,51,148,14,86,84,162,85,90,122,15,95,243,185,155,177,41,4,127,190,24,182,67],approvalCounter : 27,initialized : false,approved : false}",
                "sol": "Releases.Release(\"Example\",stringToBytes32(\"8,192,232,5,239,2,22,209,34,80,51,148,14,86,84,162,85,90,122,15,95,243,185,155,177,41,4,127,190,24,182,67\"),27,false,false)"
              },
              {
                "js": "[168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225]",
                "sol": "stringToBytes32(\"168,67,158,254,175,233,41,112,169,104,29,48,125,140,206,70,165,51,220,122,254,24,36,142,245,159,109,243,8,48,138,225\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:33:11.439ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"RevertWithReason\",\"sha256Hash\": [103,188,125,35,175,165,27,29,100,66,248,150,32,253,15,181,102,82,52,142,5,209,13,190,227,92,44,180,56,205,100,254],\"approvalCounter\": 1532892063,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"103,188,125,35,175,165,27,29,100,66,248,150,32,253,15,181,102,82,52,142,5,209,13,190,227,92,44,180,56,205,100,254\"),1532892063,false,false)"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"RevertWithReason\",sha256Hash : [103,188,125,35,175,165,27,29,100,66,248,150,32,253,15,181,102,82,52,142,5,209,13,190,227,92,44,180,56,205,100,254],approvalCounter : 1532892063,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"RevertWithReason\",stringToBytes32(\"103,188,125,35,175,165,27,29,100,66,248,150,32,253,15,181,102,82,52,142,5,209,13,190,227,92,44,180,56,205,100,254\"),1532892063,false,true)"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"UsesExample\",\"sha256Hash\": [34,209,196,180,133,202,101,245,239,210,242,164,160,42,10,87,238,248,32,43,209,84,64,24,60,100,45,123,234,18,214,175],\"approvalCounter\": 26,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"34,209,196,180,133,202,101,245,239,210,242,164,160,42,10,87,238,248,32,43,209,84,64,24,60,100,45,123,234,18,214,175\"),26,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"UsesExample\",sha256Hash : [34,209,196,180,133,202,101,245,239,210,242,164,160,42,10,87,238,248,32,43,209,84,64,24,60,100,45,123,234,18,214,175],approvalCounter : 26,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"UsesExample\",stringToBytes32(\"34,209,196,180,133,202,101,245,239,210,242,164,160,42,10,87,238,248,32,43,209,84,64,24,60,100,45,123,234,18,214,175\"),26,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:33:11.441ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:33:11.442ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[217,71,181,3,64,150,194,193,174,183,99,237,197,88,4,3,115,156,109,221,226,245,145,93,121,197,173,53,214,166,92,254]",
              "sol": "stringToBytes32(\"217,71,181,3,64,150,194,193,174,183,99,237,197,88,4,3,115,156,109,221,226,245,145,93,121,197,173,53,214,166,92,254\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[16,201,219,163,52,173,182,92,80,230,247,86,71,142,54,142,216,45,185,234,115,32,70,61,176,178,89,240,69,55,209,167]",
              "sol": "stringToBytes32(\"16,201,219,163,52,173,182,92,80,230,247,86,71,142,54,142,216,45,185,234,115,32,70,61,176,178,89,240,69,55,209,167\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[196,243,5,78,246,2,193,244,242,251,89,174,86,165,255,171,197,45,229,185,30,91,57,177,222,47,48,12,107,19,173,7]",
              "sol": "stringToBytes32(\"196,243,5,78,246,2,193,244,242,251,89,174,86,165,255,171,197,45,229,185,30,91,57,177,222,47,48,12,107,19,173,7\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[152,161,243,234,76,247,201,224,170,80,194,151,180,250,184,162,7,114,99,41,45,232,249,65,222,64,233,194,153,59,209,184]",
              "sol": "stringToBytes32(\"152,161,243,234,76,247,201,224,170,80,194,151,180,250,184,162,7,114,99,41,45,232,249,65,222,64,233,194,153,59,209,184\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[111,4,202,15,9,194,250,191,168,22,38,174,43,208,182,240,154,95,46,245,185,152,176,190,106,102,122,1,171,202,249,35]",
              "sol": "stringToBytes32(\"111,4,202,15,9,194,250,191,168,22,38,174,43,208,182,240,154,95,46,245,185,152,176,190,106,102,122,1,171,202,249,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[218,196,237,186,191,65,68,63,93,6,226,115,107,80,63,131,249,156,117,190,212,21,134,86,105,113,110,140,118,167,55,97]",
              "sol": "stringToBytes32(\"218,196,237,186,191,65,68,63,93,6,226,115,107,80,63,131,249,156,117,190,212,21,134,86,105,113,110,140,118,167,55,97\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.443ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "[73,18,147,233,168,123,203,188,150,139,35,160,206,164,72,110,2,139,240,211,188,189,225,228,239,242,5,141,209,36,51,140]",
              "sol": "stringToBytes32(\"73,18,147,233,168,123,203,188,150,139,35,160,206,164,72,110,2,139,240,211,188,189,225,228,239,242,5,141,209,36,51,140\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"ERC1820_ACCEPT_MAGIC\"",
                "sol": "\"ERC1820_ACCEPT_MAGIC\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:33:11.444ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.444ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.445ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.445ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:33:11.445ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}