,{
  "2020-11-12T14:06:14.875ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:06:20.818ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"ERC1820_ACCEPT_MAGIC\",\"sha256Hash\": [38,5,144,223,1,11,76,23,225,185,237,222,73,187,209,109,184,117,255,36,5,23,148,113,70,9,9,167,67,115,167,27],\"approvalCounter\": 4038714811,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"ERC1820_ACCEPT_MAGIC\",stringToBytes32(\"38,5,144,223,1,11,76,23,225,185,237,222,73,187,209,109,184,117,255,36,5,23,148,113,70,9,9,167,67,115,167,27\"),4038714811,false,true)"
            },
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[236,189,73,218,101,4,26,2,237,241,187,44,183,194,173,161,156,222,140,251,155,84,249,170,45,121,212,80,230,178,204,175]",
              "sol": "stringToBytes32(\"236,189,73,218,101,4,26,2,237,241,187,44,183,194,173,161,156,222,140,251,155,84,249,170,45,121,212,80,230,178,204,175\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.819ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"4dxg2j\",\"sha256Hash\": [197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206],\"approvalCounter\": 27,\"initialized\": true,\"approved\": true}",
              "sol": "Releases.Release(\"4dxg2j\",stringToBytes32(\"197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206\"),27,true,true)"
            },
            {
              "js": "[197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206]",
              "sol": "stringToBytes32(\"197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"4dxg2j\",sha256Hash : [108,86,174,183,199,181,12,220,202,71,65,219,54,254,225,129,165,118,194,248,246,96,241,125,74,254,235,32,139,63,97,226],approvalCounter : 27,initialized : true,approved : true}",
                "sol": "Releases.Release(\"4dxg2j\",stringToBytes32(\"108,86,174,183,199,181,12,220,202,71,65,219,54,254,225,129,165,118,194,248,246,96,241,125,74,254,235,32,139,63,97,226\"),27,true,true)"
              },
              {
                "js": "[197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206]",
                "sol": "stringToBytes32(\"197,194,173,23,88,199,195,208,150,217,238,69,196,216,77,37,136,166,190,25,230,79,210,118,234,25,40,91,208,73,134,206\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:06:20.820ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [175,4,105,209,21,184,12,43,117,197,226,181,166,119,72,51,119,98,33,143,20,25,254,21,54,219,56,164,180,96,39,135],\"approvalCounter\": 255,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"175,4,105,209,21,184,12,43,117,197,226,181,166,119,72,51,119,98,33,143,20,25,254,21,54,219,56,164,180,96,39,135\"),255,false,false)"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"Example\",sha256Hash : [175,4,105,209,21,184,12,43,117,197,226,181,166,119,72,51,119,98,33,143,20,25,254,21,54,219,56,164,180,96,39,135],approvalCounter : 255,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"Example\",stringToBytes32(\"175,4,105,209,21,184,12,43,117,197,226,181,166,119,72,51,119,98,33,143,20,25,254,21,54,219,56,164,180,96,39,135\"),255,false,true)"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"\\x19Ethereum Signed Message:\\n32\",\"sha256Hash\": [146,39,199,86,183,135,106,11,162,232,76,245,98,46,39,120,121,124,215,30,80,199,134,112,130,42,204,99,10,145,59,88],\"approvalCounter\": 1532892062,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\\n32\",stringToBytes32(\"146,39,199,86,183,135,106,11,162,232,76,245,98,46,39,120,121,124,215,30,80,199,134,112,130,42,204,99,10,145,59,88\"),1532892062,true,false)"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"\\x19Ethereum Signed Message:\n32\",sha256Hash : [146,39,199,86,183,135,106,11,162,232,76,245,98,46,39,120,121,124,215,30,80,199,134,112,130,42,204,99,10,145,59,88],approvalCounter : 1532892062,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\n32\",stringToBytes32(\"146,39,199,86,183,135,106,11,162,232,76,245,98,46,39,120,121,124,215,30,80,199,134,112,130,42,204,99,10,145,59,88\"),1532892062,true,true)"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:06:20.822ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:06:20.823ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"4lvaff\"",
              "sol": "\"4lvaff\""
            },
            {
              "js": "[44,58,36,248,102,254,15,178,18,210,178,17,226,186,235,94,32,8,180,45,46,243,70,32,253,46,218,252,105,57,32,185]",
              "sol": "stringToBytes32(\"44,58,36,248,102,254,15,178,18,210,178,17,226,186,235,94,32,8,180,45,46,243,70,32,253,46,218,252,105,57,32,185\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"ag7lrd\"",
              "sol": "\"ag7lrd\""
            },
            {
              "js": "[154,109,172,7,26,139,239,22,47,205,56,179,196,13,230,168,102,3,81,4,121,122,94,65,145,27,38,91,6,51,49,104]",
              "sol": "stringToBytes32(\"154,109,172,7,26,139,239,22,47,205,56,179,196,13,230,168,102,3,81,4,121,122,94,65,145,27,38,91,6,51,49,104\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[249,253,89,61,196,17,216,60,102,65,137,62,219,62,145,57,217,4,8,229,64,65,21,91,229,15,70,250,175,121,184,35]",
              "sol": "stringToBytes32(\"249,253,89,61,196,17,216,60,102,65,137,62,219,62,145,57,217,4,8,229,64,65,21,91,229,15,70,250,175,121,184,35\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[209,195,83,185,131,172,21,82,122,204,220,64,201,143,157,154,200,129,197,24,108,221,23,88,179,52,89,146,226,122,229,64]",
              "sol": "stringToBytes32(\"209,195,83,185,131,172,21,82,122,204,220,64,201,143,157,154,200,129,197,24,108,221,23,88,179,52,89,146,226,122,229,64\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[145,59,161,62,23,128,40,217,155,210,211,120,233,11,35,253,175,253,51,183,76,2,11,71,62,112,171,5,253,122,16,39]",
              "sol": "stringToBytes32(\"145,59,161,62,23,128,40,217,155,210,211,120,233,11,35,253,175,253,51,183,76,2,11,71,62,112,171,5,253,122,16,39\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[8,147,169,67,100,122,199,76,130,3,206,233,191,163,57,215,56,117,222,202,211,187,196,91,43,178,34,190,216,62,157,169]",
              "sol": "stringToBytes32(\"8,147,169,67,100,122,199,76,130,3,206,233,191,163,57,215,56,117,222,202,211,187,196,91,43,178,34,190,216,62,157,169\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.825ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[3,234,125,20,68,100,252,179,154,49,164,174,79,97,126,171,117,211,199,108,167,48,255,3,208,78,36,17,166,54,204,21]",
              "sol": "stringToBytes32(\"3,234,125,20,68,100,252,179,154,49,164,174,79,97,126,171,117,211,199,108,167,48,255,3,208,78,36,17,166,54,204,21\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"PayableExample\"",
                "sol": "\"PayableExample\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T14:06:20.825ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"ERC1820_ACCEPT_MAGIC\"",
              "sol": "\"ERC1820_ACCEPT_MAGIC\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.826ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.826ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.826ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T14:06:20.826ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}