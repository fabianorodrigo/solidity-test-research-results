,{
  "2020-11-12T19:27:37.674ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T19:27:43.392ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"whitelist\",\"sha256Hash\": [69,42,85,95,80,190,51,152,27,111,165,128,132,107,63,229,90,214,51,189,69,178,42,99,109,45,84,82,17,195,98,81],\"approvalCounter\": 19,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"69,42,85,95,80,190,51,152,27,111,165,128,132,107,63,229,90,214,51,189,69,178,42,99,109,45,84,82,17,195,98,81\"),19,false,false)"
            },
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[209,42,181,205,174,47,191,205,44,16,159,108,71,75,111,112,26,8,116,126,162,153,177,34,201,224,205,101,253,197,166,51]",
              "sol": "stringToBytes32(\"209,42,181,205,174,47,191,205,44,16,159,108,71,75,111,112,26,8,116,126,162,153,177,34,201,224,205,101,253,197,166,51\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.393ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"minter\",\"sha256Hash\": [231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233],\"approvalCounter\": 1336,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"minter\",stringToBytes32(\"231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233\"),1336,false,true)"
            },
            {
              "js": "[231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233]",
              "sol": "stringToBytes32(\"231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"minter\",sha256Hash : [77,27,31,201,46,41,235,238,117,3,41,183,226,54,139,7,202,53,135,234,3,245,185,114,217,126,171,190,194,83,95,110],approvalCounter : 1336,initialized : false,approved : true}",
                "sol": "Releases.Release(\"minter\",stringToBytes32(\"77,27,31,201,46,41,235,238,117,3,41,183,226,54,139,7,202,53,135,234,3,245,185,114,217,126,171,190,194,83,95,110\"),1336,false,true)"
              },
              {
                "js": "[231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233]",
                "sol": "stringToBytes32(\"231,165,192,173,126,232,133,122,51,194,38,84,74,117,177,73,164,60,50,1,117,54,154,247,146,236,54,45,140,226,240,233\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T19:27:43.394ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"initialized\",\"sha256Hash\": [31,68,140,130,255,86,62,23,31,153,254,234,69,217,120,69,245,113,148,40,115,236,47,181,29,246,121,158,8,77,78,22],\"approvalCounter\": 10000,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"initialized\",stringToBytes32(\"31,68,140,130,255,86,62,23,31,153,254,234,69,217,120,69,245,113,148,40,115,236,47,181,29,246,121,158,8,77,78,22\"),10000,false,false)"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"initialized\",sha256Hash : [31,68,140,130,255,86,62,23,31,153,254,234,69,217,120,69,245,113,148,40,115,236,47,181,29,246,121,158,8,77,78,22],approvalCounter : 10000,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"initialized\",stringToBytes32(\"31,68,140,130,255,86,62,23,31,153,254,234,69,217,120,69,245,113,148,40,115,236,47,181,29,246,121,158,8,77,78,22\"),10000,false,true)"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"whitelist\",\"sha256Hash\": [246,120,119,35,144,93,73,134,212,55,124,145,125,32,164,46,132,96,24,157,114,51,251,180,193,221,173,170,122,175,84,214],\"approvalCounter\": 1336,\"initialized\": false,\"approved\": false}",
              "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"246,120,119,35,144,93,73,134,212,55,124,145,125,32,164,46,132,96,24,157,114,51,251,180,193,221,173,170,122,175,84,214\"),1336,false,false)"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"whitelist\",sha256Hash : [246,120,119,35,144,93,73,134,212,55,124,145,125,32,164,46,132,96,24,157,114,51,251,180,193,221,173,170,122,175,84,214],approvalCounter : 1336,initialized : false,approved : \"true\"}",
                "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"246,120,119,35,144,93,73,134,212,55,124,145,125,32,164,46,132,96,24,157,114,51,251,180,193,221,173,170,122,175,84,214\"),1336,false,true)"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T19:27:43.397ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T19:27:43.398ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[109,92,14,171,105,168,60,44,33,88,161,119,91,106,164,94,43,253,211,24,246,114,178,75,118,113,65,26,170,24,39,84]",
              "sol": "stringToBytes32(\"109,92,14,171,105,168,60,44,33,88,161,119,91,106,164,94,43,253,211,24,246,114,178,75,118,113,65,26,170,24,39,84\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"minter\"",
              "sol": "\"minter\""
            },
            {
              "js": "[171,105,157,241,49,171,53,190,88,193,32,111,97,203,75,249,91,184,9,135,128,134,165,43,198,46,25,38,134,146,232,247]",
              "sol": "stringToBytes32(\"171,105,157,241,49,171,53,190,88,193,32,111,97,203,75,249,91,184,9,135,128,134,165,43,198,46,25,38,134,146,232,247\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[122,173,28,43,252,100,218,120,87,76,52,128,36,247,227,53,173,97,214,49,107,135,135,188,141,73,90,80,131,118,154,143]",
              "sol": "stringToBytes32(\"122,173,28,43,252,100,218,120,87,76,52,128,36,247,227,53,173,97,214,49,107,135,135,188,141,73,90,80,131,118,154,143\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[194,169,1,119,139,176,249,212,4,248,149,130,100,84,47,162,84,208,247,7,183,174,173,211,3,127,79,207,225,164,57,23]",
              "sol": "stringToBytes32(\"194,169,1,119,139,176,249,212,4,248,149,130,100,84,47,162,84,208,247,7,183,174,173,211,3,127,79,207,225,164,57,23\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[158,61,35,9,232,156,92,41,50,215,95,64,62,210,100,25,60,86,216,22,92,194,22,221,196,240,28,125,179,79,12,42]",
              "sol": "stringToBytes32(\"158,61,35,9,232,156,92,41,50,215,95,64,62,210,100,25,60,86,216,22,92,194,22,221,196,240,28,125,179,79,12,42\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[113,153,215,57,136,10,247,70,157,214,249,20,224,197,25,179,249,116,192,129,61,148,176,227,232,77,156,129,131,170,130,52]",
              "sol": "stringToBytes32(\"113,153,215,57,136,10,247,70,157,214,249,20,224,197,25,179,249,116,192,129,61,148,176,227,232,77,156,129,131,170,130,52\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.399ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"initialized\"",
              "sol": "\"initialized\""
            },
            {
              "js": "[242,94,116,12,149,14,229,10,187,52,31,3,11,225,58,115,162,16,172,37,173,131,253,176,122,200,221,113,94,90,231,205]",
              "sol": "stringToBytes32(\"242,94,116,12,149,14,229,10,187,52,31,3,11,225,58,115,162,16,172,37,173,131,253,176,122,200,221,113,94,90,231,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"initialized\"",
                "sol": "\"initialized\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T19:27:43.400ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.400ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.400ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.401ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T19:27:43.401ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}