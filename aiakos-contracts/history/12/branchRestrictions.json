,{
  "2020-11-11T04:45:20.917ZAiakos.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint) WHEN _requiredNumberOfMaintainers>0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint) when NOT comply with: _requiredNumberOfMaintainers > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:45:27.118ZProxyReleases.testinit": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testinit(Releases.Release,string,bytes32)",
          "parameters": [
            {
              "js": "{\"version\": \"Example\",\"sha256Hash\": [105,121,101,3,191,227,126,87,39,68,11,133,136,84,162,153,38,172,109,6,181,155,183,189,41,88,226,206,212,97,212,201],\"approvalCounter\": 95,\"initialized\": false,\"approved\": true}",
              "sol": "Releases.Release(\"Example\",stringToBytes32(\"105,121,101,3,191,227,126,87,39,68,11,133,136,84,162,153,38,172,109,6,181,155,183,189,41,88,226,206,212,97,212,201\"),95,false,true)"
            },
            {
              "js": "\"bouncer\"",
              "sol": "\"bouncer\""
            },
            {
              "js": "[229,60,45,50,87,30,141,188,97,223,99,87,155,189,53,90,236,136,238,51,70,216,162,63,95,142,251,158,207,20,45,242]",
              "sol": "stringToBytes32(\"229,60,45,50,87,30,141,188,97,223,99,87,155,189,53,90,236,136,238,51,70,216,162,63,95,142,251,158,207,20,45,242\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.120ZProxyReleases.testcheck": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testcheck(Releases.Release,bytes32) WHEN release.sha256Hash==sha256Hash",
          "parameters": [
            {
              "js": "{\"version\": \"\\x19Ethereum Signed Message:\\n32\",\"sha256Hash\": [87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237],\"approvalCounter\": 18,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\\n32\",stringToBytes32(\"87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237\"),18,true,false)"
            },
            {
              "js": "[87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237]",
              "sol": "stringToBytes32(\"87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testcheck(Releases.Release,bytes32) when NOT comply with: release.sha256Hash == sha256Hash",
            "parameters": [
              {
                "js": "{version : \"\\x19Ethereum Signed Message:\n32\",sha256Hash : [223,81,190,149,176,96,27,46,115,202,189,119,142,0,171,243,208,68,196,246,12,128,212,173,152,131,222,58,68,193,21,67],approvalCounter : 18,initialized : true,approved : false}",
                "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\n32\",stringToBytes32(\"223,81,190,149,176,96,27,46,115,202,189,119,142,0,171,243,208,68,196,246,12,128,212,173,152,131,222,58,68,193,21,67\"),18,true,false)"
              },
              {
                "js": "[87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237]",
                "sol": "stringToBytes32(\"87,226,6,82,16,0,65,135,193,146,142,193,229,110,117,162,115,51,179,87,192,114,231,141,43,136,10,52,201,179,70,237\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:45:27.121ZProxyReleases.testaddApproval": {
    "branches": {
      "0": {
        "branch": {
          "loc": "64-68",
          "restrictions": [
            "release.approvalCounter == requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter==requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"whitelist\",\"sha256Hash\": [21,23,11,58,59,143,74,161,237,149,185,152,124,158,239,35,150,70,83,85,108,197,182,75,165,97,116,139,52,117,26,67],\"approvalCounter\": 65,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"21,23,11,58,59,143,74,161,237,149,185,152,124,158,239,35,150,70,83,85,108,197,182,75,165,97,116,139,52,117,26,67\"),65,true,false)"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"whitelist\",sha256Hash : [21,23,11,58,59,143,74,161,237,149,185,152,124,158,239,35,150,70,83,85,108,197,182,75,165,97,116,139,52,117,26,67],approvalCounter : 65,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"whitelist\",stringToBytes32(\"21,23,11,58,59,143,74,161,237,149,185,152,124,158,239,35,150,70,83,85,108,197,182,75,165,97,116,139,52,117,26,67\"),65,true,true)"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "release.approvalCounter != requiredNumberOfMaintainers"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testaddApproval(Releases.Release,address,uint) WHEN release.approvalCounter!=requiredNumberOfMaintainers,release.approved!=true",
          "parameters": [
            {
              "js": "{\"version\": \"\\x19Ethereum Signed Message:\\n32\",\"sha256Hash\": [196,200,247,240,211,159,140,170,163,81,52,99,11,135,87,202,139,111,56,93,212,45,193,48,186,100,156,236,139,26,246,202],\"approvalCounter\": 95,\"initialized\": true,\"approved\": false}",
              "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\\n32\",stringToBytes32(\"196,200,247,240,211,159,140,170,163,81,52,99,11,135,87,202,139,111,56,93,212,45,193,48,186,100,156,236,139,26,246,202\"),95,true,false)"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testaddApproval(Releases.Release,address,uint) when NOT comply with: release.approved != true",
            "parameters": [
              {
                "js": "{version : \"\\x19Ethereum Signed Message:\n32\",sha256Hash : [196,200,247,240,211,159,140,170,163,81,52,99,11,135,87,202,139,111,56,93,212,45,193,48,186,100,156,236,139,26,246,202],approvalCounter : 95,initialized : true,approved : \"true\"}",
                "sol": "Releases.Release(\"\\x19Ethereum Signed Message:\n32\",stringToBytes32(\"196,200,247,240,211,159,140,170,163,81,52,99,11,135,87,202,139,111,56,93,212,45,193,48,186,100,156,236,139,26,246,202\"),95,true,true)"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:45:27.123ZAiakos.addMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute addMaintainer(address) WHEN msg.sender==_owner,_maintainerAddress!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail addMaintainer(address) when NOT comply with: _maintainerAddress != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:45:27.124ZAiakos.deployRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "75-81",
          "restrictions": [
            "MemberAccess.Identifier != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier!=true",
          "parameters": [
            {
              "js": "\"\\x19Ethereum Signed Message:\\n32\"",
              "sol": "\"\\x19Ethereum Signed Message:\\n32\""
            },
            {
              "js": "[78,211,0,14,197,151,68,68,3,78,254,106,101,99,212,133,132,219,68,248,47,48,42,249,255,15,173,149,1,226,132,252]",
              "sol": "stringToBytes32(\"78,211,0,14,197,151,68,68,3,78,254,106,101,99,212,133,132,219,68,248,47,48,42,249,255,15,173,149,1,226,132,252\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "79-81",
          "restrictions": [
            "MemberAccess.Identifier == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"superuser\"",
              "sol": "\"superuser\""
            },
            {
              "js": "[95,80,56,86,35,144,199,56,110,243,233,209,21,22,54,220,118,41,86,83,250,157,149,157,113,245,120,14,103,106,20,239]",
              "sol": "stringToBytes32(\"95,80,56,86,35,144,199,56,110,243,233,209,21,22,54,220,118,41,86,83,250,157,149,157,113,245,120,14,103,106,20,239\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "84-87",
          "restrictions": [
            "approvalGranted == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted==true",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "[58,166,189,210,226,208,181,191,98,106,154,49,71,110,99,213,161,237,200,121,120,195,223,74,12,35,131,251,57,10,68,148]",
              "sol": "stringToBytes32(\"58,166,189,210,226,208,181,191,98,106,154,49,71,110,99,213,161,237,200,121,120,195,223,74,12,35,131,251,57,10,68,148\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN approvalGranted!=true",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "[216,76,237,0,83,207,181,98,46,48,1,239,9,248,220,3,204,94,127,28,240,134,31,51,16,246,240,29,32,174,79,183]",
              "sol": "stringToBytes32(\"216,76,237,0,83,207,181,98,46,48,1,239,9,248,220,3,204,94,127,28,240,134,31,51,16,246,240,29,32,174,79,183\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "4": {
        "branch": {
          "loc": "88-91",
          "restrictions": [
            "releaseApproved == true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved==true",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "[247,162,86,227,17,221,137,167,57,119,59,223,75,134,136,234,36,236,154,222,192,92,249,37,36,198,82,88,133,221,25,205]",
              "sol": "stringToBytes32(\"247,162,86,227,17,221,137,167,57,119,59,223,75,134,136,234,36,236,154,222,192,92,249,37,36,198,82,88,133,221,25,205\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "5": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "releaseApproved != true",
            "approvalGranted != true"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute deployRelease(string,bytes32) WHEN releaseApproved!=true,approvalGranted!=true",
          "parameters": [
            {
              "js": "\"Example\"",
              "sol": "\"Example\""
            },
            {
              "js": "[166,151,186,225,191,59,100,107,107,227,249,156,120,93,84,142,167,68,153,10,217,226,118,7,167,213,234,184,204,222,53,147]",
              "sol": "stringToBytes32(\"166,151,186,225,191,59,100,107,107,227,249,156,120,93,84,142,167,68,153,10,217,226,118,7,167,213,234,184,204,222,53,147\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.125ZAiakos.checkRelease": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute checkRelease(string,bytes32) WHEN _sha256Hash!=0x0,MemberAccess.Identifier==true",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "[171,243,3,154,184,33,228,228,146,232,226,36,210,84,43,243,14,111,206,134,114,108,142,134,161,174,125,137,127,158,142,36]",
              "sol": "stringToBytes32(\"171,243,3,154,184,33,228,228,146,232,226,36,210,84,43,243,14,111,206,134,114,108,142,134,161,174,125,137,127,158,142,36\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail checkRelease(string,bytes32) when NOT comply with: _sha256Hash != 0x0",
            "parameters": [
              {
                "js": "\"RevertWithReason\"",
                "sol": "\"RevertWithReason\""
              },
              {
                "js": "\"0x0\"",
                "sol": "0x0"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T04:45:27.126ZAiakos.getReleaseInfo": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getReleaseInfo(string)",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.126ZAiakos.amIMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute amIMaintainer()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.126ZAiakos.isMaintainer": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute isMaintainer(address)",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.127ZAiakos.getRequiredNumberOfMaintainers": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute getRequiredNumberOfMaintainers()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T04:45:27.127ZAiakos.transferOwnership": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute transferOwnership(address) WHEN _newOwner!=0x0000000000000000000000000000000000000000,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: _newOwner != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail transferOwnership(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
}