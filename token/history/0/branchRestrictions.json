,{
  "2020-11-10T04:00:39.083ZPower.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.275ZProxyMathUtils.testvalidPerc": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testvalidPerc(uint256)",
          "parameters": [
            {
              "js": "99999",
              "sol": "99999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.276ZProxyMathUtils.testpercOf0": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercOf0(uint256,uint256,uint256) WHEN PERC_DIVISOR>0",
          "parameters": [
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "47",
              "sol": "47"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.277ZProxyMathUtils.testpercOf1": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercOf1(uint256,uint256) WHEN PERC_DIVISOR>0",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "118",
              "sol": "118"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.278ZProxyMathUtils.testpercPoints": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpercPoints(uint256,uint256) WHEN _fracDenom>0",
          "parameters": [
            {
              "js": "43",
              "sol": "43"
            },
            {
              "js": "93",
              "sol": "93"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testpercPoints(uint256,uint256) when NOT comply with: _fracDenom > 0",
            "parameters": [
              {
                "js": "43",
                "sol": "43"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.280ZRelevantTokenMock.roundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundNum()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.281ZRelevantTokenMock.setRoundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRoundNum(uint256)",
          "parameters": [
            {
              "js": "50",
              "sol": "50"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.281ZRelevantTokenMock.setLastRound": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setLastRound(uint256,uint256,uint256) WHEN msg.sender==_owner,_roundNum<currentRound",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setLastRound(uint256,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.297ZRelevantTokenMock.emptyDevBalance": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute emptyDevBalance()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.298ZRelevantToken.initialize": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute initialize(string,uint8,string,string,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256) WHEN initialized!=true",
          "parameters": [
            {
              "js": "\"yuqych\"",
              "sol": "\"yuqych\""
            },
            {
              "js": "54",
              "sol": "54"
            },
            {
              "js": "\"ub0i3o\"",
              "sol": "\"ub0i3o\""
            },
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "100",
              "sol": "100"
            },
            {
              "js": "45",
              "sol": "45"
            },
            {
              "js": "70",
              "sol": "70"
            },
            {
              "js": "106",
              "sol": "106"
            },
            {
              "js": "122",
              "sol": "122"
            },
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.302ZRelevantToken.releaseTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "114-131",
          "restrictions": [
            "lastRound >= targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN lastRound>=targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "121-130",
          "restrictions": [
            "currentRound < targetRound",
            "lastRound < targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN currentRound<targetRound,lastRound<targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "124-130",
          "restrictions": [
            "currentRound >= targetRound",
            "lastRound < targetRound"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute releaseTokens() WHEN currentRound>=targetRound,lastRound<targetRound,lastRound<currentRound",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail releaseTokens() when NOT comply with: lastRound < currentRound",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.322ZRelevantToken.partialSum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute partialSum(uint256)",
          "parameters": [
            {
              "js": "39",
              "sol": "39"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.323ZRelevantToken.allocateRewards": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allocateRewards(uint256) WHEN msg.sender==_owner,_rewards<=rewardFund",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail allocateRewards(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail allocateRewards(uint256) when NOT comply with: _rewards <= rewardFund",
            "parameters": [
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.334ZRelevantToken.allocateAirdrops": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute allocateAirdrops(uint256) WHEN msg.sender==_owner,_rewards<=airdropFund",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail allocateAirdrops(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail allocateAirdrops(uint256) when NOT comply with: _rewards <= airdropFund",
            "parameters": [
              {
                "js": 1,
                "sol": 1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.349ZRelevantToken.claimTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute claimTokens(uint256,bytes) WHEN allocatedRewards>=_amount,_owner==recOwner",
          "parameters": [
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[120,6,82,30,242,123,21,148,40,40,212,83,2,169,59,67,135,223,157,75,182,175,249,31,83,165,237,181,174,250,223,91]",
              "sol": "abi.encode(\"120,6,82,30,242,123,21,148,40,40,212,83,2,169,59,67,135,223,157,75,182,175,249,31,83,165,237,181,174,250,223,91\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail claimTokens(uint256,bytes) when NOT comply with: allocatedRewards >= _amount",
            "parameters": [
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[120,6,82,30,242,123,21,148,40,40,212,83,2,169,59,67,135,223,157,75,182,175,249,31,83,165,237,181,174,250,223,91]",
                "sol": "abi.encode(\"120,6,82,30,242,123,21,148,40,40,212,83,2,169,59,67,135,223,157,75,182,175,249,31,83,165,237,181,174,250,223,91\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.358ZRelevantToken.nonceOf": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute nonceOf(address)",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.358ZRelevantToken.roundNum": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundNum() WHEN roundLength>0",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail roundNum() when NOT comply with: roundLength > 0",
            "parameters": [
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.366ZRelevantToken.roundsSincleLast": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute roundsSincleLast()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.369ZProxyRelevantToken.testpreMintTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpreMintTokens(uint256)",
          "parameters": [
            {
              "js": "128",
              "sol": "128"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.370ZProxyRelevantToken.testnewTokensForConstantPhase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForConstantPhase(uint256,uint256)",
          "parameters": [
            {
              "js": "32735",
              "sol": "32735"
            },
            {
              "js": "11",
              "sol": "11"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.371ZProxyRelevantToken.testnewTokensForDecayPhase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "164-166",
          "restrictions": [
            "lastRound == 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN lastRound==0",
          "parameters": [
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "lastRound != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN lastRound!=0",
          "parameters": [
            {
              "js": "53",
              "sol": "53"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "167-180",
          "restrictions": [
            "_roundsPassed < 100000"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN _roundsPassed<100000",
          "parameters": [
            {
              "js": "9",
              "sol": "9"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "175-180",
          "restrictions": [
            "_roundsPassed >= 100000",
            "lastRound != 0"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForDecayPhase(uint256) WHEN _roundsPassed>=100000,lastRound!=0",
          "parameters": [
            {
              "js": "100000",
              "sol": "100000"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.374ZProxyRelevantToken.testnewTokensForCrossingDecay": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForCrossingDecay()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.374ZProxyRelevantToken.testnewTokensForCrossingConst": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testnewTokensForCrossingConst(uint256)",
          "parameters": [
            {
              "js": "55",
              "sol": "55"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.376ZProxyRelevantToken.testsplitRewards": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testsplitRewards(uint256)",
          "parameters": [
            {
              "js": "78",
              "sol": "78"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.376ZProxyRelevantToken.testtoDevFund": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testtoDevFund()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.380ZProxyPower.testpower": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testpower(uint256,uint256,uint32,uint32)",
          "parameters": [
            {
              "js": "116",
              "sol": "116"
            },
            {
              "js": "115",
              "sol": "115"
            },
            {
              "js": "74",
              "sol": "74"
            },
            {
              "js": "982080",
              "sol": "982080"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.381ZProxyPower.testln": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testln(uint256,uint256) WHEN _numerator<=MAX_NUM",
          "parameters": [
            {
              "js": "32736",
              "sol": "32736"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail testln(uint256,uint256) when NOT comply with: _numerator <= MAX_NUM",
            "parameters": [
              {
                "js": "680564733841876926926749214863536422913",
                "sol": "680564733841876926926749214863536422913"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-10T04:00:46.382ZProxyPower.testfloorLog2": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfloorLog2(uint256)",
          "parameters": [
            {
              "js": "117",
              "sol": "117"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.383ZProxyPower.testfindPositionInMaxExpArray": {
    "branches": {
      "0": {
        "branch": {
          "loc": "272-273",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "1": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x",
          "parameters": [
            {
              "js": "44",
              "sol": "44"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "2": {
        "branch": {
          "loc": "274-275",
          "restrictions": [
            "maxExpArray >= _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray>=_x",
          "parameters": [
            {
              "js": "982079",
              "sol": "982079"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      },
      "3": {
        "branch": {
          "loc": "-",
          "restrictions": [
            "maxExpArray < _x",
            "maxExpArray < _x"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfindPositionInMaxExpArray(uint256) WHEN maxExpArray<_x,maxExpArray<_x",
          "parameters": [
            {
              "js": "127",
              "sol": "127"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-10T04:00:46.385ZProxyPower.testfixedExp": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testfixedExp(uint256,uint8)",
          "parameters": [
            {
              "js": "114",
              "sol": "114"
            },
            {
              "js": "118",
              "sol": "118"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
}