const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("PartialRedemption",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[4],65,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[4],65,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[8],64,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[8],64,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[6],{from:accounts[7]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[6],{from:accounts[7]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],26,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],26,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],{from:accounts[0]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[5],{from:accounts[0]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(1532892063,contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[0],5,64,{from:accounts[4]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(1532892063,contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[0],5,64,{from:accounts[4]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[1],4,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableTokenMock.address,contractRedeemableTokenMock.address,accounts[1],4,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableToken.address,accounts[2],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+587,{from:accounts[8]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableToken.address,accounts[2],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+587,{from:accounts[8]}');
  });
  
  it('Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0', async () => {
    let result = await contractPartialRedemption.redeemTokens([accounts[0],accounts[4],accounts[6],accounts[5],accounts[9],accounts[6],accounts[2],accounts[5],accounts[7],accounts[6],accounts[0],accounts[5],accounts[7],accounts[4],accounts[9],accounts[8],accounts[0],accounts[8],accounts[1],accounts[9],accounts[6],accounts[9],accounts[8],accounts[7],accounts[5],accounts[0],accounts[8],accounts[4],accounts[3],accounts[9],accounts[7],accounts[4],accounts[2],accounts[4],accounts[7],accounts[1],accounts[7],accounts[0],accounts[8],accounts[6],accounts[6],accounts[7],accounts[8],accounts[2],accounts[5],accounts[8],accounts[6],accounts[5],accounts[1],accounts[6],accounts[5],accounts[3],accounts[9],accounts[7],accounts[1],accounts[9],accounts[7],accounts[3],accounts[8],accounts[4],accounts[0],accounts[5],accounts[7],accounts[7],accounts[8],accounts[8],accounts[6],accounts[0],accounts[6],accounts[5],accounts[4],accounts[6],accounts[0],accounts[6],accounts[9],accounts[1],accounts[8],accounts[3],accounts[4],accounts[7],accounts[8],accounts[2],accounts[3],accounts[8],accounts[3],accounts[2],accounts[9],accounts[6],accounts[7],accounts[0],accounts[4],accounts[9],accounts[3],accounts[9],accounts[6],accounts[5],accounts[2],accounts[0],accounts[1],accounts[5],accounts[0],accounts[5],accounts[8],accounts[2],accounts[0],accounts[1],accounts[5],accounts[0],accounts[4],accounts[5],accounts[6],accounts[1],accounts[7],accounts[8],accounts[0],accounts[7],accounts[0],accounts[7],accounts[6],accounts[9],accounts[4],accounts[7],accounts[5],accounts[5],accounts[9],accounts[0],accounts[5],accounts[1],accounts[2],accounts[9],accounts[8],accounts[6],accounts[0],accounts[0],accounts[9],accounts[2],accounts[6],accounts[3],accounts[4],accounts[7],accounts[3],accounts[6],accounts[7],accounts[3],accounts[8],accounts[8],accounts[4],accounts[6],accounts[4],accounts[5],accounts[5],accounts[0],accounts[3],accounts[9],accounts[8],accounts[5],accounts[5],accounts[9],accounts[8],accounts[3],accounts[4],accounts[6],accounts[0],accounts[7],accounts[2],accounts[1],accounts[4],accounts[5],accounts[6],accounts[4],accounts[2],accounts[7],accounts[1],accounts[4],accounts[4],accounts[5],accounts[3],accounts[3],accounts[3],accounts[9],accounts[2],accounts[6],accounts[3],accounts[4],accounts[1],accounts[0],accounts[9],accounts[7],accounts[5],accounts[9],accounts[3],accounts[7],accounts[5],accounts[5],accounts[9],accounts[8],accounts[3],accounts[0],accounts[2],accounts[1],accounts[6],accounts[0],accounts[8],accounts[6],accounts[3],accounts[3],accounts[4],accounts[4],accounts[9],accounts[8],accounts[8],accounts[9],accounts[2],accounts[5],accounts[3],accounts[9],accounts[1],accounts[3],accounts[2],accounts[8],accounts[8],accounts[6],accounts[7],accounts[1],accounts[0],accounts[0],accounts[9],accounts[8],accounts[9],accounts[8],accounts[4],accounts[1],accounts[5],accounts[3],accounts[0],accounts[1],accounts[7],accounts[0],accounts[5],accounts[7],accounts[9],accounts[8],accounts[7],accounts[4],accounts[9],accounts[0],accounts[3],accounts[0],accounts[4],accounts[3],accounts[5],accounts[3],accounts[9],accounts[3]], [64,1337,2014223714,2014223714,1532892063,255,1532892064,9999,66,3,6,27,1336,5,4,1337,2014223715,1532892063,255,2014223716,1336,64,5,255,6,96,5,1,65,256,1532892063,1337,5,97,9999,2014223716,2014223716,95,10000,255,4,96,5,1532892064,257,4,27,29,29,96,1,1338,254,4,95,97,4,10000,255,29,64,2,97,2014223715,29,1336,10001,9999,254,1338,9999,2014223715,95,1337,9999,10001,26,29,29,0,2014223714,255,10001,256,256,96,65,1532892064,95,1532892063,255,257,256,64,256,1532892064,1337,6,29,97,1336,2014223715,27,1338,3,1336,2014223714,254,5,0,5,256,1532892064,5,257,1337,9999,65,97,256,95,5,0,5,254,10000,27,1336,66,4,6,4,1532892062,0,97,1337,10000,97,9999,26,64,10001,2014223716,26,5,2014223716,1338,26,2,6,5,255,1532892062,10001,6,256,5,1338,254,5,5,256,96,256,96,29,1338,95,6,28,1336,2014223715,1532892064,1532892064,5,1337,6,9999,66,96,29,0,4,256,5,27,96,255,9999,1338,3,1532892062,1336,0,1336,10000,1532892063,96,1336,0,4,96,4,1336,0,9999,66,1,2,1532892064,3,29,97,96,256,26,64,2014223716,1532892062,2014223715,29,1338,66,9999,4,3,9999,29,256,9999,1337,2014223715,0,6,1337,257,97,27,4,2,5,3,1337,257,95,96,3,27,96,1532892062,64,6,5,28],{from: accounts[0]});
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[0],accounts[4],accounts[6],accounts[5],accounts[9],accounts[6],accounts[2],accounts[5],accounts[7],accounts[6],accounts[0],accounts[5],accounts[7],accounts[4],accounts[9],accounts[8],accounts[0],accounts[8],accounts[1],accounts[9],accounts[6],accounts[9],accounts[8],accounts[7],accounts[5],accounts[0],accounts[8],accounts[4],accounts[3],accounts[9],accounts[7],accounts[4],accounts[2],accounts[4],accounts[7],accounts[1],accounts[7],accounts[0],accounts[8],accounts[6],accounts[6],accounts[7],accounts[8],accounts[2],accounts[5],accounts[8],accounts[6],accounts[5],accounts[1],accounts[6],accounts[5],accounts[3],accounts[9],accounts[7],accounts[1],accounts[9],accounts[7],accounts[3],accounts[8],accounts[4],accounts[0],accounts[5],accounts[7],accounts[7],accounts[8],accounts[8],accounts[6],accounts[0],accounts[6],accounts[5],accounts[4],accounts[6],accounts[0],accounts[6],accounts[9],accounts[1],accounts[8],accounts[3],accounts[4],accounts[7],accounts[8],accounts[2],accounts[3],accounts[8],accounts[3],accounts[2],accounts[9],accounts[6],accounts[7],accounts[0],accounts[4],accounts[9],accounts[3],accounts[9],accounts[6],accounts[5],accounts[2],accounts[0],accounts[1],accounts[5],accounts[0],accounts[5],accounts[8],accounts[2],accounts[0],accounts[1],accounts[5],accounts[0],accounts[4],accounts[5],accounts[6],accounts[1],accounts[7],accounts[8],accounts[0],accounts[7],accounts[0],accounts[7],accounts[6],accounts[9],accounts[4],accounts[7],accounts[5],accounts[5],accounts[9],accounts[0],accounts[5],accounts[1],accounts[2],accounts[9],accounts[8],accounts[6],accounts[0],accounts[0],accounts[9],accounts[2],accounts[6],accounts[3],accounts[4],accounts[7],accounts[3],accounts[6],accounts[7],accounts[3],accounts[8],accounts[8],accounts[4],accounts[6],accounts[4],accounts[5],accounts[5],accounts[0],accounts[3],accounts[9],accounts[8],accounts[5],accounts[5],accounts[9],accounts[8],accounts[3],accounts[4],accounts[6],accounts[0],accounts[7],accounts[2],accounts[1],accounts[4],accounts[5],accounts[6],accounts[4],accounts[2],accounts[7],accounts[1],accounts[4],accounts[4],accounts[5],accounts[3],accounts[3],accounts[3],accounts[9],accounts[2],accounts[6],accounts[3],accounts[4],accounts[1],accounts[0],accounts[9],accounts[7],accounts[5],accounts[9],accounts[3],accounts[7],accounts[5],accounts[5],accounts[9],accounts[8],accounts[3],accounts[0],accounts[2],accounts[1],accounts[6],accounts[0],accounts[8],accounts[6],accounts[3],accounts[3],accounts[4],accounts[4],accounts[9],accounts[8],accounts[8],accounts[9],accounts[2],accounts[5],accounts[3],accounts[9],accounts[1],accounts[3],accounts[2],accounts[8],accounts[8],accounts[6],accounts[7],accounts[1],accounts[0],accounts[0],accounts[9],accounts[8],accounts[9],accounts[8],accounts[4],accounts[1],accounts[5],accounts[3],accounts[0],accounts[1],accounts[7],accounts[0],accounts[5],accounts[7],accounts[9],accounts[8],accounts[7],accounts[4],accounts[9],accounts[0],accounts[3],accounts[0],accounts[4],accounts[3],accounts[5],accounts[3],accounts[9],accounts[3]], [64,1337,2014223714,2014223714,1532892063,255,1532892064,9999,66,3,6,27,1336,5,4,1337,2014223715,1532892063,255,2014223716,1336,64,5,255,6,96,5,1,65,256,1532892063,1337,5,97,9999,2014223716,2014223716,95,10000,255,4,96,5,1532892064,257,4,27,29,29,96,1,1338,254,4,95,97,4,10000,255,29,64,2,97,2014223715,29,1336,10001,9999,254,1338,9999,2014223715,95,1337,9999,10001,26,29,29,0,2014223714,255,10001,256,256,96,65,1532892064,95,1532892063,255,257,256,64,256,1532892064,1337,6,29,97,1336,2014223715,27,1338,3,1336,2014223714,254,5,0,5,256,1532892064,5,257,1337,9999,65,97,256,95,5,0,5,254,10000,27,1336,66,4,6,4,1532892062,0,97,1337,10000,97,9999,26,64,10001,2014223716,26,5,2014223716,1338,26,2,6,5,255,1532892062,10001,6,256,5,1338,254,5,5,256,96,256,96,29,1338,95,6,28,1336,2014223715,1532892064,1532892064,5,1337,6,9999,66,96,29,0,4,256,5,27,96,255,9999,1338,3,1532892062,1336,0,1336,10000,1532892063,96,1336,0,4,96,4,1336,0,9999,66,1,2,1532892064,3,29,97,96,256,26,64,2014223716,1532892062,2014223715,29,1338,66,9999,4,3,9999,29,256,9999,1337,2014223715,0,6,1337,257,97,27,4,2,5,3,1337,257,95,96,3,27,96,1532892062,64,6,5,28],{from: accounts[9]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([accounts[4],accounts[3],accounts[0],accounts[8],accounts[7],accounts[3],accounts[7],accounts[9],accounts[9],accounts[8],accounts[4],accounts[4],accounts[9],accounts[5],accounts[8],accounts[7],accounts[7],accounts[6],accounts[2],accounts[0],accounts[2],accounts[0],accounts[4],accounts[6],accounts[1],accounts[8],accounts[5],accounts[4],accounts[2],accounts[9],accounts[1],accounts[4],accounts[4],accounts[9],accounts[0],accounts[1],accounts[4],accounts[7],accounts[8],accounts[9],accounts[0],accounts[0],accounts[2],accounts[4],accounts[3],accounts[3],accounts[3],accounts[1],accounts[0],accounts[7],accounts[6],accounts[1],accounts[7],accounts[2],accounts[1],accounts[5],accounts[8],accounts[9],accounts[9],accounts[9],accounts[0],accounts[4],accounts[1],accounts[5],accounts[8],accounts[1],accounts[2],accounts[5],accounts[0],accounts[1],accounts[2],accounts[4],accounts[9],accounts[2],accounts[8],accounts[7],accounts[4],accounts[4],accounts[8],accounts[9],accounts[8],accounts[5],accounts[4],accounts[2],accounts[9],accounts[6],accounts[1],accounts[7],accounts[2],accounts[6],accounts[5],accounts[8],accounts[2],accounts[9],accounts[6],accounts[7],accounts[6],accounts[8],accounts[5],accounts[6],accounts[3],accounts[0],accounts[5],accounts[2],accounts[7],accounts[3],accounts[2],accounts[8],accounts[4],accounts[7],accounts[8],accounts[6],accounts[0],accounts[7],accounts[1],accounts[9],accounts[4],accounts[3],accounts[7],accounts[7],accounts[7],accounts[8],accounts[9],accounts[4],accounts[6],accounts[5],accounts[0],accounts[7],accounts[3],accounts[7],accounts[8],accounts[8],accounts[7],accounts[7],accounts[7],accounts[3],accounts[7],accounts[8],accounts[9],accounts[2],accounts[1],accounts[2],accounts[6],accounts[6],accounts[8],accounts[9],accounts[3],accounts[3],accounts[5],accounts[9],accounts[0],accounts[4],accounts[6],accounts[8],accounts[7],accounts[1],accounts[1],accounts[8],accounts[8],accounts[8],accounts[0],accounts[4],accounts[2],accounts[6],accounts[7],accounts[4],accounts[8],accounts[0],accounts[6],accounts[3],accounts[1],accounts[7],accounts[3],accounts[3],accounts[6],accounts[2],accounts[4],accounts[7],accounts[0],accounts[4],accounts[0],accounts[0],accounts[8],accounts[7],accounts[8],accounts[6],accounts[7],accounts[1],accounts[2],accounts[7],accounts[5],accounts[6],accounts[3],accounts[0],accounts[6],accounts[2],accounts[4],accounts[1],accounts[4],accounts[1],accounts[4],accounts[3],accounts[0],accounts[4],accounts[2],accounts[1],accounts[8],accounts[4],accounts[3],accounts[2],accounts[0],accounts[4],accounts[8],accounts[8],accounts[7],accounts[6],accounts[3],accounts[8],accounts[2],accounts[5],accounts[6],accounts[5],accounts[6],accounts[2],accounts[6],accounts[4],accounts[3],accounts[9],accounts[9],accounts[9],accounts[5],accounts[2],accounts[5],accounts[4],accounts[3],accounts[9],accounts[2],accounts[4],accounts[2],accounts[2],accounts[2],accounts[8],accounts[4],accounts[4],accounts[1],accounts[8],accounts[2],accounts[6],accounts[7],accounts[7],accounts[2],accounts[7],accounts[1],accounts[6],accounts[2]], [64,1337,2014223714,2014223714,1532892063,255,1532892064,9999,66,3,6,27,1336,5,4,1337,2014223715,1532892063,255,2014223716,1336,64,5,255,6,96,5,1,65,256,1532892063,1337,5,97,9999,2014223716,2014223716,95,10000,255,4,96,5,1532892064,257,4,27,29,29,96,1,1338,254,4,95,97,4,10000,255,29,64,2,97,2014223715,29,1336,10001,9999,254,1338,9999,2014223715,95,1337,9999,10001,26,29,29,0,2014223714,255,10001,256,256,96,65,1532892064,95,1532892063,255,257,256,64,256,1532892064,1337,6,29,97,1336,2014223715,27,1338,3,1336,2014223714,254,5,0,5,256,1532892064,5,257,1337,9999,65,97,256,95,5,0,5,254,10000,27,1336,66,4,6,4,1532892062,0,97,1337,10000,97,9999,26,64,10001,2014223716,26,5,2014223716,1338,26,2,6,5,255,1532892062,10001,6,256,5,1338,254,5,5,256,96,256,96,29,1338,95,6,28,1336,2014223715,1532892064,1532892064,5,1337,6,9999,66,96,29,0,4,256,5,27,96,255,9999,1338,3,1532892062,1336,0,1336,10000,1532892063,96,1336,0,4,96,4,1336,0,9999,66,1,2,1532892064,3,29,97,96,256,26,64,2014223716,1532892062,2014223715,29,1338,66,9999,4,3,9999,29,256,9999,1337,2014223715,0,6,1337,257,97,27,4,2,5,3,1337,257,95,96,3,27,96,1532892062,64,6,5,28],{from: accounts[0]}),'revert');
  });
  it('Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0', async () => {
    let result = await truffleAssert.fails(contractPartialRedemption.redeemTokens([], [64,1337,2014223714,2014223714,1532892063,255,1532892064,9999,66,3,6,27,1336,5,4,1337,2014223715,1532892063,255,2014223716,1336,64,5,255,6,96,5,1,65,256,1532892063,1337,5,97,9999,2014223716,2014223716,95,10000,255,4,96,5,1532892064,257,4,27,29,29,96,1,1338,254,4,95,97,4,10000,255,29,64,2,97,2014223715,29,1336,10001,9999,254,1338,9999,2014223715,95,1337,9999,10001,26,29,29,0,2014223714,255,10001,256,256,96,65,1532892064,95,1532892063,255,257,256,64,256,1532892064,1337,6,29,97,1336,2014223715,27,1338,3,1336,2014223714,254,5,0,5,256,1532892064,5,257,1337,9999,65,97,256,95,5,0,5,254,10000,27,1336,66,4,6,4,1532892062,0,97,1337,10000,97,9999,26,64,10001,2014223716,26,5,2014223716,1338,26,2,6,5,255,1532892062,10001,6,256,5,1338,254,5,5,256,96,256,96,29,1338,95,6,28,1336,2014223715,1532892064,1532892064,5,1337,6,9999,66,96,29,0,4,256,5,27,96,255,9999,1338,3,1532892062,1336,0,1336,10000,1532892063,96,1336,0,4,96,4,1336,0,9999,66,1,2,1532892064,3,29,97,96,256,26,64,2014223716,1532892062,2014223715,29,1338,66,9999,4,3,9999,29,256,9999,1337,2014223715,0,6,1337,257,97,27,4,2,5,3,1337,257,95,96,3,27,96,1532892062,64,6,5,28],{from: accounts[0]}),'revert');
  });
});
