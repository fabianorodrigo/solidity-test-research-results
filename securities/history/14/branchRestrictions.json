,{
  "2020-11-11T17:08:15.030ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:21.206ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:27.587ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:34.066ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1336",
              "sol": "1336"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:40.602ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:47.119ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:08:55.108ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:01.760ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:08.410ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+104",
              "sol": "block.timestamp+104"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+104",
                "sol": "block.timestamp+104"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+104",
                "sol": "block.timestamp+104"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+104",
                "sol": "block.timestamp+104"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.299ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.300ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[6]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.303ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.306ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[8],accounts[0],accounts[8],accounts[3],accounts[8],accounts[1],accounts[6],accounts[2],accounts[8],accounts[2],accounts[6],accounts[6],accounts[2],accounts[6],accounts[2],accounts[1],accounts[4],accounts[0],accounts[1],accounts[5],accounts[8],accounts[1],accounts[4],accounts[4],accounts[6],accounts[1],accounts[0],accounts[3],accounts[4],accounts[8],accounts[4],accounts[9],accounts[4],accounts[4],accounts[0],accounts[8],accounts[4],accounts[0],accounts[7],accounts[3],accounts[0],accounts[9],accounts[3],accounts[4],accounts[1],accounts[1],accounts[2],accounts[9],accounts[8],accounts[0],accounts[3],accounts[9],accounts[5],accounts[5],accounts[3],accounts[4],accounts[2],accounts[1],accounts[0],accounts[0],accounts[2],accounts[9],accounts[3],accounts[2],accounts[8],accounts[4],accounts[8],accounts[0],accounts[9],accounts[3],accounts[4],accounts[2],accounts[1],accounts[4],accounts[8],accounts[4],accounts[7],accounts[4],accounts[3],accounts[5],accounts[4],accounts[3],accounts[1],accounts[2],accounts[2],accounts[8],accounts[1],accounts[5],accounts[1],accounts[6],accounts[4],accounts[3],accounts[1],accounts[4],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
              "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
            },
            {
              "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
              "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
            },
            {
              "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
              "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[0],accounts[8],accounts[3],accounts[8],accounts[1],accounts[6],accounts[2],accounts[8],accounts[2],accounts[6],accounts[6],accounts[2],accounts[6],accounts[2],accounts[1],accounts[4],accounts[0],accounts[1],accounts[5],accounts[8],accounts[1],accounts[4],accounts[4],accounts[6],accounts[1],accounts[0],accounts[3],accounts[4],accounts[8],accounts[4],accounts[9],accounts[4],accounts[4],accounts[0],accounts[8],accounts[4],accounts[0],accounts[7],accounts[3],accounts[0],accounts[9],accounts[3],accounts[4],accounts[1],accounts[1],accounts[2],accounts[9],accounts[8],accounts[0],accounts[3],accounts[9],accounts[5],accounts[5],accounts[3],accounts[4],accounts[2],accounts[1],accounts[0],accounts[0],accounts[2],accounts[9],accounts[3],accounts[2],accounts[8],accounts[4],accounts[8],accounts[0],accounts[9],accounts[3],accounts[4],accounts[2],accounts[1],accounts[4],accounts[8],accounts[4],accounts[7],accounts[4],accounts[3],accounts[5],accounts[4],accounts[3],accounts[1],accounts[2],accounts[2],accounts[8],accounts[1],accounts[5],accounts[1],accounts[6],accounts[4],accounts[3],accounts[1],accounts[4],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
                "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
              },
              {
                "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
                "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
              },
              {
                "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
                "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
                "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
              },
              {
                "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
                "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
              },
              {
                "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
                "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[3],accounts[9],accounts[1],accounts[0],accounts[8],accounts[4],accounts[4],accounts[4],accounts[9],accounts[7],accounts[6],accounts[6],accounts[2],accounts[4],accounts[5],accounts[7],accounts[2],accounts[8],accounts[6],accounts[9],accounts[4],accounts[7],accounts[3],accounts[5],accounts[7],accounts[1],accounts[7],accounts[8],accounts[5],accounts[1],accounts[9],accounts[0],accounts[5],accounts[1],accounts[3],accounts[8],accounts[2],accounts[7],accounts[5],accounts[1],accounts[3],accounts[9],accounts[7],accounts[7],accounts[8],accounts[0],accounts[1],accounts[0],accounts[3],accounts[1],accounts[2],accounts[2],accounts[9],accounts[6],accounts[9],accounts[5],accounts[6],accounts[2],accounts[5],accounts[0],accounts[8],accounts[6],accounts[2],accounts[6],accounts[1],accounts[8],accounts[1],accounts[1],accounts[5],accounts[8],accounts[4],accounts[7],accounts[5],accounts[1],accounts[9],accounts[3],accounts[2],accounts[5],accounts[9],accounts[8],accounts[8],accounts[1],accounts[4],accounts[6],accounts[9],accounts[8],accounts[7],accounts[7],accounts[2],accounts[7],accounts[9],accounts[5],accounts[4],accounts[6],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
                "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
              },
              {
                "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
                "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
              },
              {
                "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
                "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[5],accounts[5],accounts[8],accounts[0],accounts[9],accounts[5],accounts[1],accounts[1],accounts[4],accounts[7],accounts[7],accounts[9],accounts[6],accounts[2],accounts[4],accounts[2],accounts[0],accounts[6],accounts[7],accounts[9],accounts[5],accounts[0],accounts[0],accounts[0],accounts[3],accounts[5],accounts[2],accounts[3],accounts[3],accounts[5],accounts[0],accounts[5],accounts[8],accounts[2],accounts[3],accounts[8],accounts[0],accounts[0],accounts[3],accounts[0],accounts[0],accounts[0],accounts[7],accounts[9],accounts[4],accounts[2],accounts[5],accounts[4],accounts[7],accounts[6],accounts[7],accounts[7],accounts[1],accounts[1],accounts[5],accounts[1],accounts[2],accounts[4],accounts[0],accounts[8],accounts[0],accounts[5],accounts[0],accounts[6],accounts[4],accounts[9],accounts[6],accounts[9],accounts[8],accounts[6],accounts[7],accounts[5],accounts[6],accounts[5],accounts[9],accounts[6],accounts[6],accounts[8],accounts[7],accounts[7],accounts[9],accounts[3],accounts[9],accounts[4],accounts[9],accounts[8],accounts[9],accounts[9],accounts[9],accounts[6],accounts[2],accounts[2],accounts[6],accounts[3],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
                "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
              },
              {
                "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
                "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
              },
              {
                "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
                "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[4],accounts[5],accounts[9],accounts[7],accounts[1],accounts[4],accounts[9],accounts[4],accounts[0],accounts[9],accounts[4],accounts[9],accounts[6],accounts[2],accounts[2],accounts[6],accounts[4],accounts[8],accounts[0],accounts[9],accounts[1],accounts[1],accounts[6],accounts[3],accounts[5],accounts[9],accounts[7],accounts[3],accounts[4],accounts[2],accounts[8],accounts[3],accounts[5],accounts[6],accounts[0],accounts[4],accounts[1],accounts[4],accounts[8],accounts[9],accounts[3],accounts[9],accounts[7],accounts[3],accounts[1],accounts[5],accounts[9],accounts[8],accounts[4],accounts[5],accounts[8],accounts[5],accounts[3],accounts[3],accounts[2],accounts[0],accounts[4],accounts[2],accounts[7],accounts[0],accounts[0],accounts[4],accounts[6],accounts[3],accounts[6],accounts[9],accounts[7],accounts[1],accounts[6],accounts[1],accounts[3],accounts[7],accounts[3],accounts[9],accounts[8],accounts[8],accounts[1],accounts[4],accounts[8],accounts[1],accounts[0],accounts[7],accounts[5],accounts[2],accounts[5],accounts[1],accounts[6],accounts[0],accounts[3],accounts[9],accounts[5],accounts[2],accounts[1],accounts[5],accounts[7],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[97,28,2014223716,2014223715,254,97,2,1532892062,29,2014223714,29,4,10001,1338,29,26,10000,66,2014223714,9999,1,26,1532892062,26,3,66,255,2014223715,0,1532892064,1337,65,1336,1338,2014223716,2014223714,2,2,64,2,1337,254,2014223714,3,26,254,26,255,1532892063,2014223716,3,3,254,65,64,2014223716,0,26,1337,1337,1,1,27,256,10001,1338,1532892062,64,254,1337,26,5,27,64,97,1337,65,255,64,10001,26,65,28,1338,65,6,2014223715,96,27,65,1336,6,255,29,10001]",
                "sol": "[uint256(97),uint256(28),uint256(2014223716),uint256(2014223715),uint256(254),uint256(97),uint256(2),uint256(1532892062),uint256(29),uint256(2014223714),uint256(29),uint256(4),uint256(10001),uint256(1338),uint256(29),uint256(26),uint256(10000),uint256(66),uint256(2014223714),uint256(9999),uint256(1),uint256(26),uint256(1532892062),uint256(26),uint256(3),uint256(66),uint256(255),uint256(2014223715),uint256(0),uint256(1532892064),uint256(1337),uint256(65),uint256(1336),uint256(1338),uint256(2014223716),uint256(2014223714),uint256(2),uint256(2),uint256(64),uint256(2),uint256(1337),uint256(254),uint256(2014223714),uint256(3),uint256(26),uint256(254),uint256(26),uint256(255),uint256(1532892063),uint256(2014223716),uint256(3),uint256(3),uint256(254),uint256(65),uint256(64),uint256(2014223716),uint256(0),uint256(26),uint256(1337),uint256(1337),uint256(1),uint256(1),uint256(27),uint256(256),uint256(10001),uint256(1338),uint256(1532892062),uint256(64),uint256(254),uint256(1337),uint256(26),uint256(5),uint256(27),uint256(64),uint256(97),uint256(1337),uint256(65),uint256(255),uint256(64),uint256(10001),uint256(26),uint256(65),uint256(28),uint256(1338),uint256(65),uint256(6),uint256(2014223715),uint256(96),uint256(27),uint256(65),uint256(1336),uint256(6),uint256(255),uint256(29),uint256(10001)]"
              },
              {
                "js": "[97,4,27,26,29,1337,1532892062,28,96,10000,0,28,1,2,256,29,1532892062,2014223715,4,3,65,6,1532892064,254,1338,9999,0,1337,29,1338,65,95,9999,65,28,2,1338,66,1,1337,256,29,1532892064,2,1532892063,64,9999,97,1338,2014223716,65,2,27,10001,1532892063,4,0,1532892063,1,1532892064,1336,10001,256,27,1,2014223714,26,1532892063,1532892064,96,1,1,254,27,29,29,2,64,95,1338,1336,66,26,95,97,27,28,95,256,97,5,96,0,66,5]",
                "sol": "[uint256(97),uint256(4),uint256(27),uint256(26),uint256(29),uint256(1337),uint256(1532892062),uint256(28),uint256(96),uint256(10000),uint256(0),uint256(28),uint256(1),uint256(2),uint256(256),uint256(29),uint256(1532892062),uint256(2014223715),uint256(4),uint256(3),uint256(65),uint256(6),uint256(1532892064),uint256(254),uint256(1338),uint256(9999),uint256(0),uint256(1337),uint256(29),uint256(1338),uint256(65),uint256(95),uint256(9999),uint256(65),uint256(28),uint256(2),uint256(1338),uint256(66),uint256(1),uint256(1337),uint256(256),uint256(29),uint256(1532892064),uint256(2),uint256(1532892063),uint256(64),uint256(9999),uint256(97),uint256(1338),uint256(2014223716),uint256(65),uint256(2),uint256(27),uint256(10001),uint256(1532892063),uint256(4),uint256(0),uint256(1532892063),uint256(1),uint256(1532892064),uint256(1336),uint256(10001),uint256(256),uint256(27),uint256(1),uint256(2014223714),uint256(26),uint256(1532892063),uint256(1532892064),uint256(96),uint256(1),uint256(1),uint256(254),uint256(27),uint256(29),uint256(29),uint256(2),uint256(64),uint256(95),uint256(1338),uint256(1336),uint256(66),uint256(26),uint256(95),uint256(97),uint256(27),uint256(28),uint256(95),uint256(256),uint256(97),uint256(5),uint256(96),uint256(0),uint256(66),uint256(5)]"
              },
              {
                "js": "[[46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184],[249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209],[90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123],[184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166],[10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253],[0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249],[101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195],[221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75],[1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234],[72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3],[69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223],[175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177],[89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226],[183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114],[186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212],[136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78],[178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81],[124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120],[143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46],[139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101],[223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79],[182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162],[40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90],[242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80],[138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158],[132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17],[127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138],[23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119],[232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180],[199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173],[187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92],[127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253],[48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225],[199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20],[185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170],[223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203],[182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229],[99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27],[196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83],[188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76],[242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192],[34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180],[47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206],[145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82],[60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29],[244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86],[237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252],[242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165],[16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116],[26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187],[81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157],[215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68],[105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101],[160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6],[77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248],[121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219],[47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4],[179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4],[42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205],[11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206],[28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143],[239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165],[159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242],[219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79],[209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179],[174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233],[241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226],[181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234],[79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228],[26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222],[73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121],[141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202],[114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104],[158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118],[194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239],[112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128],[87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66],[143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231],[117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227],[94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158],[232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72],[85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27],[239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195],[101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138],[49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65],[237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238],[39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59],[216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241],[82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181],[211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169],[183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116],[241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61],[70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116],[223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233],[58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246]]",
                "sol": "[bytes32(stringToBytes32(\"46,56,14,192,95,208,198,84,187,95,12,127,182,26,10,216,253,99,145,170,105,165,191,34,92,252,57,169,43,201,229,184\")),bytes32(stringToBytes32(\"249,141,196,139,56,69,210,11,7,230,80,81,189,177,13,132,169,38,16,76,2,38,158,73,191,170,238,142,15,97,73,209\")),bytes32(stringToBytes32(\"90,217,144,119,28,71,43,43,99,245,47,62,93,171,243,210,46,144,195,187,6,64,3,30,89,50,104,251,227,123,127,123\")),bytes32(stringToBytes32(\"184,47,192,129,111,38,221,133,228,23,52,125,37,247,109,215,56,238,186,155,246,176,200,149,157,252,237,236,55,167,122,166\")),bytes32(stringToBytes32(\"10,164,232,221,206,174,249,71,11,244,253,239,16,13,209,138,82,96,93,170,233,108,252,0,149,115,41,66,24,40,221,253\")),bytes32(stringToBytes32(\"0,50,201,99,58,185,138,117,97,204,83,172,59,220,255,90,8,111,217,190,150,21,103,50,181,77,22,168,149,245,139,249\")),bytes32(stringToBytes32(\"101,146,59,5,212,166,133,39,213,4,114,140,21,149,229,193,134,35,59,35,40,233,23,110,9,7,216,124,180,36,139,195\")),bytes32(stringToBytes32(\"221,196,43,135,217,75,18,200,121,137,45,216,60,198,179,253,101,135,22,107,250,250,20,141,183,153,164,65,241,109,252,75\")),bytes32(stringToBytes32(\"1,30,23,180,248,66,115,187,26,116,44,223,200,49,33,74,193,132,2,229,160,31,234,202,228,15,54,163,127,203,170,234\")),bytes32(stringToBytes32(\"72,131,31,77,246,197,107,203,204,98,22,102,124,104,57,125,167,81,29,106,232,229,243,157,51,64,9,86,94,227,183,3\")),bytes32(stringToBytes32(\"69,105,14,4,19,119,140,72,179,65,217,237,117,35,209,171,171,13,68,197,42,157,57,70,82,167,255,197,103,158,62,223\")),bytes32(stringToBytes32(\"175,196,168,65,220,85,142,99,180,200,73,243,163,125,183,129,168,38,244,247,99,253,12,0,95,114,110,120,31,145,163,177\")),bytes32(stringToBytes32(\"89,183,130,206,165,224,64,152,34,36,230,84,120,146,62,32,55,2,1,66,238,245,119,70,241,202,252,217,65,99,102,226\")),bytes32(stringToBytes32(\"183,222,118,238,31,170,250,214,171,119,86,60,225,61,75,125,98,30,165,129,143,57,211,73,147,141,171,141,191,47,111,114\")),bytes32(stringToBytes32(\"186,144,50,45,107,169,221,120,70,13,249,175,82,138,36,208,152,0,149,252,184,222,200,126,22,99,78,55,4,216,184,212\")),bytes32(stringToBytes32(\"136,83,49,232,176,153,154,121,16,123,209,67,65,95,153,219,88,241,190,237,12,142,195,242,184,118,96,6,234,13,129,78\")),bytes32(stringToBytes32(\"178,64,116,19,66,211,182,68,49,133,238,252,216,88,130,221,125,161,45,97,205,40,219,6,36,175,6,230,63,147,198,81\")),bytes32(stringToBytes32(\"124,219,105,8,77,153,251,156,146,9,30,59,52,255,180,198,255,139,220,229,219,168,9,26,50,159,55,150,227,39,134,120\")),bytes32(stringToBytes32(\"143,199,50,49,109,229,81,11,159,174,143,108,213,243,89,249,176,94,103,222,175,91,31,255,229,182,151,0,11,128,67,46\")),bytes32(stringToBytes32(\"139,144,220,119,123,237,217,103,194,68,30,86,60,187,97,210,175,160,172,147,33,222,229,247,85,165,67,122,25,217,115,101\")),bytes32(stringToBytes32(\"223,210,171,8,161,108,180,109,230,142,207,131,243,88,116,198,221,65,222,222,155,18,81,199,57,112,103,212,207,112,130,79\")),bytes32(stringToBytes32(\"182,59,255,197,26,153,213,126,46,131,101,4,121,48,5,224,68,65,106,84,193,142,46,118,241,89,121,10,146,237,89,162\")),bytes32(stringToBytes32(\"40,133,22,210,89,42,75,164,163,251,239,186,148,106,12,100,209,5,219,4,189,121,6,224,119,251,151,23,238,20,208,90\")),bytes32(stringToBytes32(\"242,190,1,52,40,67,108,196,11,115,113,233,140,227,121,159,139,94,193,102,45,135,31,60,195,155,216,19,223,147,81,80\")),bytes32(stringToBytes32(\"138,69,233,38,42,16,61,17,8,156,48,240,74,203,210,70,75,64,156,187,139,103,139,63,90,125,222,224,106,222,76,158\")),bytes32(stringToBytes32(\"132,155,60,166,62,195,237,17,43,99,1,23,140,56,210,82,5,87,94,237,200,29,202,41,231,35,155,190,176,72,246,17\")),bytes32(stringToBytes32(\"127,227,229,250,61,132,81,196,29,107,23,156,179,25,5,186,187,94,168,51,29,34,204,132,219,126,226,255,218,231,122,138\")),bytes32(stringToBytes32(\"23,110,44,214,40,162,208,211,182,69,241,90,240,154,196,49,67,163,254,167,182,5,150,126,26,179,113,222,179,180,66,119\")),bytes32(stringToBytes32(\"232,19,108,6,101,85,219,48,29,200,244,218,253,74,199,90,153,195,38,23,208,98,99,73,190,43,254,153,75,194,143,180\")),bytes32(stringToBytes32(\"199,59,180,160,37,97,191,28,109,95,156,63,228,212,249,31,125,241,131,70,72,172,96,63,72,81,207,190,106,178,174,173\")),bytes32(stringToBytes32(\"187,235,174,164,21,247,242,194,252,115,165,56,118,12,44,221,238,12,246,142,36,146,216,240,45,93,237,31,147,101,7,92\")),bytes32(stringToBytes32(\"127,97,79,254,165,110,232,123,57,248,104,43,30,145,221,149,221,192,25,186,80,76,204,31,193,71,240,155,174,133,223,253\")),bytes32(stringToBytes32(\"48,25,181,50,115,55,107,226,247,61,85,180,154,53,165,74,22,44,101,110,156,218,254,246,222,139,234,187,179,62,3,225\")),bytes32(stringToBytes32(\"199,246,118,153,135,159,222,172,182,104,77,149,27,200,253,243,205,185,208,24,80,162,102,173,233,33,214,84,243,78,166,20\")),bytes32(stringToBytes32(\"185,19,204,72,92,253,184,217,59,175,151,130,105,250,209,178,174,173,91,89,164,155,240,217,105,39,74,69,59,107,30,170\")),bytes32(stringToBytes32(\"223,147,75,138,142,235,77,241,133,90,88,63,47,106,186,251,144,129,182,247,73,19,113,122,192,65,177,133,133,226,74,203\")),bytes32(stringToBytes32(\"182,76,130,235,249,193,25,26,215,63,179,76,120,203,28,104,11,154,18,33,214,171,203,130,108,2,70,4,26,27,21,229\")),bytes32(stringToBytes32(\"99,228,226,138,19,167,174,180,57,176,14,224,22,14,219,43,44,141,222,176,176,254,190,162,34,26,243,127,255,34,92,27\")),bytes32(stringToBytes32(\"196,242,29,87,118,26,67,155,15,116,154,156,194,14,238,81,168,10,124,191,248,99,141,48,123,113,58,58,90,83,84,83\")),bytes32(stringToBytes32(\"188,159,205,102,38,239,221,99,119,86,99,249,148,120,182,73,150,91,248,161,231,12,203,229,241,27,154,159,124,214,246,76\")),bytes32(stringToBytes32(\"242,32,95,152,0,191,145,228,46,69,165,235,89,46,164,176,152,44,22,141,146,12,198,55,88,78,173,85,160,216,77,192\")),bytes32(stringToBytes32(\"34,84,223,33,132,208,132,20,51,9,180,91,126,42,120,157,210,73,91,5,35,10,202,13,8,124,217,160,113,202,244,180\")),bytes32(stringToBytes32(\"47,159,17,23,120,69,240,235,189,118,77,102,132,53,16,63,78,137,196,55,21,222,82,126,15,105,220,80,180,190,198,206\")),bytes32(stringToBytes32(\"145,224,233,71,121,7,36,200,126,109,53,38,144,139,130,254,199,143,77,42,198,198,108,251,247,103,100,229,10,54,157,82\")),bytes32(stringToBytes32(\"60,26,60,48,38,37,207,148,7,42,184,52,14,89,25,164,199,205,185,135,64,79,205,208,100,107,236,182,10,155,198,29\")),bytes32(stringToBytes32(\"244,141,50,242,53,91,71,227,58,153,252,195,18,65,181,233,89,158,203,118,246,59,36,156,161,112,227,144,218,246,117,86\")),bytes32(stringToBytes32(\"237,1,71,143,201,30,219,203,65,150,203,234,103,53,103,120,84,84,85,178,20,11,17,106,100,130,198,198,98,161,229,252\")),bytes32(stringToBytes32(\"242,36,6,0,215,194,105,204,4,2,203,36,193,152,21,76,148,83,20,189,203,80,197,197,74,180,0,253,85,175,250,165\")),bytes32(stringToBytes32(\"16,176,102,12,71,139,71,167,29,235,61,108,255,33,66,89,146,196,115,120,200,86,149,193,80,53,9,61,49,150,44,116\")),bytes32(stringToBytes32(\"26,246,191,1,105,227,44,41,64,139,184,255,62,83,208,97,157,169,76,60,250,62,4,33,238,9,67,176,51,210,147,187\")),bytes32(stringToBytes32(\"81,149,150,12,162,11,58,31,99,23,183,205,205,2,198,159,73,102,223,53,105,55,88,193,43,188,68,236,153,2,32,157\")),bytes32(stringToBytes32(\"215,34,237,209,63,99,226,131,110,152,186,31,42,100,112,65,41,32,230,68,219,198,185,54,42,26,92,40,66,171,36,68\")),bytes32(stringToBytes32(\"105,186,69,102,16,27,73,85,239,175,14,191,92,43,69,160,48,177,230,202,63,85,108,223,2,223,15,168,205,228,17,101\")),bytes32(stringToBytes32(\"160,45,139,35,9,177,244,65,255,38,157,231,249,248,160,169,80,6,95,13,250,73,172,223,197,204,102,89,240,162,209,6\")),bytes32(stringToBytes32(\"77,240,106,66,36,17,101,150,198,145,205,154,146,244,151,199,121,167,92,37,255,25,216,216,241,68,166,43,155,228,248,248\")),bytes32(stringToBytes32(\"121,39,80,115,121,44,4,129,186,188,230,37,173,207,23,147,43,123,231,243,238,118,246,108,233,199,203,127,5,250,206,219\")),bytes32(stringToBytes32(\"47,251,75,254,143,12,165,208,46,14,50,33,188,75,39,18,36,22,216,91,90,190,120,142,179,104,24,54,246,60,236,4\")),bytes32(stringToBytes32(\"179,194,9,25,199,235,55,221,78,26,0,162,117,197,221,186,84,148,148,113,9,35,211,100,230,65,199,171,171,100,57,4\")),bytes32(stringToBytes32(\"42,24,119,218,201,185,181,142,55,81,51,245,172,235,54,11,7,169,228,168,246,229,158,103,158,170,145,15,146,167,231,205\")),bytes32(stringToBytes32(\"11,119,17,145,213,163,248,215,139,0,199,209,227,215,221,144,82,16,170,240,14,206,74,178,82,76,87,232,51,29,128,206\")),bytes32(stringToBytes32(\"28,31,251,248,144,70,41,62,200,74,134,213,22,1,25,86,133,207,76,202,206,79,73,100,151,182,79,49,206,139,191,143\")),bytes32(stringToBytes32(\"239,198,140,56,155,44,73,25,172,203,172,54,212,250,84,79,200,214,111,20,126,102,31,32,48,71,100,228,206,165,112,165\")),bytes32(stringToBytes32(\"159,167,208,51,151,150,129,126,165,123,4,64,221,94,250,207,164,115,85,42,127,43,194,214,153,224,255,181,97,251,167,242\")),bytes32(stringToBytes32(\"219,208,208,162,237,158,12,127,65,166,174,186,60,173,96,85,95,12,235,57,96,65,43,160,15,191,255,87,202,254,170,79\")),bytes32(stringToBytes32(\"209,50,159,110,80,249,187,225,57,160,102,237,73,245,194,169,11,107,167,208,163,162,205,245,76,41,127,117,177,19,180,179\")),bytes32(stringToBytes32(\"174,43,255,132,142,221,83,193,51,78,73,131,227,203,130,222,129,18,95,169,26,206,3,121,187,9,14,97,147,165,191,233\")),bytes32(stringToBytes32(\"241,121,87,227,241,209,173,121,106,8,251,53,54,40,29,191,78,255,48,7,176,75,130,164,109,228,93,2,179,214,192,226\")),bytes32(stringToBytes32(\"181,223,168,143,221,17,38,179,91,59,22,184,175,204,224,176,110,14,163,158,74,118,162,156,176,91,39,56,38,34,55,234\")),bytes32(stringToBytes32(\"79,34,127,73,215,76,198,201,132,226,69,101,48,79,239,169,6,224,72,110,220,57,151,42,7,213,55,55,31,18,166,228\")),bytes32(stringToBytes32(\"26,45,144,248,222,194,5,199,132,78,129,53,57,147,51,68,168,73,216,166,46,198,37,116,76,167,234,30,119,171,45,222\")),bytes32(stringToBytes32(\"73,45,243,197,179,59,200,207,154,207,60,99,211,238,68,10,76,29,193,2,18,219,94,27,136,161,240,111,153,126,67,121\")),bytes32(stringToBytes32(\"141,58,131,108,196,114,59,7,62,136,158,68,74,184,149,151,227,181,129,132,18,177,210,156,142,112,201,214,244,124,113,202\")),bytes32(stringToBytes32(\"114,21,23,11,98,210,21,248,4,182,203,30,64,213,184,27,164,121,212,221,140,14,145,2,165,153,174,129,5,87,240,104\")),bytes32(stringToBytes32(\"158,207,158,62,20,70,106,161,8,12,67,192,179,249,125,123,168,27,78,174,174,54,66,40,80,190,62,244,109,250,169,118\")),bytes32(stringToBytes32(\"194,245,250,158,250,162,51,222,110,6,9,149,108,156,31,164,222,246,224,93,9,47,241,124,206,43,87,67,252,245,169,239\")),bytes32(stringToBytes32(\"112,218,64,22,116,133,166,156,47,137,95,76,66,60,190,175,53,81,14,31,144,197,207,57,187,167,254,134,75,41,137,128\")),bytes32(stringToBytes32(\"87,105,119,195,107,70,24,198,78,18,105,236,94,220,181,62,122,252,13,111,105,107,77,111,38,183,186,60,241,102,219,66\")),bytes32(stringToBytes32(\"143,35,1,177,145,138,14,181,125,210,5,137,27,56,99,45,171,204,63,234,226,28,232,109,131,72,84,110,163,182,171,231\")),bytes32(stringToBytes32(\"117,142,13,54,93,200,176,234,28,200,190,211,70,244,93,20,85,103,243,81,67,127,152,69,73,29,39,103,247,20,53,227\")),bytes32(stringToBytes32(\"94,209,207,79,6,54,28,99,85,141,255,205,9,255,216,102,64,122,246,24,107,218,182,83,157,34,119,205,240,126,36,158\")),bytes32(stringToBytes32(\"232,212,116,55,163,243,86,182,28,131,36,90,27,157,71,157,167,125,209,210,11,213,46,201,88,71,242,246,125,199,207,72\")),bytes32(stringToBytes32(\"85,98,90,128,45,57,10,47,15,183,233,71,206,190,95,107,3,122,226,203,30,32,163,185,166,20,39,179,238,243,169,27\")),bytes32(stringToBytes32(\"239,102,226,102,125,53,237,128,57,120,46,99,111,12,114,82,108,123,153,151,165,187,91,91,38,127,53,26,3,135,158,195\")),bytes32(stringToBytes32(\"101,53,255,211,252,68,212,40,247,145,72,0,165,48,129,125,18,82,53,187,74,75,90,8,165,96,246,171,144,199,89,138\")),bytes32(stringToBytes32(\"49,225,209,186,92,95,110,170,139,172,239,165,187,50,249,180,137,86,163,68,139,74,96,43,160,158,72,12,163,101,115,65\")),bytes32(stringToBytes32(\"237,65,135,100,187,71,211,199,177,52,73,38,194,119,67,200,216,179,233,147,169,216,29,140,16,222,229,148,70,33,145,238\")),bytes32(stringToBytes32(\"39,0,153,227,45,101,90,68,68,183,29,158,223,180,109,169,225,49,246,132,225,218,54,21,234,37,160,87,66,87,149,59\")),bytes32(stringToBytes32(\"216,18,19,65,22,60,62,253,58,14,57,210,188,160,144,184,167,238,182,149,31,104,106,201,107,207,242,5,146,19,139,241\")),bytes32(stringToBytes32(\"82,25,235,176,171,28,38,159,221,67,9,56,212,211,13,43,51,158,147,9,153,142,163,221,91,136,136,148,95,13,144,181\")),bytes32(stringToBytes32(\"211,76,34,28,37,180,102,32,136,30,18,57,178,75,194,33,88,72,66,250,161,182,132,118,92,68,177,132,65,108,110,169\")),bytes32(stringToBytes32(\"183,10,242,226,13,233,103,160,204,26,110,251,37,76,130,51,148,144,123,96,58,2,119,59,76,1,235,136,88,36,91,116\")),bytes32(stringToBytes32(\"241,166,25,36,61,184,78,197,231,36,41,141,8,99,32,59,73,204,78,137,190,30,50,211,6,236,143,102,15,109,158,61\")),bytes32(stringToBytes32(\"70,5,27,174,180,61,68,128,242,5,90,166,195,75,78,7,113,236,120,241,242,114,244,157,39,190,194,176,139,129,58,116\")),bytes32(stringToBytes32(\"223,235,98,30,65,177,243,80,98,144,93,115,52,127,33,119,254,203,55,26,4,70,82,118,0,204,137,75,43,156,51,233\")),bytes32(stringToBytes32(\"58,129,62,150,62,120,6,107,217,72,19,54,209,83,191,169,77,71,237,51,74,169,155,139,1,157,242,69,238,182,90,246\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.325ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[165,128,104,22,61,240,193,190,195,236,199,135,138,180,203,95,49,176,140,14,179,53,99,169,176,90,208,130,54,103,13,61]",
              "sol": "stringToBytes32(\"165,128,104,22,61,240,193,190,195,236,199,135,138,180,203,95,49,176,140,14,179,53,99,169,176,90,208,130,54,103,13,61\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[165,128,104,22,61,240,193,190,195,236,199,135,138,180,203,95,49,176,140,14,179,53,99,169,176,90,208,130,54,103,13,61]",
                "sol": "stringToBytes32(\"165,128,104,22,61,240,193,190,195,236,199,135,138,180,203,95,49,176,140,14,179,53,99,169,176,90,208,130,54,103,13,61\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.326ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.327ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "[12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51]",
              "sol": "stringToBytes32(\"12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51\")"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "[12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51]",
                "sol": "stringToBytes32(\"12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51\")"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51]",
                "sol": "stringToBytes32(\"12,248,18,48,50,213,13,37,139,154,229,5,93,103,239,154,147,202,33,216,79,125,150,235,132,165,75,146,19,165,32,51\")"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "[219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186]",
              "sol": "stringToBytes32(\"219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186\")"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[8]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "[219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186]",
                "sol": "stringToBytes32(\"219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186\")"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186]",
                "sol": "stringToBytes32(\"219,162,208,126,38,63,138,75,15,121,175,158,56,63,110,227,40,255,121,145,115,72,84,131,42,14,156,51,35,94,106,186\")"
              },
              {
                "js": "1532892063",
                "sol": "1532892063"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.330ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"PayableExample\"",
              "sol": "\"PayableExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.331ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[201,49,71,236,69,28,7,70,177,209,30,55,53,98,195,221,31,197,128,215,211,24,25,112,58,57,240,203,80,255,19,74],[241,218,163,197,89,216,2,103,196,65,207,33,231,91,151,13,64,218,216,201,71,124,155,194,155,113,175,41,1,215,137,189],[175,97,197,126,180,179,14,141,183,39,145,223,158,130,86,148,240,124,114,217,44,63,225,150,214,50,103,148,182,6,38,18],[244,223,98,130,226,190,98,55,21,150,16,175,124,136,3,14,227,86,229,166,154,219,208,97,164,169,101,251,135,51,203,77]]",
              "sol": "[bytes32(stringToBytes32(\"201,49,71,236,69,28,7,70,177,209,30,55,53,98,195,221,31,197,128,215,211,24,25,112,58,57,240,203,80,255,19,74\")),bytes32(stringToBytes32(\"241,218,163,197,89,216,2,103,196,65,207,33,231,91,151,13,64,218,216,201,71,124,155,194,155,113,175,41,1,215,137,189\")),bytes32(stringToBytes32(\"175,97,197,126,180,179,14,141,183,39,145,223,158,130,86,148,240,124,114,217,44,63,225,150,214,50,103,148,182,6,38,18\")),bytes32(stringToBytes32(\"244,223,98,130,226,190,98,55,21,150,16,175,124,136,3,14,227,86,229,166,154,219,208,97,164,169,101,251,135,51,203,77\"))]"
            },
            {
              "js": "[[66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94],[188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165],[26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9],[126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65]]",
              "sol": "[bytes32(stringToBytes32(\"66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94\")),bytes32(stringToBytes32(\"188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165\")),bytes32(stringToBytes32(\"26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9\")),bytes32(stringToBytes32(\"126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65\"))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[201,49,71,236,69,28,7,70,177,209,30,55,53,98,195,221,31,197,128,215,211,24,25,112,58,57,240,203,80,255,19,74],[241,218,163,197,89,216,2,103,196,65,207,33,231,91,151,13,64,218,216,201,71,124,155,194,155,113,175,41,1,215,137,189],[175,97,197,126,180,179,14,141,183,39,145,223,158,130,86,148,240,124,114,217,44,63,225,150,214,50,103,148,182,6,38,18],[244,223,98,130,226,190,98,55,21,150,16,175,124,136,3,14,227,86,229,166,154,219,208,97,164,169,101,251,135,51,203,77]]",
                "sol": "[bytes32(stringToBytes32(\"201,49,71,236,69,28,7,70,177,209,30,55,53,98,195,221,31,197,128,215,211,24,25,112,58,57,240,203,80,255,19,74\")),bytes32(stringToBytes32(\"241,218,163,197,89,216,2,103,196,65,207,33,231,91,151,13,64,218,216,201,71,124,155,194,155,113,175,41,1,215,137,189\")),bytes32(stringToBytes32(\"175,97,197,126,180,179,14,141,183,39,145,223,158,130,86,148,240,124,114,217,44,63,225,150,214,50,103,148,182,6,38,18\")),bytes32(stringToBytes32(\"244,223,98,130,226,190,98,55,21,150,16,175,124,136,3,14,227,86,229,166,154,219,208,97,164,169,101,251,135,51,203,77\"))]"
              },
              {
                "js": "[[66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94],[188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165],[26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9],[126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65]]",
                "sol": "[bytes32(stringToBytes32(\"66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94\")),bytes32(stringToBytes32(\"188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165\")),bytes32(stringToBytes32(\"26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9\")),bytes32(stringToBytes32(\"126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[145,198,188,161,11,86,149,156,57,135,18,6,137,79,16,30,186,187,184,219,50,239,65,222,239,168,108,158,3,190,47,176],[17,247,222,67,25,242,139,113,224,208,239,187,175,196,196,200,228,190,190,215,248,108,92,107,44,82,38,104,217,63,125,148],[102,217,199,55,72,101,120,178,212,111,151,1,43,190,196,150,163,82,241,243,152,212,23,120,79,149,187,71,225,70,166,147],[217,130,169,195,191,177,134,1,164,170,108,212,229,218,13,145,109,50,216,68,81,185,113,141,186,251,38,154,165,130,9,89],[247,163,203,133,190,252,234,109,3,118,194,30,211,114,161,221,44,122,98,191,72,61,7,8,219,122,143,168,240,162,93,2]]",
                "sol": "[stringToBytes32(\"229,96,82,96,116,63,201,120,110,116,222,91,210,25,147,125,158,122,23,133,86,195,161,106,178,42,80,156,55,59,120,179\"),stringToBytes32(\"248,58,79,217,102,66,91,141,57,186,4,13,170,15,84,19,179,36,210,154,203,219,172,97,138,211,43,131,249,181,221,124\"),stringToBytes32(\"132,251,3,223,236,51,185,101,29,209,102,230,108,181,164,170,102,250,254,255,91,119,114,225,231,198,78,104,25,135,51,140\"),stringToBytes32(\"217,82,244,96,57,233,51,165,136,101,4,18,220,87,171,143,120,243,23,28,114,209,118,110,191,220,97,103,196,154,31,218\"),stringToBytes32(\"201,36,203,242,39,193,41,145,231,53,220,118,110,243,14,98,255,126,129,120,242,185,11,90,198,31,106,229,230,209,183,11\")]"
              },
              {
                "js": "[[66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94],[188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165],[26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9],[126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65]]",
                "sol": "[bytes32(stringToBytes32(\"66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94\")),bytes32(stringToBytes32(\"188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165\")),bytes32(stringToBytes32(\"26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9\")),bytes32(stringToBytes32(\"126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94],[188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165],[26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9],[126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65]]",
                "sol": "[bytes32(stringToBytes32(\"66,48,154,186,110,138,97,78,198,73,140,11,95,165,139,130,47,52,77,210,18,190,124,63,61,168,9,22,35,148,111,94\")),bytes32(stringToBytes32(\"188,247,59,63,51,250,190,105,249,239,62,236,217,63,119,243,120,72,146,49,189,170,25,44,158,199,141,134,162,237,18,165\")),bytes32(stringToBytes32(\"26,95,238,244,118,86,201,205,153,159,137,148,125,193,37,62,150,179,155,124,139,148,116,35,196,67,147,42,80,172,75,9\")),bytes32(stringToBytes32(\"126,237,152,210,30,49,57,190,136,237,91,146,165,97,118,32,125,159,50,138,15,160,84,93,117,191,117,231,241,35,172,65\"))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.338ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"RevertWithReason\"",
                "sol": "\"RevertWithReason\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.342ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[7],accounts[4],accounts[9],accounts[8],accounts[1],accounts[8],accounts[6],accounts[9],accounts[1],accounts[1],accounts[7],accounts[0],accounts[7],accounts[9],accounts[9],accounts[5],accounts[0],accounts[9],accounts[5],accounts[3],accounts[7],accounts[7],accounts[8],accounts[4],accounts[7],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[1337,96,5,1,28,2014223714,1336,0,257,1532892062,1532892063,29,10001,0,10001,95,29,29,1,5,3,2,1532892063,1,5,9999,1]",
              "sol": "[uint256(1337),uint256(96),uint256(5),uint256(1),uint256(28),uint256(2014223714),uint256(1336),uint256(0),uint256(257),uint256(1532892062),uint256(1532892063),uint256(29),uint256(10001),uint256(0),uint256(10001),uint256(95),uint256(29),uint256(29),uint256(1),uint256(5),uint256(3),uint256(2),uint256(1532892063),uint256(1),uint256(5),uint256(9999),uint256(1)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[7],accounts[4],accounts[9],accounts[8],accounts[1],accounts[8],accounts[6],accounts[9],accounts[1],accounts[1],accounts[7],accounts[0],accounts[7],accounts[9],accounts[9],accounts[5],accounts[0],accounts[9],accounts[5],accounts[3],accounts[7],accounts[7],accounts[8],accounts[4],accounts[7],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[1337,96,5,1,28,2014223714,1336,0,257,1532892062,1532892063,29,10001,0,10001,95,29,29,1,5,3,2,1532892063,1,5,9999,1]",
                "sol": "[uint256(1337),uint256(96),uint256(5),uint256(1),uint256(28),uint256(2014223714),uint256(1336),uint256(0),uint256(257),uint256(1532892062),uint256(1532892063),uint256(29),uint256(10001),uint256(0),uint256(10001),uint256(95),uint256(29),uint256(29),uint256(1),uint256(5),uint256(3),uint256(2),uint256(1532892063),uint256(1),uint256(5),uint256(9999),uint256(1)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[3],accounts[3],accounts[8],accounts[1],accounts[4],accounts[4],accounts[5],accounts[4],accounts[1],accounts[3],accounts[4],accounts[9],accounts[5],accounts[7],accounts[9],accounts[5],accounts[5],accounts[5],accounts[2],accounts[2],accounts[4],accounts[5],accounts[9],accounts[4],accounts[5],accounts[2],accounts[4],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[1337,96,5,1,28,2014223714,1336,0,257,1532892062,1532892063,29,10001,0,10001,95,29,29,1,5,3,2,1532892063,1,5,9999,1]",
                "sol": "[uint256(1337),uint256(96),uint256(5),uint256(1),uint256(28),uint256(2014223714),uint256(1336),uint256(0),uint256(257),uint256(1532892062),uint256(1532892063),uint256(29),uint256(10001),uint256(0),uint256(10001),uint256(95),uint256(29),uint256(29),uint256(1),uint256(5),uint256(3),uint256(2),uint256(1532892063),uint256(1),uint256(5),uint256(9999),uint256(1)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[1337,96,5,1,28,2014223714,1336,0,257,1532892062,1532892063,29,10001,0,10001,95,29,29,1,5,3,2,1532892063,1,5,9999,1]",
                "sol": "[uint256(1337),uint256(96),uint256(5),uint256(1),uint256(28),uint256(2014223714),uint256(1336),uint256(0),uint256(257),uint256(1532892062),uint256(1532892063),uint256(29),uint256(10001),uint256(0),uint256(10001),uint256(95),uint256(29),uint256(29),uint256(1),uint256(5),uint256(3),uint256(2),uint256(1532892063),uint256(1),uint256(5),uint256(9999),uint256(1)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.344ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.345ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[3],accounts[0],accounts[8],accounts[8],accounts[7],accounts[0],accounts[4],accounts[3],accounts[2],accounts[6],accounts[7],accounts[1],accounts[2],accounts[7],accounts[5],accounts[2],accounts[2],accounts[1],accounts[0],accounts[4],accounts[3],accounts[7],accounts[1],accounts[4],accounts[3],accounts[3],accounts[8],accounts[3],accounts[6],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[4],accounts[3],accounts[0],accounts[3],accounts[4],accounts[9],accounts[2],accounts[4],accounts[6],accounts[9],accounts[7],accounts[1],accounts[8],accounts[7],accounts[2],accounts[7],accounts[2],accounts[1],accounts[7],accounts[3],accounts[2],accounts[3],accounts[4],accounts[9],accounts[2],accounts[9],accounts[2],accounts[6],accounts[3],accounts[8],accounts[0],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[3],accounts[0],accounts[8],accounts[8],accounts[7],accounts[0],accounts[4],accounts[3],accounts[2],accounts[6],accounts[7],accounts[1],accounts[2],accounts[7],accounts[5],accounts[2],accounts[2],accounts[1],accounts[0],accounts[4],accounts[3],accounts[7],accounts[1],accounts[4],accounts[3],accounts[3],accounts[8],accounts[3],accounts[6],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[4],accounts[3],accounts[0],accounts[3],accounts[4],accounts[9],accounts[2],accounts[4],accounts[6],accounts[9],accounts[7],accounts[1],accounts[8],accounts[7],accounts[2],accounts[7],accounts[2],accounts[1],accounts[7],accounts[3],accounts[2],accounts[3],accounts[4],accounts[9],accounts[2],accounts[9],accounts[2],accounts[6],accounts[3],accounts[8],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[3],accounts[0],accounts[8],accounts[8],accounts[7],accounts[0],accounts[4],accounts[3],accounts[2],accounts[6],accounts[7],accounts[1],accounts[2],accounts[7],accounts[5],accounts[2],accounts[2],accounts[1],accounts[0],accounts[4],accounts[3],accounts[7],accounts[1],accounts[4],accounts[3],accounts[3],accounts[8],accounts[3],accounts[6],accounts[3],accounts[6],accounts[4],accounts[4],accounts[0],accounts[4],accounts[3],accounts[0],accounts[3],accounts[4],accounts[9],accounts[2],accounts[4],accounts[6],accounts[9],accounts[7],accounts[1],accounts[8],accounts[7],accounts[2],accounts[7],accounts[2],accounts[1],accounts[7],accounts[3],accounts[2],accounts[3],accounts[4],accounts[9],accounts[2],accounts[9],accounts[2],accounts[6],accounts[3],accounts[8],accounts[0],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.348ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.349ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+788",
              "sol": "block.timestamp+788"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+788",
                "sol": "block.timestamp+788"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.353ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.359ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.364ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.370ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.373ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.375ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.376ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.377ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[6],accounts[6],accounts[1],accounts[7],accounts[0],accounts[5],accounts[9],accounts[6],accounts[1],accounts[2],accounts[0],accounts[9],accounts[8],accounts[1],accounts[0],accounts[0],accounts[3],accounts[0],accounts[2],accounts[1],accounts[2],accounts[6],accounts[5],accounts[9],accounts[7],accounts[4],accounts[8],accounts[5],accounts[7],accounts[8],accounts[0],accounts[6],accounts[6],accounts[7],accounts[4],accounts[9],accounts[1],accounts[6],accounts[4],accounts[3],accounts[5],accounts[4],accounts[5],accounts[2],accounts[6],accounts[1],accounts[8],accounts[2],accounts[1],accounts[7],accounts[8],accounts[6],accounts[7],accounts[9],accounts[7],accounts[6],accounts[2],accounts[2],accounts[3],accounts[2],accounts[1],accounts[6],accounts[5],accounts[9],accounts[0],accounts[7],accounts[9],accounts[5],accounts[2],accounts[5],accounts[4],accounts[6],accounts[5],accounts[8],accounts[0],accounts[0],accounts[9],accounts[8],accounts[9],accounts[8],accounts[8],accounts[3],accounts[5],accounts[1],accounts[1],accounts[7],accounts[9],accounts[5],accounts[9],accounts[0],accounts[3],accounts[5],accounts[9],accounts[1],accounts[7],accounts[7],accounts[2]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6],accounts[6],accounts[1],accounts[7],accounts[0],accounts[5],accounts[9],accounts[6],accounts[1],accounts[2],accounts[0],accounts[9],accounts[8],accounts[1],accounts[0],accounts[0],accounts[3],accounts[0],accounts[2],accounts[1],accounts[2],accounts[6],accounts[5],accounts[9],accounts[7],accounts[4],accounts[8],accounts[5],accounts[7],accounts[8],accounts[0],accounts[6],accounts[6],accounts[7],accounts[4],accounts[9],accounts[1],accounts[6],accounts[4],accounts[3],accounts[5],accounts[4],accounts[5],accounts[2],accounts[6],accounts[1],accounts[8],accounts[2],accounts[1],accounts[7],accounts[8],accounts[6],accounts[7],accounts[9],accounts[7],accounts[6],accounts[2],accounts[2],accounts[3],accounts[2],accounts[1],accounts[6],accounts[5],accounts[9],accounts[0],accounts[7],accounts[9],accounts[5],accounts[2],accounts[5],accounts[4],accounts[6],accounts[5],accounts[8],accounts[0],accounts[0],accounts[9],accounts[8],accounts[9],accounts[8],accounts[8],accounts[3],accounts[5],accounts[1],accounts[1],accounts[7],accounts[9],accounts[5],accounts[9],accounts[0],accounts[3],accounts[5],accounts[9],accounts[1],accounts[7],accounts[7],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[6],accounts[6],accounts[1],accounts[7],accounts[0],accounts[5],accounts[9],accounts[6],accounts[1],accounts[2],accounts[0],accounts[9],accounts[8],accounts[1],accounts[0],accounts[0],accounts[3],accounts[0],accounts[2],accounts[1],accounts[2],accounts[6],accounts[5],accounts[9],accounts[7],accounts[4],accounts[8],accounts[5],accounts[7],accounts[8],accounts[0],accounts[6],accounts[6],accounts[7],accounts[4],accounts[9],accounts[1],accounts[6],accounts[4],accounts[3],accounts[5],accounts[4],accounts[5],accounts[2],accounts[6],accounts[1],accounts[8],accounts[2],accounts[1],accounts[7],accounts[8],accounts[6],accounts[7],accounts[9],accounts[7],accounts[6],accounts[2],accounts[2],accounts[3],accounts[2],accounts[1],accounts[6],accounts[5],accounts[9],accounts[0],accounts[7],accounts[9],accounts[5],accounts[2],accounts[5],accounts[4],accounts[6],accounts[5],accounts[8],accounts[0],accounts[0],accounts[9],accounts[8],accounts[9],accounts[8],accounts[8],accounts[3],accounts[5],accounts[1],accounts[1],accounts[7],accounts[9],accounts[5],accounts[9],accounts[0],accounts[3],accounts[5],accounts[9],accounts[1],accounts[7],accounts[7],accounts[2]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.380ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T17:09:15.380ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T17:09:15.381ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}