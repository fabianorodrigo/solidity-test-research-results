,{
  "2020-11-11T23:15:13.588ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:19.918ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:26.305ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:32.685ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:39.271ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:45.720ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:52.306ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:15:58.985ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+793",
              "sol": "block.timestamp+793"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+793",
                "sol": "block.timestamp+793"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+793",
                "sol": "block.timestamp+793"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+793",
                "sol": "block.timestamp+793"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.687ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.689ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.692ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.695ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[9],accounts[4],accounts[7],accounts[8],accounts[4],accounts[2],accounts[6],accounts[6],accounts[8],accounts[6],accounts[5],accounts[7],accounts[4],accounts[9],accounts[5],accounts[8],accounts[4],accounts[7],accounts[5],accounts[2],accounts[2],accounts[4],accounts[5],accounts[6],accounts[2],accounts[2],accounts[3],accounts[9],accounts[0],accounts[9],accounts[4],accounts[6],accounts[1],accounts[3],accounts[7],accounts[5],accounts[4],accounts[5],accounts[8],accounts[0],accounts[9],accounts[9],accounts[8],accounts[5],accounts[5],accounts[8],accounts[6],accounts[6],accounts[3],accounts[2],accounts[0],accounts[4],accounts[1],accounts[3],accounts[0],accounts[4],accounts[8],accounts[9],accounts[8],accounts[1],accounts[5],accounts[3],accounts[0],accounts[4],accounts[8],accounts[7],accounts[5],accounts[4],accounts[3],accounts[1],accounts[0],accounts[3],accounts[0],accounts[5],accounts[8],accounts[8],accounts[2],accounts[7],accounts[6],accounts[5],accounts[8],accounts[4],accounts[8],accounts[3],accounts[0],accounts[2],accounts[6],accounts[0],accounts[0],accounts[3],accounts[4],accounts[0],accounts[7],accounts[1],accounts[2],accounts[1],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
              "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
            },
            {
              "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
              "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
            },
            {
              "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
              "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[4],accounts[7],accounts[8],accounts[4],accounts[2],accounts[6],accounts[6],accounts[8],accounts[6],accounts[5],accounts[7],accounts[4],accounts[9],accounts[5],accounts[8],accounts[4],accounts[7],accounts[5],accounts[2],accounts[2],accounts[4],accounts[5],accounts[6],accounts[2],accounts[2],accounts[3],accounts[9],accounts[0],accounts[9],accounts[4],accounts[6],accounts[1],accounts[3],accounts[7],accounts[5],accounts[4],accounts[5],accounts[8],accounts[0],accounts[9],accounts[9],accounts[8],accounts[5],accounts[5],accounts[8],accounts[6],accounts[6],accounts[3],accounts[2],accounts[0],accounts[4],accounts[1],accounts[3],accounts[0],accounts[4],accounts[8],accounts[9],accounts[8],accounts[1],accounts[5],accounts[3],accounts[0],accounts[4],accounts[8],accounts[7],accounts[5],accounts[4],accounts[3],accounts[1],accounts[0],accounts[3],accounts[0],accounts[5],accounts[8],accounts[8],accounts[2],accounts[7],accounts[6],accounts[5],accounts[8],accounts[4],accounts[8],accounts[3],accounts[0],accounts[2],accounts[6],accounts[0],accounts[0],accounts[3],accounts[4],accounts[0],accounts[7],accounts[1],accounts[2],accounts[1],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
                "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
              },
              {
                "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
                "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
              },
              {
                "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
                "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
                "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
              },
              {
                "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
                "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
              },
              {
                "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
                "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[5],accounts[1],accounts[2],accounts[9],accounts[6],accounts[5],accounts[1],accounts[3],accounts[8],accounts[8],accounts[9],accounts[1],accounts[4],accounts[4],accounts[2],accounts[9],accounts[9],accounts[8],accounts[5],accounts[4],accounts[9],accounts[7],accounts[3],accounts[9],accounts[9],accounts[2],accounts[7],accounts[1],accounts[5],accounts[5],accounts[9],accounts[5],accounts[2],accounts[3],accounts[4],accounts[4],accounts[5],accounts[9],accounts[4],accounts[7],accounts[6],accounts[3],accounts[8],accounts[2],accounts[8],accounts[6],accounts[9],accounts[1],accounts[1],accounts[0],accounts[4],accounts[4],accounts[3],accounts[9],accounts[2],accounts[6],accounts[4],accounts[8],accounts[3],accounts[9],accounts[0],accounts[1],accounts[2],accounts[6],accounts[6],accounts[3],accounts[9],accounts[7],accounts[4],accounts[3],accounts[0],accounts[4],accounts[4],accounts[2],accounts[7],accounts[3],accounts[2],accounts[9],accounts[4],accounts[4],accounts[6],accounts[7],accounts[3],accounts[5],accounts[1],accounts[3],accounts[5],accounts[0],accounts[0],accounts[1],accounts[9],accounts[9],accounts[7],accounts[4],accounts[0],accounts[9],accounts[8],accounts[1]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
                "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
              },
              {
                "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
                "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
              },
              {
                "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
                "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[1],accounts[3],accounts[4],accounts[9],accounts[2],accounts[0],accounts[5],accounts[1],accounts[4],accounts[8],accounts[8],accounts[7],accounts[2],accounts[2],accounts[4],accounts[2],accounts[0],accounts[7],accounts[8],accounts[9],accounts[6],accounts[9],accounts[4],accounts[8],accounts[7],accounts[8],accounts[2],accounts[6],accounts[0],accounts[1],accounts[1],accounts[8],accounts[4],accounts[3],accounts[3],accounts[5],accounts[4],accounts[4],accounts[2],accounts[2],accounts[0],accounts[0],accounts[1],accounts[8],accounts[2],accounts[3],accounts[5],accounts[9],accounts[8],accounts[7],accounts[8],accounts[4],accounts[4],accounts[1],accounts[1],accounts[3],accounts[2],accounts[9],accounts[6],accounts[9],accounts[6],accounts[8],accounts[4],accounts[1],accounts[3],accounts[7],accounts[7],accounts[7],accounts[6],accounts[5],accounts[8],accounts[7],accounts[5],accounts[1],accounts[2],accounts[0],accounts[5],accounts[4],accounts[2],accounts[4],accounts[7],accounts[6],accounts[4],accounts[3],accounts[0],accounts[8],accounts[7],accounts[8],accounts[3],accounts[0],accounts[7],accounts[8],accounts[6],accounts[6],accounts[9],accounts[3],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
                "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
              },
              {
                "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
                "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
              },
              {
                "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
                "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[2],accounts[8],accounts[4],accounts[1],accounts[5],accounts[3],accounts[2],accounts[8],accounts[2],accounts[5],accounts[3],accounts[2],accounts[5],accounts[6],accounts[3],accounts[5],accounts[4],accounts[0],accounts[5],accounts[5],accounts[8],accounts[2],accounts[7],accounts[9],accounts[4],accounts[5],accounts[4],accounts[4],accounts[3],accounts[2],accounts[9],accounts[0],accounts[3],accounts[7],accounts[5],accounts[6],accounts[8],accounts[4],accounts[2],accounts[5],accounts[5],accounts[4],accounts[0],accounts[1],accounts[9],accounts[1],accounts[1],accounts[4],accounts[0],accounts[4],accounts[1],accounts[3],accounts[1],accounts[4],accounts[9],accounts[8],accounts[5],accounts[0],accounts[7],accounts[2],accounts[0],accounts[4],accounts[3],accounts[8],accounts[0],accounts[9],accounts[1],accounts[1],accounts[0],accounts[5],accounts[6],accounts[9],accounts[0],accounts[6],accounts[2],accounts[0],accounts[6],accounts[5],accounts[7],accounts[3],accounts[3],accounts[6],accounts[3],accounts[5],accounts[1],accounts[9],accounts[7],accounts[1],accounts[2],accounts[8],accounts[8],accounts[9],accounts[6],accounts[5],accounts[2],accounts[9],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[0,2,1,66,26,27,2014223715,2014223715,9999,66,6,96,1532892062,1,1532892063,29,66,2014223714,5,9999,64,1532892062,2014223715,1532892063,96,255,65,2014223714,10000,1,65,65,1532892064,64,1532892064,28,0,1532892064,5,65,256,2,2014223714,1532892062,10000,2014223715,65,2014223714,64,2014223716,1,2014223716,0,28,1532892063,96,2014223714,97,95,1532892062,10000,2014223715,29,64,2,9999,1336,64,3,97,3,257,28,6,1,66,1337,28,26,1532892062,96,1,2,3,29,1532892064,3,1337,1532892062,2014223716,1337,3,10001,28,96,95,97]",
                "sol": "[uint256(0),uint256(2),uint256(1),uint256(66),uint256(26),uint256(27),uint256(2014223715),uint256(2014223715),uint256(9999),uint256(66),uint256(6),uint256(96),uint256(1532892062),uint256(1),uint256(1532892063),uint256(29),uint256(66),uint256(2014223714),uint256(5),uint256(9999),uint256(64),uint256(1532892062),uint256(2014223715),uint256(1532892063),uint256(96),uint256(255),uint256(65),uint256(2014223714),uint256(10000),uint256(1),uint256(65),uint256(65),uint256(1532892064),uint256(64),uint256(1532892064),uint256(28),uint256(0),uint256(1532892064),uint256(5),uint256(65),uint256(256),uint256(2),uint256(2014223714),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(65),uint256(2014223714),uint256(64),uint256(2014223716),uint256(1),uint256(2014223716),uint256(0),uint256(28),uint256(1532892063),uint256(96),uint256(2014223714),uint256(97),uint256(95),uint256(1532892062),uint256(10000),uint256(2014223715),uint256(29),uint256(64),uint256(2),uint256(9999),uint256(1336),uint256(64),uint256(3),uint256(97),uint256(3),uint256(257),uint256(28),uint256(6),uint256(1),uint256(66),uint256(1337),uint256(28),uint256(26),uint256(1532892062),uint256(96),uint256(1),uint256(2),uint256(3),uint256(29),uint256(1532892064),uint256(3),uint256(1337),uint256(1532892062),uint256(2014223716),uint256(1337),uint256(3),uint256(10001),uint256(28),uint256(96),uint256(95),uint256(97)]"
              },
              {
                "js": "[2014223716,5,9999,1532892064,0,1,2014223715,96,9999,97,255,257,2014223716,29,27,1337,1532892063,27,1,64,2,66,65,255,2014223714,3,95,1338,1337,1532892062,1532892064,2014223715,257,66,2,4,1,1337,65,97,95,66,3,28,65,97,255,28,95,28,28,6,1336,95,9999,95,29,1336,64,95,27,29,254,1532892062,256,0,10000,0,27,2014223715,0,1338,64,29,95,3,64,1532892064,257,10000,5,0,1532892062,95,10001,9999,95,1338,1532892063,65,64,5,6,1337,0,1532892062,95]",
                "sol": "[uint256(2014223716),uint256(5),uint256(9999),uint256(1532892064),uint256(0),uint256(1),uint256(2014223715),uint256(96),uint256(9999),uint256(97),uint256(255),uint256(257),uint256(2014223716),uint256(29),uint256(27),uint256(1337),uint256(1532892063),uint256(27),uint256(1),uint256(64),uint256(2),uint256(66),uint256(65),uint256(255),uint256(2014223714),uint256(3),uint256(95),uint256(1338),uint256(1337),uint256(1532892062),uint256(1532892064),uint256(2014223715),uint256(257),uint256(66),uint256(2),uint256(4),uint256(1),uint256(1337),uint256(65),uint256(97),uint256(95),uint256(66),uint256(3),uint256(28),uint256(65),uint256(97),uint256(255),uint256(28),uint256(95),uint256(28),uint256(28),uint256(6),uint256(1336),uint256(95),uint256(9999),uint256(95),uint256(29),uint256(1336),uint256(64),uint256(95),uint256(27),uint256(29),uint256(254),uint256(1532892062),uint256(256),uint256(0),uint256(10000),uint256(0),uint256(27),uint256(2014223715),uint256(0),uint256(1338),uint256(64),uint256(29),uint256(95),uint256(3),uint256(64),uint256(1532892064),uint256(257),uint256(10000),uint256(5),uint256(0),uint256(1532892062),uint256(95),uint256(10001),uint256(9999),uint256(95),uint256(1338),uint256(1532892063),uint256(65),uint256(64),uint256(5),uint256(6),uint256(1337),uint256(0),uint256(1532892062),uint256(95)]"
              },
              {
                "js": "[[246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161],[143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242],[109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240],[245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137],[31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90],[221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210],[54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102],[44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83],[57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98],[106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139],[28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7],[53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201],[10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229],[186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241],[64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132],[159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201],[44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215],[65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12],[2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217],[20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179],[50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44],[102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9],[4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119],[89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238],[244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52],[54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51],[86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239],[20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230],[3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222],[109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192],[7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11],[185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53],[114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116],[96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37],[158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33],[165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46],[177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212],[54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241],[224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39],[129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214],[188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75],[42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17],[150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13],[101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116],[18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172],[40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80],[92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156],[183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238],[100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227],[60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15],[241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253],[42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18],[65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207],[8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35],[109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39],[83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29],[44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218],[183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211],[87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54],[72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169],[205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208],[160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135],[33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241],[232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46],[212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241],[244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228],[113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3],[197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17],[119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1],[81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105],[3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178],[232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133],[240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244],[115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25],[192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37],[41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26],[163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86],[8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105],[228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232],[120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74],[87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196],[113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147],[164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108],[136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63],[44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180],[80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106],[46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105],[240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82],[216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219],[241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49],[222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208],[149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94],[47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217],[59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19],[64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58],[190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29],[55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140]]",
                "sol": "[bytes32(stringToBytes32(\"246,229,79,24,148,185,56,21,203,152,190,98,218,95,40,50,154,182,95,243,68,96,61,14,203,239,30,206,234,203,202,161\")),bytes32(stringToBytes32(\"143,222,162,200,105,22,40,195,237,93,30,135,236,35,21,86,170,156,144,0,106,0,37,67,203,32,210,175,139,234,178,242\")),bytes32(stringToBytes32(\"109,218,247,251,211,239,70,83,2,239,39,234,162,32,11,145,188,119,139,129,40,176,70,22,23,19,99,40,122,255,47,240\")),bytes32(stringToBytes32(\"245,199,85,139,15,18,57,54,196,111,180,171,117,219,137,186,164,115,7,234,10,57,246,143,121,62,251,186,32,208,50,137\")),bytes32(stringToBytes32(\"31,34,188,16,242,199,238,164,27,14,215,85,139,170,191,73,251,183,199,163,223,79,141,128,90,236,188,239,123,188,5,90\")),bytes32(stringToBytes32(\"221,127,87,61,157,226,44,94,127,167,89,86,115,39,0,122,120,82,120,97,241,170,28,156,231,30,234,57,196,234,69,210\")),bytes32(stringToBytes32(\"54,6,225,193,39,22,183,188,210,167,124,68,22,237,23,205,146,163,199,92,22,1,227,43,176,198,0,132,247,142,116,102\")),bytes32(stringToBytes32(\"44,134,224,30,91,171,81,56,120,149,13,177,48,57,118,31,79,47,244,94,86,49,70,42,249,80,113,101,201,246,203,83\")),bytes32(stringToBytes32(\"57,171,157,145,138,43,9,81,136,54,253,107,230,56,231,179,69,93,88,23,150,242,107,67,75,103,1,245,218,5,145,98\")),bytes32(stringToBytes32(\"106,229,127,76,72,241,14,220,156,16,174,94,230,157,203,209,100,193,132,11,56,174,11,164,168,19,199,41,69,41,205,139\")),bytes32(stringToBytes32(\"28,79,127,251,89,228,27,178,120,211,229,31,3,177,111,170,81,128,176,199,177,134,170,80,86,238,219,111,178,84,227,7\")),bytes32(stringToBytes32(\"53,130,218,127,220,125,5,103,198,179,4,245,184,60,144,25,251,204,236,197,85,195,155,32,28,21,114,29,196,251,206,201\")),bytes32(stringToBytes32(\"10,206,104,14,247,114,185,12,62,48,165,209,88,170,89,80,91,253,56,147,25,253,179,229,244,130,123,251,181,80,66,229\")),bytes32(stringToBytes32(\"186,242,6,185,201,33,70,218,193,30,218,139,155,26,178,49,159,124,96,22,73,140,243,30,180,151,162,253,46,141,182,241\")),bytes32(stringToBytes32(\"64,113,94,16,222,173,176,39,231,85,208,121,246,180,208,79,97,164,60,211,196,81,39,252,142,47,63,237,225,211,150,132\")),bytes32(stringToBytes32(\"159,115,33,227,193,233,148,232,163,182,3,175,47,145,181,234,39,97,140,161,190,19,218,99,99,246,80,198,184,228,10,201\")),bytes32(stringToBytes32(\"44,42,178,241,135,24,124,219,127,17,88,131,60,3,195,168,143,248,168,129,31,39,60,151,241,168,119,40,60,221,31,215\")),bytes32(stringToBytes32(\"65,247,242,78,254,85,37,182,92,221,98,29,35,4,99,193,169,141,71,155,183,123,244,11,137,32,70,124,107,98,192,12\")),bytes32(stringToBytes32(\"2,113,228,43,8,61,1,33,110,173,176,167,111,188,141,56,152,194,113,135,57,229,50,84,240,195,110,175,137,238,101,217\")),bytes32(stringToBytes32(\"20,91,149,10,125,243,136,247,188,233,6,196,136,117,174,186,167,33,239,184,147,241,207,68,182,205,19,30,77,214,222,179\")),bytes32(stringToBytes32(\"50,19,66,196,28,184,134,215,158,116,222,36,150,9,40,7,215,176,160,176,178,12,19,237,22,203,147,143,192,52,158,44\")),bytes32(stringToBytes32(\"102,71,14,236,173,96,132,161,32,225,207,239,104,233,129,44,235,74,31,126,42,151,1,239,120,194,46,249,23,124,157,9\")),bytes32(stringToBytes32(\"4,159,208,13,198,217,36,215,8,165,254,6,117,85,207,172,46,172,85,35,124,60,115,32,230,207,112,232,96,24,58,119\")),bytes32(stringToBytes32(\"89,187,73,45,56,112,5,247,5,89,11,216,90,29,1,113,27,68,210,44,31,149,123,20,233,8,211,162,141,183,76,238\")),bytes32(stringToBytes32(\"244,127,109,113,73,235,128,4,66,227,138,94,93,41,172,51,22,217,190,232,78,194,255,49,234,86,42,193,93,150,250,52\")),bytes32(stringToBytes32(\"54,159,206,211,138,189,187,11,179,84,102,153,73,84,35,99,93,80,12,113,40,198,6,180,203,37,214,32,45,244,1,51\")),bytes32(stringToBytes32(\"86,157,161,3,206,254,231,103,225,215,143,70,119,255,26,19,207,74,60,165,87,159,103,140,116,240,150,116,10,147,26,239\")),bytes32(stringToBytes32(\"20,22,44,0,202,70,192,23,254,217,189,93,126,60,42,190,7,216,125,184,27,179,199,4,210,67,139,143,165,56,93,230\")),bytes32(stringToBytes32(\"3,170,129,241,49,219,206,101,24,156,101,54,142,186,212,3,32,50,235,148,157,180,216,232,27,232,154,40,247,226,24,222\")),bytes32(stringToBytes32(\"109,114,236,150,113,138,71,208,14,209,184,152,113,253,28,151,79,103,251,140,30,33,176,30,11,56,187,203,221,171,112,192\")),bytes32(stringToBytes32(\"7,233,246,241,20,128,157,125,226,41,44,77,63,19,66,156,46,162,8,56,114,127,211,81,60,233,200,16,235,218,198,11\")),bytes32(stringToBytes32(\"185,232,239,51,66,86,197,99,200,136,114,30,149,115,54,250,18,134,83,156,246,179,194,226,95,117,221,95,189,59,224,53\")),bytes32(stringToBytes32(\"114,43,46,16,216,224,66,48,128,176,71,5,244,194,108,89,249,216,104,102,90,225,45,41,253,205,78,41,130,162,180,116\")),bytes32(stringToBytes32(\"96,156,178,139,205,203,112,156,165,116,7,238,181,29,55,102,137,146,77,60,130,52,167,75,33,81,109,95,126,212,7,37\")),bytes32(stringToBytes32(\"158,57,244,227,8,240,102,245,147,125,249,176,10,30,119,223,69,68,118,80,110,232,72,120,22,16,165,110,36,235,20,33\")),bytes32(stringToBytes32(\"165,19,95,178,142,142,141,67,150,67,0,83,228,146,156,95,16,61,208,76,15,61,83,225,73,76,226,239,103,35,106,46\")),bytes32(stringToBytes32(\"177,139,170,11,234,80,221,153,23,33,5,62,203,24,144,108,175,241,46,60,20,34,105,21,87,227,137,100,101,234,210,212\")),bytes32(stringToBytes32(\"54,253,137,43,255,144,115,97,79,140,100,102,87,215,44,71,156,226,228,128,58,226,24,234,185,227,2,96,92,106,117,241\")),bytes32(stringToBytes32(\"224,249,190,221,52,255,215,39,76,43,112,133,173,146,48,235,55,93,107,189,251,129,191,29,167,16,121,218,83,19,56,39\")),bytes32(stringToBytes32(\"129,155,214,161,107,89,72,112,83,10,93,185,174,122,167,231,38,190,24,4,8,207,186,91,159,112,220,183,137,116,189,214\")),bytes32(stringToBytes32(\"188,80,158,191,85,44,22,140,221,163,236,40,106,197,50,66,101,76,143,103,17,118,79,195,239,145,241,115,162,172,29,75\")),bytes32(stringToBytes32(\"42,118,44,128,48,183,246,207,218,20,225,193,54,80,89,53,211,63,226,35,195,243,30,39,144,10,180,91,30,173,235,17\")),bytes32(stringToBytes32(\"150,239,98,54,173,168,17,183,161,35,249,255,34,141,239,97,81,81,35,236,160,179,56,188,203,134,1,20,169,39,7,13\")),bytes32(stringToBytes32(\"101,82,229,236,143,130,137,187,191,122,153,194,247,226,192,216,19,237,218,51,11,162,222,207,69,66,237,171,100,62,97,116\")),bytes32(stringToBytes32(\"18,213,177,34,159,58,49,21,12,56,17,251,170,51,122,36,242,172,247,222,100,81,113,30,147,154,11,229,140,42,36,172\")),bytes32(stringToBytes32(\"40,133,82,25,219,157,169,130,204,86,15,75,95,76,15,156,84,159,22,121,117,118,31,88,18,117,32,9,190,148,55,80\")),bytes32(stringToBytes32(\"92,108,60,124,204,73,171,195,184,239,27,130,188,109,184,232,149,189,93,189,62,225,50,119,53,204,132,58,59,245,53,156\")),bytes32(stringToBytes32(\"183,173,20,206,11,191,183,135,238,149,235,248,93,144,96,216,201,92,6,179,44,125,103,54,45,175,170,157,47,102,59,238\")),bytes32(stringToBytes32(\"100,194,92,42,56,36,170,103,31,110,60,230,117,144,223,74,207,3,174,226,124,26,4,117,178,233,140,45,195,140,40,227\")),bytes32(stringToBytes32(\"60,157,18,46,126,57,206,87,129,16,74,84,47,117,191,111,24,84,218,25,39,208,205,212,93,203,183,122,223,28,126,15\")),bytes32(stringToBytes32(\"241,124,168,73,206,1,186,64,206,202,60,166,175,47,14,250,15,4,134,204,71,201,236,79,241,207,15,64,236,69,102,253\")),bytes32(stringToBytes32(\"42,229,1,229,53,36,91,203,221,98,87,84,187,237,120,244,169,22,169,14,170,85,73,16,27,111,60,15,171,56,168,18\")),bytes32(stringToBytes32(\"65,59,1,130,154,39,86,192,138,88,109,141,178,231,144,191,206,234,69,61,74,31,156,12,133,220,64,16,129,76,193,207\")),bytes32(stringToBytes32(\"8,76,10,103,30,46,79,150,87,125,140,46,154,192,91,45,72,235,53,209,44,19,5,2,155,148,63,145,211,220,226,35\")),bytes32(stringToBytes32(\"109,141,37,12,53,213,250,247,67,6,156,182,152,95,245,166,160,244,251,57,108,172,10,219,116,145,91,30,184,43,249,39\")),bytes32(stringToBytes32(\"83,15,9,191,249,47,131,216,0,51,198,201,104,20,36,141,203,238,217,28,238,175,231,186,145,38,22,99,200,106,138,29\")),bytes32(stringToBytes32(\"44,161,238,81,86,237,224,191,148,111,95,10,66,64,205,114,175,43,136,70,181,85,8,65,54,239,238,242,105,185,2,218\")),bytes32(stringToBytes32(\"183,229,243,14,219,9,180,91,175,234,235,125,207,120,160,33,188,249,229,31,128,246,7,63,152,166,99,125,94,129,219,211\")),bytes32(stringToBytes32(\"87,116,199,237,56,242,215,17,224,46,221,9,192,21,196,232,112,40,207,101,121,47,193,96,236,72,161,95,75,216,247,54\")),bytes32(stringToBytes32(\"72,210,18,146,212,255,121,185,202,236,194,243,187,51,107,191,227,18,21,249,172,121,199,237,245,96,46,35,57,179,142,169\")),bytes32(stringToBytes32(\"205,173,194,221,206,92,15,58,54,107,104,92,248,160,210,230,89,176,123,188,21,203,42,135,163,19,104,170,178,61,67,208\")),bytes32(stringToBytes32(\"160,249,47,221,80,97,235,131,211,229,148,216,132,57,148,89,218,102,142,184,235,155,17,21,167,42,219,151,161,139,146,135\")),bytes32(stringToBytes32(\"33,238,208,127,92,230,77,206,232,48,50,229,95,6,88,79,250,149,60,69,122,207,146,135,12,190,82,157,154,235,238,241\")),bytes32(stringToBytes32(\"232,115,113,26,213,72,128,164,171,241,126,162,146,10,130,42,71,182,35,16,16,177,198,93,206,232,73,48,39,188,216,46\")),bytes32(stringToBytes32(\"212,64,56,89,79,129,148,181,59,24,228,160,9,57,154,226,166,34,72,19,15,90,12,241,6,182,122,76,237,68,135,241\")),bytes32(stringToBytes32(\"244,79,157,56,71,247,75,5,193,119,95,131,5,119,0,244,39,214,42,21,202,80,208,53,127,150,25,253,201,97,74,228\")),bytes32(stringToBytes32(\"113,68,188,237,49,104,150,244,22,29,39,232,5,255,242,187,72,4,239,114,195,248,93,68,95,123,179,128,77,187,40,3\")),bytes32(stringToBytes32(\"197,224,178,185,253,69,14,28,20,112,5,39,143,6,115,185,103,242,207,229,200,238,169,110,167,70,72,35,69,34,45,17\")),bytes32(stringToBytes32(\"119,176,251,225,38,186,77,200,216,95,40,144,164,183,186,247,215,254,131,85,30,47,59,135,24,203,61,202,205,162,122,1\")),bytes32(stringToBytes32(\"81,219,173,187,101,155,103,57,136,46,132,10,15,254,213,117,60,11,36,87,34,93,209,55,129,101,185,161,39,37,92,105\")),bytes32(stringToBytes32(\"3,121,65,187,15,243,109,54,26,14,145,86,110,110,228,171,200,33,155,112,132,156,40,199,130,61,202,161,234,45,178,178\")),bytes32(stringToBytes32(\"232,99,177,125,13,95,69,40,71,21,157,173,27,150,126,189,95,104,33,91,70,63,131,97,170,130,236,163,187,82,27,133\")),bytes32(stringToBytes32(\"240,54,28,122,113,242,120,72,244,6,207,32,98,11,34,155,133,213,249,34,236,9,230,252,216,106,202,165,58,96,135,244\")),bytes32(stringToBytes32(\"115,114,88,66,150,76,88,195,112,43,238,133,243,29,207,173,191,151,15,211,88,40,17,171,26,247,250,10,137,150,132,25\")),bytes32(stringToBytes32(\"192,94,124,57,196,48,68,119,77,129,57,192,72,107,182,51,126,91,226,119,71,35,85,202,48,174,61,171,214,214,113,37\")),bytes32(stringToBytes32(\"41,224,72,241,42,150,157,36,110,135,184,54,36,16,55,73,146,25,192,27,36,24,117,138,121,215,173,31,179,17,197,26\")),bytes32(stringToBytes32(\"163,122,13,97,133,32,75,196,200,108,63,24,116,67,14,11,33,1,0,228,113,147,233,217,194,56,192,250,59,110,51,86\")),bytes32(stringToBytes32(\"8,17,197,168,41,189,60,204,225,24,7,226,223,176,124,2,220,73,131,225,253,199,66,9,141,211,234,67,112,169,41,105\")),bytes32(stringToBytes32(\"228,233,200,138,254,206,26,60,122,89,165,64,165,15,11,16,19,0,138,152,68,191,9,190,34,136,58,250,31,220,137,232\")),bytes32(stringToBytes32(\"120,108,147,89,113,176,23,243,72,237,197,89,185,221,45,68,208,168,255,26,139,224,62,207,102,179,233,197,119,131,192,74\")),bytes32(stringToBytes32(\"87,76,240,177,153,14,112,211,101,131,9,152,52,137,88,104,117,211,230,37,187,215,129,3,4,253,86,151,45,64,55,196\")),bytes32(stringToBytes32(\"113,101,218,57,106,49,180,66,137,5,231,51,123,40,127,195,235,189,62,238,23,108,186,175,108,6,252,28,229,34,237,147\")),bytes32(stringToBytes32(\"164,123,35,162,127,110,36,133,147,155,38,125,210,2,153,205,190,201,228,167,138,0,58,230,214,146,47,196,127,23,45,108\")),bytes32(stringToBytes32(\"136,19,168,70,28,127,55,57,199,94,249,173,249,71,233,51,100,24,229,129,71,250,104,178,139,16,92,20,34,103,213,63\")),bytes32(stringToBytes32(\"44,85,255,171,72,134,153,204,67,224,60,132,124,187,46,251,223,42,143,165,82,85,74,121,206,95,173,166,106,42,232,180\")),bytes32(stringToBytes32(\"80,25,158,106,6,98,12,234,97,38,89,120,222,8,90,218,190,92,50,225,161,84,130,40,45,144,167,29,186,30,157,106\")),bytes32(stringToBytes32(\"46,103,168,243,151,68,255,110,150,177,122,217,149,157,8,200,152,135,6,25,80,5,134,253,124,177,96,225,128,246,112,105\")),bytes32(stringToBytes32(\"240,243,9,80,160,158,125,65,237,180,167,2,130,133,220,192,135,90,27,202,118,123,72,142,102,154,27,117,168,222,102,82\")),bytes32(stringToBytes32(\"216,247,167,142,53,152,238,232,254,227,104,153,7,197,29,253,151,28,46,146,173,6,183,102,80,2,170,98,182,182,3,219\")),bytes32(stringToBytes32(\"241,161,235,27,225,203,87,169,22,117,65,14,133,156,110,172,100,27,227,208,102,234,85,212,186,144,196,97,241,156,231,49\")),bytes32(stringToBytes32(\"222,208,201,103,226,70,158,16,123,47,244,108,82,47,6,159,86,31,38,58,189,3,217,164,183,34,136,50,20,241,86,208\")),bytes32(stringToBytes32(\"149,147,240,127,215,19,55,254,183,228,46,200,100,133,37,149,4,243,236,246,249,108,141,230,166,238,110,235,248,204,162,94\")),bytes32(stringToBytes32(\"47,52,22,182,248,108,21,132,61,32,14,53,110,53,88,146,125,222,188,211,195,146,51,35,82,128,140,146,61,96,188,217\")),bytes32(stringToBytes32(\"59,154,68,25,53,248,141,211,218,37,130,237,30,15,186,50,185,220,60,217,208,85,23,201,248,52,94,46,47,51,163,19\")),bytes32(stringToBytes32(\"64,182,3,115,8,218,248,63,172,25,202,196,173,71,29,44,0,49,213,231,110,70,176,62,72,118,189,83,116,24,68,58\")),bytes32(stringToBytes32(\"190,80,63,87,246,152,69,214,159,223,182,118,116,62,130,188,164,2,40,224,241,125,36,61,39,218,129,205,175,252,51,29\")),bytes32(stringToBytes32(\"55,11,253,67,203,100,121,85,101,45,54,50,228,209,51,75,113,54,42,76,73,180,252,36,203,247,70,18,59,153,255,140\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.720ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[83,158,121,199,14,177,67,1,130,221,80,121,144,105,224,184,3,34,15,137,239,29,43,191,221,113,24,9,38,244,29,123]",
              "sol": "stringToBytes32(\"83,158,121,199,14,177,67,1,130,221,80,121,144,105,224,184,3,34,15,137,239,29,43,191,221,113,24,9,38,244,29,123\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[83,158,121,199,14,177,67,1,130,221,80,121,144,105,224,184,3,34,15,137,239,29,43,191,221,113,24,9,38,244,29,123]",
                "sol": "stringToBytes32(\"83,158,121,199,14,177,67,1,130,221,80,121,144,105,224,184,3,34,15,137,239,29,43,191,221,113,24,9,38,244,29,123\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.721ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.721ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "[55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61]",
              "sol": "stringToBytes32(\"55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61\")"
            },
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "[55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61]",
                "sol": "stringToBytes32(\"55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61\")"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61]",
                "sol": "stringToBytes32(\"55,124,214,134,110,40,123,240,60,239,182,208,141,138,199,10,210,58,57,34,18,200,85,18,14,84,250,242,255,169,17,61\")"
              },
              {
                "js": "257",
                "sol": "257"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "[179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17]",
              "sol": "stringToBytes32(\"179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17\")"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "[179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17]",
                "sol": "stringToBytes32(\"179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17]",
                "sol": "stringToBytes32(\"179,116,162,72,61,165,72,33,118,57,109,124,165,251,5,35,201,216,122,33,97,178,170,48,159,75,4,249,15,238,98,17\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.725ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.726ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[232,6,128,173,85,184,143,50,208,117,94,115,90,136,197,161,249,248,18,5,241,204,147,247,93,74,39,165,182,211,25,44],[43,27,162,166,34,19,12,120,28,233,216,11,150,65,8,32,206,132,107,68,86,230,234,40,28,68,214,253,179,198,115,166],[202,161,254,194,124,4,191,91,214,81,55,247,164,79,73,104,108,138,25,152,247,141,46,113,174,12,176,168,141,33,153,63],[149,255,129,213,166,181,237,41,120,166,170,55,126,247,82,38,152,174,39,122,16,73,217,184,59,28,223,224,73,197,230,130],[139,102,53,66,227,245,138,89,70,37,142,221,228,205,128,29,227,51,231,134,223,164,52,153,238,225,126,150,217,225,238,141]]",
              "sol": "[bytes32(stringToBytes32(\"232,6,128,173,85,184,143,50,208,117,94,115,90,136,197,161,249,248,18,5,241,204,147,247,93,74,39,165,182,211,25,44\")),bytes32(stringToBytes32(\"43,27,162,166,34,19,12,120,28,233,216,11,150,65,8,32,206,132,107,68,86,230,234,40,28,68,214,253,179,198,115,166\")),bytes32(stringToBytes32(\"202,161,254,194,124,4,191,91,214,81,55,247,164,79,73,104,108,138,25,152,247,141,46,113,174,12,176,168,141,33,153,63\")),bytes32(stringToBytes32(\"149,255,129,213,166,181,237,41,120,166,170,55,126,247,82,38,152,174,39,122,16,73,217,184,59,28,223,224,73,197,230,130\")),bytes32(stringToBytes32(\"139,102,53,66,227,245,138,89,70,37,142,221,228,205,128,29,227,51,231,134,223,164,52,153,238,225,126,150,217,225,238,141\"))]"
            },
            {
              "js": "[[142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155],[37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157],[215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229],[95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106],[143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148]]",
              "sol": "[bytes32(stringToBytes32(\"142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155\")),bytes32(stringToBytes32(\"37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157\")),bytes32(stringToBytes32(\"215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229\")),bytes32(stringToBytes32(\"95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106\")),bytes32(stringToBytes32(\"143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148\"))]"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[232,6,128,173,85,184,143,50,208,117,94,115,90,136,197,161,249,248,18,5,241,204,147,247,93,74,39,165,182,211,25,44],[43,27,162,166,34,19,12,120,28,233,216,11,150,65,8,32,206,132,107,68,86,230,234,40,28,68,214,253,179,198,115,166],[202,161,254,194,124,4,191,91,214,81,55,247,164,79,73,104,108,138,25,152,247,141,46,113,174,12,176,168,141,33,153,63],[149,255,129,213,166,181,237,41,120,166,170,55,126,247,82,38,152,174,39,122,16,73,217,184,59,28,223,224,73,197,230,130],[139,102,53,66,227,245,138,89,70,37,142,221,228,205,128,29,227,51,231,134,223,164,52,153,238,225,126,150,217,225,238,141]]",
                "sol": "[bytes32(stringToBytes32(\"232,6,128,173,85,184,143,50,208,117,94,115,90,136,197,161,249,248,18,5,241,204,147,247,93,74,39,165,182,211,25,44\")),bytes32(stringToBytes32(\"43,27,162,166,34,19,12,120,28,233,216,11,150,65,8,32,206,132,107,68,86,230,234,40,28,68,214,253,179,198,115,166\")),bytes32(stringToBytes32(\"202,161,254,194,124,4,191,91,214,81,55,247,164,79,73,104,108,138,25,152,247,141,46,113,174,12,176,168,141,33,153,63\")),bytes32(stringToBytes32(\"149,255,129,213,166,181,237,41,120,166,170,55,126,247,82,38,152,174,39,122,16,73,217,184,59,28,223,224,73,197,230,130\")),bytes32(stringToBytes32(\"139,102,53,66,227,245,138,89,70,37,142,221,228,205,128,29,227,51,231,134,223,164,52,153,238,225,126,150,217,225,238,141\"))]"
              },
              {
                "js": "[[142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155],[37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157],[215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229],[95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106],[143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148]]",
                "sol": "[bytes32(stringToBytes32(\"142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155\")),bytes32(stringToBytes32(\"37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157\")),bytes32(stringToBytes32(\"215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229\")),bytes32(stringToBytes32(\"95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106\")),bytes32(stringToBytes32(\"143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148\"))]"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[242,209,235,205,206,181,111,101,151,219,138,34,87,64,69,224,115,56,144,36,163,225,40,68,126,139,43,138,32,182,174,84],[212,65,108,209,253,29,112,112,215,108,255,112,116,69,172,30,122,107,103,222,77,86,107,253,120,50,57,125,188,100,148,227],[57,193,174,144,90,11,159,114,60,50,197,79,94,98,188,108,122,249,83,227,134,22,53,105,53,177,141,24,94,190,241,196],[229,184,224,66,76,43,213,217,243,162,93,142,232,134,66,195,189,19,222,112,121,255,158,224,32,151,213,84,230,0,253,44],[90,20,137,251,75,9,253,56,233,3,50,144,129,114,142,226,10,207,144,223,50,85,71,62,45,207,69,48,148,173,115,204],[173,62,143,208,4,243,225,136,40,100,246,67,35,177,219,120,137,192,226,252,74,168,68,97,101,154,246,193,14,141,40,155]]",
                "sol": "[stringToBytes32(\"225,99,58,4,241,126,179,29,17,26,251,227,85,78,59,98,98,181,233,119,17,102,124,3,205,10,222,93,117,76,35,110\"),stringToBytes32(\"109,88,74,121,21,93,185,217,208,233,196,142,192,88,54,209,166,142,215,232,157,197,129,32,174,219,70,115,231,151,180,9\"),stringToBytes32(\"209,167,139,107,102,250,43,174,82,52,140,133,77,21,191,60,144,121,24,14,164,242,89,90,8,42,79,224,17,8,171,99\"),stringToBytes32(\"245,253,242,180,213,75,49,9,221,20,122,14,167,54,150,59,89,243,57,1,126,162,82,201,233,79,60,246,42,25,247,84\"),stringToBytes32(\"43,241,5,87,64,207,163,56,65,176,159,174,128,56,218,222,254,189,230,197,98,83,167,7,72,97,114,169,107,146,190,178\"),stringToBytes32(\"93,189,121,134,121,206,207,121,143,242,81,249,198,53,134,95,227,99,139,172,39,137,116,14,52,172,153,54,177,224,112,5\")]"
              },
              {
                "js": "[[142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155],[37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157],[215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229],[95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106],[143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148]]",
                "sol": "[bytes32(stringToBytes32(\"142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155\")),bytes32(stringToBytes32(\"37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157\")),bytes32(stringToBytes32(\"215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229\")),bytes32(stringToBytes32(\"95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106\")),bytes32(stringToBytes32(\"143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155],[37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157],[215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229],[95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106],[143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148]]",
                "sol": "[bytes32(stringToBytes32(\"142,231,112,203,69,4,42,113,119,45,254,244,134,171,235,170,75,151,106,160,9,18,174,136,3,90,129,71,122,162,249,155\")),bytes32(stringToBytes32(\"37,215,151,255,187,94,123,110,45,218,119,182,28,241,39,71,182,208,196,235,12,25,132,61,24,93,109,175,239,182,43,157\")),bytes32(stringToBytes32(\"215,159,212,162,195,141,228,87,254,220,72,200,159,213,66,217,132,28,113,180,54,210,145,109,173,253,22,221,9,111,114,229\")),bytes32(stringToBytes32(\"95,35,119,156,155,215,119,53,238,18,233,116,124,234,95,237,246,238,184,87,192,115,126,234,243,210,195,241,32,169,225,106\")),bytes32(stringToBytes32(\"143,2,80,108,96,231,136,245,46,217,223,246,91,173,83,8,203,135,170,58,231,244,52,225,147,150,87,142,42,35,4,148\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.732ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"IsLibrary\"",
                "sol": "\"IsLibrary\""
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.737ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[26]",
              "sol": "[uint256(26)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[26]",
                "sol": "[uint256(26)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[3],accounts[5]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[26]",
                "sol": "[uint256(26)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[26]",
                "sol": "[uint256(26)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.739ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.740ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[5],accounts[5]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[5],accounts[5]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.743ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.744ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+280",
              "sol": "block.timestamp+280"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+280",
                "sol": "block.timestamp+280"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.751ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.756ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.761ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.767ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.771ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.774ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.774ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.775ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[5],accounts[1],accounts[6],accounts[4],accounts[9],accounts[2],accounts[7],accounts[7],accounts[0],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[5],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[2],accounts[2],accounts[2],accounts[3],accounts[9],accounts[3],accounts[2],accounts[8],accounts[4],accounts[2],accounts[0],accounts[2],accounts[7],accounts[8],accounts[9],accounts[7],accounts[7],accounts[1],accounts[4],accounts[6],accounts[0],accounts[6],accounts[3],accounts[2],accounts[5],accounts[9],accounts[8],accounts[7],accounts[3],accounts[5],accounts[3],accounts[9],accounts[7],accounts[8],accounts[4],accounts[2],accounts[4],accounts[8],accounts[4],accounts[5],accounts[5],accounts[4],accounts[6],accounts[1],accounts[5],accounts[5],accounts[0],accounts[3],accounts[6],accounts[1],accounts[3],accounts[4],accounts[7],accounts[7],accounts[8],accounts[4],accounts[9],accounts[4],accounts[9],accounts[7],accounts[8],accounts[8],accounts[2],accounts[6],accounts[3],accounts[3],accounts[0],accounts[3],accounts[1],accounts[9],accounts[6],accounts[0],accounts[8],accounts[5],accounts[4],accounts[0]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[5],accounts[1],accounts[6],accounts[4],accounts[9],accounts[2],accounts[7],accounts[7],accounts[0],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[5],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[2],accounts[2],accounts[2],accounts[3],accounts[9],accounts[3],accounts[2],accounts[8],accounts[4],accounts[2],accounts[0],accounts[2],accounts[7],accounts[8],accounts[9],accounts[7],accounts[7],accounts[1],accounts[4],accounts[6],accounts[0],accounts[6],accounts[3],accounts[2],accounts[5],accounts[9],accounts[8],accounts[7],accounts[3],accounts[5],accounts[3],accounts[9],accounts[7],accounts[8],accounts[4],accounts[2],accounts[4],accounts[8],accounts[4],accounts[5],accounts[5],accounts[4],accounts[6],accounts[1],accounts[5],accounts[5],accounts[0],accounts[3],accounts[6],accounts[1],accounts[3],accounts[4],accounts[7],accounts[7],accounts[8],accounts[4],accounts[9],accounts[4],accounts[9],accounts[7],accounts[8],accounts[8],accounts[2],accounts[6],accounts[3],accounts[3],accounts[0],accounts[3],accounts[1],accounts[9],accounts[6],accounts[0],accounts[8],accounts[5],accounts[4],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "1532892064",
                "sol": "1532892064"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[5],accounts[1],accounts[6],accounts[4],accounts[9],accounts[2],accounts[7],accounts[7],accounts[0],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[5],accounts[9],accounts[1],accounts[3],accounts[8],accounts[8],accounts[5],accounts[2],accounts[2],accounts[2],accounts[3],accounts[9],accounts[3],accounts[2],accounts[8],accounts[4],accounts[2],accounts[0],accounts[2],accounts[7],accounts[8],accounts[9],accounts[7],accounts[7],accounts[1],accounts[4],accounts[6],accounts[0],accounts[6],accounts[3],accounts[2],accounts[5],accounts[9],accounts[8],accounts[7],accounts[3],accounts[5],accounts[3],accounts[9],accounts[7],accounts[8],accounts[4],accounts[2],accounts[4],accounts[8],accounts[4],accounts[5],accounts[5],accounts[4],accounts[6],accounts[1],accounts[5],accounts[5],accounts[0],accounts[3],accounts[6],accounts[1],accounts[3],accounts[4],accounts[7],accounts[7],accounts[8],accounts[4],accounts[9],accounts[4],accounts[9],accounts[7],accounts[8],accounts[8],accounts[2],accounts[6],accounts[3],accounts[3],accounts[0],accounts[3],accounts[1],accounts[9],accounts[6],accounts[0],accounts[8],accounts[5],accounts[4],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.778ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T23:16:05.779ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T23:16:05.780ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "64",
                "sol": "64"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}