,{
  "2020-11-12T10:49:01.612ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:07.800ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:14.203ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:20.670ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892064",
              "sol": "1532892064"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:27.042ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:33.468ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "0",
              "sol": "0"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "0",
                "sol": "0"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:41.635ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "28",
              "sol": "28"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "28",
                "sol": "28"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:48.201ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892063",
              "sol": "1532892063"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:49:54.769ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653",
              "sol": "block.timestamp+653"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653",
                "sol": "block.timestamp+653"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653",
                "sol": "block.timestamp+653"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+653",
                "sol": "block.timestamp+653"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.455ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.456ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.458ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.461ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[6],accounts[8],accounts[6],accounts[8],accounts[0],accounts[0],accounts[2],accounts[4],accounts[7],accounts[0],accounts[0],accounts[7],accounts[7],accounts[3],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[7],accounts[1],accounts[9],accounts[2],accounts[8]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
              "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
            },
            {
              "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
              "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
            },
            {
              "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
              "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6],accounts[8],accounts[6],accounts[8],accounts[0],accounts[0],accounts[2],accounts[4],accounts[7],accounts[0],accounts[0],accounts[7],accounts[7],accounts[3],accounts[4],accounts[4],accounts[3],accounts[8],accounts[9],accounts[2],accounts[5],accounts[0],accounts[9],accounts[7],accounts[7],accounts[1],accounts[9],accounts[2],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
                "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
              },
              {
                "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
                "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
              },
              {
                "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
                "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
                "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
              },
              {
                "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
                "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
              },
              {
                "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
                "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[0],accounts[5],accounts[7],accounts[6],accounts[7],accounts[0],accounts[9],accounts[2],accounts[9],accounts[4],accounts[5],accounts[1],accounts[8],accounts[0],accounts[9],accounts[8],accounts[0],accounts[4],accounts[7],accounts[4],accounts[1],accounts[1],accounts[6],accounts[0],accounts[0],accounts[6],accounts[9],accounts[0],accounts[2],accounts[4]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
                "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
              },
              {
                "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
                "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
              },
              {
                "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
                "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[7],accounts[3],accounts[7],accounts[2],accounts[5],accounts[3],accounts[2],accounts[4],accounts[0],accounts[6],accounts[9],accounts[8],accounts[9],accounts[3],accounts[2],accounts[1],accounts[2],accounts[3],accounts[2],accounts[3],accounts[6],accounts[8],accounts[2],accounts[4],accounts[7],accounts[7],accounts[9],accounts[4],accounts[0],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
                "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
              },
              {
                "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
                "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
              },
              {
                "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
                "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[9],accounts[0],accounts[9],accounts[4],accounts[9],accounts[9],accounts[3],accounts[9],accounts[1],accounts[0],accounts[7],accounts[8],accounts[3],accounts[2],accounts[1],accounts[6],accounts[6],accounts[0],accounts[8],accounts[6],accounts[0],accounts[1],accounts[7],accounts[4],accounts[0],accounts[4],accounts[1],accounts[0],accounts[7],accounts[3]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[5,1336,9999,9999,10000,1532892064,29,2014223716,3,10001,6,4,256,2014223715,1337,97,257,2,66,2014223714,95,257,29,1532892062,1338,1532892064,1337,26,6]",
                "sol": "[uint256(5),uint256(1336),uint256(9999),uint256(9999),uint256(10000),uint256(1532892064),uint256(29),uint256(2014223716),uint256(3),uint256(10001),uint256(6),uint256(4),uint256(256),uint256(2014223715),uint256(1337),uint256(97),uint256(257),uint256(2),uint256(66),uint256(2014223714),uint256(95),uint256(257),uint256(29),uint256(1532892062),uint256(1338),uint256(1532892064),uint256(1337),uint256(26),uint256(6)]"
              },
              {
                "js": "[1532892062,2,6,256,29,256,257,1532892064,1532892064,66,66,6,254,10000,1,254,1336,0,29,2014223716,10001,96,64,254,1,97,3,9999,2014223716]",
                "sol": "[uint256(1532892062),uint256(2),uint256(6),uint256(256),uint256(29),uint256(256),uint256(257),uint256(1532892064),uint256(1532892064),uint256(66),uint256(66),uint256(6),uint256(254),uint256(10000),uint256(1),uint256(254),uint256(1336),uint256(0),uint256(29),uint256(2014223716),uint256(10001),uint256(96),uint256(64),uint256(254),uint256(1),uint256(97),uint256(3),uint256(9999),uint256(2014223716)]"
              },
              {
                "js": "[[167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142],[163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75],[92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230],[35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36],[75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212],[94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37],[180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77],[195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153],[37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26],[97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20],[37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198],[173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171],[168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208],[75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58],[228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140],[29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101],[191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21],[25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206],[64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71],[73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173],[2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225],[170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200],[196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17],[254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175],[139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183],[149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236],[194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208],[249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77],[16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123]]",
                "sol": "[bytes32(stringToBytes32(\"167,109,176,110,111,39,196,99,202,155,15,248,12,225,8,212,234,51,176,208,156,46,134,175,32,158,171,194,250,87,118,142\")),bytes32(stringToBytes32(\"163,4,225,218,254,253,18,235,179,227,144,163,64,176,220,247,144,243,128,6,170,75,21,135,12,99,179,166,111,160,169,75\")),bytes32(stringToBytes32(\"92,200,17,37,4,47,220,8,251,20,226,233,46,143,98,215,77,8,110,80,36,8,140,220,14,200,138,73,8,32,13,230\")),bytes32(stringToBytes32(\"35,132,143,72,244,149,151,58,244,254,57,228,193,22,145,164,131,123,197,7,205,178,50,16,9,159,244,18,85,185,148,36\")),bytes32(stringToBytes32(\"75,181,128,79,217,49,28,5,228,114,115,23,139,89,70,2,135,229,214,205,106,117,153,98,0,91,159,201,67,252,137,212\")),bytes32(stringToBytes32(\"94,45,230,139,178,110,36,22,88,213,163,176,155,34,148,251,168,86,12,112,57,64,11,75,155,30,167,15,209,120,17,37\")),bytes32(stringToBytes32(\"180,6,192,201,39,73,24,207,209,241,46,153,137,211,54,17,61,183,191,15,45,106,108,166,13,183,162,201,110,206,176,77\")),bytes32(stringToBytes32(\"195,75,144,42,157,110,45,163,188,151,167,72,44,233,239,96,108,26,249,246,124,99,101,21,207,219,113,255,35,8,234,153\")),bytes32(stringToBytes32(\"37,192,44,153,70,199,116,195,40,175,149,9,211,244,194,160,23,34,170,232,195,213,56,155,233,19,112,158,236,71,20,26\")),bytes32(stringToBytes32(\"97,49,208,236,240,131,27,201,197,203,120,214,230,71,150,13,67,203,90,181,193,198,210,145,19,166,118,69,113,81,14,20\")),bytes32(stringToBytes32(\"37,185,73,81,189,243,8,149,67,149,109,94,108,231,80,25,218,200,8,213,3,43,7,52,96,224,163,162,127,131,184,198\")),bytes32(stringToBytes32(\"173,209,25,13,134,175,78,26,189,89,3,30,72,39,184,64,169,87,17,234,104,53,150,78,254,108,224,41,235,88,139,171\")),bytes32(stringToBytes32(\"168,112,201,36,223,54,41,216,166,80,220,211,78,28,116,117,140,144,232,121,67,222,246,109,231,155,191,147,11,244,181,208\")),bytes32(stringToBytes32(\"75,217,115,128,186,229,234,215,251,222,106,130,225,150,235,91,183,244,152,55,109,166,28,152,43,159,137,217,60,166,157,58\")),bytes32(stringToBytes32(\"228,119,34,29,74,255,232,168,82,235,128,28,171,135,158,18,185,89,144,34,88,219,84,218,81,248,18,157,255,213,110,140\")),bytes32(stringToBytes32(\"29,94,248,167,158,157,101,109,82,6,112,224,157,255,98,191,4,238,176,235,176,177,134,142,117,153,136,231,185,206,15,101\")),bytes32(stringToBytes32(\"191,228,12,41,43,8,222,101,48,211,11,17,253,210,53,228,104,138,182,136,111,62,193,131,48,200,99,12,63,67,47,21\")),bytes32(stringToBytes32(\"25,225,42,253,14,115,147,133,217,79,247,181,227,155,85,168,181,45,122,32,123,193,133,74,124,197,121,149,52,155,178,206\")),bytes32(stringToBytes32(\"64,91,244,25,158,112,175,243,196,92,217,65,148,130,92,117,152,27,190,150,184,219,118,62,66,187,128,216,237,251,33,71\")),bytes32(stringToBytes32(\"73,120,189,166,100,196,23,71,205,61,113,32,179,154,220,39,44,40,76,131,248,169,100,211,246,247,238,209,110,187,111,173\")),bytes32(stringToBytes32(\"2,160,53,234,150,205,159,18,152,100,178,172,174,253,186,228,42,148,225,2,139,236,25,231,120,196,123,98,8,224,182,225\")),bytes32(stringToBytes32(\"170,181,64,115,249,147,128,66,118,62,164,33,87,106,59,65,29,169,117,31,2,143,63,149,119,141,8,137,156,132,243,200\")),bytes32(stringToBytes32(\"196,156,43,9,73,168,35,243,62,163,186,58,153,237,6,3,54,107,185,221,211,118,52,14,128,185,163,69,219,52,81,17\")),bytes32(stringToBytes32(\"254,47,172,47,77,203,72,142,147,42,117,114,226,5,16,206,176,108,94,158,8,13,217,28,15,181,95,236,131,166,137,175\")),bytes32(stringToBytes32(\"139,213,114,123,174,220,126,236,243,81,6,18,83,145,101,147,9,29,72,54,79,210,92,151,221,245,104,186,191,112,81,183\")),bytes32(stringToBytes32(\"149,83,30,84,19,213,179,242,201,5,164,39,90,61,95,142,134,91,72,160,63,115,209,29,228,67,141,140,118,113,114,236\")),bytes32(stringToBytes32(\"194,201,144,207,170,207,40,112,106,2,54,74,221,230,248,8,83,195,202,180,234,51,16,123,194,37,12,226,16,195,24,208\")),bytes32(stringToBytes32(\"249,71,39,58,49,99,80,118,241,40,173,176,175,198,129,83,246,185,27,242,217,215,244,163,102,192,117,63,61,190,5,77\")),bytes32(stringToBytes32(\"16,236,243,83,130,145,65,217,242,105,142,255,131,137,83,167,177,4,119,83,60,200,91,119,186,49,44,139,126,38,151,123\"))]"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.472ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161]",
              "sol": "stringToBytes32(\"230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161]",
                "sol": "stringToBytes32(\"230,107,129,103,74,69,117,120,32,194,3,249,151,226,94,224,87,101,55,255,176,120,10,245,203,132,236,215,247,81,165,161\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.473ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "64",
              "sol": "64"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.474ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "[53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133]",
              "sol": "stringToBytes32(\"53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133\")"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "[53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133]",
                "sol": "stringToBytes32(\"53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133\")"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133]",
                "sol": "stringToBytes32(\"53,107,63,161,255,181,67,250,153,162,215,67,121,237,3,200,63,208,50,23,180,32,142,246,239,7,13,173,188,122,126,133\")"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "[190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127]",
              "sol": "stringToBytes32(\"190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127\")"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "[190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127]",
                "sol": "stringToBytes32(\"190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127\")"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127]",
                "sol": "stringToBytes32(\"190,6,109,24,115,84,71,102,15,4,112,200,175,236,10,85,61,142,9,142,153,82,84,140,211,52,211,102,224,173,76,127\")"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.477ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"UsesExample\"",
              "sol": "\"UsesExample\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.478ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[133,184,29,218,9,12,141,176,81,165,61,208,63,150,221,59,102,117,149,102,173,236,212,131,133,97,92,10,220,190,118,215],[122,88,90,252,180,184,87,106,216,14,117,61,18,149,4,115,80,15,188,170,17,203,77,3,159,67,171,16,149,230,86,141],[96,221,169,106,5,220,116,216,132,148,7,222,141,176,79,19,185,91,193,102,208,82,133,87,34,77,72,103,207,115,204,27],[19,223,200,245,27,91,200,102,84,101,183,88,137,199,137,126,47,63,24,180,221,222,7,188,71,254,234,15,220,60,224,89],[34,23,179,203,249,209,125,243,110,224,178,227,233,168,76,34,162,122,108,87,45,15,84,218,76,99,247,223,83,163,21,85],[109,130,8,86,33,237,222,118,112,114,45,3,195,202,236,169,32,222,224,95,72,204,67,237,94,100,100,231,197,13,27,78],[56,111,98,209,104,99,172,120,53,255,24,41,95,71,242,165,10,77,225,221,178,64,112,118,235,6,73,74,132,246,28,111],[27,23,215,54,131,171,97,96,5,127,215,7,150,31,1,37,94,164,82,57,220,245,220,184,128,153,155,220,253,89,85,126],[104,195,192,29,192,56,145,209,168,210,42,104,81,39,59,136,83,125,223,75,97,177,144,7,214,6,108,96,175,20,27,184],[56,83,91,176,17,129,1,187,1,129,132,52,66,86,181,200,38,159,254,106,209,78,52,15,84,170,71,251,240,161,87,33],[108,65,129,130,186,230,128,0,153,148,25,159,21,45,15,103,248,244,136,123,62,16,122,28,127,6,54,201,206,9,131,170],[98,194,175,73,63,187,17,223,253,198,23,156,78,70,81,135,159,85,18,33,69,184,244,85,170,28,244,160,8,218,136,54],[147,111,4,160,253,88,175,50,185,102,10,242,157,99,228,179,23,222,73,155,236,33,16,194,129,184,7,204,31,173,98,187],[76,190,71,168,239,236,254,0,102,88,144,116,24,107,39,243,60,81,4,74,193,20,21,138,96,155,10,80,113,105,35,132],[75,62,100,142,45,157,6,170,197,138,54,182,167,165,123,95,127,11,12,3,194,115,231,106,221,14,81,131,184,46,251,145],[86,15,162,201,204,63,151,0,228,175,45,40,121,38,218,12,70,231,216,100,133,80,156,80,49,219,186,3,132,209,53,134],[226,176,57,187,165,160,40,229,252,14,153,196,32,252,183,122,213,193,211,184,107,165,200,215,90,87,44,27,93,194,230,192],[90,186,98,78,101,44,189,222,202,242,60,159,228,152,91,130,136,80,92,42,166,7,203,105,98,105,166,43,42,225,46,219],[31,220,197,136,56,168,129,105,173,234,212,148,73,200,192,228,240,9,214,12,188,13,47,209,159,98,161,194,106,16,144,32],[27,92,111,27,90,247,3,214,176,167,207,23,12,41,81,38,143,82,95,57,117,79,0,200,164,67,58,233,55,8,214,69],[6,36,36,36,48,111,185,138,39,234,102,148,78,15,99,120,142,78,177,124,235,157,157,90,169,97,132,176,245,154,170,243],[85,128,172,242,34,126,72,67,65,67,208,78,105,1,176,54,121,207,84,44,184,127,229,68,153,250,207,90,42,154,217,218],[201,126,102,177,30,228,25,37,164,170,164,207,203,235,156,254,190,202,3,150,223,5,121,104,62,98,168,184,12,55,230,190],[231,31,15,219,241,183,3,67,169,221,107,166,170,202,207,244,113,169,203,127,52,233,153,69,233,185,168,128,134,58,167,50],[180,45,71,96,8,151,31,90,83,191,210,8,55,224,201,20,126,39,39,186,126,59,66,238,112,160,248,141,112,194,96,178],[28,216,159,142,7,36,14,83,129,235,22,2,236,25,148,25,66,99,244,63,163,141,55,139,45,65,164,40,250,153,172,209],[8,28,193,167,146,252,53,51,2,232,206,159,189,6,142,103,181,43,147,51,182,18,66,114,33,255,15,29,44,215,222,244],[3,92,231,202,215,65,28,52,212,225,22,121,140,227,175,27,198,143,10,95,94,103,215,58,78,153,195,47,227,157,207,122],[68,121,162,221,194,166,253,75,232,223,81,115,255,85,204,6,15,155,84,173,39,236,80,49,39,125,25,189,233,254,111,53],[172,96,205,212,154,106,36,182,7,84,179,184,21,91,212,21,90,175,204,175,144,32,149,60,0,239,153,214,180,131,178,40],[4,183,181,47,157,115,36,150,42,35,200,232,241,135,138,106,239,120,53,191,205,187,123,40,123,69,54,98,247,207,230,54],[134,171,16,168,12,185,160,66,173,107,92,0,144,6,220,156,217,95,208,84,96,46,44,116,82,241,16,40,128,182,61,181],[192,201,59,252,161,50,57,75,39,155,166,150,240,150,213,165,58,220,94,97,193,197,98,187,97,167,236,45,233,107,254,216],[110,115,152,7,94,214,211,91,67,219,167,130,126,165,169,132,139,108,198,135,225,251,67,101,19,231,122,140,10,128,76,110],[80,12,66,253,241,241,169,127,170,226,203,70,24,101,97,55,124,41,19,64,87,45,42,210,115,247,2,24,21,184,175,226],[201,195,147,192,187,147,197,38,144,13,58,104,170,245,231,35,0,113,29,128,8,143,48,255,2,120,241,222,8,53,81,166],[180,17,79,89,160,54,172,255,230,236,33,175,152,2,181,141,47,239,48,48,33,215,11,6,255,164,55,242,205,150,8,189],[87,153,79,185,61,142,73,12,145,67,53,116,218,12,195,130,149,84,190,164,8,249,65,238,248,254,218,190,150,171,250,94],[93,254,197,118,177,199,157,249,127,246,57,197,164,72,89,56,227,146,7,161,7,239,94,131,3,82,252,148,216,249,136,134],[227,62,66,252,188,56,135,184,117,234,155,196,84,167,29,241,52,222,146,141,192,154,82,55,29,168,184,197,62,191,221,47],[222,187,5,78,134,148,133,58,110,30,135,0,139,205,67,56,156,49,34,18,41,199,21,245,21,214,130,252,62,154,191,15],[165,86,88,111,72,247,126,177,243,175,46,174,243,38,16,203,225,39,157,85,167,183,14,82,231,55,99,48,160,147,170,102],[57,195,87,146,231,0,9,25,186,92,156,212,166,100,191,101,1,187,186,9,26,118,214,185,86,32,133,144,235,190,56,30],[181,189,240,78,130,25,31,146,101,152,102,117,123,105,108,49,121,43,126,6,234,59,72,35,241,2,40,161,55,244,90,165],[215,113,45,103,21,37,210,54,90,177,60,252,121,67,201,117,183,27,45,113,180,31,93,141,196,96,164,109,83,81,73,80],[145,117,239,39,117,87,67,89,165,52,220,198,29,193,54,210,188,82,195,5,97,153,244,198,40,235,4,176,221,46,98,105],[53,65,89,11,148,33,126,63,242,130,169,119,169,137,171,227,37,127,138,78,186,182,164,191,108,171,62,202,37,171,48,253],[86,24,182,52,72,168,197,69,72,57,58,242,160,92,0,154,191,13,95,124,11,168,57,71,168,139,120,4,218,70,27,162],[210,0,62,18,82,196,118,156,157,82,42,76,187,225,167,99,14,108,138,73,156,124,186,249,36,34,253,112,3,72,160,156],[50,20,189,37,1,122,200,121,195,5,120,120,120,64,4,38,237,94,152,248,129,247,143,71,163,33,221,68,7,4,54,107],[175,176,153,132,79,160,140,149,172,217,42,204,105,67,205,230,94,74,94,63,247,66,71,162,95,20,114,239,134,155,122,173],[176,217,25,192,148,11,225,46,211,223,163,249,226,162,60,3,77,3,11,135,247,107,19,32,91,239,78,33,156,239,54,220],[1,163,100,13,83,150,210,232,37,11,5,69,0,147,175,72,213,43,249,216,17,67,116,21,187,89,165,121,88,209,18,154],[196,14,71,128,252,207,1,179,68,140,231,80,92,125,73,147,113,133,31,102,249,13,135,194,241,246,210,81,63,46,156,12],[157,105,59,112,39,208,218,28,128,134,206,153,44,132,230,248,35,209,124,91,171,92,63,184,228,238,130,108,135,100,215,145],[253,78,82,232,202,62,254,194,167,200,66,32,139,112,103,74,87,50,160,195,230,80,71,1,95,198,93,215,127,141,107,159],[47,229,142,149,224,115,173,109,151,162,14,196,32,63,148,222,32,141,69,123,224,136,79,96,84,112,165,48,151,139,52,125],[140,98,104,132,105,186,14,112,167,233,198,221,118,141,237,22,91,188,249,97,203,148,171,33,73,57,91,66,89,147,35,184],[90,143,176,40,50,215,84,207,48,124,142,207,1,131,132,123,48,123,160,211,177,218,238,132,135,105,99,97,75,92,120,74],[229,4,42,9,248,150,151,122,179,155,119,9,7,187,38,253,70,150,128,88,226,174,247,82,202,85,49,54,186,119,107,88],[134,63,227,31,196,211,82,52,252,97,14,252,115,120,48,130,95,121,90,75,116,82,18,150,129,102,7,58,102,170,11,251],[218,43,185,74,47,124,200,97,62,201,97,249,180,134,202,192,67,109,32,26,16,29,36,121,121,113,230,131,85,178,40,156],[142,76,204,218,158,127,56,11,204,24,12,248,35,79,242,217,215,140,203,221,238,229,88,52,203,113,56,91,28,127,34,90],[52,24,105,100,170,34,175,65,83,49,55,242,171,36,50,50,34,139,147,152,159,226,77,41,162,241,223,221,58,191,87,20]]",
              "sol": "[bytes32(stringToBytes32(\"133,184,29,218,9,12,141,176,81,165,61,208,63,150,221,59,102,117,149,102,173,236,212,131,133,97,92,10,220,190,118,215\")),bytes32(stringToBytes32(\"122,88,90,252,180,184,87,106,216,14,117,61,18,149,4,115,80,15,188,170,17,203,77,3,159,67,171,16,149,230,86,141\")),bytes32(stringToBytes32(\"96,221,169,106,5,220,116,216,132,148,7,222,141,176,79,19,185,91,193,102,208,82,133,87,34,77,72,103,207,115,204,27\")),bytes32(stringToBytes32(\"19,223,200,245,27,91,200,102,84,101,183,88,137,199,137,126,47,63,24,180,221,222,7,188,71,254,234,15,220,60,224,89\")),bytes32(stringToBytes32(\"34,23,179,203,249,209,125,243,110,224,178,227,233,168,76,34,162,122,108,87,45,15,84,218,76,99,247,223,83,163,21,85\")),bytes32(stringToBytes32(\"109,130,8,86,33,237,222,118,112,114,45,3,195,202,236,169,32,222,224,95,72,204,67,237,94,100,100,231,197,13,27,78\")),bytes32(stringToBytes32(\"56,111,98,209,104,99,172,120,53,255,24,41,95,71,242,165,10,77,225,221,178,64,112,118,235,6,73,74,132,246,28,111\")),bytes32(stringToBytes32(\"27,23,215,54,131,171,97,96,5,127,215,7,150,31,1,37,94,164,82,57,220,245,220,184,128,153,155,220,253,89,85,126\")),bytes32(stringToBytes32(\"104,195,192,29,192,56,145,209,168,210,42,104,81,39,59,136,83,125,223,75,97,177,144,7,214,6,108,96,175,20,27,184\")),bytes32(stringToBytes32(\"56,83,91,176,17,129,1,187,1,129,132,52,66,86,181,200,38,159,254,106,209,78,52,15,84,170,71,251,240,161,87,33\")),bytes32(stringToBytes32(\"108,65,129,130,186,230,128,0,153,148,25,159,21,45,15,103,248,244,136,123,62,16,122,28,127,6,54,201,206,9,131,170\")),bytes32(stringToBytes32(\"98,194,175,73,63,187,17,223,253,198,23,156,78,70,81,135,159,85,18,33,69,184,244,85,170,28,244,160,8,218,136,54\")),bytes32(stringToBytes32(\"147,111,4,160,253,88,175,50,185,102,10,242,157,99,228,179,23,222,73,155,236,33,16,194,129,184,7,204,31,173,98,187\")),bytes32(stringToBytes32(\"76,190,71,168,239,236,254,0,102,88,144,116,24,107,39,243,60,81,4,74,193,20,21,138,96,155,10,80,113,105,35,132\")),bytes32(stringToBytes32(\"75,62,100,142,45,157,6,170,197,138,54,182,167,165,123,95,127,11,12,3,194,115,231,106,221,14,81,131,184,46,251,145\")),bytes32(stringToBytes32(\"86,15,162,201,204,63,151,0,228,175,45,40,121,38,218,12,70,231,216,100,133,80,156,80,49,219,186,3,132,209,53,134\")),bytes32(stringToBytes32(\"226,176,57,187,165,160,40,229,252,14,153,196,32,252,183,122,213,193,211,184,107,165,200,215,90,87,44,27,93,194,230,192\")),bytes32(stringToBytes32(\"90,186,98,78,101,44,189,222,202,242,60,159,228,152,91,130,136,80,92,42,166,7,203,105,98,105,166,43,42,225,46,219\")),bytes32(stringToBytes32(\"31,220,197,136,56,168,129,105,173,234,212,148,73,200,192,228,240,9,214,12,188,13,47,209,159,98,161,194,106,16,144,32\")),bytes32(stringToBytes32(\"27,92,111,27,90,247,3,214,176,167,207,23,12,41,81,38,143,82,95,57,117,79,0,200,164,67,58,233,55,8,214,69\")),bytes32(stringToBytes32(\"6,36,36,36,48,111,185,138,39,234,102,148,78,15,99,120,142,78,177,124,235,157,157,90,169,97,132,176,245,154,170,243\")),bytes32(stringToBytes32(\"85,128,172,242,34,126,72,67,65,67,208,78,105,1,176,54,121,207,84,44,184,127,229,68,153,250,207,90,42,154,217,218\")),bytes32(stringToBytes32(\"201,126,102,177,30,228,25,37,164,170,164,207,203,235,156,254,190,202,3,150,223,5,121,104,62,98,168,184,12,55,230,190\")),bytes32(stringToBytes32(\"231,31,15,219,241,183,3,67,169,221,107,166,170,202,207,244,113,169,203,127,52,233,153,69,233,185,168,128,134,58,167,50\")),bytes32(stringToBytes32(\"180,45,71,96,8,151,31,90,83,191,210,8,55,224,201,20,126,39,39,186,126,59,66,238,112,160,248,141,112,194,96,178\")),bytes32(stringToBytes32(\"28,216,159,142,7,36,14,83,129,235,22,2,236,25,148,25,66,99,244,63,163,141,55,139,45,65,164,40,250,153,172,209\")),bytes32(stringToBytes32(\"8,28,193,167,146,252,53,51,2,232,206,159,189,6,142,103,181,43,147,51,182,18,66,114,33,255,15,29,44,215,222,244\")),bytes32(stringToBytes32(\"3,92,231,202,215,65,28,52,212,225,22,121,140,227,175,27,198,143,10,95,94,103,215,58,78,153,195,47,227,157,207,122\")),bytes32(stringToBytes32(\"68,121,162,221,194,166,253,75,232,223,81,115,255,85,204,6,15,155,84,173,39,236,80,49,39,125,25,189,233,254,111,53\")),bytes32(stringToBytes32(\"172,96,205,212,154,106,36,182,7,84,179,184,21,91,212,21,90,175,204,175,144,32,149,60,0,239,153,214,180,131,178,40\")),bytes32(stringToBytes32(\"4,183,181,47,157,115,36,150,42,35,200,232,241,135,138,106,239,120,53,191,205,187,123,40,123,69,54,98,247,207,230,54\")),bytes32(stringToBytes32(\"134,171,16,168,12,185,160,66,173,107,92,0,144,6,220,156,217,95,208,84,96,46,44,116,82,241,16,40,128,182,61,181\")),bytes32(stringToBytes32(\"192,201,59,252,161,50,57,75,39,155,166,150,240,150,213,165,58,220,94,97,193,197,98,187,97,167,236,45,233,107,254,216\")),bytes32(stringToBytes32(\"110,115,152,7,94,214,211,91,67,219,167,130,126,165,169,132,139,108,198,135,225,251,67,101,19,231,122,140,10,128,76,110\")),bytes32(stringToBytes32(\"80,12,66,253,241,241,169,127,170,226,203,70,24,101,97,55,124,41,19,64,87,45,42,210,115,247,2,24,21,184,175,226\")),bytes32(stringToBytes32(\"201,195,147,192,187,147,197,38,144,13,58,104,170,245,231,35,0,113,29,128,8,143,48,255,2,120,241,222,8,53,81,166\")),bytes32(stringToBytes32(\"180,17,79,89,160,54,172,255,230,236,33,175,152,2,181,141,47,239,48,48,33,215,11,6,255,164,55,242,205,150,8,189\")),bytes32(stringToBytes32(\"87,153,79,185,61,142,73,12,145,67,53,116,218,12,195,130,149,84,190,164,8,249,65,238,248,254,218,190,150,171,250,94\")),bytes32(stringToBytes32(\"93,254,197,118,177,199,157,249,127,246,57,197,164,72,89,56,227,146,7,161,7,239,94,131,3,82,252,148,216,249,136,134\")),bytes32(stringToBytes32(\"227,62,66,252,188,56,135,184,117,234,155,196,84,167,29,241,52,222,146,141,192,154,82,55,29,168,184,197,62,191,221,47\")),bytes32(stringToBytes32(\"222,187,5,78,134,148,133,58,110,30,135,0,139,205,67,56,156,49,34,18,41,199,21,245,21,214,130,252,62,154,191,15\")),bytes32(stringToBytes32(\"165,86,88,111,72,247,126,177,243,175,46,174,243,38,16,203,225,39,157,85,167,183,14,82,231,55,99,48,160,147,170,102\")),bytes32(stringToBytes32(\"57,195,87,146,231,0,9,25,186,92,156,212,166,100,191,101,1,187,186,9,26,118,214,185,86,32,133,144,235,190,56,30\")),bytes32(stringToBytes32(\"181,189,240,78,130,25,31,146,101,152,102,117,123,105,108,49,121,43,126,6,234,59,72,35,241,2,40,161,55,244,90,165\")),bytes32(stringToBytes32(\"215,113,45,103,21,37,210,54,90,177,60,252,121,67,201,117,183,27,45,113,180,31,93,141,196,96,164,109,83,81,73,80\")),bytes32(stringToBytes32(\"145,117,239,39,117,87,67,89,165,52,220,198,29,193,54,210,188,82,195,5,97,153,244,198,40,235,4,176,221,46,98,105\")),bytes32(stringToBytes32(\"53,65,89,11,148,33,126,63,242,130,169,119,169,137,171,227,37,127,138,78,186,182,164,191,108,171,62,202,37,171,48,253\")),bytes32(stringToBytes32(\"86,24,182,52,72,168,197,69,72,57,58,242,160,92,0,154,191,13,95,124,11,168,57,71,168,139,120,4,218,70,27,162\")),bytes32(stringToBytes32(\"210,0,62,18,82,196,118,156,157,82,42,76,187,225,167,99,14,108,138,73,156,124,186,249,36,34,253,112,3,72,160,156\")),bytes32(stringToBytes32(\"50,20,189,37,1,122,200,121,195,5,120,120,120,64,4,38,237,94,152,248,129,247,143,71,163,33,221,68,7,4,54,107\")),bytes32(stringToBytes32(\"175,176,153,132,79,160,140,149,172,217,42,204,105,67,205,230,94,74,94,63,247,66,71,162,95,20,114,239,134,155,122,173\")),bytes32(stringToBytes32(\"176,217,25,192,148,11,225,46,211,223,163,249,226,162,60,3,77,3,11,135,247,107,19,32,91,239,78,33,156,239,54,220\")),bytes32(stringToBytes32(\"1,163,100,13,83,150,210,232,37,11,5,69,0,147,175,72,213,43,249,216,17,67,116,21,187,89,165,121,88,209,18,154\")),bytes32(stringToBytes32(\"196,14,71,128,252,207,1,179,68,140,231,80,92,125,73,147,113,133,31,102,249,13,135,194,241,246,210,81,63,46,156,12\")),bytes32(stringToBytes32(\"157,105,59,112,39,208,218,28,128,134,206,153,44,132,230,248,35,209,124,91,171,92,63,184,228,238,130,108,135,100,215,145\")),bytes32(stringToBytes32(\"253,78,82,232,202,62,254,194,167,200,66,32,139,112,103,74,87,50,160,195,230,80,71,1,95,198,93,215,127,141,107,159\")),bytes32(stringToBytes32(\"47,229,142,149,224,115,173,109,151,162,14,196,32,63,148,222,32,141,69,123,224,136,79,96,84,112,165,48,151,139,52,125\")),bytes32(stringToBytes32(\"140,98,104,132,105,186,14,112,167,233,198,221,118,141,237,22,91,188,249,97,203,148,171,33,73,57,91,66,89,147,35,184\")),bytes32(stringToBytes32(\"90,143,176,40,50,215,84,207,48,124,142,207,1,131,132,123,48,123,160,211,177,218,238,132,135,105,99,97,75,92,120,74\")),bytes32(stringToBytes32(\"229,4,42,9,248,150,151,122,179,155,119,9,7,187,38,253,70,150,128,88,226,174,247,82,202,85,49,54,186,119,107,88\")),bytes32(stringToBytes32(\"134,63,227,31,196,211,82,52,252,97,14,252,115,120,48,130,95,121,90,75,116,82,18,150,129,102,7,58,102,170,11,251\")),bytes32(stringToBytes32(\"218,43,185,74,47,124,200,97,62,201,97,249,180,134,202,192,67,109,32,26,16,29,36,121,121,113,230,131,85,178,40,156\")),bytes32(stringToBytes32(\"142,76,204,218,158,127,56,11,204,24,12,248,35,79,242,217,215,140,203,221,238,229,88,52,203,113,56,91,28,127,34,90\")),bytes32(stringToBytes32(\"52,24,105,100,170,34,175,65,83,49,55,242,171,36,50,50,34,139,147,152,159,226,77,41,162,241,223,221,58,191,87,20\"))]"
            },
            {
              "js": "[[38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205],[241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96],[119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14],[87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151],[46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191],[105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114],[48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90],[239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106],[72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246],[51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55],[117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178],[112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111],[9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135],[208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45],[187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153],[51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105],[200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217],[72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163],[18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14],[173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66],[142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215],[154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92],[33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64],[191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26],[225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69],[26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217],[101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220],[63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236],[175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44],[42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16],[219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229],[181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109],[195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199],[15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173],[64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167],[114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158],[117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63],[164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246],[120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85],[253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91],[207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244],[192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220],[71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121],[103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239],[23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255],[252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188],[215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124],[228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142],[38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129],[184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121],[38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181],[32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201],[253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165],[222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80],[170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189],[53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4],[24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214],[8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223],[13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144],[119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102],[77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247],[120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194],[211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192],[165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251]]",
              "sol": "[bytes32(stringToBytes32(\"38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205\")),bytes32(stringToBytes32(\"241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96\")),bytes32(stringToBytes32(\"119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14\")),bytes32(stringToBytes32(\"87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151\")),bytes32(stringToBytes32(\"46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191\")),bytes32(stringToBytes32(\"105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114\")),bytes32(stringToBytes32(\"48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90\")),bytes32(stringToBytes32(\"239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106\")),bytes32(stringToBytes32(\"72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246\")),bytes32(stringToBytes32(\"51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55\")),bytes32(stringToBytes32(\"117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178\")),bytes32(stringToBytes32(\"112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111\")),bytes32(stringToBytes32(\"9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135\")),bytes32(stringToBytes32(\"208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45\")),bytes32(stringToBytes32(\"187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153\")),bytes32(stringToBytes32(\"51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105\")),bytes32(stringToBytes32(\"200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217\")),bytes32(stringToBytes32(\"72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163\")),bytes32(stringToBytes32(\"18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14\")),bytes32(stringToBytes32(\"173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66\")),bytes32(stringToBytes32(\"142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215\")),bytes32(stringToBytes32(\"154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92\")),bytes32(stringToBytes32(\"33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64\")),bytes32(stringToBytes32(\"191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26\")),bytes32(stringToBytes32(\"225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69\")),bytes32(stringToBytes32(\"26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217\")),bytes32(stringToBytes32(\"101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220\")),bytes32(stringToBytes32(\"63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236\")),bytes32(stringToBytes32(\"175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44\")),bytes32(stringToBytes32(\"42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16\")),bytes32(stringToBytes32(\"219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229\")),bytes32(stringToBytes32(\"181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109\")),bytes32(stringToBytes32(\"195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199\")),bytes32(stringToBytes32(\"15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173\")),bytes32(stringToBytes32(\"64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167\")),bytes32(stringToBytes32(\"114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158\")),bytes32(stringToBytes32(\"117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63\")),bytes32(stringToBytes32(\"164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246\")),bytes32(stringToBytes32(\"120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85\")),bytes32(stringToBytes32(\"253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91\")),bytes32(stringToBytes32(\"207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244\")),bytes32(stringToBytes32(\"192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220\")),bytes32(stringToBytes32(\"71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121\")),bytes32(stringToBytes32(\"103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239\")),bytes32(stringToBytes32(\"23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255\")),bytes32(stringToBytes32(\"252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188\")),bytes32(stringToBytes32(\"215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124\")),bytes32(stringToBytes32(\"228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142\")),bytes32(stringToBytes32(\"38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129\")),bytes32(stringToBytes32(\"184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121\")),bytes32(stringToBytes32(\"38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181\")),bytes32(stringToBytes32(\"32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201\")),bytes32(stringToBytes32(\"253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165\")),bytes32(stringToBytes32(\"222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80\")),bytes32(stringToBytes32(\"170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189\")),bytes32(stringToBytes32(\"53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4\")),bytes32(stringToBytes32(\"24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214\")),bytes32(stringToBytes32(\"8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223\")),bytes32(stringToBytes32(\"13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144\")),bytes32(stringToBytes32(\"119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102\")),bytes32(stringToBytes32(\"77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247\")),bytes32(stringToBytes32(\"120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194\")),bytes32(stringToBytes32(\"211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192\")),bytes32(stringToBytes32(\"165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251\"))]"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[133,184,29,218,9,12,141,176,81,165,61,208,63,150,221,59,102,117,149,102,173,236,212,131,133,97,92,10,220,190,118,215],[122,88,90,252,180,184,87,106,216,14,117,61,18,149,4,115,80,15,188,170,17,203,77,3,159,67,171,16,149,230,86,141],[96,221,169,106,5,220,116,216,132,148,7,222,141,176,79,19,185,91,193,102,208,82,133,87,34,77,72,103,207,115,204,27],[19,223,200,245,27,91,200,102,84,101,183,88,137,199,137,126,47,63,24,180,221,222,7,188,71,254,234,15,220,60,224,89],[34,23,179,203,249,209,125,243,110,224,178,227,233,168,76,34,162,122,108,87,45,15,84,218,76,99,247,223,83,163,21,85],[109,130,8,86,33,237,222,118,112,114,45,3,195,202,236,169,32,222,224,95,72,204,67,237,94,100,100,231,197,13,27,78],[56,111,98,209,104,99,172,120,53,255,24,41,95,71,242,165,10,77,225,221,178,64,112,118,235,6,73,74,132,246,28,111],[27,23,215,54,131,171,97,96,5,127,215,7,150,31,1,37,94,164,82,57,220,245,220,184,128,153,155,220,253,89,85,126],[104,195,192,29,192,56,145,209,168,210,42,104,81,39,59,136,83,125,223,75,97,177,144,7,214,6,108,96,175,20,27,184],[56,83,91,176,17,129,1,187,1,129,132,52,66,86,181,200,38,159,254,106,209,78,52,15,84,170,71,251,240,161,87,33],[108,65,129,130,186,230,128,0,153,148,25,159,21,45,15,103,248,244,136,123,62,16,122,28,127,6,54,201,206,9,131,170],[98,194,175,73,63,187,17,223,253,198,23,156,78,70,81,135,159,85,18,33,69,184,244,85,170,28,244,160,8,218,136,54],[147,111,4,160,253,88,175,50,185,102,10,242,157,99,228,179,23,222,73,155,236,33,16,194,129,184,7,204,31,173,98,187],[76,190,71,168,239,236,254,0,102,88,144,116,24,107,39,243,60,81,4,74,193,20,21,138,96,155,10,80,113,105,35,132],[75,62,100,142,45,157,6,170,197,138,54,182,167,165,123,95,127,11,12,3,194,115,231,106,221,14,81,131,184,46,251,145],[86,15,162,201,204,63,151,0,228,175,45,40,121,38,218,12,70,231,216,100,133,80,156,80,49,219,186,3,132,209,53,134],[226,176,57,187,165,160,40,229,252,14,153,196,32,252,183,122,213,193,211,184,107,165,200,215,90,87,44,27,93,194,230,192],[90,186,98,78,101,44,189,222,202,242,60,159,228,152,91,130,136,80,92,42,166,7,203,105,98,105,166,43,42,225,46,219],[31,220,197,136,56,168,129,105,173,234,212,148,73,200,192,228,240,9,214,12,188,13,47,209,159,98,161,194,106,16,144,32],[27,92,111,27,90,247,3,214,176,167,207,23,12,41,81,38,143,82,95,57,117,79,0,200,164,67,58,233,55,8,214,69],[6,36,36,36,48,111,185,138,39,234,102,148,78,15,99,120,142,78,177,124,235,157,157,90,169,97,132,176,245,154,170,243],[85,128,172,242,34,126,72,67,65,67,208,78,105,1,176,54,121,207,84,44,184,127,229,68,153,250,207,90,42,154,217,218],[201,126,102,177,30,228,25,37,164,170,164,207,203,235,156,254,190,202,3,150,223,5,121,104,62,98,168,184,12,55,230,190],[231,31,15,219,241,183,3,67,169,221,107,166,170,202,207,244,113,169,203,127,52,233,153,69,233,185,168,128,134,58,167,50],[180,45,71,96,8,151,31,90,83,191,210,8,55,224,201,20,126,39,39,186,126,59,66,238,112,160,248,141,112,194,96,178],[28,216,159,142,7,36,14,83,129,235,22,2,236,25,148,25,66,99,244,63,163,141,55,139,45,65,164,40,250,153,172,209],[8,28,193,167,146,252,53,51,2,232,206,159,189,6,142,103,181,43,147,51,182,18,66,114,33,255,15,29,44,215,222,244],[3,92,231,202,215,65,28,52,212,225,22,121,140,227,175,27,198,143,10,95,94,103,215,58,78,153,195,47,227,157,207,122],[68,121,162,221,194,166,253,75,232,223,81,115,255,85,204,6,15,155,84,173,39,236,80,49,39,125,25,189,233,254,111,53],[172,96,205,212,154,106,36,182,7,84,179,184,21,91,212,21,90,175,204,175,144,32,149,60,0,239,153,214,180,131,178,40],[4,183,181,47,157,115,36,150,42,35,200,232,241,135,138,106,239,120,53,191,205,187,123,40,123,69,54,98,247,207,230,54],[134,171,16,168,12,185,160,66,173,107,92,0,144,6,220,156,217,95,208,84,96,46,44,116,82,241,16,40,128,182,61,181],[192,201,59,252,161,50,57,75,39,155,166,150,240,150,213,165,58,220,94,97,193,197,98,187,97,167,236,45,233,107,254,216],[110,115,152,7,94,214,211,91,67,219,167,130,126,165,169,132,139,108,198,135,225,251,67,101,19,231,122,140,10,128,76,110],[80,12,66,253,241,241,169,127,170,226,203,70,24,101,97,55,124,41,19,64,87,45,42,210,115,247,2,24,21,184,175,226],[201,195,147,192,187,147,197,38,144,13,58,104,170,245,231,35,0,113,29,128,8,143,48,255,2,120,241,222,8,53,81,166],[180,17,79,89,160,54,172,255,230,236,33,175,152,2,181,141,47,239,48,48,33,215,11,6,255,164,55,242,205,150,8,189],[87,153,79,185,61,142,73,12,145,67,53,116,218,12,195,130,149,84,190,164,8,249,65,238,248,254,218,190,150,171,250,94],[93,254,197,118,177,199,157,249,127,246,57,197,164,72,89,56,227,146,7,161,7,239,94,131,3,82,252,148,216,249,136,134],[227,62,66,252,188,56,135,184,117,234,155,196,84,167,29,241,52,222,146,141,192,154,82,55,29,168,184,197,62,191,221,47],[222,187,5,78,134,148,133,58,110,30,135,0,139,205,67,56,156,49,34,18,41,199,21,245,21,214,130,252,62,154,191,15],[165,86,88,111,72,247,126,177,243,175,46,174,243,38,16,203,225,39,157,85,167,183,14,82,231,55,99,48,160,147,170,102],[57,195,87,146,231,0,9,25,186,92,156,212,166,100,191,101,1,187,186,9,26,118,214,185,86,32,133,144,235,190,56,30],[181,189,240,78,130,25,31,146,101,152,102,117,123,105,108,49,121,43,126,6,234,59,72,35,241,2,40,161,55,244,90,165],[215,113,45,103,21,37,210,54,90,177,60,252,121,67,201,117,183,27,45,113,180,31,93,141,196,96,164,109,83,81,73,80],[145,117,239,39,117,87,67,89,165,52,220,198,29,193,54,210,188,82,195,5,97,153,244,198,40,235,4,176,221,46,98,105],[53,65,89,11,148,33,126,63,242,130,169,119,169,137,171,227,37,127,138,78,186,182,164,191,108,171,62,202,37,171,48,253],[86,24,182,52,72,168,197,69,72,57,58,242,160,92,0,154,191,13,95,124,11,168,57,71,168,139,120,4,218,70,27,162],[210,0,62,18,82,196,118,156,157,82,42,76,187,225,167,99,14,108,138,73,156,124,186,249,36,34,253,112,3,72,160,156],[50,20,189,37,1,122,200,121,195,5,120,120,120,64,4,38,237,94,152,248,129,247,143,71,163,33,221,68,7,4,54,107],[175,176,153,132,79,160,140,149,172,217,42,204,105,67,205,230,94,74,94,63,247,66,71,162,95,20,114,239,134,155,122,173],[176,217,25,192,148,11,225,46,211,223,163,249,226,162,60,3,77,3,11,135,247,107,19,32,91,239,78,33,156,239,54,220],[1,163,100,13,83,150,210,232,37,11,5,69,0,147,175,72,213,43,249,216,17,67,116,21,187,89,165,121,88,209,18,154],[196,14,71,128,252,207,1,179,68,140,231,80,92,125,73,147,113,133,31,102,249,13,135,194,241,246,210,81,63,46,156,12],[157,105,59,112,39,208,218,28,128,134,206,153,44,132,230,248,35,209,124,91,171,92,63,184,228,238,130,108,135,100,215,145],[253,78,82,232,202,62,254,194,167,200,66,32,139,112,103,74,87,50,160,195,230,80,71,1,95,198,93,215,127,141,107,159],[47,229,142,149,224,115,173,109,151,162,14,196,32,63,148,222,32,141,69,123,224,136,79,96,84,112,165,48,151,139,52,125],[140,98,104,132,105,186,14,112,167,233,198,221,118,141,237,22,91,188,249,97,203,148,171,33,73,57,91,66,89,147,35,184],[90,143,176,40,50,215,84,207,48,124,142,207,1,131,132,123,48,123,160,211,177,218,238,132,135,105,99,97,75,92,120,74],[229,4,42,9,248,150,151,122,179,155,119,9,7,187,38,253,70,150,128,88,226,174,247,82,202,85,49,54,186,119,107,88],[134,63,227,31,196,211,82,52,252,97,14,252,115,120,48,130,95,121,90,75,116,82,18,150,129,102,7,58,102,170,11,251],[218,43,185,74,47,124,200,97,62,201,97,249,180,134,202,192,67,109,32,26,16,29,36,121,121,113,230,131,85,178,40,156],[142,76,204,218,158,127,56,11,204,24,12,248,35,79,242,217,215,140,203,221,238,229,88,52,203,113,56,91,28,127,34,90],[52,24,105,100,170,34,175,65,83,49,55,242,171,36,50,50,34,139,147,152,159,226,77,41,162,241,223,221,58,191,87,20]]",
                "sol": "[bytes32(stringToBytes32(\"133,184,29,218,9,12,141,176,81,165,61,208,63,150,221,59,102,117,149,102,173,236,212,131,133,97,92,10,220,190,118,215\")),bytes32(stringToBytes32(\"122,88,90,252,180,184,87,106,216,14,117,61,18,149,4,115,80,15,188,170,17,203,77,3,159,67,171,16,149,230,86,141\")),bytes32(stringToBytes32(\"96,221,169,106,5,220,116,216,132,148,7,222,141,176,79,19,185,91,193,102,208,82,133,87,34,77,72,103,207,115,204,27\")),bytes32(stringToBytes32(\"19,223,200,245,27,91,200,102,84,101,183,88,137,199,137,126,47,63,24,180,221,222,7,188,71,254,234,15,220,60,224,89\")),bytes32(stringToBytes32(\"34,23,179,203,249,209,125,243,110,224,178,227,233,168,76,34,162,122,108,87,45,15,84,218,76,99,247,223,83,163,21,85\")),bytes32(stringToBytes32(\"109,130,8,86,33,237,222,118,112,114,45,3,195,202,236,169,32,222,224,95,72,204,67,237,94,100,100,231,197,13,27,78\")),bytes32(stringToBytes32(\"56,111,98,209,104,99,172,120,53,255,24,41,95,71,242,165,10,77,225,221,178,64,112,118,235,6,73,74,132,246,28,111\")),bytes32(stringToBytes32(\"27,23,215,54,131,171,97,96,5,127,215,7,150,31,1,37,94,164,82,57,220,245,220,184,128,153,155,220,253,89,85,126\")),bytes32(stringToBytes32(\"104,195,192,29,192,56,145,209,168,210,42,104,81,39,59,136,83,125,223,75,97,177,144,7,214,6,108,96,175,20,27,184\")),bytes32(stringToBytes32(\"56,83,91,176,17,129,1,187,1,129,132,52,66,86,181,200,38,159,254,106,209,78,52,15,84,170,71,251,240,161,87,33\")),bytes32(stringToBytes32(\"108,65,129,130,186,230,128,0,153,148,25,159,21,45,15,103,248,244,136,123,62,16,122,28,127,6,54,201,206,9,131,170\")),bytes32(stringToBytes32(\"98,194,175,73,63,187,17,223,253,198,23,156,78,70,81,135,159,85,18,33,69,184,244,85,170,28,244,160,8,218,136,54\")),bytes32(stringToBytes32(\"147,111,4,160,253,88,175,50,185,102,10,242,157,99,228,179,23,222,73,155,236,33,16,194,129,184,7,204,31,173,98,187\")),bytes32(stringToBytes32(\"76,190,71,168,239,236,254,0,102,88,144,116,24,107,39,243,60,81,4,74,193,20,21,138,96,155,10,80,113,105,35,132\")),bytes32(stringToBytes32(\"75,62,100,142,45,157,6,170,197,138,54,182,167,165,123,95,127,11,12,3,194,115,231,106,221,14,81,131,184,46,251,145\")),bytes32(stringToBytes32(\"86,15,162,201,204,63,151,0,228,175,45,40,121,38,218,12,70,231,216,100,133,80,156,80,49,219,186,3,132,209,53,134\")),bytes32(stringToBytes32(\"226,176,57,187,165,160,40,229,252,14,153,196,32,252,183,122,213,193,211,184,107,165,200,215,90,87,44,27,93,194,230,192\")),bytes32(stringToBytes32(\"90,186,98,78,101,44,189,222,202,242,60,159,228,152,91,130,136,80,92,42,166,7,203,105,98,105,166,43,42,225,46,219\")),bytes32(stringToBytes32(\"31,220,197,136,56,168,129,105,173,234,212,148,73,200,192,228,240,9,214,12,188,13,47,209,159,98,161,194,106,16,144,32\")),bytes32(stringToBytes32(\"27,92,111,27,90,247,3,214,176,167,207,23,12,41,81,38,143,82,95,57,117,79,0,200,164,67,58,233,55,8,214,69\")),bytes32(stringToBytes32(\"6,36,36,36,48,111,185,138,39,234,102,148,78,15,99,120,142,78,177,124,235,157,157,90,169,97,132,176,245,154,170,243\")),bytes32(stringToBytes32(\"85,128,172,242,34,126,72,67,65,67,208,78,105,1,176,54,121,207,84,44,184,127,229,68,153,250,207,90,42,154,217,218\")),bytes32(stringToBytes32(\"201,126,102,177,30,228,25,37,164,170,164,207,203,235,156,254,190,202,3,150,223,5,121,104,62,98,168,184,12,55,230,190\")),bytes32(stringToBytes32(\"231,31,15,219,241,183,3,67,169,221,107,166,170,202,207,244,113,169,203,127,52,233,153,69,233,185,168,128,134,58,167,50\")),bytes32(stringToBytes32(\"180,45,71,96,8,151,31,90,83,191,210,8,55,224,201,20,126,39,39,186,126,59,66,238,112,160,248,141,112,194,96,178\")),bytes32(stringToBytes32(\"28,216,159,142,7,36,14,83,129,235,22,2,236,25,148,25,66,99,244,63,163,141,55,139,45,65,164,40,250,153,172,209\")),bytes32(stringToBytes32(\"8,28,193,167,146,252,53,51,2,232,206,159,189,6,142,103,181,43,147,51,182,18,66,114,33,255,15,29,44,215,222,244\")),bytes32(stringToBytes32(\"3,92,231,202,215,65,28,52,212,225,22,121,140,227,175,27,198,143,10,95,94,103,215,58,78,153,195,47,227,157,207,122\")),bytes32(stringToBytes32(\"68,121,162,221,194,166,253,75,232,223,81,115,255,85,204,6,15,155,84,173,39,236,80,49,39,125,25,189,233,254,111,53\")),bytes32(stringToBytes32(\"172,96,205,212,154,106,36,182,7,84,179,184,21,91,212,21,90,175,204,175,144,32,149,60,0,239,153,214,180,131,178,40\")),bytes32(stringToBytes32(\"4,183,181,47,157,115,36,150,42,35,200,232,241,135,138,106,239,120,53,191,205,187,123,40,123,69,54,98,247,207,230,54\")),bytes32(stringToBytes32(\"134,171,16,168,12,185,160,66,173,107,92,0,144,6,220,156,217,95,208,84,96,46,44,116,82,241,16,40,128,182,61,181\")),bytes32(stringToBytes32(\"192,201,59,252,161,50,57,75,39,155,166,150,240,150,213,165,58,220,94,97,193,197,98,187,97,167,236,45,233,107,254,216\")),bytes32(stringToBytes32(\"110,115,152,7,94,214,211,91,67,219,167,130,126,165,169,132,139,108,198,135,225,251,67,101,19,231,122,140,10,128,76,110\")),bytes32(stringToBytes32(\"80,12,66,253,241,241,169,127,170,226,203,70,24,101,97,55,124,41,19,64,87,45,42,210,115,247,2,24,21,184,175,226\")),bytes32(stringToBytes32(\"201,195,147,192,187,147,197,38,144,13,58,104,170,245,231,35,0,113,29,128,8,143,48,255,2,120,241,222,8,53,81,166\")),bytes32(stringToBytes32(\"180,17,79,89,160,54,172,255,230,236,33,175,152,2,181,141,47,239,48,48,33,215,11,6,255,164,55,242,205,150,8,189\")),bytes32(stringToBytes32(\"87,153,79,185,61,142,73,12,145,67,53,116,218,12,195,130,149,84,190,164,8,249,65,238,248,254,218,190,150,171,250,94\")),bytes32(stringToBytes32(\"93,254,197,118,177,199,157,249,127,246,57,197,164,72,89,56,227,146,7,161,7,239,94,131,3,82,252,148,216,249,136,134\")),bytes32(stringToBytes32(\"227,62,66,252,188,56,135,184,117,234,155,196,84,167,29,241,52,222,146,141,192,154,82,55,29,168,184,197,62,191,221,47\")),bytes32(stringToBytes32(\"222,187,5,78,134,148,133,58,110,30,135,0,139,205,67,56,156,49,34,18,41,199,21,245,21,214,130,252,62,154,191,15\")),bytes32(stringToBytes32(\"165,86,88,111,72,247,126,177,243,175,46,174,243,38,16,203,225,39,157,85,167,183,14,82,231,55,99,48,160,147,170,102\")),bytes32(stringToBytes32(\"57,195,87,146,231,0,9,25,186,92,156,212,166,100,191,101,1,187,186,9,26,118,214,185,86,32,133,144,235,190,56,30\")),bytes32(stringToBytes32(\"181,189,240,78,130,25,31,146,101,152,102,117,123,105,108,49,121,43,126,6,234,59,72,35,241,2,40,161,55,244,90,165\")),bytes32(stringToBytes32(\"215,113,45,103,21,37,210,54,90,177,60,252,121,67,201,117,183,27,45,113,180,31,93,141,196,96,164,109,83,81,73,80\")),bytes32(stringToBytes32(\"145,117,239,39,117,87,67,89,165,52,220,198,29,193,54,210,188,82,195,5,97,153,244,198,40,235,4,176,221,46,98,105\")),bytes32(stringToBytes32(\"53,65,89,11,148,33,126,63,242,130,169,119,169,137,171,227,37,127,138,78,186,182,164,191,108,171,62,202,37,171,48,253\")),bytes32(stringToBytes32(\"86,24,182,52,72,168,197,69,72,57,58,242,160,92,0,154,191,13,95,124,11,168,57,71,168,139,120,4,218,70,27,162\")),bytes32(stringToBytes32(\"210,0,62,18,82,196,118,156,157,82,42,76,187,225,167,99,14,108,138,73,156,124,186,249,36,34,253,112,3,72,160,156\")),bytes32(stringToBytes32(\"50,20,189,37,1,122,200,121,195,5,120,120,120,64,4,38,237,94,152,248,129,247,143,71,163,33,221,68,7,4,54,107\")),bytes32(stringToBytes32(\"175,176,153,132,79,160,140,149,172,217,42,204,105,67,205,230,94,74,94,63,247,66,71,162,95,20,114,239,134,155,122,173\")),bytes32(stringToBytes32(\"176,217,25,192,148,11,225,46,211,223,163,249,226,162,60,3,77,3,11,135,247,107,19,32,91,239,78,33,156,239,54,220\")),bytes32(stringToBytes32(\"1,163,100,13,83,150,210,232,37,11,5,69,0,147,175,72,213,43,249,216,17,67,116,21,187,89,165,121,88,209,18,154\")),bytes32(stringToBytes32(\"196,14,71,128,252,207,1,179,68,140,231,80,92,125,73,147,113,133,31,102,249,13,135,194,241,246,210,81,63,46,156,12\")),bytes32(stringToBytes32(\"157,105,59,112,39,208,218,28,128,134,206,153,44,132,230,248,35,209,124,91,171,92,63,184,228,238,130,108,135,100,215,145\")),bytes32(stringToBytes32(\"253,78,82,232,202,62,254,194,167,200,66,32,139,112,103,74,87,50,160,195,230,80,71,1,95,198,93,215,127,141,107,159\")),bytes32(stringToBytes32(\"47,229,142,149,224,115,173,109,151,162,14,196,32,63,148,222,32,141,69,123,224,136,79,96,84,112,165,48,151,139,52,125\")),bytes32(stringToBytes32(\"140,98,104,132,105,186,14,112,167,233,198,221,118,141,237,22,91,188,249,97,203,148,171,33,73,57,91,66,89,147,35,184\")),bytes32(stringToBytes32(\"90,143,176,40,50,215,84,207,48,124,142,207,1,131,132,123,48,123,160,211,177,218,238,132,135,105,99,97,75,92,120,74\")),bytes32(stringToBytes32(\"229,4,42,9,248,150,151,122,179,155,119,9,7,187,38,253,70,150,128,88,226,174,247,82,202,85,49,54,186,119,107,88\")),bytes32(stringToBytes32(\"134,63,227,31,196,211,82,52,252,97,14,252,115,120,48,130,95,121,90,75,116,82,18,150,129,102,7,58,102,170,11,251\")),bytes32(stringToBytes32(\"218,43,185,74,47,124,200,97,62,201,97,249,180,134,202,192,67,109,32,26,16,29,36,121,121,113,230,131,85,178,40,156\")),bytes32(stringToBytes32(\"142,76,204,218,158,127,56,11,204,24,12,248,35,79,242,217,215,140,203,221,238,229,88,52,203,113,56,91,28,127,34,90\")),bytes32(stringToBytes32(\"52,24,105,100,170,34,175,65,83,49,55,242,171,36,50,50,34,139,147,152,159,226,77,41,162,241,223,221,58,191,87,20\"))]"
              },
              {
                "js": "[[38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205],[241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96],[119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14],[87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151],[46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191],[105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114],[48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90],[239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106],[72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246],[51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55],[117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178],[112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111],[9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135],[208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45],[187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153],[51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105],[200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217],[72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163],[18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14],[173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66],[142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215],[154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92],[33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64],[191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26],[225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69],[26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217],[101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220],[63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236],[175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44],[42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16],[219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229],[181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109],[195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199],[15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173],[64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167],[114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158],[117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63],[164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246],[120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85],[253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91],[207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244],[192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220],[71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121],[103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239],[23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255],[252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188],[215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124],[228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142],[38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129],[184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121],[38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181],[32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201],[253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165],[222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80],[170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189],[53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4],[24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214],[8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223],[13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144],[119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102],[77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247],[120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194],[211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192],[165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251]]",
                "sol": "[bytes32(stringToBytes32(\"38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205\")),bytes32(stringToBytes32(\"241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96\")),bytes32(stringToBytes32(\"119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14\")),bytes32(stringToBytes32(\"87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151\")),bytes32(stringToBytes32(\"46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191\")),bytes32(stringToBytes32(\"105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114\")),bytes32(stringToBytes32(\"48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90\")),bytes32(stringToBytes32(\"239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106\")),bytes32(stringToBytes32(\"72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246\")),bytes32(stringToBytes32(\"51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55\")),bytes32(stringToBytes32(\"117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178\")),bytes32(stringToBytes32(\"112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111\")),bytes32(stringToBytes32(\"9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135\")),bytes32(stringToBytes32(\"208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45\")),bytes32(stringToBytes32(\"187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153\")),bytes32(stringToBytes32(\"51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105\")),bytes32(stringToBytes32(\"200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217\")),bytes32(stringToBytes32(\"72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163\")),bytes32(stringToBytes32(\"18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14\")),bytes32(stringToBytes32(\"173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66\")),bytes32(stringToBytes32(\"142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215\")),bytes32(stringToBytes32(\"154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92\")),bytes32(stringToBytes32(\"33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64\")),bytes32(stringToBytes32(\"191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26\")),bytes32(stringToBytes32(\"225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69\")),bytes32(stringToBytes32(\"26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217\")),bytes32(stringToBytes32(\"101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220\")),bytes32(stringToBytes32(\"63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236\")),bytes32(stringToBytes32(\"175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44\")),bytes32(stringToBytes32(\"42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16\")),bytes32(stringToBytes32(\"219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229\")),bytes32(stringToBytes32(\"181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109\")),bytes32(stringToBytes32(\"195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199\")),bytes32(stringToBytes32(\"15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173\")),bytes32(stringToBytes32(\"64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167\")),bytes32(stringToBytes32(\"114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158\")),bytes32(stringToBytes32(\"117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63\")),bytes32(stringToBytes32(\"164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246\")),bytes32(stringToBytes32(\"120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85\")),bytes32(stringToBytes32(\"253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91\")),bytes32(stringToBytes32(\"207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244\")),bytes32(stringToBytes32(\"192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220\")),bytes32(stringToBytes32(\"71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121\")),bytes32(stringToBytes32(\"103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239\")),bytes32(stringToBytes32(\"23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255\")),bytes32(stringToBytes32(\"252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188\")),bytes32(stringToBytes32(\"215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124\")),bytes32(stringToBytes32(\"228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142\")),bytes32(stringToBytes32(\"38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129\")),bytes32(stringToBytes32(\"184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121\")),bytes32(stringToBytes32(\"38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181\")),bytes32(stringToBytes32(\"32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201\")),bytes32(stringToBytes32(\"253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165\")),bytes32(stringToBytes32(\"222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80\")),bytes32(stringToBytes32(\"170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189\")),bytes32(stringToBytes32(\"53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4\")),bytes32(stringToBytes32(\"24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214\")),bytes32(stringToBytes32(\"8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223\")),bytes32(stringToBytes32(\"13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144\")),bytes32(stringToBytes32(\"119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102\")),bytes32(stringToBytes32(\"77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247\")),bytes32(stringToBytes32(\"120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194\")),bytes32(stringToBytes32(\"211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192\")),bytes32(stringToBytes32(\"165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[141,21,243,45,159,52,223,252,146,107,13,118,193,198,9,162,174,211,123,112,42,255,106,247,132,155,200,65,48,51,119,200],[232,103,11,130,78,223,17,220,220,18,208,10,19,254,253,102,105,64,221,32,119,212,221,48,61,144,48,57,173,3,66,114],[160,107,160,194,227,168,110,222,45,43,141,125,238,68,224,174,180,247,116,188,236,120,247,241,100,34,108,244,46,38,118,208],[156,254,197,68,253,157,196,176,19,150,28,13,7,95,67,230,5,147,150,119,223,219,198,208,85,10,78,5,22,23,193,219],[105,202,217,73,89,39,211,135,223,31,80,210,61,66,66,206,130,99,110,97,195,203,88,140,225,46,46,22,239,215,214,146],[229,79,226,147,94,241,232,225,37,140,147,88,84,187,139,89,107,187,118,71,148,166,50,200,250,147,188,183,129,3,103,61],[15,70,57,229,216,61,233,171,8,41,202,54,56,223,137,88,126,200,208,15,29,218,194,51,39,128,176,18,163,190,126,6],[20,25,189,161,193,54,119,20,99,244,215,75,21,246,191,11,133,214,122,27,87,112,201,160,253,224,2,12,164,254,186,224],[82,227,26,243,157,202,33,57,150,214,56,17,102,34,29,205,195,209,7,247,60,180,95,147,33,55,196,54,74,161,52,146],[31,113,200,192,195,113,129,223,33,110,100,240,171,181,196,213,26,65,15,112,253,54,13,0,143,85,70,27,179,175,84,46],[39,177,218,50,211,112,250,164,246,214,109,78,18,118,211,228,16,225,93,59,230,162,99,37,47,89,233,23,184,119,87,12],[41,64,33,176,243,93,151,10,164,6,59,97,222,95,14,112,206,103,87,15,45,123,83,206,197,90,56,115,192,131,64,230],[203,224,98,247,41,163,21,177,231,217,58,81,184,29,210,194,205,198,181,128,148,88,211,169,28,178,38,161,36,116,178,237],[61,214,215,126,156,62,168,88,75,121,148,47,219,98,82,211,174,37,50,76,40,201,36,168,189,57,102,105,39,119,62,253],[32,37,151,252,193,46,212,121,205,149,72,87,37,169,61,12,192,147,3,92,154,61,234,247,250,163,138,66,185,216,241,24],[214,55,66,237,251,134,226,76,56,105,141,148,73,47,50,187,142,237,129,109,43,27,169,152,193,108,56,240,225,3,179,7],[188,242,52,145,142,114,229,172,33,34,242,192,155,202,105,23,136,2,46,180,208,67,80,137,11,209,118,5,30,112,231,254],[111,22,148,111,109,235,102,187,71,109,230,157,204,150,146,37,107,196,1,44,161,79,189,50,157,161,168,137,240,74,221,27],[118,230,149,133,181,81,1,11,116,2,52,146,255,173,45,43,93,42,205,103,217,11,142,76,227,154,165,1,186,253,118,103],[46,140,217,112,103,171,73,247,46,50,45,47,100,27,201,57,88,146,134,57,173,236,115,179,130,27,103,250,191,67,109,222],[42,127,199,164,186,190,89,34,239,251,200,238,133,239,41,148,212,86,255,83,121,99,43,219,93,218,148,55,161,27,205,63],[81,178,66,13,193,39,52,166,208,110,129,108,225,156,43,185,44,69,229,197,76,218,46,113,112,48,160,119,235,23,33,226],[83,221,31,141,234,94,138,204,46,140,154,217,193,85,130,135,167,22,50,250,106,184,234,252,4,174,193,148,10,227,148,212],[17,124,236,180,122,90,224,80,134,12,190,209,68,68,60,15,76,69,172,94,199,232,66,96,27,37,192,129,19,203,221,22],[210,249,250,59,120,129,221,148,39,215,237,45,131,193,82,129,185,176,208,63,239,79,218,173,144,111,72,83,150,197,66,255],[177,188,45,102,202,39,89,24,63,196,34,121,114,51,178,18,48,22,180,89,170,142,240,167,134,243,241,198,36,99,170,248],[47,150,7,114,30,192,46,2,130,131,211,124,242,220,179,249,152,247,164,129,102,33,250,72,22,180,116,156,145,251,239,164],[122,144,167,105,63,112,223,103,159,0,204,97,84,237,239,15,139,59,27,211,59,19,171,196,48,83,180,73,208,77,1,197],[103,216,161,217,102,174,155,139,121,112,219,55,178,19,192,167,141,213,35,206,126,51,248,144,20,135,242,121,243,254,156,20],[126,125,91,120,145,178,213,141,208,44,184,240,81,157,85,254,73,50,129,17,68,22,150,45,20,179,97,134,120,9,104,78],[75,14,52,159,69,173,20,19,160,79,240,219,252,141,235,163,138,215,154,152,100,185,219,160,42,243,32,197,17,98,55,139],[211,9,207,255,40,203,144,56,54,226,225,162,114,66,168,30,55,240,39,76,245,217,20,50,76,253,228,182,82,45,249,3],[249,247,69,129,187,234,191,10,233,244,78,239,13,65,41,201,54,216,195,216,206,163,225,220,7,189,166,36,17,43,58,181],[29,235,173,152,62,137,244,172,129,183,146,25,167,1,242,118,226,120,248,142,188,127,74,156,119,216,243,235,91,62,168,64],[37,133,174,119,164,153,215,106,174,4,112,154,194,73,117,132,142,201,202,102,90,234,207,176,227,36,73,158,221,168,73,42],[173,137,131,245,254,56,242,47,245,59,37,111,190,124,5,66,153,207,56,24,76,221,160,152,242,179,1,250,208,125,231,248],[62,192,10,237,222,186,180,28,147,115,122,157,187,235,46,239,15,103,184,218,64,28,183,163,102,141,57,227,166,23,254,184],[208,116,57,157,138,58,198,55,188,166,167,90,146,151,81,194,32,11,168,82,68,116,251,165,22,49,137,143,219,12,205,100],[2,142,181,8,168,59,128,148,140,194,233,63,137,109,192,78,147,211,214,175,156,97,93,211,190,211,184,219,7,208,190,68],[160,39,134,145,69,142,232,194,201,169,64,223,78,159,163,146,213,124,132,241,46,11,243,56,245,199,255,138,76,181,53,246],[182,240,101,49,229,88,40,55,194,96,243,95,168,167,209,207,158,147,166,121,229,207,41,0,185,113,83,114,90,138,10,41],[148,35,125,97,49,144,40,76,243,21,142,168,96,101,254,89,103,21,178,224,17,11,167,40,133,69,238,253,38,215,68,149],[173,235,71,127,17,7,0,146,136,40,209,243,152,229,38,122,120,43,34,243,237,11,153,7,78,98,19,58,42,173,130,22],[255,80,238,10,132,220,98,113,185,30,227,200,162,85,182,95,159,117,124,198,138,133,109,120,31,36,74,214,24,36,177,105],[200,11,121,161,66,142,87,206,177,148,158,84,74,203,142,245,42,125,25,62,213,255,216,45,152,74,206,23,8,98,12,71],[17,17,90,205,217,253,103,234,228,99,78,82,12,101,162,56,214,79,150,139,165,242,152,138,151,213,180,40,237,93,253,226],[65,4,120,118,70,167,59,129,1,201,221,115,27,236,6,124,181,52,222,212,249,29,173,137,17,0,17,74,213,217,55,13],[39,70,77,182,235,215,156,29,97,68,191,166,212,140,198,73,184,78,144,134,165,123,191,132,97,196,174,18,66,79,143,77],[107,59,218,24,71,1,105,181,224,67,113,17,202,249,71,127,127,127,73,144,200,196,3,65,197,27,71,214,44,64,45,49],[241,157,213,136,145,100,250,229,180,145,28,66,68,173,64,29,64,25,195,217,193,12,235,183,245,194,83,49,188,176,171,145],[24,139,133,175,105,127,25,146,178,48,222,124,139,184,250,49,165,19,114,73,113,128,184,209,134,233,85,193,241,197,179,32],[127,0,207,87,39,99,251,191,90,205,191,214,179,76,198,213,32,199,105,216,131,79,197,55,41,202,85,111,221,91,196,96],[44,227,115,218,75,34,150,64,193,141,92,253,235,71,162,96,128,247,22,64,127,99,223,108,25,197,205,85,202,22,61,93],[98,6,123,46,3,134,3,126,143,63,241,32,130,138,151,209,102,225,60,23,222,77,219,200,46,31,11,155,75,14,85,204],[79,36,55,159,15,67,104,132,76,36,124,231,216,69,245,14,75,119,177,21,131,101,101,76,148,151,47,67,170,39,9,101],[24,0,167,83,175,127,135,125,20,32,132,183,69,197,2,254,122,164,10,128,2,255,162,148,171,124,224,98,116,80,155,5],[51,239,194,120,210,102,205,5,107,246,30,62,54,178,120,27,123,74,60,146,110,68,52,53,99,30,183,43,162,133,12,53],[116,246,217,85,108,116,195,216,255,157,109,130,44,28,127,25,109,23,58,139,111,139,140,0,172,79,62,174,134,86,160,96],[51,201,52,200,19,23,226,118,194,252,82,62,37,53,251,165,194,193,7,5,123,128,217,186,249,195,243,161,57,150,206,55],[222,22,100,176,179,198,6,38,105,176,164,199,145,148,155,27,232,69,48,166,223,178,213,38,101,55,237,111,235,15,27,76],[70,233,119,149,148,15,203,78,175,162,25,125,53,63,188,227,194,126,107,7,246,169,244,204,105,198,83,117,51,17,220,91],[120,143,147,46,88,1,241,125,86,181,165,155,238,21,158,127,216,29,241,48,180,164,157,9,107,45,206,204,209,190,138,213],[208,139,2,167,218,180,2,121,74,28,217,183,137,218,58,66,141,19,227,113,116,165,154,242,211,159,103,106,134,136,169,246],[163,238,130,54,194,105,146,84,41,116,11,174,204,52,171,236,185,80,88,2,43,79,81,84,52,135,186,242,51,236,248,83],[73,149,173,233,198,207,178,94,107,250,17,9,31,168,160,47,93,28,238,119,225,102,21,22,127,143,167,54,190,246,237,254]]",
                "sol": "[stringToBytes32(\"221,97,40,13,203,178,120,16,147,3,157,135,238,247,100,89,109,154,213,250,207,55,88,19,49,61,130,68,192,50,40,86\"),stringToBytes32(\"29,9,194,90,78,82,44,66,79,254,243,250,140,107,61,203,125,251,242,138,228,189,58,99,137,66,194,216,79,188,209,55\"),stringToBytes32(\"41,235,151,208,242,168,54,144,198,38,177,21,248,17,233,165,108,41,152,244,126,231,45,139,214,17,127,147,236,84,151,18\"),stringToBytes32(\"115,111,190,174,210,185,46,218,83,207,187,234,102,46,37,66,29,0,239,15,144,29,18,151,220,1,103,83,214,2,182,13\"),stringToBytes32(\"119,195,49,5,216,31,219,9,223,53,33,179,30,190,59,234,173,113,105,204,87,205,161,97,49,166,203,179,154,16,0,107\"),stringToBytes32(\"245,198,155,46,233,232,36,188,80,194,250,170,59,109,25,19,46,50,94,170,70,86,1,183,163,66,147,172,140,232,27,123\"),stringToBytes32(\"175,103,202,147,229,173,203,251,103,100,15,214,233,190,219,123,227,184,218,31,168,114,60,89,137,157,176,10,36,185,5,54\"),stringToBytes32(\"71,125,85,72,122,193,222,141,101,104,247,94,181,86,106,28,132,160,180,132,61,46,124,48,74,45,224,59,117,37,83,91\"),stringToBytes32(\"253,131,5,236,204,60,198,216,5,69,242,76,129,255,203,123,72,138,236,226,218,217,176,179,60,65,67,233,206,70,12,119\"),stringToBytes32(\"10,57,54,78,127,48,222,57,61,8,239,143,254,47,173,81,235,177,139,30,249,244,26,46,53,202,40,114,223,35,59,150\"),stringToBytes32(\"219,55,133,99,103,11,127,228,0,102,244,122,245,193,131,10,8,137,223,129,62,154,30,192,132,131,78,2,1,48,113,152\"),stringToBytes32(\"118,109,218,197,195,185,181,41,31,39,186,237,232,86,197,110,87,115,185,59,132,79,59,105,231,205,128,187,179,154,208,204\"),stringToBytes32(\"233,60,94,14,131,223,188,233,139,73,26,83,71,205,231,210,168,175,52,223,12,22,85,207,232,135,11,215,237,78,20,41\"),stringToBytes32(\"75,55,254,23,75,70,239,239,179,170,132,229,91,220,34,173,174,174,164,118,38,38,234,187,122,233,234,150,110,253,177,249\"),stringToBytes32(\"201,179,72,245,187,141,241,108,6,68,34,145,0,214,176,17,154,101,195,245,132,25,126,161,21,79,164,219,6,6,60,163\"),stringToBytes32(\"90,1,4,232,6,138,205,8,19,185,245,14,138,147,190,119,241,178,35,115,214,161,104,227,112,249,175,247,47,170,253,14\"),stringToBytes32(\"187,94,38,80,177,203,78,155,152,171,3,36,2,169,177,193,156,95,111,95,124,94,189,54,214,168,166,247,98,35,153,232\"),stringToBytes32(\"49,60,111,209,52,37,165,136,40,89,78,63,166,202,19,41,60,216,53,50,53,109,170,7,157,53,212,199,167,152,35,13\"),stringToBytes32(\"120,233,56,206,12,103,181,226,118,38,223,106,82,82,114,75,72,53,80,94,88,42,202,37,38,223,46,151,168,106,3,164\"),stringToBytes32(\"229,4,93,107,170,195,62,177,132,124,174,255,254,94,153,107,160,158,140,74,84,147,244,229,35,132,42,108,192,152,180,117\"),stringToBytes32(\"27,68,81,152,56,17,33,134,139,236,215,208,84,215,58,152,142,6,253,89,156,126,156,85,165,219,3,197,191,205,126,124\"),stringToBytes32(\"137,207,119,3,245,168,121,42,26,240,13,14,56,53,56,190,110,97,225,119,128,229,107,6,56,111,240,192,227,24,77,157\"),stringToBytes32(\"194,38,115,108,162,37,151,92,70,240,144,244,130,24,152,173,154,250,23,131,144,205,94,215,198,143,41,195,190,88,211,55\"),stringToBytes32(\"195,12,165,139,15,16,159,180,16,182,251,115,233,95,226,41,84,22,44,42,124,176,131,167,5,99,166,156,73,68,17,175\"),stringToBytes32(\"70,77,146,4,144,167,204,6,113,59,250,241,10,186,8,106,82,47,195,68,197,173,0,44,113,60,98,176,47,12,196,227\"),stringToBytes32(\"60,116,75,74,218,149,183,102,191,6,40,226,249,12,69,231,163,97,238,125,113,128,14,57,247,84,78,147,15,46,215,193\"),stringToBytes32(\"0,167,240,146,110,76,232,17,235,169,119,150,183,129,159,132,147,77,196,228,99,12,134,20,251,7,238,187,96,147,217,95\"),stringToBytes32(\"86,31,236,131,86,203,183,152,177,253,112,25,75,208,0,252,164,218,108,85,190,145,205,144,13,165,192,198,79,93,18,120\"),stringToBytes32(\"108,25,205,33,105,66,140,79,101,232,224,84,120,226,80,232,114,12,198,34,197,169,52,115,51,181,93,64,185,186,132,27\"),stringToBytes32(\"95,210,58,214,46,206,121,212,162,203,250,166,231,111,99,8,147,8,231,173,80,40,110,34,114,130,97,202,115,197,122,77\"),stringToBytes32(\"187,59,134,203,88,237,176,83,225,234,217,192,2,218,228,92,41,106,5,167,176,185,213,237,138,146,3,158,45,172,61,244\"),stringToBytes32(\"94,249,78,39,53,164,35,254,34,139,10,246,174,199,129,134,138,223,213,97,67,119,232,205,84,106,156,243,116,113,232,72\"),stringToBytes32(\"97,203,211,232,235,213,69,188,184,127,6,43,107,110,242,142,215,15,60,3,181,7,20,155,53,164,36,71,197,175,240,61\"),stringToBytes32(\"138,125,7,95,75,121,141,162,59,220,219,1,1,196,31,114,122,151,243,173,192,235,149,182,79,106,29,135,144,241,110,132\"),stringToBytes32(\"174,194,226,193,23,95,131,96,127,100,2,141,20,114,61,94,42,193,36,131,99,209,217,22,222,39,199,152,170,37,83,72\"),stringToBytes32(\"146,66,105,153,217,141,183,235,21,144,85,102,147,34,27,103,115,168,61,81,247,73,226,169,39,18,89,11,120,241,239,254\"),stringToBytes32(\"103,25,78,50,48,127,165,192,41,110,61,25,210,252,89,216,149,255,66,35,87,80,164,101,202,196,68,77,198,0,34,159\"),stringToBytes32(\"207,61,190,46,132,97,42,2,163,135,138,3,148,85,7,254,211,111,128,128,31,5,60,40,233,41,99,129,213,194,226,225\"),stringToBytes32(\"229,203,127,111,7,188,177,1,225,23,21,23,218,20,143,8,85,45,240,136,233,143,31,149,105,159,251,141,91,166,108,232\"),stringToBytes32(\"22,134,35,17,164,180,151,180,68,63,102,28,190,34,4,88,157,222,191,29,229,0,103,236,97,60,115,47,92,110,169,64\"),stringToBytes32(\"142,68,98,53,26,70,202,56,230,41,9,60,112,180,184,56,16,231,103,202,229,73,59,231,169,129,157,80,198,227,208,234\"),stringToBytes32(\"69,30,127,54,2,41,125,47,174,20,207,158,26,238,196,236,142,45,210,42,247,167,208,8,100,171,52,145,74,167,245,219\"),stringToBytes32(\"237,35,57,110,62,131,223,120,197,13,251,203,132,165,191,38,36,9,237,154,73,172,15,216,218,83,183,72,196,230,202,72\"),stringToBytes32(\"235,68,125,144,157,234,115,140,98,252,192,236,235,98,224,114,47,175,7,180,211,133,167,109,167,246,87,77,167,56,179,213\"),stringToBytes32(\"38,218,240,11,129,154,37,47,170,239,82,226,13,121,167,198,219,187,148,139,68,140,32,149,225,124,164,205,101,53,28,165\"),stringToBytes32(\"91,184,246,73,117,231,143,111,110,183,42,218,121,239,109,144,139,248,239,35,28,212,110,219,44,96,117,19,222,247,131,202\"),stringToBytes32(\"207,212,114,86,252,71,48,140,239,230,156,153,245,40,116,240,91,11,147,235,211,223,137,203,137,12,188,59,222,27,51,169\"),stringToBytes32(\"112,91,128,131,200,63,37,39,43,198,160,253,109,190,15,33,28,35,150,227,54,238,62,131,71,201,157,170,249,11,109,74\"),stringToBytes32(\"31,212,43,6,111,181,76,95,11,251,100,199,185,133,92,100,81,182,136,9,144,198,96,91,163,57,181,24,131,65,190,143\"),stringToBytes32(\"47,109,22,108,185,63,106,208,21,225,153,15,101,104,190,195,16,236,148,178,146,132,119,246,53,243,5,162,36,239,65,148\"),stringToBytes32(\"122,159,116,59,151,129,142,69,233,144,87,101,165,174,96,250,171,99,29,147,124,53,0,41,209,229,171,174,186,254,133,76\"),stringToBytes32(\"177,134,92,184,98,139,123,178,39,219,208,223,102,58,33,223,219,80,111,157,71,29,105,142,178,121,174,151,254,182,201,169\"),stringToBytes32(\"235,112,200,172,100,254,174,191,52,77,216,151,71,94,223,184,104,182,132,55,51,65,182,216,217,96,98,50,1,202,85,143\"),stringToBytes32(\"214,210,119,63,121,121,185,3,119,15,88,2,194,58,108,86,117,145,248,218,159,68,149,203,132,255,172,21,254,28,168,196\"),stringToBytes32(\"177,240,140,149,231,98,181,209,124,239,119,25,147,139,127,177,10,0,134,88,134,148,254,43,226,240,79,80,53,46,179,29\"),stringToBytes32(\"49,170,212,134,106,20,5,76,40,213,97,37,230,8,237,69,169,0,249,24,236,8,78,220,125,100,183,196,134,225,205,183\"),stringToBytes32(\"253,127,51,124,25,167,72,168,149,57,138,234,126,47,254,210,185,64,9,125,153,185,204,38,65,105,153,225,50,92,174,118\"),stringToBytes32(\"50,218,113,156,68,192,143,3,39,29,228,246,245,44,173,69,204,142,0,190,240,237,131,91,95,117,88,34,83,207,211,173\"),stringToBytes32(\"6,158,246,132,34,190,49,174,125,157,173,112,30,213,179,57,136,191,123,21,237,69,61,248,198,9,72,164,234,96,181,39\"),stringToBytes32(\"104,235,28,54,1,202,228,116,81,205,29,206,72,241,118,246,230,164,125,228,8,188,100,14,58,253,205,36,118,191,48,44\"),stringToBytes32(\"14,37,239,217,139,59,2,174,85,71,214,136,220,119,57,57,178,71,149,212,83,164,251,27,82,125,226,83,16,250,70,10\"),stringToBytes32(\"25,97,237,14,201,73,4,88,199,76,175,42,235,187,174,34,19,13,242,36,238,218,117,20,74,249,184,242,133,104,196,23\"),stringToBytes32(\"50,189,194,204,69,60,137,26,48,95,125,164,217,138,252,119,230,27,203,12,142,242,245,18,149,154,254,212,139,149,151,191\"),stringToBytes32(\"113,162,192,172,208,194,167,141,184,186,70,250,212,26,243,230,251,24,226,13,161,226,21,254,155,82,79,232,237,251,158,39\"),stringToBytes32(\"94,202,57,254,198,204,20,160,218,20,205,11,48,251,179,46,221,52,188,31,230,198,249,176,155,83,153,78,52,45,144,186\")]"
              },
              {
                "js": "[[38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205],[241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96],[119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14],[87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151],[46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191],[105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114],[48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90],[239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106],[72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246],[51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55],[117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178],[112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111],[9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135],[208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45],[187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153],[51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105],[200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217],[72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163],[18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14],[173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66],[142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215],[154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92],[33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64],[191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26],[225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69],[26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217],[101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220],[63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236],[175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44],[42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16],[219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229],[181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109],[195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199],[15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173],[64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167],[114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158],[117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63],[164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246],[120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85],[253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91],[207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244],[192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220],[71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121],[103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239],[23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255],[252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188],[215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124],[228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142],[38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129],[184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121],[38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181],[32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201],[253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165],[222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80],[170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189],[53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4],[24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214],[8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223],[13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144],[119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102],[77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247],[120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194],[211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192],[165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251]]",
                "sol": "[bytes32(stringToBytes32(\"38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205\")),bytes32(stringToBytes32(\"241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96\")),bytes32(stringToBytes32(\"119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14\")),bytes32(stringToBytes32(\"87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151\")),bytes32(stringToBytes32(\"46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191\")),bytes32(stringToBytes32(\"105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114\")),bytes32(stringToBytes32(\"48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90\")),bytes32(stringToBytes32(\"239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106\")),bytes32(stringToBytes32(\"72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246\")),bytes32(stringToBytes32(\"51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55\")),bytes32(stringToBytes32(\"117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178\")),bytes32(stringToBytes32(\"112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111\")),bytes32(stringToBytes32(\"9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135\")),bytes32(stringToBytes32(\"208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45\")),bytes32(stringToBytes32(\"187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153\")),bytes32(stringToBytes32(\"51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105\")),bytes32(stringToBytes32(\"200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217\")),bytes32(stringToBytes32(\"72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163\")),bytes32(stringToBytes32(\"18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14\")),bytes32(stringToBytes32(\"173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66\")),bytes32(stringToBytes32(\"142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215\")),bytes32(stringToBytes32(\"154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92\")),bytes32(stringToBytes32(\"33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64\")),bytes32(stringToBytes32(\"191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26\")),bytes32(stringToBytes32(\"225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69\")),bytes32(stringToBytes32(\"26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217\")),bytes32(stringToBytes32(\"101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220\")),bytes32(stringToBytes32(\"63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236\")),bytes32(stringToBytes32(\"175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44\")),bytes32(stringToBytes32(\"42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16\")),bytes32(stringToBytes32(\"219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229\")),bytes32(stringToBytes32(\"181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109\")),bytes32(stringToBytes32(\"195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199\")),bytes32(stringToBytes32(\"15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173\")),bytes32(stringToBytes32(\"64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167\")),bytes32(stringToBytes32(\"114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158\")),bytes32(stringToBytes32(\"117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63\")),bytes32(stringToBytes32(\"164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246\")),bytes32(stringToBytes32(\"120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85\")),bytes32(stringToBytes32(\"253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91\")),bytes32(stringToBytes32(\"207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244\")),bytes32(stringToBytes32(\"192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220\")),bytes32(stringToBytes32(\"71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121\")),bytes32(stringToBytes32(\"103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239\")),bytes32(stringToBytes32(\"23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255\")),bytes32(stringToBytes32(\"252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188\")),bytes32(stringToBytes32(\"215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124\")),bytes32(stringToBytes32(\"228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142\")),bytes32(stringToBytes32(\"38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129\")),bytes32(stringToBytes32(\"184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121\")),bytes32(stringToBytes32(\"38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181\")),bytes32(stringToBytes32(\"32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201\")),bytes32(stringToBytes32(\"253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165\")),bytes32(stringToBytes32(\"222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80\")),bytes32(stringToBytes32(\"170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189\")),bytes32(stringToBytes32(\"53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4\")),bytes32(stringToBytes32(\"24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214\")),bytes32(stringToBytes32(\"8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223\")),bytes32(stringToBytes32(\"13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144\")),bytes32(stringToBytes32(\"119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102\")),bytes32(stringToBytes32(\"77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247\")),bytes32(stringToBytes32(\"120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194\")),bytes32(stringToBytes32(\"211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192\")),bytes32(stringToBytes32(\"165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205],[241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96],[119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14],[87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151],[46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191],[105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114],[48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90],[239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106],[72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246],[51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55],[117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178],[112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111],[9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135],[208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45],[187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153],[51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105],[200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217],[72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163],[18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14],[173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66],[142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215],[154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92],[33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64],[191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26],[225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69],[26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217],[101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220],[63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236],[175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44],[42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16],[219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229],[181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109],[195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199],[15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173],[64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167],[114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158],[117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63],[164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246],[120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85],[253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91],[207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244],[192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220],[71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121],[103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239],[23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255],[252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188],[215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124],[228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142],[38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129],[184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121],[38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181],[32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201],[253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165],[222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80],[170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189],[53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4],[24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214],[8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223],[13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144],[119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102],[77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247],[120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194],[211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192],[165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251]]",
                "sol": "[bytes32(stringToBytes32(\"38,188,211,6,240,126,164,133,83,212,206,86,151,122,228,179,43,234,101,72,4,78,252,135,246,244,74,109,74,38,158,205\")),bytes32(stringToBytes32(\"241,202,137,29,61,217,60,10,157,250,241,20,65,171,6,241,30,254,11,191,91,93,199,52,145,221,142,182,182,0,234,96\")),bytes32(stringToBytes32(\"119,113,4,50,6,22,144,85,163,195,95,145,53,15,24,248,76,79,16,191,158,206,231,74,226,52,116,214,209,241,69,14\")),bytes32(stringToBytes32(\"87,221,2,221,51,52,156,111,2,82,62,238,129,164,194,114,60,39,137,22,59,195,214,94,226,248,15,122,215,37,7,151\")),bytes32(stringToBytes32(\"46,14,137,241,3,160,176,107,76,64,2,22,152,195,210,20,220,58,114,16,150,15,64,193,99,142,63,199,180,39,70,191\")),bytes32(stringToBytes32(\"105,16,132,211,157,149,188,224,203,230,162,209,131,213,137,215,61,105,77,79,1,186,22,0,255,152,162,164,161,20,54,114\")),bytes32(stringToBytes32(\"48,91,202,57,109,208,22,195,7,254,169,183,181,134,113,213,209,69,45,59,6,173,92,130,251,188,165,173,211,54,177,90\")),bytes32(stringToBytes32(\"239,133,109,149,248,135,214,173,83,254,220,39,187,254,210,27,189,142,31,215,153,139,14,231,209,241,35,100,1,222,16,106\")),bytes32(stringToBytes32(\"72,223,48,26,126,240,75,167,75,138,47,19,117,110,160,253,219,63,147,150,169,72,125,129,88,149,248,29,131,97,66,246\")),bytes32(stringToBytes32(\"51,220,20,168,47,220,163,207,222,252,93,177,18,249,154,105,81,171,121,184,111,6,117,114,252,21,191,79,28,7,136,55\")),bytes32(stringToBytes32(\"117,32,32,75,15,218,80,199,234,242,159,248,50,163,183,186,118,157,5,168,53,78,38,226,221,221,215,132,52,26,60,178\")),bytes32(stringToBytes32(\"112,198,193,215,58,33,25,72,254,174,145,46,49,17,205,218,169,43,108,65,111,113,200,41,113,197,188,151,160,14,134,111\")),bytes32(stringToBytes32(\"9,21,72,180,122,226,9,53,47,162,239,85,1,116,32,138,211,208,183,169,184,249,161,142,202,32,234,129,127,4,232,135\")),bytes32(stringToBytes32(\"208,43,33,176,251,10,153,68,114,6,166,139,48,151,189,149,10,174,93,249,107,212,90,95,230,100,253,92,160,217,106,45\")),bytes32(stringToBytes32(\"187,208,92,203,239,112,47,30,91,29,107,198,84,132,174,246,53,243,38,227,251,221,103,22,153,30,220,176,205,39,226,153\")),bytes32(stringToBytes32(\"51,252,107,7,13,186,232,197,146,9,241,122,161,175,16,136,158,196,191,171,176,192,207,44,150,50,52,215,122,143,74,105\")),bytes32(stringToBytes32(\"200,2,52,123,82,245,96,146,179,165,216,242,227,254,49,246,20,203,109,223,190,5,254,104,230,85,71,143,35,142,17,217\")),bytes32(stringToBytes32(\"72,53,208,240,213,44,142,139,41,246,83,141,224,158,6,101,203,87,220,248,102,60,57,115,49,75,59,255,187,39,158,163\")),bytes32(stringToBytes32(\"18,33,103,202,58,11,242,71,109,86,24,27,81,253,50,114,32,92,255,13,67,245,84,238,122,46,32,45,123,41,216,14\")),bytes32(stringToBytes32(\"173,96,68,11,247,207,47,148,172,219,12,6,2,220,60,64,119,33,145,146,214,8,182,79,12,194,231,10,151,77,197,66\")),bytes32(stringToBytes32(\"142,85,20,178,183,212,236,217,126,75,107,66,101,154,98,101,65,99,106,161,22,80,117,67,79,166,206,244,57,195,142,215\")),bytes32(stringToBytes32(\"154,7,4,172,41,216,50,193,16,83,219,39,234,118,122,217,192,165,105,124,171,223,98,87,7,207,221,108,54,210,237,92\")),bytes32(stringToBytes32(\"33,225,42,123,232,83,61,40,178,109,162,158,210,235,51,243,119,209,56,21,103,39,89,204,84,9,57,184,34,127,149,64\")),bytes32(stringToBytes32(\"191,20,92,206,6,124,222,148,75,11,39,41,232,218,70,207,190,204,99,68,171,56,73,167,154,23,165,251,28,82,156,26\")),bytes32(stringToBytes32(\"225,240,202,115,167,211,119,130,245,74,183,63,119,57,38,118,181,7,39,167,104,40,209,185,203,193,144,239,16,132,148,69\")),bytes32(stringToBytes32(\"26,251,208,99,114,190,120,70,58,249,132,75,173,39,125,217,166,83,182,3,147,233,105,218,16,141,174,206,204,90,136,217\")),bytes32(stringToBytes32(\"101,12,214,249,67,207,171,132,143,196,185,224,66,50,14,162,245,61,158,165,237,239,217,60,16,184,223,235,105,105,71,220\")),bytes32(stringToBytes32(\"63,132,245,100,64,211,112,190,137,60,63,118,35,156,45,8,133,188,202,125,248,76,45,70,143,178,3,25,180,94,164,236\")),bytes32(stringToBytes32(\"175,206,148,77,71,223,73,6,149,7,237,224,155,169,62,79,221,39,200,19,195,145,122,136,141,110,14,168,210,57,183,44\")),bytes32(stringToBytes32(\"42,217,203,42,181,194,148,44,17,105,226,143,5,181,128,18,212,164,218,149,239,13,65,169,243,112,142,163,118,205,136,16\")),bytes32(stringToBytes32(\"219,177,134,158,65,220,60,4,254,45,30,202,159,93,167,173,96,116,147,48,180,72,83,212,158,17,175,41,101,209,143,229\")),bytes32(stringToBytes32(\"181,111,101,111,95,33,148,103,55,146,53,21,54,136,169,158,57,250,155,251,120,136,29,115,53,97,76,34,90,91,130,109\")),bytes32(stringToBytes32(\"195,172,203,9,60,199,64,77,67,187,242,78,99,195,72,125,90,224,42,43,115,112,147,160,128,30,12,226,162,225,33,199\")),bytes32(stringToBytes32(\"15,40,123,136,77,56,112,160,83,179,60,6,94,220,184,96,87,223,244,190,177,25,223,25,198,28,177,110,216,240,119,173\")),bytes32(stringToBytes32(\"64,244,55,188,206,75,188,11,88,194,162,81,195,121,97,193,97,85,210,225,28,91,56,168,65,65,1,43,132,56,108,167\")),bytes32(stringToBytes32(\"114,39,118,60,229,214,17,237,158,183,200,196,14,190,65,23,32,31,18,223,75,163,47,98,66,49,173,157,164,28,43,158\")),bytes32(stringToBytes32(\"117,210,86,39,235,180,127,204,254,201,11,86,55,223,242,5,24,44,150,197,71,211,23,48,235,132,216,246,91,52,165,63\")),bytes32(stringToBytes32(\"164,50,147,216,107,83,25,95,206,138,189,143,22,84,37,153,173,68,25,33,69,62,167,228,2,170,209,147,138,29,242,246\")),bytes32(stringToBytes32(\"120,249,39,45,62,239,200,80,188,199,101,251,152,155,151,149,234,208,56,107,170,17,168,190,47,195,153,103,75,146,253,85\")),bytes32(stringToBytes32(\"253,98,250,236,223,49,214,121,136,206,91,95,2,219,29,77,165,42,146,250,229,223,89,204,102,156,251,22,84,198,133,91\")),bytes32(stringToBytes32(\"207,64,177,3,150,124,184,138,64,81,47,250,172,176,10,56,138,27,174,247,119,207,55,72,188,17,42,223,14,27,129,244\")),bytes32(stringToBytes32(\"192,26,87,243,5,219,221,147,56,119,29,110,25,183,253,177,244,161,75,166,138,40,83,132,86,41,75,205,228,227,226,220\")),bytes32(stringToBytes32(\"71,9,129,203,74,23,148,62,195,225,147,130,65,49,159,4,206,203,125,97,68,217,253,72,220,94,112,175,186,50,173,121\")),bytes32(stringToBytes32(\"103,65,54,12,119,206,104,254,37,100,122,152,7,196,172,185,167,52,63,153,84,100,207,202,178,220,97,196,234,232,146,239\")),bytes32(stringToBytes32(\"23,249,97,16,106,168,215,66,118,237,195,197,178,105,204,88,1,74,64,167,168,29,122,77,162,225,244,159,187,58,45,255\")),bytes32(stringToBytes32(\"252,23,16,190,97,241,215,12,52,181,205,209,13,104,204,110,107,65,114,118,209,213,128,214,89,75,106,10,5,151,30,188\")),bytes32(stringToBytes32(\"215,114,204,214,177,126,177,178,198,65,86,237,83,113,22,204,209,140,142,9,155,55,39,87,53,214,255,115,193,105,50,124\")),bytes32(stringToBytes32(\"228,246,169,106,117,175,104,245,222,110,205,93,212,150,215,95,250,68,239,126,109,77,194,219,223,180,203,116,137,234,101,142\")),bytes32(stringToBytes32(\"38,194,218,151,149,119,121,193,36,1,246,224,127,250,33,129,11,199,235,33,82,0,195,252,57,253,82,157,157,146,160,129\")),bytes32(stringToBytes32(\"184,148,122,213,102,55,89,199,43,46,51,123,56,225,74,218,236,243,151,153,205,214,67,11,218,138,30,29,32,193,215,121\")),bytes32(stringToBytes32(\"38,202,55,52,142,170,155,111,24,107,41,63,69,28,136,211,102,71,48,57,182,37,73,105,113,78,39,171,244,75,227,181\")),bytes32(stringToBytes32(\"32,140,152,253,221,203,236,49,186,150,212,111,49,244,162,57,83,222,116,245,173,167,138,255,84,203,221,126,148,223,243,201\")),bytes32(stringToBytes32(\"253,138,148,190,82,140,4,88,144,253,155,223,26,216,28,74,174,216,210,10,27,220,119,237,67,247,160,194,94,63,197,165\")),bytes32(stringToBytes32(\"222,31,196,222,0,64,37,236,80,157,11,95,140,226,161,18,183,190,33,167,159,198,35,189,11,187,77,35,175,26,183,80\")),bytes32(stringToBytes32(\"170,219,180,38,186,21,180,76,27,116,161,130,159,94,58,226,113,115,221,139,78,178,172,71,210,15,126,175,48,37,65,189\")),bytes32(stringToBytes32(\"53,23,226,163,239,24,205,177,220,170,184,207,144,153,5,215,118,109,201,196,109,101,250,226,193,164,7,59,2,161,124,4\")),bytes32(stringToBytes32(\"24,2,194,0,152,221,231,101,132,225,139,212,137,106,208,26,210,129,101,35,120,188,55,22,33,149,161,132,31,42,5,214\")),bytes32(stringToBytes32(\"8,163,78,187,215,198,167,123,126,132,124,121,165,128,12,28,148,246,125,93,242,235,31,62,0,190,191,4,27,42,171,223\")),bytes32(stringToBytes32(\"13,2,175,32,40,227,21,219,2,102,210,248,88,154,80,106,157,94,60,29,224,244,118,237,31,13,85,162,115,240,18,144\")),bytes32(stringToBytes32(\"119,228,238,175,188,189,94,154,143,25,0,54,10,182,26,203,132,121,207,58,11,94,202,1,82,238,63,86,157,87,250,102\")),bytes32(stringToBytes32(\"77,206,31,139,232,102,237,210,107,155,187,188,193,216,40,133,69,59,64,188,64,159,102,83,69,51,41,160,101,18,161,247\")),bytes32(stringToBytes32(\"120,48,139,16,186,92,9,120,72,122,226,212,9,192,206,176,191,118,234,230,143,163,71,131,210,93,244,4,153,207,246,194\")),bytes32(stringToBytes32(\"211,162,220,5,43,180,46,56,49,71,157,164,153,38,76,129,115,216,185,64,251,246,120,106,98,220,115,16,32,154,38,192\")),bytes32(stringToBytes32(\"165,7,210,56,127,50,199,2,192,22,189,189,12,91,171,175,226,104,169,26,177,227,202,62,52,171,22,220,77,99,244,251\"))]"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.499ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"446gb\"",
              "sol": "\"446gb\""
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"446gb\"",
                "sol": "\"446gb\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.504ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[4],accounts[8],accounts[8],accounts[7],accounts[3],accounts[7],accounts[0],accounts[0],accounts[5],accounts[7],accounts[7],accounts[3],accounts[3],accounts[4],accounts[3],accounts[6],accounts[9],accounts[3],accounts[3],accounts[9],accounts[0],accounts[8],accounts[5],accounts[7],accounts[2],accounts[2],accounts[5],accounts[0],accounts[0],accounts[5],accounts[1],accounts[4],accounts[2],accounts[2],accounts[9],accounts[5],accounts[6],accounts[1],accounts[5],accounts[8],accounts[4],accounts[0],accounts[8],accounts[0],accounts[9],accounts[0],accounts[6],accounts[8],accounts[6],accounts[8],accounts[8],accounts[6],accounts[5],accounts[3],accounts[4],accounts[5],accounts[8],accounts[3],accounts[8],accounts[2],accounts[0],accounts[3],accounts[5],accounts[1],accounts[0],accounts[4],accounts[4],accounts[4],accounts[5],accounts[9],accounts[6],accounts[9],accounts[8],accounts[9],accounts[1],accounts[9],accounts[6],accounts[9],accounts[8],accounts[2],accounts[9],accounts[9],accounts[3],accounts[0],accounts[7],accounts[8],accounts[3],accounts[5],accounts[3],accounts[8],accounts[9],accounts[3],accounts[8],accounts[2],accounts[6],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[255,6,2,0,0,1532892064,1532892063,6,257,2014223714,64,2014223715,96,6,2,27,1338,256,1532892062,65,255,96,10000,3,2,6,64,10000,29,6,10001,4,5,66,27,3,65,1,65,27,29,95,0,2,1532892062,27,27,1338,64,64,1532892062,257,10000,2,28,1336,254,27,6,6,254,9999,1532892064,26,5,1532892062,3,10001,10001,0,6,1336,26,6,10000,66,97,1532892062,29,66,2,65,2014223714,2014223714,1336,64,27,2014223716,28,255,96,2,95,1532892062,256,1532892064]",
              "sol": "[uint256(255),uint256(6),uint256(2),uint256(0),uint256(0),uint256(1532892064),uint256(1532892063),uint256(6),uint256(257),uint256(2014223714),uint256(64),uint256(2014223715),uint256(96),uint256(6),uint256(2),uint256(27),uint256(1338),uint256(256),uint256(1532892062),uint256(65),uint256(255),uint256(96),uint256(10000),uint256(3),uint256(2),uint256(6),uint256(64),uint256(10000),uint256(29),uint256(6),uint256(10001),uint256(4),uint256(5),uint256(66),uint256(27),uint256(3),uint256(65),uint256(1),uint256(65),uint256(27),uint256(29),uint256(95),uint256(0),uint256(2),uint256(1532892062),uint256(27),uint256(27),uint256(1338),uint256(64),uint256(64),uint256(1532892062),uint256(257),uint256(10000),uint256(2),uint256(28),uint256(1336),uint256(254),uint256(27),uint256(6),uint256(6),uint256(254),uint256(9999),uint256(1532892064),uint256(26),uint256(5),uint256(1532892062),uint256(3),uint256(10001),uint256(10001),uint256(0),uint256(6),uint256(1336),uint256(26),uint256(6),uint256(10000),uint256(66),uint256(97),uint256(1532892062),uint256(29),uint256(66),uint256(2),uint256(65),uint256(2014223714),uint256(2014223714),uint256(1336),uint256(64),uint256(27),uint256(2014223716),uint256(28),uint256(255),uint256(96),uint256(2),uint256(95),uint256(1532892062),uint256(256),uint256(1532892064)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[4],accounts[8],accounts[8],accounts[7],accounts[3],accounts[7],accounts[0],accounts[0],accounts[5],accounts[7],accounts[7],accounts[3],accounts[3],accounts[4],accounts[3],accounts[6],accounts[9],accounts[3],accounts[3],accounts[9],accounts[0],accounts[8],accounts[5],accounts[7],accounts[2],accounts[2],accounts[5],accounts[0],accounts[0],accounts[5],accounts[1],accounts[4],accounts[2],accounts[2],accounts[9],accounts[5],accounts[6],accounts[1],accounts[5],accounts[8],accounts[4],accounts[0],accounts[8],accounts[0],accounts[9],accounts[0],accounts[6],accounts[8],accounts[6],accounts[8],accounts[8],accounts[6],accounts[5],accounts[3],accounts[4],accounts[5],accounts[8],accounts[3],accounts[8],accounts[2],accounts[0],accounts[3],accounts[5],accounts[1],accounts[0],accounts[4],accounts[4],accounts[4],accounts[5],accounts[9],accounts[6],accounts[9],accounts[8],accounts[9],accounts[1],accounts[9],accounts[6],accounts[9],accounts[8],accounts[2],accounts[9],accounts[9],accounts[3],accounts[0],accounts[7],accounts[8],accounts[3],accounts[5],accounts[3],accounts[8],accounts[9],accounts[3],accounts[8],accounts[2],accounts[6],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[255,6,2,0,0,1532892064,1532892063,6,257,2014223714,64,2014223715,96,6,2,27,1338,256,1532892062,65,255,96,10000,3,2,6,64,10000,29,6,10001,4,5,66,27,3,65,1,65,27,29,95,0,2,1532892062,27,27,1338,64,64,1532892062,257,10000,2,28,1336,254,27,6,6,254,9999,1532892064,26,5,1532892062,3,10001,10001,0,6,1336,26,6,10000,66,97,1532892062,29,66,2,65,2014223714,2014223714,1336,64,27,2014223716,28,255,96,2,95,1532892062,256,1532892064]",
                "sol": "[uint256(255),uint256(6),uint256(2),uint256(0),uint256(0),uint256(1532892064),uint256(1532892063),uint256(6),uint256(257),uint256(2014223714),uint256(64),uint256(2014223715),uint256(96),uint256(6),uint256(2),uint256(27),uint256(1338),uint256(256),uint256(1532892062),uint256(65),uint256(255),uint256(96),uint256(10000),uint256(3),uint256(2),uint256(6),uint256(64),uint256(10000),uint256(29),uint256(6),uint256(10001),uint256(4),uint256(5),uint256(66),uint256(27),uint256(3),uint256(65),uint256(1),uint256(65),uint256(27),uint256(29),uint256(95),uint256(0),uint256(2),uint256(1532892062),uint256(27),uint256(27),uint256(1338),uint256(64),uint256(64),uint256(1532892062),uint256(257),uint256(10000),uint256(2),uint256(28),uint256(1336),uint256(254),uint256(27),uint256(6),uint256(6),uint256(254),uint256(9999),uint256(1532892064),uint256(26),uint256(5),uint256(1532892062),uint256(3),uint256(10001),uint256(10001),uint256(0),uint256(6),uint256(1336),uint256(26),uint256(6),uint256(10000),uint256(66),uint256(97),uint256(1532892062),uint256(29),uint256(66),uint256(2),uint256(65),uint256(2014223714),uint256(2014223714),uint256(1336),uint256(64),uint256(27),uint256(2014223716),uint256(28),uint256(255),uint256(96),uint256(2),uint256(95),uint256(1532892062),uint256(256),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[6],accounts[8],accounts[9],accounts[7],accounts[6],accounts[5],accounts[7],accounts[7],accounts[1],accounts[1],accounts[8],accounts[8],accounts[7],accounts[4],accounts[9],accounts[6],accounts[9],accounts[0],accounts[6],accounts[1],accounts[9],accounts[0],accounts[5],accounts[1],accounts[7],accounts[3],accounts[5],accounts[4],accounts[4],accounts[2],accounts[8],accounts[3],accounts[6],accounts[4],accounts[0],accounts[0],accounts[3],accounts[0],accounts[2],accounts[3],accounts[8],accounts[0],accounts[9],accounts[5],accounts[7],accounts[2],accounts[5],accounts[4],accounts[9],accounts[7],accounts[2],accounts[8],accounts[3],accounts[8],accounts[5],accounts[4],accounts[3],accounts[5],accounts[2],accounts[2],accounts[0],accounts[0],accounts[7],accounts[6],accounts[6],accounts[7],accounts[0],accounts[7],accounts[0],accounts[1],accounts[9],accounts[0],accounts[6],accounts[8],accounts[4],accounts[1],accounts[5],accounts[9],accounts[3],accounts[3],accounts[8],accounts[0],accounts[3],accounts[6],accounts[3],accounts[9],accounts[9],accounts[6],accounts[4],accounts[0],accounts[1],accounts[6],accounts[0],accounts[5],accounts[0],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[255,6,2,0,0,1532892064,1532892063,6,257,2014223714,64,2014223715,96,6,2,27,1338,256,1532892062,65,255,96,10000,3,2,6,64,10000,29,6,10001,4,5,66,27,3,65,1,65,27,29,95,0,2,1532892062,27,27,1338,64,64,1532892062,257,10000,2,28,1336,254,27,6,6,254,9999,1532892064,26,5,1532892062,3,10001,10001,0,6,1336,26,6,10000,66,97,1532892062,29,66,2,65,2014223714,2014223714,1336,64,27,2014223716,28,255,96,2,95,1532892062,256,1532892064]",
                "sol": "[uint256(255),uint256(6),uint256(2),uint256(0),uint256(0),uint256(1532892064),uint256(1532892063),uint256(6),uint256(257),uint256(2014223714),uint256(64),uint256(2014223715),uint256(96),uint256(6),uint256(2),uint256(27),uint256(1338),uint256(256),uint256(1532892062),uint256(65),uint256(255),uint256(96),uint256(10000),uint256(3),uint256(2),uint256(6),uint256(64),uint256(10000),uint256(29),uint256(6),uint256(10001),uint256(4),uint256(5),uint256(66),uint256(27),uint256(3),uint256(65),uint256(1),uint256(65),uint256(27),uint256(29),uint256(95),uint256(0),uint256(2),uint256(1532892062),uint256(27),uint256(27),uint256(1338),uint256(64),uint256(64),uint256(1532892062),uint256(257),uint256(10000),uint256(2),uint256(28),uint256(1336),uint256(254),uint256(27),uint256(6),uint256(6),uint256(254),uint256(9999),uint256(1532892064),uint256(26),uint256(5),uint256(1532892062),uint256(3),uint256(10001),uint256(10001),uint256(0),uint256(6),uint256(1336),uint256(26),uint256(6),uint256(10000),uint256(66),uint256(97),uint256(1532892062),uint256(29),uint256(66),uint256(2),uint256(65),uint256(2014223714),uint256(2014223714),uint256(1336),uint256(64),uint256(27),uint256(2014223716),uint256(28),uint256(255),uint256(96),uint256(2),uint256(95),uint256(1532892062),uint256(256),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[255,6,2,0,0,1532892064,1532892063,6,257,2014223714,64,2014223715,96,6,2,27,1338,256,1532892062,65,255,96,10000,3,2,6,64,10000,29,6,10001,4,5,66,27,3,65,1,65,27,29,95,0,2,1532892062,27,27,1338,64,64,1532892062,257,10000,2,28,1336,254,27,6,6,254,9999,1532892064,26,5,1532892062,3,10001,10001,0,6,1336,26,6,10000,66,97,1532892062,29,66,2,65,2014223714,2014223714,1336,64,27,2014223716,28,255,96,2,95,1532892062,256,1532892064]",
                "sol": "[uint256(255),uint256(6),uint256(2),uint256(0),uint256(0),uint256(1532892064),uint256(1532892063),uint256(6),uint256(257),uint256(2014223714),uint256(64),uint256(2014223715),uint256(96),uint256(6),uint256(2),uint256(27),uint256(1338),uint256(256),uint256(1532892062),uint256(65),uint256(255),uint256(96),uint256(10000),uint256(3),uint256(2),uint256(6),uint256(64),uint256(10000),uint256(29),uint256(6),uint256(10001),uint256(4),uint256(5),uint256(66),uint256(27),uint256(3),uint256(65),uint256(1),uint256(65),uint256(27),uint256(29),uint256(95),uint256(0),uint256(2),uint256(1532892062),uint256(27),uint256(27),uint256(1338),uint256(64),uint256(64),uint256(1532892062),uint256(257),uint256(10000),uint256(2),uint256(28),uint256(1336),uint256(254),uint256(27),uint256(6),uint256(6),uint256(254),uint256(9999),uint256(1532892064),uint256(26),uint256(5),uint256(1532892062),uint256(3),uint256(10001),uint256(10001),uint256(0),uint256(6),uint256(1336),uint256(26),uint256(6),uint256(10000),uint256(66),uint256(97),uint256(1532892062),uint256(29),uint256(66),uint256(2),uint256(65),uint256(2014223714),uint256(2014223714),uint256(1336),uint256(64),uint256(27),uint256(2014223716),uint256(28),uint256(255),uint256(96),uint256(2),uint256(95),uint256(1532892062),uint256(256),uint256(1532892064)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.508ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.508ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[6],accounts[9],accounts[4],accounts[0],accounts[7],accounts[6],accounts[5],accounts[7],accounts[6],accounts[6],accounts[4],accounts[8],accounts[6],accounts[9],accounts[9],accounts[8],accounts[3],accounts[0],accounts[3],accounts[2],accounts[7],accounts[6],accounts[4],accounts[8],accounts[7],accounts[2],accounts[4]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[6],accounts[9],accounts[4],accounts[0],accounts[7],accounts[6],accounts[5],accounts[7],accounts[6],accounts[6],accounts[4],accounts[8],accounts[6],accounts[9],accounts[9],accounts[8],accounts[3],accounts[0],accounts[3],accounts[2],accounts[7],accounts[6],accounts[4],accounts[8],accounts[7],accounts[2],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[6],accounts[9],accounts[4],accounts[0],accounts[7],accounts[6],accounts[5],accounts[7],accounts[6],accounts[6],accounts[4],accounts[8],accounts[6],accounts[9],accounts[9],accounts[8],accounts[3],accounts[0],accounts[3],accounts[2],accounts[7],accounts[6],accounts[4],accounts[8],accounts[7],accounts[2],accounts[4]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.512ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.513ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
              "sol": "block.timestamp+725"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+725",
                "sol": "block.timestamp+725"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.518ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.523ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "66",
                "sol": "66"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.527ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.532ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.537ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.541ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.541ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.542ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[7],accounts[6],accounts[9],accounts[7],accounts[4],accounts[1],accounts[6],accounts[2],accounts[2],accounts[6],accounts[4],accounts[5],accounts[6],accounts[3],accounts[3],accounts[8],accounts[8],accounts[6],accounts[7],accounts[0],accounts[7],accounts[7],accounts[8],accounts[9],accounts[1],accounts[0],accounts[8],accounts[0],accounts[5],accounts[3],accounts[7],accounts[7],accounts[1],accounts[2],accounts[0],accounts[0],accounts[0],accounts[2],accounts[9],accounts[4],accounts[4],accounts[6],accounts[0],accounts[2],accounts[7],accounts[4],accounts[4],accounts[4],accounts[1],accounts[4],accounts[4],accounts[7],accounts[1],accounts[4],accounts[1],accounts[9],accounts[3],accounts[7],accounts[3],accounts[7],accounts[8],accounts[4],accounts[9],accounts[6],accounts[2],accounts[7],accounts[1],accounts[3],accounts[9],accounts[6],accounts[4],accounts[0],accounts[3],accounts[8],accounts[4],accounts[8],accounts[9],accounts[2],accounts[3],accounts[1],accounts[2],accounts[9],accounts[9],accounts[6],accounts[8],accounts[0],accounts[7],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[9],accounts[7],accounts[4],accounts[9],accounts[7],accounts[2],accounts[5],accounts[0],accounts[6],accounts[3],accounts[8],accounts[6],accounts[8],accounts[9],accounts[0],accounts[4],accounts[9],accounts[1],accounts[1],accounts[3],accounts[3],accounts[4],accounts[8],accounts[9],accounts[9],accounts[8],accounts[7],accounts[9],accounts[0],accounts[9],accounts[2],accounts[5],accounts[5],accounts[8],accounts[1],accounts[2],accounts[1],accounts[1],accounts[2],accounts[0],accounts[3],accounts[7],accounts[3],accounts[5],accounts[2],accounts[0],accounts[9],accounts[8],accounts[0],accounts[0],accounts[3],accounts[4],accounts[6],accounts[3],accounts[4],accounts[7],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[1],accounts[5],accounts[3],accounts[9],accounts[9],accounts[7],accounts[3],accounts[8],accounts[5],accounts[7],accounts[0],accounts[0],accounts[9],accounts[9],accounts[2],accounts[1],accounts[4],accounts[9],accounts[3],accounts[4],accounts[4],accounts[9],accounts[9],accounts[6],accounts[4],accounts[0],accounts[4],accounts[0],accounts[3],accounts[9],accounts[1],accounts[6],accounts[1],accounts[5],accounts[1],accounts[7],accounts[6],accounts[9],accounts[9],accounts[6],accounts[9],accounts[0],accounts[5],accounts[8],accounts[6],accounts[6],accounts[2],accounts[8],accounts[1],accounts[9],accounts[5],accounts[3],accounts[8],accounts[2],accounts[2],accounts[6],accounts[9],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[3],accounts[2],accounts[1],accounts[5],accounts[6],accounts[7],accounts[9],accounts[3],accounts[1],accounts[0],accounts[5],accounts[5],accounts[3],accounts[0],accounts[9],accounts[8],accounts[2],accounts[4],accounts[9],accounts[1],accounts[3],accounts[9],accounts[3],accounts[1],accounts[3],accounts[9],accounts[6],accounts[7],accounts[6],accounts[4],accounts[3],accounts[1],accounts[2],accounts[6],accounts[8],accounts[4],accounts[2],accounts[8]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[6],accounts[9],accounts[7],accounts[4],accounts[1],accounts[6],accounts[2],accounts[2],accounts[6],accounts[4],accounts[5],accounts[6],accounts[3],accounts[3],accounts[8],accounts[8],accounts[6],accounts[7],accounts[0],accounts[7],accounts[7],accounts[8],accounts[9],accounts[1],accounts[0],accounts[8],accounts[0],accounts[5],accounts[3],accounts[7],accounts[7],accounts[1],accounts[2],accounts[0],accounts[0],accounts[0],accounts[2],accounts[9],accounts[4],accounts[4],accounts[6],accounts[0],accounts[2],accounts[7],accounts[4],accounts[4],accounts[4],accounts[1],accounts[4],accounts[4],accounts[7],accounts[1],accounts[4],accounts[1],accounts[9],accounts[3],accounts[7],accounts[3],accounts[7],accounts[8],accounts[4],accounts[9],accounts[6],accounts[2],accounts[7],accounts[1],accounts[3],accounts[9],accounts[6],accounts[4],accounts[0],accounts[3],accounts[8],accounts[4],accounts[8],accounts[9],accounts[2],accounts[3],accounts[1],accounts[2],accounts[9],accounts[9],accounts[6],accounts[8],accounts[0],accounts[7],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[9],accounts[7],accounts[4],accounts[9],accounts[7],accounts[2],accounts[5],accounts[0],accounts[6],accounts[3],accounts[8],accounts[6],accounts[8],accounts[9],accounts[0],accounts[4],accounts[9],accounts[1],accounts[1],accounts[3],accounts[3],accounts[4],accounts[8],accounts[9],accounts[9],accounts[8],accounts[7],accounts[9],accounts[0],accounts[9],accounts[2],accounts[5],accounts[5],accounts[8],accounts[1],accounts[2],accounts[1],accounts[1],accounts[2],accounts[0],accounts[3],accounts[7],accounts[3],accounts[5],accounts[2],accounts[0],accounts[9],accounts[8],accounts[0],accounts[0],accounts[3],accounts[4],accounts[6],accounts[3],accounts[4],accounts[7],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[1],accounts[5],accounts[3],accounts[9],accounts[9],accounts[7],accounts[3],accounts[8],accounts[5],accounts[7],accounts[0],accounts[0],accounts[9],accounts[9],accounts[2],accounts[1],accounts[4],accounts[9],accounts[3],accounts[4],accounts[4],accounts[9],accounts[9],accounts[6],accounts[4],accounts[0],accounts[4],accounts[0],accounts[3],accounts[9],accounts[1],accounts[6],accounts[1],accounts[5],accounts[1],accounts[7],accounts[6],accounts[9],accounts[9],accounts[6],accounts[9],accounts[0],accounts[5],accounts[8],accounts[6],accounts[6],accounts[2],accounts[8],accounts[1],accounts[9],accounts[5],accounts[3],accounts[8],accounts[2],accounts[2],accounts[6],accounts[9],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[3],accounts[2],accounts[1],accounts[5],accounts[6],accounts[7],accounts[9],accounts[3],accounts[1],accounts[0],accounts[5],accounts[5],accounts[3],accounts[0],accounts[9],accounts[8],accounts[2],accounts[4],accounts[9],accounts[1],accounts[3],accounts[9],accounts[3],accounts[1],accounts[3],accounts[9],accounts[6],accounts[7],accounts[6],accounts[4],accounts[3],accounts[1],accounts[2],accounts[6],accounts[8],accounts[4],accounts[2],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[7],accounts[7],accounts[6],accounts[9],accounts[7],accounts[4],accounts[1],accounts[6],accounts[2],accounts[2],accounts[6],accounts[4],accounts[5],accounts[6],accounts[3],accounts[3],accounts[8],accounts[8],accounts[6],accounts[7],accounts[0],accounts[7],accounts[7],accounts[8],accounts[9],accounts[1],accounts[0],accounts[8],accounts[0],accounts[5],accounts[3],accounts[7],accounts[7],accounts[1],accounts[2],accounts[0],accounts[0],accounts[0],accounts[2],accounts[9],accounts[4],accounts[4],accounts[6],accounts[0],accounts[2],accounts[7],accounts[4],accounts[4],accounts[4],accounts[1],accounts[4],accounts[4],accounts[7],accounts[1],accounts[4],accounts[1],accounts[9],accounts[3],accounts[7],accounts[3],accounts[7],accounts[8],accounts[4],accounts[9],accounts[6],accounts[2],accounts[7],accounts[1],accounts[3],accounts[9],accounts[6],accounts[4],accounts[0],accounts[3],accounts[8],accounts[4],accounts[8],accounts[9],accounts[2],accounts[3],accounts[1],accounts[2],accounts[9],accounts[9],accounts[6],accounts[8],accounts[0],accounts[7],accounts[4],accounts[5],accounts[1],accounts[9],accounts[4],accounts[9],accounts[7],accounts[4],accounts[9],accounts[7],accounts[2],accounts[5],accounts[0],accounts[6],accounts[3],accounts[8],accounts[6],accounts[8],accounts[9],accounts[0],accounts[4],accounts[9],accounts[1],accounts[1],accounts[3],accounts[3],accounts[4],accounts[8],accounts[9],accounts[9],accounts[8],accounts[7],accounts[9],accounts[0],accounts[9],accounts[2],accounts[5],accounts[5],accounts[8],accounts[1],accounts[2],accounts[1],accounts[1],accounts[2],accounts[0],accounts[3],accounts[7],accounts[3],accounts[5],accounts[2],accounts[0],accounts[9],accounts[8],accounts[0],accounts[0],accounts[3],accounts[4],accounts[6],accounts[3],accounts[4],accounts[7],accounts[2],accounts[3],accounts[3],accounts[6],accounts[6],accounts[1],accounts[5],accounts[3],accounts[9],accounts[9],accounts[7],accounts[3],accounts[8],accounts[5],accounts[7],accounts[0],accounts[0],accounts[9],accounts[9],accounts[2],accounts[1],accounts[4],accounts[9],accounts[3],accounts[4],accounts[4],accounts[9],accounts[9],accounts[6],accounts[4],accounts[0],accounts[4],accounts[0],accounts[3],accounts[9],accounts[1],accounts[6],accounts[1],accounts[5],accounts[1],accounts[7],accounts[6],accounts[9],accounts[9],accounts[6],accounts[9],accounts[0],accounts[5],accounts[8],accounts[6],accounts[6],accounts[2],accounts[8],accounts[1],accounts[9],accounts[5],accounts[3],accounts[8],accounts[2],accounts[2],accounts[6],accounts[9],accounts[6],accounts[2],accounts[9],accounts[1],accounts[7],accounts[5],accounts[3],accounts[2],accounts[1],accounts[5],accounts[6],accounts[7],accounts[9],accounts[3],accounts[1],accounts[0],accounts[5],accounts[5],accounts[3],accounts[0],accounts[9],accounts[8],accounts[2],accounts[4],accounts[9],accounts[1],accounts[3],accounts[9],accounts[3],accounts[1],accounts[3],accounts[9],accounts[6],accounts[7],accounts[6],accounts[4],accounts[3],accounts[1],accounts[2],accounts[6],accounts[8],accounts[4],accounts[2],accounts[8]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.547ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-12T10:50:01.548ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-12T10:50:01.548ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1532892062",
              "sol": "1532892062"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1532892062",
                "sol": "1532892062"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "9999",
                "sol": "9999"
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "96",
                "sol": "96"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}