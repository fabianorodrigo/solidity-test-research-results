const truffleAssert = require('truffle-assertions');
const PaymentTokenMock = artifacts.require("PaymentTokenMock");
const RedeemableTokenMock = artifacts.require("RedeemableTokenMock");
const OffChainPayments = artifacts.require("OffChainPayments");
const OnChainPayments = artifacts.require("OnChainPayments");
const FixedPriceTender = artifacts.require("FixedPriceTender");
const FullRedemption = artifacts.require("FullRedemption");
const PartialRedemption = artifacts.require("PartialRedemption");
const RedeemableToken = artifacts.require("RedeemableToken");
const OnChainVoting = artifacts.require("OnChainVoting");
const ECDSA = artifacts.require("openzeppelin-solidity/contracts/cryptography/ECDSA.sol");
const Math = artifacts.require("openzeppelin-solidity/contracts/math/Math.sol");
const SafeMath = artifacts.require("openzeppelin-solidity/contracts/math/SafeMath.sol");
const ERC20 = artifacts.require("openzeppelin-solidity/contracts/token/ERC20/ERC20.sol");

contract("OffChainPayments",(accounts)=>{
  let trace = false;
  let contractSafeMath = null;
  let contractMath = null;
  let contractECDSA = null;
  let contractERC20 = null;
  let contractRedeemableToken = null;
  let contractPaymentTokenMock = null;
  let contractRedeemableTokenMock = null;
  let contractOffChainPayments = null;
  let contractPartialRedemption = null;
  let contractOnChainPayments = null;
  let contractFixedPriceTender = null;
  let contractFullRedemption = null;
  let contractOnChainVoting = null;
  beforeEach(async () => {
    contractSafeMath = await SafeMath.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: SafeMath.new({from: accounts[0]}');
    contractMath = await Math.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: Math.new({from: accounts[0]}');
    contractECDSA = await ECDSA.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ECDSA.new({from: accounts[0]}');
    ERC20.link("SafeMath",contractSafeMath.address);
    contractERC20 = await ERC20.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: ERC20.new({from: accounts[0]}');
    RedeemableToken.link("SafeMath",contractSafeMath.address);
    contractRedeemableToken = await RedeemableToken.new({from: accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableToken.new({from: accounts[0]}');
    contractPaymentTokenMock = await PaymentTokenMock.new(accounts[5],1,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PaymentTokenMock.new(accounts[5],1,{from:accounts[0]}');
    contractRedeemableTokenMock = await RedeemableTokenMock.new(accounts[7],10000,{from:accounts[0]});
    if(trace) console.log('SUCESSO: RedeemableTokenMock.new(accounts[7],10000,{from:accounts[0]}');
    OffChainPayments.link("SafeMath",contractSafeMath.address);
     OffChainPayments.link("ECDSA",contractECDSA.address);
    contractOffChainPayments = await OffChainPayments.new(accounts[5],{from:accounts[0]});
    if(trace) console.log('SUCESSO: OffChainPayments.new(accounts[5],{from:accounts[0]}');
    PartialRedemption.link("SafeMath",contractSafeMath.address);
    contractPartialRedemption = await PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[9],95,{from:accounts[0]});
    if(trace) console.log('SUCESSO: PartialRedemption.new(contractPaymentTokenMock.address,contractRedeemableToken.address,accounts[9],95,{from:accounts[0]}');
    OnChainPayments.link("SafeMath",contractSafeMath.address);
     OnChainPayments.link("ECDSA",contractECDSA.address);
    contractOnChainPayments = await OnChainPayments.new(contractRedeemableTokenMock.address,contractPaymentTokenMock.address,accounts[6],{from:accounts[0]});
    if(trace) console.log('SUCESSO: OnChainPayments.new(contractRedeemableTokenMock.address,contractPaymentTokenMock.address,accounts[6],{from:accounts[0]}');
    FixedPriceTender.link("Math",contractMath.address);
     FixedPriceTender.link("SafeMath",contractSafeMath.address);
    contractFixedPriceTender = await FixedPriceTender.new(4,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[9],2,0,{from:accounts[7]});
    if(trace) console.log('SUCESSO: FixedPriceTender.new(4,contractRedeemableToken.address,contractRedeemableTokenMock.address,accounts[9],2,0,{from:accounts[7]}');
    FullRedemption.link("SafeMath",contractSafeMath.address);
    contractFullRedemption = await FullRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[9],9999,{from:accounts[0]});
    if(trace) console.log('SUCESSO: FullRedemption.new(contractRedeemableToken.address,contractRedeemableToken.address,accounts[9],9999,{from:accounts[0]}');
    OnChainVoting.link("SafeMath",contractSafeMath.address);
    contractOnChainVoting = await OnChainVoting.new(contractRedeemableToken.address,accounts[9],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282,{from:accounts[1]});
    if(trace) console.log('SUCESSO: OnChainVoting.new(contractRedeemableToken.address,accounts[9],(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+282,{from:accounts[1]}');
  });
  
  it('Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length', async () => {
    let result = await contractOffChainPayments.recordPayments([accounts[6],accounts[1],accounts[1],accounts[7],accounts[0],accounts[1],accounts[9],accounts[9],accounts[8],accounts[1],accounts[2],accounts[3],accounts[7],accounts[9],accounts[8],accounts[9],accounts[8],accounts[6],accounts[8],accounts[4],accounts[5],accounts[7],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[9],accounts[2]], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[0]});
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[6],accounts[1],accounts[1],accounts[7],accounts[0],accounts[1],accounts[9],accounts[9],accounts[8],accounts[1],accounts[2],accounts[3],accounts[7],accounts[9],accounts[8],accounts[9],accounts[8],accounts[6],accounts[8],accounts[4],accounts[5],accounts[7],accounts[8],accounts[4],accounts[0],accounts[0],accounts[2],accounts[9],accounts[2]], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[9]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[0]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[8],accounts[9],accounts[7],accounts[0],accounts[8],accounts[4],accounts[5],accounts[6],accounts[4],accounts[7],accounts[3],accounts[1],accounts[1],accounts[2],accounts[8],accounts[5],accounts[3],accounts[7],accounts[1],accounts[2],accounts[3],accounts[9],accounts[6],accounts[3],accounts[5],accounts[2],accounts[9],accounts[0],accounts[6],accounts[0]], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[0]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[0],accounts[7],accounts[0],accounts[1],accounts[8],accounts[7],accounts[6],accounts[1],accounts[0],accounts[2],accounts[0],accounts[6],accounts[9],accounts[9],accounts[0],accounts[3],accounts[8],accounts[8],accounts[0],accounts[3],accounts[8],accounts[2],accounts[1],accounts[2],accounts[3],accounts[7],accounts[6],accounts[7],accounts[7],accounts[6]], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[0]}),'revert');
  });
  it('Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.recordPayments([accounts[4],accounts[7],accounts[3],accounts[8],accounts[9],accounts[9],accounts[1],accounts[0],accounts[8],accounts[3],accounts[4],accounts[8],accounts[0],accounts[5],accounts[6],accounts[9],accounts[0],accounts[1],accounts[2],accounts[1],accounts[8],accounts[7],accounts[0],accounts[4],accounts[3],accounts[5],accounts[1],accounts[8],accounts[8],accounts[1]], [97,1338,1336,28,28,256,1,5,256,3,65,1337,66,97,1532892062,2,256,1,1532892063,26,28,2,97,1,10001,27,66,2014223715,1337], [29,27,1532892063,97,0,10001,0,3,66,27,10001,6,28,255,2014223715,0,96,1532892063,66,1338,1532892062,255,6,1337,1336,28,26,6,256], [[179,65,216,84,68,53,221,242,80,152,43,33,36,34,137,31,87,108,75,51,173,247,88,136,116,61,38,62,231,213,135,181],[109,157,234,129,107,189,0,41,216,169,130,212,172,157,158,253,119,242,200,58,228,46,188,1,11,140,204,226,42,125,219,14],[163,204,81,28,10,84,145,24,132,178,189,192,59,7,175,246,215,124,84,237,181,146,59,188,199,179,232,215,16,89,25,52],[143,158,93,185,154,246,80,139,155,181,178,254,148,191,189,208,242,43,153,130,237,150,253,25,50,63,8,142,186,150,180,139],[180,112,227,5,11,124,69,38,230,91,154,84,57,142,201,74,111,103,27,198,199,40,143,197,55,189,138,109,205,40,12,184],[239,26,156,108,127,46,196,229,24,14,184,189,238,194,156,211,199,134,157,212,201,87,66,97,207,91,64,158,67,201,200,195],[26,155,255,210,25,4,137,117,69,212,16,106,15,9,22,99,60,65,30,100,148,68,55,248,202,214,33,247,84,194,54,164],[173,68,243,99,141,215,8,101,33,202,194,232,183,86,208,71,82,60,163,215,1,74,21,41,43,234,250,242,246,95,115,136],[153,37,145,130,116,157,120,185,135,113,185,212,39,238,172,85,46,106,101,13,254,82,4,77,46,49,131,4,112,30,172,112],[200,49,73,46,92,206,176,94,128,85,234,240,37,73,192,200,210,206,55,41,204,218,11,61,52,149,26,90,110,39,116,106],[81,157,108,158,189,134,63,67,162,122,186,174,211,151,189,36,235,175,26,40,209,2,1,4,151,22,95,252,235,84,11,159],[192,48,204,199,118,242,51,45,113,228,229,0,23,6,17,189,115,31,132,177,70,20,7,37,238,152,175,5,161,44,196,159],[54,233,211,238,42,148,11,52,217,37,59,172,249,245,185,16,58,8,90,243,195,91,93,78,194,249,127,248,127,30,242,184],[217,148,248,129,79,155,149,205,228,140,168,49,214,56,136,94,174,229,177,29,143,178,210,215,28,164,189,220,36,28,91,225],[155,202,231,214,151,148,141,160,35,3,89,155,20,203,123,17,122,236,49,47,144,231,13,247,61,95,38,194,45,202,36,129],[175,214,151,121,239,169,124,41,214,59,227,63,212,181,25,113,61,46,219,162,3,72,100,60,40,103,80,81,54,216,221,123],[69,57,83,5,190,54,109,140,254,187,38,232,176,219,191,198,29,116,90,76,96,235,117,253,102,255,202,192,11,45,28,74],[86,251,38,84,140,192,89,54,150,98,132,74,83,35,203,163,148,223,0,163,196,129,94,236,196,69,123,202,248,43,22,60],[1,190,35,188,253,248,31,83,59,206,96,17,220,192,40,18,38,97,88,228,115,191,249,248,232,180,238,20,68,149,129,206],[2,21,14,196,56,55,147,159,96,241,170,23,34,221,5,102,144,62,42,215,74,197,165,165,109,194,169,115,58,86,100,189],[187,19,111,114,177,255,121,111,26,55,170,164,246,243,83,97,81,109,41,62,20,34,184,136,209,46,224,130,25,238,53,79],[202,64,105,138,64,214,3,215,79,222,215,173,86,127,32,46,165,190,189,229,255,29,38,149,18,13,43,102,137,240,240,22],[135,191,137,139,96,229,4,188,134,150,233,199,121,182,205,17,149,227,118,149,200,162,113,152,228,160,193,190,235,16,41,217],[182,48,140,199,72,17,127,90,244,219,123,55,86,224,80,240,17,88,121,80,119,86,79,72,47,230,149,92,186,70,40,2],[2,72,73,206,137,220,166,232,168,38,230,224,196,65,134,180,183,14,115,190,235,228,110,80,73,61,95,32,3,152,121,4],[224,25,27,26,39,107,117,52,175,128,10,236,241,189,67,58,151,38,236,157,254,252,2,61,167,170,36,91,192,208,36,193],[250,102,14,207,85,210,115,96,48,123,166,197,98,17,176,70,142,147,242,149,220,24,164,62,47,17,175,88,244,209,11,121],[78,165,24,6,239,60,69,124,173,95,218,44,22,155,38,211,72,152,20,175,81,164,212,139,197,228,127,87,231,193,225,250],[153,75,221,248,83,234,159,166,109,115,43,231,154,146,7,157,139,37,150,70,34,138,243,147,254,117,190,155,255,163,85,178]],{from: accounts[0]}),'revert');
  });
  it('Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000', async () => {
    let result = await contractOffChainPayments.lookUpPaymentIndex(accounts[6], [204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202],{from: accounts[0]});
  });
  it('Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.lookUpPaymentIndex("0x0000000000000000000000000000000000000000", [204,5,136,68,144,27,202,39,101,196,191,79,113,136,2,22,192,133,131,107,137,75,143,141,116,58,32,72,156,223,26,202],{from: accounts[0]}),'revert');
  });
  it('Should execute challengePayment(uint256,uint256)', async () => {
    let result = await contractOffChainPayments.challengePayment(9999, 256,{from: accounts[0]});
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[3], 9999, [0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47], 64,{from: accounts[0]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[3], 9999, [0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47], 64,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[3], -1, [0,124,159,81,40,199,19,101,210,229,132,110,105,102,75,238,161,154,185,87,240,133,96,36,176,183,8,233,86,111,219,47], 64,{from: accounts[0]}),'revert');
  });
  it('Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0', async () => {
    let result = await contractOffChainPayments.resolveChallenge(accounts[6], 97, [184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68], 26,{from: accounts[0]});
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[6], 97, [184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68], 26,{from: accounts[9]}),'revert');
  });
  it('Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0', async () => {
    let result = await truffleAssert.fails(contractOffChainPayments.resolveChallenge(accounts[6], -1, [184,206,99,142,91,136,201,196,134,63,193,205,37,84,18,65,42,186,14,65,235,145,10,92,216,85,21,69,114,30,118,68], 26,{from: accounts[0]}),'revert');
  });
});
