,{
  "2020-11-11T02:09:15.993ZPaymentTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:22.295ZRedeemableTokenMock.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address,uint256) WHEN _initialAccount!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address,uint256) when NOT comply with: _initialAccount != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:28.680ZOffChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:35.178ZPartialRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:41.859ZOnChainPayments.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,IERC20,address) WHEN msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[5]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[5]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,IERC20,address) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:48.470ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractPaymentTokenMock.address",
              "sol": "contractPaymentTokenMock"
            },
            {
              "js": "accounts[1]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "5",
              "sol": "5"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "accounts[1]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractPaymentTokenMock.address",
                "sol": "contractPaymentTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "5",
                "sol": "5"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:09:56.915ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "95",
              "sol": "95"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "{from:accounts[2]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "95",
                "sol": "95"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "{from:accounts[2]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:05.150ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "29",
              "sol": "29"
            },
            {
              "js": "2",
              "sol": "2"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "29",
                "sol": "29"
              },
              {
                "js": "2",
                "sol": "2"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:13.604ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "256",
              "sol": "256"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[9]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "10000",
              "sol": "10000"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[4]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[9]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "256",
                "sol": "256"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "10000",
                "sol": "10000"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[4]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:21.875ZFixedPriceTender.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(uint256,IERC20,IERC20,address,uint256,uint256) WHEN _paymentPerSecurity>0,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "4",
              "sol": "4"
            },
            {
              "js": "1",
              "sol": "1"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(uint256,IERC20,IERC20,address,uint256,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "4",
                "sol": "4"
              },
              {
                "js": "1",
                "sol": "1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:28.673ZFullRedemption.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,RedeemableToken,address,uint256) WHEN _paymentPerSecurity>0",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "contractRedeemableTokenMock.address",
              "sol": "contractRedeemableTokenMock"
            },
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "9999",
              "sol": "9999"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,RedeemableToken,address,uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "contractRedeemableTokenMock.address",
                "sol": "contractRedeemableTokenMock"
              },
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:35.463ZOnChainVoting.null": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute constructor(IERC20,address,uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<_endTime,_issuer!=0x0000000000000000000000000000000000000000,msg.sender==_owner,_issuer!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "contractRedeemableToken.address",
              "sol": "contractRedeemableToken"
            },
            {
              "js": "accounts[2]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+864",
              "sol": "block.timestamp+864"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp < _endTime",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
                "sol": "block.timestamp"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+864",
                "sol": "block.timestamp+864"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "accounts[2]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+864",
                "sol": "block.timestamp+864"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail constructor(IERC20,address,uint256) when NOT comply with: _issuer != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "contractRedeemableToken.address",
                "sol": "contractRedeemableToken"
              },
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+864",
                "sol": "block.timestamp+864"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.376ZRedeemableToken.setRedemption": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setRedemption(address) WHEN msg.sender==_owner,_redemption!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail setRedemption(address) when NOT comply with: _redemption != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.378ZRedeemableToken.redeemAllTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemAllTokens(address) WHEN msg.sender==redemption,msg.sender==_owner,balance>0",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemAllTokens(address) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.380ZRedeemableToken.redeemPartialTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemPartialTokens(address,uint256) WHEN msg.sender==redemption,msg.sender==_owner",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1338",
              "sol": "1338"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == redemption",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemPartialTokens(address,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[7]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1338",
                "sol": "1338"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.383ZOffChainPayments.recordPayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute recordPayments(address[],uint256[],uint256[],bytes32[]) WHEN msg.sender==_owner,_securityHolders.length>0,_securityHolders.length==_offchainPaymentHashes.length,_securityHolders.length==_paymentTimestamps.length,_securityHolders.length==_paymentValues.length",
          "parameters": [
            {
              "js": "[accounts[1],accounts[4],accounts[3],accounts[9],accounts[5],accounts[4],accounts[1],accounts[7],accounts[2],accounts[5],accounts[7],accounts[4],accounts[3],accounts[2],accounts[8],accounts[9],accounts[1],accounts[9],accounts[4],accounts[3],accounts[9],accounts[6],accounts[7],accounts[6],accounts[7],accounts[9],accounts[2],accounts[9],accounts[9],accounts[2],accounts[3],accounts[1],accounts[3],accounts[7],accounts[5],accounts[8],accounts[1],accounts[9],accounts[6],accounts[3],accounts[4],accounts[7],accounts[8],accounts[0],accounts[8],accounts[2],accounts[8],accounts[9],accounts[0],accounts[2],accounts[1],accounts[1],accounts[7],accounts[8],accounts[3],accounts[7],accounts[8],accounts[5],accounts[5],accounts[8],accounts[3],accounts[9],accounts[3],accounts[8],accounts[9],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
              "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
            },
            {
              "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
              "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
            },
            {
              "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
              "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[1],accounts[4],accounts[3],accounts[9],accounts[5],accounts[4],accounts[1],accounts[7],accounts[2],accounts[5],accounts[7],accounts[4],accounts[3],accounts[2],accounts[8],accounts[9],accounts[1],accounts[9],accounts[4],accounts[3],accounts[9],accounts[6],accounts[7],accounts[6],accounts[7],accounts[9],accounts[2],accounts[9],accounts[9],accounts[2],accounts[3],accounts[1],accounts[3],accounts[7],accounts[5],accounts[8],accounts[1],accounts[9],accounts[6],accounts[3],accounts[4],accounts[7],accounts[8],accounts[0],accounts[8],accounts[2],accounts[8],accounts[9],accounts[0],accounts[2],accounts[1],accounts[1],accounts[7],accounts[8],accounts[3],accounts[7],accounts[8],accounts[5],accounts[5],accounts[8],accounts[3],accounts[9],accounts[3],accounts[8],accounts[9],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
                "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
              },
              {
                "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
                "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
              },
              {
                "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
                "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
                "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
              },
              {
                "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
                "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
              },
              {
                "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
                "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _offchainPaymentHashes.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[8],accounts[0],accounts[7],accounts[6],accounts[2],accounts[1],accounts[5],accounts[6],accounts[6],accounts[1],accounts[0],accounts[5],accounts[9],accounts[7],accounts[7],accounts[7],accounts[1],accounts[0],accounts[7],accounts[6],accounts[0],accounts[6],accounts[3],accounts[3],accounts[9],accounts[4],accounts[2],accounts[8],accounts[3],accounts[3],accounts[3],accounts[3],accounts[5],accounts[7],accounts[7],accounts[6],accounts[8],accounts[1],accounts[0],accounts[7],accounts[1],accounts[8],accounts[7],accounts[5],accounts[1],accounts[2],accounts[6],accounts[7],accounts[3],accounts[5],accounts[6],accounts[3],accounts[4],accounts[6],accounts[0],accounts[8],accounts[8],accounts[7],accounts[2],accounts[2],accounts[9],accounts[9],accounts[2],accounts[4],accounts[6],accounts[9]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
                "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
              },
              {
                "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
                "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
              },
              {
                "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
                "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentTimestamps.length",
            "parameters": [
              {
                "js": "[accounts[5],accounts[9],accounts[5],accounts[6],accounts[2],accounts[0],accounts[6],accounts[9],accounts[9],accounts[8],accounts[3],accounts[9],accounts[7],accounts[4],accounts[8],accounts[5],accounts[4],accounts[3],accounts[5],accounts[5],accounts[4],accounts[6],accounts[7],accounts[4],accounts[5],accounts[1],accounts[1],accounts[1],accounts[3],accounts[2],accounts[1],accounts[0],accounts[5],accounts[2],accounts[9],accounts[4],accounts[7],accounts[0],accounts[9],accounts[1],accounts[5],accounts[9],accounts[1],accounts[2],accounts[6],accounts[9],accounts[0],accounts[2],accounts[4],accounts[3],accounts[9],accounts[7],accounts[3],accounts[0],accounts[1],accounts[6],accounts[5],accounts[7],accounts[4],accounts[3],accounts[6],accounts[7],accounts[8],accounts[2],accounts[5],accounts[6],accounts[7]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
                "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
              },
              {
                "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
                "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
              },
              {
                "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
                "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail recordPayments(address[],uint256[],uint256[],bytes32[]) when NOT comply with: _securityHolders.length == _paymentValues.length",
            "parameters": [
              {
                "js": "[accounts[1],accounts[8],accounts[7],accounts[9],accounts[4],accounts[3],accounts[2],accounts[8],accounts[7],accounts[9],accounts[6],accounts[0],accounts[5],accounts[9],accounts[4],accounts[4],accounts[3],accounts[2],accounts[4],accounts[5],accounts[1],accounts[0],accounts[6],accounts[9],accounts[2],accounts[3],accounts[5],accounts[2],accounts[7],accounts[2],accounts[5],accounts[9],accounts[4],accounts[6],accounts[6],accounts[5],accounts[8],accounts[4],accounts[1],accounts[0],accounts[5],accounts[6],accounts[7],accounts[1],accounts[9],accounts[3],accounts[7],accounts[6],accounts[5],accounts[6],accounts[7],accounts[5],accounts[7],accounts[8],accounts[9],accounts[9],accounts[7],accounts[9],accounts[1],accounts[6],accounts[7],accounts[9],accounts[9],accounts[6],accounts[0],accounts[7],accounts[0]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[254,9999,28,95,1337,10001,95,10000,97,254,2014223715,29,257,27,1532892062,28,66,254,28,6,95,1336,2014223716,2,2014223714,0,1336,65,4,256,2014223715,65,255,1532892062,1338,28,97,1337,1,1337,65,10000,4,256,255,9999,28,0,64,95,1338,1532892064,10000,4,29,95,97,95,2,4,29,257,1532892063,256,1532892063,257]",
                "sol": "[uint256(254),uint256(9999),uint256(28),uint256(95),uint256(1337),uint256(10001),uint256(95),uint256(10000),uint256(97),uint256(254),uint256(2014223715),uint256(29),uint256(257),uint256(27),uint256(1532892062),uint256(28),uint256(66),uint256(254),uint256(28),uint256(6),uint256(95),uint256(1336),uint256(2014223716),uint256(2),uint256(2014223714),uint256(0),uint256(1336),uint256(65),uint256(4),uint256(256),uint256(2014223715),uint256(65),uint256(255),uint256(1532892062),uint256(1338),uint256(28),uint256(97),uint256(1337),uint256(1),uint256(1337),uint256(65),uint256(10000),uint256(4),uint256(256),uint256(255),uint256(9999),uint256(28),uint256(0),uint256(64),uint256(95),uint256(1338),uint256(1532892064),uint256(10000),uint256(4),uint256(29),uint256(95),uint256(97),uint256(95),uint256(2),uint256(4),uint256(29),uint256(257),uint256(1532892063),uint256(256),uint256(1532892063),uint256(257)]"
              },
              {
                "js": "[10000,10001,256,5,3,2014223714,0,2014223714,6,1338,0,256,10001,2,3,26,9999,2014223714,29,1532892063,2014223716,95,66,255,256,26,4,1,5,6,2,10001,28,29,65,1337,27,10000,255,64,1337,2,4,27,257,0,1338,6,1532892064,27,65,254,255,28,65,256,254,0,254,64,0,2014223714,65,1,254,255]",
                "sol": "[uint256(10000),uint256(10001),uint256(256),uint256(5),uint256(3),uint256(2014223714),uint256(0),uint256(2014223714),uint256(6),uint256(1338),uint256(0),uint256(256),uint256(10001),uint256(2),uint256(3),uint256(26),uint256(9999),uint256(2014223714),uint256(29),uint256(1532892063),uint256(2014223716),uint256(95),uint256(66),uint256(255),uint256(256),uint256(26),uint256(4),uint256(1),uint256(5),uint256(6),uint256(2),uint256(10001),uint256(28),uint256(29),uint256(65),uint256(1337),uint256(27),uint256(10000),uint256(255),uint256(64),uint256(1337),uint256(2),uint256(4),uint256(27),uint256(257),uint256(0),uint256(1338),uint256(6),uint256(1532892064),uint256(27),uint256(65),uint256(254),uint256(255),uint256(28),uint256(65),uint256(256),uint256(254),uint256(0),uint256(254),uint256(64),uint256(0),uint256(2014223714),uint256(65),uint256(1),uint256(254),uint256(255)]"
              },
              {
                "js": "[[174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72],[144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80],[97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106],[114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199],[100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39],[170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73],[249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44],[190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174],[4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245],[209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246],[105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226],[21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138],[189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151],[104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5],[27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155],[163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56],[203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146],[140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211],[84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114],[32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189],[170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111],[27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104],[45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23],[205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186],[61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186],[239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232],[195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42],[185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195],[121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95],[11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138],[5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252],[222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189],[73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61],[210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24],[227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144],[189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127],[139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103],[210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192],[129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80],[46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179],[140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211],[68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75],[15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100],[211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213],[145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168],[56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11],[212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230],[203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28],[202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57],[5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134],[151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192],[255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41],[162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23],[16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101],[58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154],[44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133],[174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26],[186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221],[209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254],[89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9],[186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81],[21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41],[147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26],[9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102],[4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137],[80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213]]",
                "sol": "[bytes32(stringToBytes32(\"174,221,98,107,39,53,144,94,110,148,83,246,230,130,129,144,10,175,46,155,255,88,35,248,124,101,24,144,235,122,16,72\")),bytes32(stringToBytes32(\"144,169,106,151,191,9,44,13,98,132,161,210,135,229,193,130,54,169,69,52,239,20,73,36,199,249,175,39,239,247,223,80\")),bytes32(stringToBytes32(\"97,30,84,186,41,172,220,32,203,182,222,18,116,99,229,21,231,38,92,166,88,203,231,58,137,203,22,147,100,120,198,106\")),bytes32(stringToBytes32(\"114,222,140,171,211,65,204,233,24,36,245,187,236,44,143,242,55,59,119,219,251,26,98,184,93,116,220,100,85,200,137,199\")),bytes32(stringToBytes32(\"100,37,99,208,175,19,110,93,223,34,111,83,80,47,189,52,174,13,69,242,208,86,126,254,5,68,201,105,192,157,223,39\")),bytes32(stringToBytes32(\"170,122,0,52,88,109,108,240,162,71,246,165,150,194,77,112,217,214,106,114,29,226,177,94,177,167,28,230,77,141,91,73\")),bytes32(stringToBytes32(\"249,51,57,138,53,193,16,142,219,17,92,99,16,234,56,142,7,16,164,165,93,135,247,90,5,26,131,45,62,187,170,44\")),bytes32(stringToBytes32(\"190,66,2,69,5,10,41,4,73,112,111,130,23,175,15,161,198,68,220,30,149,83,54,184,222,6,35,229,200,45,133,174\")),bytes32(stringToBytes32(\"4,5,71,155,14,131,7,54,71,129,65,42,7,61,72,14,37,87,43,99,123,191,243,173,199,73,253,91,64,74,243,245\")),bytes32(stringToBytes32(\"209,72,242,20,135,67,247,220,12,130,91,158,220,94,160,153,199,70,247,82,210,214,25,155,25,159,142,164,121,148,39,246\")),bytes32(stringToBytes32(\"105,210,206,242,139,17,216,126,67,144,56,228,191,181,162,114,14,231,111,77,84,141,71,158,172,120,141,59,97,199,112,226\")),bytes32(stringToBytes32(\"21,110,142,171,64,149,159,106,8,217,99,184,100,55,222,94,72,99,157,9,8,10,13,28,94,93,23,93,28,22,6,138\")),bytes32(stringToBytes32(\"189,79,173,178,188,199,140,165,103,72,226,49,65,170,148,170,179,244,103,15,141,124,190,57,62,149,132,246,207,8,79,151\")),bytes32(stringToBytes32(\"104,138,3,23,180,65,113,251,246,78,114,45,136,120,60,13,42,235,38,14,110,236,208,178,224,240,222,153,21,11,102,5\")),bytes32(stringToBytes32(\"27,4,114,195,141,201,206,218,176,55,87,37,86,63,191,25,205,46,191,118,246,160,134,155,64,149,139,9,35,169,58,155\")),bytes32(stringToBytes32(\"163,181,186,203,123,194,216,131,194,171,79,98,214,56,45,125,125,69,132,65,130,97,68,242,44,171,233,231,220,76,32,56\")),bytes32(stringToBytes32(\"203,235,208,112,80,159,102,76,141,244,79,11,35,238,169,240,129,187,24,119,77,30,200,12,253,218,13,41,131,11,146,146\")),bytes32(stringToBytes32(\"140,19,147,143,253,113,12,20,93,191,14,238,222,106,53,114,93,23,63,129,1,230,206,11,221,131,128,144,216,221,137,211\")),bytes32(stringToBytes32(\"84,241,20,29,99,153,10,53,53,157,218,98,140,177,233,106,16,255,179,213,239,150,93,74,179,167,200,168,240,65,117,114\")),bytes32(stringToBytes32(\"32,213,148,1,3,252,117,75,245,36,227,61,217,8,27,34,64,218,72,207,61,182,40,172,130,166,240,20,59,105,229,189\")),bytes32(stringToBytes32(\"170,222,212,183,85,202,76,68,110,21,130,69,247,149,101,180,73,19,90,14,9,60,149,248,109,20,61,109,54,186,231,111\")),bytes32(stringToBytes32(\"27,93,54,53,147,223,104,32,135,117,88,2,225,168,211,93,115,217,172,198,177,4,141,211,20,228,193,165,84,92,185,104\")),bytes32(stringToBytes32(\"45,53,78,91,158,178,142,147,162,141,154,107,11,67,153,71,247,112,231,207,155,191,152,1,139,117,7,254,23,138,203,23\")),bytes32(stringToBytes32(\"205,95,188,114,51,120,16,225,190,105,216,149,243,159,103,204,200,157,130,154,65,183,216,183,90,76,217,68,64,55,237,186\")),bytes32(stringToBytes32(\"61,56,44,167,6,45,1,36,36,113,169,16,91,107,197,232,182,224,20,39,149,245,28,235,237,210,136,62,91,113,199,186\")),bytes32(stringToBytes32(\"239,81,240,96,154,16,114,206,91,114,52,112,240,249,112,207,16,191,46,35,44,169,26,159,141,240,32,201,10,197,243,232\")),bytes32(stringToBytes32(\"195,62,155,82,40,3,199,147,138,222,120,50,111,143,3,83,16,118,20,165,86,48,12,178,79,109,156,199,108,164,178,42\")),bytes32(stringToBytes32(\"185,221,26,148,146,177,0,203,27,119,30,135,93,35,10,235,67,253,161,174,159,254,220,181,179,147,125,222,124,152,105,195\")),bytes32(stringToBytes32(\"121,182,3,237,53,84,148,129,131,85,74,180,120,237,170,223,173,98,31,41,26,175,223,162,196,186,83,63,206,85,79,95\")),bytes32(stringToBytes32(\"11,76,55,28,54,201,36,131,224,139,239,141,159,253,253,52,208,150,191,9,71,189,35,235,211,27,45,69,192,92,233,138\")),bytes32(stringToBytes32(\"5,55,168,156,121,145,200,9,118,114,133,94,38,26,41,61,111,123,12,0,120,4,175,248,84,2,52,42,153,174,134,252\")),bytes32(stringToBytes32(\"222,49,1,91,40,145,29,81,185,148,93,200,15,242,232,25,72,254,21,47,83,96,22,90,153,49,192,60,222,235,110,189\")),bytes32(stringToBytes32(\"73,70,107,125,153,178,229,78,141,21,98,8,23,161,205,196,74,151,94,181,232,66,243,3,198,153,164,243,109,27,90,61\")),bytes32(stringToBytes32(\"210,205,74,21,43,37,101,82,165,176,195,56,41,163,194,84,0,214,134,44,138,237,142,65,45,159,34,76,199,235,162,24\")),bytes32(stringToBytes32(\"227,85,159,238,6,80,105,95,170,32,126,113,178,64,124,116,136,184,44,48,40,85,121,147,244,233,84,164,174,43,158,144\")),bytes32(stringToBytes32(\"189,126,255,55,29,93,199,32,120,208,0,78,0,253,148,67,106,78,78,141,242,62,122,241,68,226,231,244,88,103,112,127\")),bytes32(stringToBytes32(\"139,183,127,50,124,16,93,88,249,163,150,67,230,56,38,105,78,103,170,55,5,147,90,76,176,57,9,25,139,116,217,103\")),bytes32(stringToBytes32(\"210,114,140,55,220,122,3,160,20,195,149,193,5,1,181,59,211,246,181,126,9,136,109,230,28,103,120,190,91,255,64,192\")),bytes32(stringToBytes32(\"129,158,54,85,239,6,4,60,109,149,175,136,81,49,112,4,77,25,58,152,117,147,247,248,70,138,47,194,117,198,25,80\")),bytes32(stringToBytes32(\"46,214,66,166,112,54,66,105,210,141,6,142,213,167,187,203,99,29,14,193,52,150,71,62,42,107,75,200,105,76,147,179\")),bytes32(stringToBytes32(\"140,80,55,36,201,13,215,209,213,159,177,225,16,46,250,87,33,157,90,113,23,61,68,89,47,153,18,7,72,35,26,211\")),bytes32(stringToBytes32(\"68,255,234,195,238,238,207,96,119,61,201,36,209,33,143,149,63,102,81,205,156,208,181,136,87,216,19,183,18,4,103,75\")),bytes32(stringToBytes32(\"15,134,99,228,119,254,158,18,208,14,49,157,149,164,34,34,28,123,183,239,174,187,63,162,152,23,253,103,54,215,82,100\")),bytes32(stringToBytes32(\"211,71,113,207,22,212,90,37,229,162,14,58,203,199,188,1,208,126,156,105,250,253,135,50,250,38,8,209,8,178,15,213\")),bytes32(stringToBytes32(\"145,112,227,0,34,7,77,216,222,228,205,76,43,72,143,81,252,245,45,134,169,104,65,223,8,223,242,239,47,11,184,168\")),bytes32(stringToBytes32(\"56,48,246,176,33,246,144,9,159,117,75,255,39,35,254,64,9,232,114,144,136,141,159,209,172,63,158,44,93,141,246,11\")),bytes32(stringToBytes32(\"212,140,230,157,74,68,17,213,127,254,80,95,243,176,3,98,94,212,177,77,211,118,236,226,77,15,253,86,217,102,136,230\")),bytes32(stringToBytes32(\"203,232,204,182,5,1,89,84,127,23,109,227,234,61,203,8,100,230,85,114,251,110,226,236,237,84,13,166,199,54,86,28\")),bytes32(stringToBytes32(\"202,117,19,232,10,140,235,109,237,73,219,232,85,175,183,161,224,196,73,3,60,17,153,71,62,102,66,183,73,71,162,57\")),bytes32(stringToBytes32(\"5,206,253,216,168,155,95,66,67,128,185,172,32,117,106,40,126,85,146,242,100,50,56,4,31,15,155,22,97,73,11,134\")),bytes32(stringToBytes32(\"151,250,24,175,238,163,224,232,69,119,39,89,226,143,11,21,126,197,207,6,228,40,157,5,71,196,247,43,10,149,21,192\")),bytes32(stringToBytes32(\"255,211,207,105,229,178,112,86,27,2,252,32,108,158,152,213,61,144,80,161,78,197,167,63,219,169,247,139,181,106,15,41\")),bytes32(stringToBytes32(\"162,82,128,50,188,122,78,185,18,26,18,50,101,12,5,234,88,171,71,37,72,118,194,224,35,185,3,74,45,0,26,23\")),bytes32(stringToBytes32(\"16,10,182,125,123,107,13,222,232,215,43,59,201,30,254,149,128,208,112,42,144,214,142,5,111,191,232,172,222,207,73,101\")),bytes32(stringToBytes32(\"58,171,240,108,11,198,228,77,1,67,48,28,183,189,180,221,86,167,200,117,123,135,167,116,167,58,67,245,209,84,149,154\")),bytes32(stringToBytes32(\"44,35,116,192,21,190,240,184,71,32,108,188,7,202,11,39,30,246,87,87,229,155,167,122,26,68,73,201,230,210,102,133\")),bytes32(stringToBytes32(\"174,255,223,169,40,189,242,84,63,248,17,26,122,45,95,168,237,1,125,28,18,116,172,10,62,149,117,124,50,70,195,26\")),bytes32(stringToBytes32(\"186,141,155,8,32,237,21,95,26,200,72,109,21,1,144,148,99,34,28,108,34,146,117,167,241,158,184,74,103,78,125,221\")),bytes32(stringToBytes32(\"209,63,232,190,176,52,152,65,19,252,3,142,118,245,39,235,54,184,100,190,126,51,244,95,101,24,157,40,200,190,139,254\")),bytes32(stringToBytes32(\"89,179,54,55,126,228,152,168,153,8,205,34,232,107,108,202,91,39,247,27,83,13,92,79,142,247,135,229,66,127,83,9\")),bytes32(stringToBytes32(\"186,88,15,194,140,60,94,237,203,221,65,98,90,250,28,176,87,184,80,7,22,52,101,58,148,39,197,101,54,156,141,81\")),bytes32(stringToBytes32(\"21,243,103,139,179,224,26,23,99,211,124,122,129,10,127,166,233,135,62,187,0,124,194,19,126,203,225,168,153,127,34,41\")),bytes32(stringToBytes32(\"147,7,5,159,236,54,80,148,219,86,221,159,220,15,135,135,239,166,170,228,104,190,28,28,96,2,230,87,52,190,35,26\")),bytes32(stringToBytes32(\"9,220,28,1,18,27,91,79,254,60,242,15,67,109,90,171,33,205,52,40,166,121,174,28,227,55,217,65,7,81,212,102\")),bytes32(stringToBytes32(\"4,171,98,23,25,38,150,111,134,149,8,226,117,15,133,191,98,95,131,207,228,107,52,153,252,158,115,69,219,121,152,137\")),bytes32(stringToBytes32(\"80,98,109,207,240,199,132,231,191,39,150,199,197,129,34,56,132,91,185,165,20,153,2,217,144,46,234,50,35,47,128,213\"))]"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.401ZOffChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,bytes32) WHEN _securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[7]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "[176,15,105,177,106,103,185,193,160,72,172,217,222,233,255,72,79,54,209,23,57,164,140,237,205,157,96,119,193,150,20,158]",
              "sol": "stringToBytes32(\"176,15,105,177,106,103,185,193,160,72,172,217,222,233,255,72,79,54,209,23,57,164,140,237,205,157,96,119,193,150,20,158\")"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,bytes32) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "[176,15,105,177,106,103,185,193,160,72,172,217,222,233,255,72,79,54,209,23,57,164,140,237,205,157,96,119,193,150,20,158]",
                "sol": "stringToBytes32(\"176,15,105,177,106,103,185,193,160,72,172,217,222,233,255,72,79,54,209,23,57,164,140,237,205,157,96,119,193,150,20,158\")"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.402ZOffChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "96",
              "sol": "96"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.403ZOffChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "169-192",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[6]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "65",
              "sol": "65"
            },
            {
              "js": "[190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16]",
              "sol": "stringToBytes32(\"190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16\")"
            },
            {
              "js": "10001",
              "sol": "10001"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "65",
                "sol": "65"
              },
              {
                "js": "[190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16]",
                "sol": "stringToBytes32(\"190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[6]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16]",
                "sol": "stringToBytes32(\"190,212,70,17,192,62,112,53,37,66,74,33,78,190,241,169,9,143,249,233,117,149,8,53,71,163,187,255,178,253,79,16\")"
              },
              {
                "js": "10001",
                "sol": "10001"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "177-192",
          "restrictions": [
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,bytes32,uint256) WHEN currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[0]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "[193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203]",
              "sol": "stringToBytes32(\"193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203\")"
            },
            {
              "js": "6",
              "sol": "6"
            },
            {
              "js": "{from:accounts[3]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "[193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203]",
                "sol": "stringToBytes32(\"193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203\")"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,bytes32,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[0]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "[193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203]",
                "sol": "stringToBytes32(\"193,76,44,141,212,87,73,49,181,25,216,151,8,255,65,59,14,201,98,10,91,94,219,223,221,104,220,76,21,223,136,203\")"
              },
              {
                "js": "6",
                "sol": "6"
              },
              {
                "js": "{from:accounts[3]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.407ZOnChainVoting.placeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute placeVote(string) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<endTime",
          "parameters": [
            {
              "js": "\"IsLibrary\"",
              "sol": "\"IsLibrary\""
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.409ZOnChainVoting.submitUserVotes": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute submitUserVotes(bytes32[],bytes32[]) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,_usersSaltHash.length==_usersVote.length,_usersSaltHash.length!=0",
          "parameters": [
            {
              "js": "[[175,109,219,141,247,41,194,16,3,137,84,136,182,99,97,55,12,142,24,84,226,162,89,58,108,91,145,224,234,203,115,69],[100,70,80,107,71,65,149,180,118,189,58,202,122,118,183,109,242,111,83,9,1,151,59,47,17,43,213,84,157,24,185,111],[236,31,43,21,61,32,196,40,53,195,244,46,217,93,79,21,200,151,249,114,65,160,204,17,9,91,164,61,154,232,68,176],[221,142,57,203,198,8,69,25,34,19,76,114,0,141,191,57,244,203,72,80,103,220,42,183,46,222,62,210,217,130,135,125]]",
              "sol": "[bytes32(stringToBytes32(\"175,109,219,141,247,41,194,16,3,137,84,136,182,99,97,55,12,142,24,84,226,162,89,58,108,91,145,224,234,203,115,69\")),bytes32(stringToBytes32(\"100,70,80,107,71,65,149,180,118,189,58,202,122,118,183,109,242,111,83,9,1,151,59,47,17,43,213,84,157,24,185,111\")),bytes32(stringToBytes32(\"236,31,43,21,61,32,196,40,53,195,244,46,217,93,79,21,200,151,249,114,65,160,204,17,9,91,164,61,154,232,68,176\")),bytes32(stringToBytes32(\"221,142,57,203,198,8,69,25,34,19,76,114,0,141,191,57,244,203,72,80,103,220,42,183,46,222,62,210,217,130,135,125\"))]"
            },
            {
              "js": "[[58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51],[76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159],[163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233],[72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88]]",
              "sol": "[bytes32(stringToBytes32(\"58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51\")),bytes32(stringToBytes32(\"76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159\")),bytes32(stringToBytes32(\"163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233\")),bytes32(stringToBytes32(\"72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88\"))]"
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[[175,109,219,141,247,41,194,16,3,137,84,136,182,99,97,55,12,142,24,84,226,162,89,58,108,91,145,224,234,203,115,69],[100,70,80,107,71,65,149,180,118,189,58,202,122,118,183,109,242,111,83,9,1,151,59,47,17,43,213,84,157,24,185,111],[236,31,43,21,61,32,196,40,53,195,244,46,217,93,79,21,200,151,249,114,65,160,204,17,9,91,164,61,154,232,68,176],[221,142,57,203,198,8,69,25,34,19,76,114,0,141,191,57,244,203,72,80,103,220,42,183,46,222,62,210,217,130,135,125]]",
                "sol": "[bytes32(stringToBytes32(\"175,109,219,141,247,41,194,16,3,137,84,136,182,99,97,55,12,142,24,84,226,162,89,58,108,91,145,224,234,203,115,69\")),bytes32(stringToBytes32(\"100,70,80,107,71,65,149,180,118,189,58,202,122,118,183,109,242,111,83,9,1,151,59,47,17,43,213,84,157,24,185,111\")),bytes32(stringToBytes32(\"236,31,43,21,61,32,196,40,53,195,244,46,217,93,79,21,200,151,249,114,65,160,204,17,9,91,164,61,154,232,68,176\")),bytes32(stringToBytes32(\"221,142,57,203,198,8,69,25,34,19,76,114,0,141,191,57,244,203,72,80,103,220,42,183,46,222,62,210,217,130,135,125\"))]"
              },
              {
                "js": "[[58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51],[76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159],[163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233],[72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88]]",
                "sol": "[bytes32(stringToBytes32(\"58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51\")),bytes32(stringToBytes32(\"76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159\")),bytes32(stringToBytes32(\"163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233\")),bytes32(stringToBytes32(\"72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88\"))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length == _usersVote.length",
            "parameters": [
              {
                "js": "[[29,56,68,70,22,39,70,207,143,169,229,51,43,53,170,243,2,201,59,28,54,63,35,217,235,93,92,176,50,81,2,225],[248,63,78,162,236,129,119,52,173,143,244,178,235,58,104,47,82,24,224,199,106,172,65,132,214,249,207,8,102,244,46,49],[48,180,241,138,222,236,238,80,189,51,94,250,167,225,85,140,121,198,178,218,106,88,47,241,23,194,47,74,142,185,109,106],[242,245,218,219,216,12,178,230,46,190,211,70,223,83,224,103,110,27,93,70,19,45,254,182,80,14,131,252,47,148,56,49],[222,191,25,142,207,37,135,152,146,149,66,110,42,66,140,89,1,175,238,141,31,93,2,197,39,10,39,52,131,129,213,35]]",
                "sol": "[stringToBytes32(\"233,169,38,25,223,163,217,226,24,64,12,12,208,12,182,162,251,202,135,40,221,251,201,90,239,112,69,89,108,153,31,184\"),stringToBytes32(\"144,1,82,68,151,55,142,16,157,80,203,182,160,172,57,207,205,216,45,85,118,39,94,74,198,223,2,254,239,123,131,29\"),stringToBytes32(\"190,24,172,30,154,44,207,98,208,4,17,219,32,49,194,207,116,49,214,40,68,42,154,30,75,137,30,252,63,251,105,159\"),stringToBytes32(\"108,96,68,44,92,37,23,69,102,171,239,54,132,166,225,40,64,125,188,140,92,62,221,201,49,228,187,23,247,114,248,49\"),stringToBytes32(\"107,75,185,193,231,134,244,154,13,187,193,252,34,178,154,158,251,125,77,142,219,240,181,29,255,92,197,198,12,58,83,226\")]"
              },
              {
                "js": "[[58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51],[76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159],[163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233],[72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88]]",
                "sol": "[bytes32(stringToBytes32(\"58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51\")),bytes32(stringToBytes32(\"76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159\")),bytes32(stringToBytes32(\"163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233\")),bytes32(stringToBytes32(\"72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail submitUserVotes(bytes32[],bytes32[]) when NOT comply with: _usersSaltHash.length != 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[[58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51],[76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159],[163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233],[72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88]]",
                "sol": "[bytes32(stringToBytes32(\"58,85,87,162,189,170,211,139,139,248,203,237,200,185,185,137,224,48,94,126,219,207,131,236,88,217,233,102,64,157,10,51\")),bytes32(stringToBytes32(\"76,90,19,132,244,182,0,166,187,104,46,219,12,245,9,93,158,203,23,27,194,236,112,229,141,186,82,93,19,245,155,159\")),bytes32(stringToBytes32(\"163,87,131,139,76,137,130,128,11,211,233,193,123,249,147,90,52,60,232,132,156,99,88,59,25,149,91,4,48,4,176,233\")),bytes32(stringToBytes32(\"72,207,205,88,77,90,165,66,105,227,140,228,99,201,171,1,192,100,27,226,194,208,217,171,220,101,83,34,233,74,132,88\"))]"
              },
              {
                "js": "{from:accounts[5]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.414ZOnChainVoting.finalizeVote": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finalizeVote(string) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=endTime,submissionsCount==votesCount",
          "parameters": [
            {
              "js": "\"RevertWithReason\"",
              "sol": "\"RevertWithReason\""
            },
            {
              "js": "{from:accounts[5]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finalizeVote(string) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "\"RevertWithReason\"",
                "sol": "\"RevertWithReason\""
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.419ZPartialRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[],uint256[]) WHEN msg.sender==_owner,_holders.length==_numberOfTokens.length,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[8],accounts[6],accounts[8],accounts[0]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "[28,9999,95,1532892063]",
              "sol": "[uint256(28),uint256(9999),uint256(95),uint256(1532892063)]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[8],accounts[6],accounts[8],accounts[0]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "[28,9999,95,1532892063]",
                "sol": "[uint256(28),uint256(9999),uint256(95),uint256(1532892063)]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length == _numberOfTokens.length",
            "parameters": [
              {
                "js": "[accounts[6],accounts[3],accounts[1],accounts[3],accounts[8]]",
                "sol": "[address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))),address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))]"
              },
              {
                "js": "[28,9999,95,1532892063]",
                "sol": "[uint256(28),uint256(9999),uint256(95),uint256(1532892063)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[],uint256[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "[28,9999,95,1532892063]",
                "sol": "[uint256(28),uint256(9999),uint256(95),uint256(1532892063)]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.421ZFullRedemption.setup": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute setup() WHEN isSetUp!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.421ZFullRedemption.redeemTokens": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute redeemTokens(address[]) WHEN msg.sender==_owner,isSetUp==true,_holders.length>0",
          "parameters": [
            {
              "js": "[accounts[9],accounts[5],accounts[7],accounts[9],accounts[5],accounts[3]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[9],accounts[5],accounts[7],accounts[9],accounts[5],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: isSetUp == true",
            "parameters": [
              {
                "js": "[accounts[9],accounts[5],accounts[7],accounts[9],accounts[5],accounts[3]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail redeemTokens(address[]) when NOT comply with: _holders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.424ZFixedPriceTender.paymentTokensReady": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute paymentTokensReady() WHEN paymentReady!=true",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.425ZFixedPriceTender.updateOfferEndTime": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateOfferEndTime(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newOfferEnd>=block.timestamp",
          "parameters": [
            {
              "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+163",
              "sol": "block.timestamp+163"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp+163",
                "sol": "block.timestamp+163"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateOfferEndTime(uint256) when NOT comply with: _newOfferEnd >= (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp",
            "parameters": [
              {
                "js": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1",
                "sol": "(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp-1"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.429ZFixedPriceTender.updatePaymentPerSecurity": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updatePaymentPerSecurity(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newPaymentPerSecurity>0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "26",
                "sol": "26"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updatePaymentPerSecurity(uint256) when NOT comply with: _newPaymentPerSecurity > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.434ZFixedPriceTender.updateTotalToRepurchase": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute updateTotalToRepurchase(uint256) WHEN msg.sender==_owner,(await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_newTotalToRepurchase>=0",
          "parameters": [
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[8]}",
                "sol": "{\"from\":\"accounts[8]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail updateTotalToRepurchase(uint256) when NOT comply with: _newTotalToRepurchase >= 0",
            "parameters": [
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.439ZFixedPriceTender.optInToTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optInToTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,paymentReady==true,_numberToTender>0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: paymentReady == true",
            "parameters": [
              {
                "js": "254",
                "sol": "254"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail optInToTender(uint256) when NOT comply with: _numberToTender > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.445ZFixedPriceTender.optOutOfTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute optOutOfTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp<offerEndTime,_numberToRemove>0",
          "parameters": [
            {
              "js": "254",
              "sol": "254"
            },
            {
              "js": "{from:accounts[9]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail optOutOfTender(uint256) when NOT comply with: _numberToRemove > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.449ZFixedPriceTender.finaliseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute finaliseTender(uint256) WHEN (await web3.eth.getBlock(await web3.eth.getBlockNumber())).timestamp>=offerEndTime,nextTenderToAssess<orderedHolders.length,_batchSize>0",
          "parameters": [
            {
              "js": "26",
              "sol": "26"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail finaliseTender(uint256) when NOT comply with: _batchSize > 0",
            "parameters": [
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.451ZProxyFixedPriceTender.testrepurchaseTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testrepurchaseTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.452ZProxyFixedPriceTender.testreturnTender": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute testreturnTender()",
          "parameters": [
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.452ZOnChainPayments.makePayments": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute makePayments(address[],uint256) WHEN msg.sender==_owner,_securityHolders.length>0,_paymentPerSecurity>0",
          "parameters": [
            {
              "js": "[accounts[7],accounts[5],accounts[5],accounts[7],accounts[0],accounts[7],accounts[1],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[4],accounts[9],accounts[5],accounts[3],accounts[9],accounts[8],accounts[5],accounts[1],accounts[0],accounts[1],accounts[7],accounts[0],accounts[2],accounts[1],accounts[1],accounts[4],accounts[2],accounts[1],accounts[1],accounts[8],accounts[3],accounts[8],accounts[9],accounts[4],accounts[9],accounts[7],accounts[0],accounts[3],accounts[0],accounts[7],accounts[4],accounts[3],accounts[6],accounts[7],accounts[7],accounts[0],accounts[9],accounts[5],accounts[8],accounts[1],accounts[7],accounts[3],accounts[6],accounts[0],accounts[9],accounts[7],accounts[0],accounts[6],accounts[0],accounts[4],accounts[5],accounts[7],accounts[3],accounts[1],accounts[5],accounts[9],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[3],accounts[0],accounts[0],accounts[4],accounts[7],accounts[5],accounts[2],accounts[7],accounts[5],accounts[9],accounts[6],accounts[6],accounts[8],accounts[6],accounts[0],accounts[5],accounts[4],accounts[6],accounts[4],accounts[9],accounts[9],accounts[8],accounts[6],accounts[6]]",
              "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
            },
            {
              "js": "2014223714",
              "sol": "2014223714"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[5],accounts[7],accounts[0],accounts[7],accounts[1],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[4],accounts[9],accounts[5],accounts[3],accounts[9],accounts[8],accounts[5],accounts[1],accounts[0],accounts[1],accounts[7],accounts[0],accounts[2],accounts[1],accounts[1],accounts[4],accounts[2],accounts[1],accounts[1],accounts[8],accounts[3],accounts[8],accounts[9],accounts[4],accounts[9],accounts[7],accounts[0],accounts[3],accounts[0],accounts[7],accounts[4],accounts[3],accounts[6],accounts[7],accounts[7],accounts[0],accounts[9],accounts[5],accounts[8],accounts[1],accounts[7],accounts[3],accounts[6],accounts[0],accounts[9],accounts[7],accounts[0],accounts[6],accounts[0],accounts[4],accounts[5],accounts[7],accounts[3],accounts[1],accounts[5],accounts[9],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[3],accounts[0],accounts[0],accounts[4],accounts[7],accounts[5],accounts[2],accounts[7],accounts[5],accounts[9],accounts[6],accounts[6],accounts[8],accounts[6],accounts[0],accounts[5],accounts[4],accounts[6],accounts[4],accounts[9],accounts[9],accounts[8],accounts[6],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _securityHolders.length > 0",
            "parameters": [
              {
                "js": "[]",
                "sol": "[]"
              },
              {
                "js": "2014223714",
                "sol": "2014223714"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail makePayments(address[],uint256) when NOT comply with: _paymentPerSecurity > 0",
            "parameters": [
              {
                "js": "[accounts[7],accounts[5],accounts[5],accounts[7],accounts[0],accounts[7],accounts[1],accounts[3],accounts[4],accounts[3],accounts[9],accounts[2],accounts[4],accounts[9],accounts[5],accounts[3],accounts[9],accounts[8],accounts[5],accounts[1],accounts[0],accounts[1],accounts[7],accounts[0],accounts[2],accounts[1],accounts[1],accounts[4],accounts[2],accounts[1],accounts[1],accounts[8],accounts[3],accounts[8],accounts[9],accounts[4],accounts[9],accounts[7],accounts[0],accounts[3],accounts[0],accounts[7],accounts[4],accounts[3],accounts[6],accounts[7],accounts[7],accounts[0],accounts[9],accounts[5],accounts[8],accounts[1],accounts[7],accounts[3],accounts[6],accounts[0],accounts[9],accounts[7],accounts[0],accounts[6],accounts[0],accounts[4],accounts[5],accounts[7],accounts[3],accounts[1],accounts[5],accounts[9],accounts[3],accounts[8],accounts[3],accounts[9],accounts[9],accounts[3],accounts[0],accounts[0],accounts[4],accounts[7],accounts[5],accounts[2],accounts[7],accounts[5],accounts[9],accounts[6],accounts[6],accounts[8],accounts[6],accounts[0],accounts[5],accounts[4],accounts[6],accounts[4],accounts[9],accounts[9],accounts[8],accounts[6],accounts[6]]",
                "sol": "[address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))),address(address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number)))))))]"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.454ZOnChainPayments.lookUpPaymentIndex": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute lookUpPaymentIndex(address,uint256,uint256) WHEN _timestamp!=0,_securityHolder!=0x0000000000000000000000000000000000000000",
          "parameters": [
            {
              "js": "accounts[8]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "255",
              "sol": "255"
            },
            {
              "js": "97",
              "sol": "97"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _timestamp != 0",
            "parameters": [
              {
                "js": "accounts[8]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": 0,
                "sol": 0
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail lookUpPaymentIndex(address,uint256,uint256) when NOT comply with: _securityHolder != 0x0000000000000000000000000000000000000000",
            "parameters": [
              {
                "js": "\"0x0000000000000000000000000000000000000000\"",
                "sol": "0x0000000000000000000000000000000000000000"
              },
              {
                "js": "255",
                "sol": "255"
              },
              {
                "js": "97",
                "sol": "97"
              },
              {
                "js": "{from:accounts[0]}",
                "sol": "{\"from\":\"0x0\"}"
              }
            ]
          }
        ]
      }
    }
  }
},{
  "2020-11-11T02:10:42.455ZOnChainPayments.challengePayment": {
    "branches": {
      "0": {
        "branch": {
          "loc": "-",
          "restrictions": []
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute challengePayment(uint256,uint256)",
          "parameters": [
            {
              "js": "257",
              "sol": "257"
            },
            {
              "js": "66",
              "sol": "66"
            },
            {
              "js": "{from:accounts[0]}",
              "sol": "{\"from\":\"0x0\"}"
            }
          ]
        },
        "scenarioFail": []
      }
    }
  }
},{
  "2020-11-11T02:10:42.456ZOnChainPayments.resolveChallenge": {
    "branches": {
      "0": {
        "branch": {
          "loc": "171-187",
          "restrictions": [
            "currentValue == _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN currentValue==_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223715",
              "sol": "2014223715"
            },
            {
              "js": "27",
              "sol": "27"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223715",
                "sol": "2014223715"
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "27",
                "sol": "27"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "1": {
        "branch": {
          "loc": "174-187",
          "restrictions": [
            "_newValue > currentValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue>currentValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[3]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "2014223716",
              "sol": "2014223716"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[3]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "2014223716",
                "sol": "2014223716"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      },
      "2": {
        "branch": {
          "loc": "182-187",
          "restrictions": [
            "_newValue <= currentValue",
            "currentValue != _newValue"
          ]
        },
        "scenarioSuccess": {
          "success": true,
          "description": "Should execute resolveChallenge(address,uint256,uint256) WHEN _newValue<=currentValue,currentValue!=_newValue,msg.sender==_owner,_index>=0",
          "parameters": [
            {
              "js": "accounts[4]",
              "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
            },
            {
              "js": "1337",
              "sol": "1337"
            },
            {
              "js": "3",
              "sol": "3"
            },
            {
              "js": "{from:accounts[1]}",
              "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
            }
          ]
        },
        "scenarioFail": [
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: msg.sender == _owner",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": "1337",
                "sol": "1337"
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[9]}",
                "sol": "{\"from\":\"accounts[9]\"}"
              }
            ]
          },
          {
            "success": false,
            "description": "Should fail resolveChallenge(address,uint256,uint256) when NOT comply with: _index >= 0",
            "parameters": [
              {
                "js": "accounts[4]",
                "sol": "address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))"
              },
              {
                "js": -1,
                "sol": -1
              },
              {
                "js": "3",
                "sol": "3"
              },
              {
                "js": "{from:accounts[1]}",
                "sol": "{\"from\":\"address(uint160(uint(keccak256(abi.encodePacked(nonce, blockhash(block.number))))))\"}"
              }
            ]
          }
        ]
      }
    }
  }
}